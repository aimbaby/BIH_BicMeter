

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 09 18:55:52 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.41
    52                           ; Generated 25/01/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4520 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  000E3A                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _CircumFactor
    91  000E3A  00C8               	dw	200
    92                           
    93                           	psect	smallconst
    94  000600                     __psmallconst:
    95                           	opt stack 0
    96  000600  00                 	db	0
    97  000601                     _SevenSegmentMAP:
    98                           	opt stack 0
    99  000601  FC                 	db	252
   100  000602  60                 	db	96
   101  000603  DA                 	db	218
   102  000604  F2                 	db	242
   103  000605  66                 	db	102
   104  000606  B6                 	db	182
   105  000607  BE                 	db	190
   106  000608  E0                 	db	224
   107  000609  FE                 	db	254
   108  00060A  F6                 	db	246
   109  00060B  01                 	db	1
   110  00060C                     __end_of_SevenSegmentMAP:
   111                           	opt stack 0
   112  0000                     _TMR1	set	4046
   113  0000                     _TMR3H	set	4019
   114  0000                     _TMR3L	set	4018
   115  0000                     _TMR0L	set	4054
   116  0000                     _INTCON2bits	set	4081
   117  0000                     _T3CON	set	4017
   118  0000                     _T1CON	set	4045
   119  0000                     _T0CON	set	4053
   120  0000                     _INTCON3	set	4080
   121  0000                     _INTCON	set	4082
   122  0000                     _TRISBbits	set	3987
   123  0000                     _TRISC	set	3988
   124  0000                     _TRISD	set	3989
   125  0000                     _LATD	set	3980
   126  0000                     _PORTD	set	3971
   127  0000                     _LATC	set	3979
   128  0000                     _PORTC	set	3970
   129  0000                     _INT1IF	set	32640
   130  0000                     _INT0IF	set	32657
   131  0000                     _TMR2IF	set	31985
   132  0000                     _TMR3IE	set	32001
   133  0000                     _TMR3IF	set	32009
   134  0000                     _TMR1IE	set	31976
   135  0000                     _TMR1IF	set	31984
   136  0000                     _TMR0IE	set	32661
   137  0000                     _TMR0IF	set	32658
   138                           
   139                           ; #config settings
   140  00060C  00                 	db	0	; dummy byte at the end
   141  0000                     
   142                           	psect	cinit
   143  000CCC                     __pcinit:
   144                           	opt stack 0
   145  000CCC                     start_initialization:
   146                           	opt stack 0
   147  000CCC                     __initialization:
   148                           	opt stack 0
   149                           
   150                           ; Initialize objects allocated to COMRAM (2 bytes)
   151                           ; load TBLPTR registers with __pidataCOMRAM
   152  000CCC  0E3A               	movlw	low __pidataCOMRAM
   153  000CCE  6EF6               	movwf	tblptrl,c
   154  000CD0  0E0E               	movlw	high __pidataCOMRAM
   155  000CD2  6EF7               	movwf	tblptrh,c
   156  000CD4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   157  000CD6  6EF8               	movwf	tblptru,c
   158  000CD8  0009               	tblrd		*+	;fetch initializer
   159  000CDA  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   160  000CDE  0009               	tblrd		*+	;fetch initializer
   161  000CE0  CFF5 F060          	movff	tablat,__pdataCOMRAM+1
   162                           
   163                           ; Clear objects allocated to COMRAM (33 bytes)
   164  000CE4  EE00  F03E         	lfsr	0,__pbssCOMRAM
   165  000CE8  0E21               	movlw	33
   166  000CEA                     clear_0:
   167  000CEA  6AEE               	clrf	postinc0,c
   168  000CEC  06E8               	decf	wreg,f,c
   169  000CEE  E1FD               	bnz	clear_0
   170  000CF0                     end_of_initialization:
   171                           	opt stack 0
   172  000CF0                     __end_of__initialization:
   173                           	opt stack 0
   174  000CF0  9061               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  000CF2  9261               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  000CF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  000CF6  6EF8               	movwf	tblptru,c
   178  000CF8  0100               	movlb	0
   179  000CFA  EF85  F005         	goto	_main	;jump to C main() function
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	bssCOMRAM
   188  00003E                     __pbssCOMRAM:
   189                           	opt stack 0
   190  00003E                     _ArrayTask:
   191                           	opt stack 0
   192  00003E                     	ds	12
   193  00004A                     _BCDNumber:
   194                           	opt stack 0
   195  00004A                     	ds	8
   196  000052                     _DistTravelCntr:
   197                           	opt stack 0
   198  000052                     	ds	4
   199  000056                     _LapTimeTenthMilli:
   200                           	opt stack 0
   201  000056                     	ds	2
   202  000058                     _LapDistanceCounter:
   203                           	opt stack 0
   204  000058                     	ds	2
   205  00005A                     RunScheduler@TaskIndex:
   206                           	opt stack 0
   207  00005A                     	ds	1
   208  00005B                     _TimerOVFLcount:
   209                           	opt stack 0
   210  00005B                     	ds	1
   211  00005C                     _LapCounter:
   212                           	opt stack 0
   213  00005C                     	ds	1
   214  00005D                     _NotifyFlag:
   215                           	opt stack 0
   216  00005D                     	ds	1
   217  00005E                     BCDManage7segment@DigitIndex:
   218                           	opt stack 0
   219  00005E                     	ds	1
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	dataCOMRAM
   228  00005F                     __pdataCOMRAM:
   229                           	opt stack 0
   230  00005F                     _CircumFactor:
   231                           	opt stack 0
   232  00005F                     	ds	2
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           
   240                           	psect	cstackCOMRAM
   241  000001                     __pcstackCOMRAM:
   242                           	opt stack 0
   243  000001                     ?_ReloadHWtimer:
   244                           	opt stack 0
   245  000001                     ?i2___wmul:
   246                           	opt stack 0
   247  000001                     ?i2___lwdiv:
   248                           	opt stack 0
   249  000001                     SchedulerTick@TaskIndex:
   250                           	opt stack 0
   251  000001                     i2___wmul@multiplier:
   252                           	opt stack 0
   253  000001                     i2___lwdiv@dividend:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x0
   257  000001                     	ds	2
   258  000003                     ReloadHWtimer@TimerId:
   259                           	opt stack 0
   260  000003                     i2___wmul@multiplicand:
   261                           	opt stack 0
   262  000003                     i2___lwdiv@divisor:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x2
   266  000003                     	ds	1
   267  000004                     ReloadHWtimer@ElapsedTime:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x3
   271  000004                     	ds	1
   272  000005                     i2___wmul@product:
   273                           	opt stack 0
   274  000005                     i2___lwdiv@quotient:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x4
   278  000005                     	ds	2
   279  000007                     i2___lwdiv@counter:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x6
   283  000007                     	ds	1
   284  000008                     ??_ISR:
   285                           
   286                           ; 1 bytes @ 0x7
   287  000008                     	ds	14
   288  000016                     ?___wmul:
   289                           	opt stack 0
   290  000016                     ?___lwdiv:
   291                           	opt stack 0
   292  000016                     ?_GetDistance:
   293                           	opt stack 0
   294  000016                     ?___lmul:
   295                           	opt stack 0
   296  000016                     HWI_4Digit_WRITE@value:
   297                           	opt stack 0
   298  000016                     HWI_8Digit_WRITE@value:
   299                           	opt stack 0
   300  000016                     SetCircumfirunce@Circum:
   301                           	opt stack 0
   302  000016                     CreateTask@MangeFunction:
   303                           	opt stack 0
   304  000016                     ___wmul@multiplier:
   305                           	opt stack 0
   306  000016                     ___lwdiv@dividend:
   307                           	opt stack 0
   308  000016                     ___lmul@multiplier:
   309                           	opt stack 0
   310                           
   311                           ; 4 bytes @ 0x15
   312  000016                     	ds	1
   313  000017                     HWI_4Digit_WRITE@port:
   314                           	opt stack 0
   315  000017                     HWI_8Digit_WRITE@port:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x16
   319  000017                     	ds	1
   320  000018                     ??_BCDManage7segment:
   321  000018                     CreateTask@TaskId:
   322                           	opt stack 0
   323  000018                     ___wmul@multiplicand:
   324                           	opt stack 0
   325  000018                     ___lwdiv@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x17
   329  000018                     	ds	1
   330  000019                     CreateTask@Period:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x18
   334  000019                     	ds	1
   335  00001A                     ___wmul@product:
   336                           	opt stack 0
   337  00001A                     ___lwdiv@quotient:
   338                           	opt stack 0
   339  00001A                     ___lmul@multiplicand:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x19
   343  00001A                     	ds	1
   344  00001B                     
   345                           ; 1 bytes @ 0x1A
   346  00001B                     	ds	1
   347  00001C                     ___lwdiv@counter:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x1B
   351  00001C                     	ds	1
   352  00001D                     BCDsendNumber@Number:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x1C
   356  00001D                     	ds	1
   357  00001E                     ___lmul@product:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x1D
   361  00001E                     	ds	1
   362  00001F                     BCDsendNumber@DecimalPlace:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x1E
   366  00001F                     	ds	1
   367  000020                     ??_BCDsendNumber:
   368                           
   369                           ; 1 bytes @ 0x1F
   370  000020                     	ds	2
   371  000022                     ?___lldiv:
   372                           	opt stack 0
   373  000022                     BCDsendNumber@Link:
   374                           	opt stack 0
   375  000022                     ___lldiv@dividend:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x21
   379  000022                     	ds	2
   380  000024                     BCDsendNumber@Output:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x23
   384  000024                     	ds	2
   385  000026                     BCDsendNumber@Buffer:
   386                           	opt stack 0
   387  000026                     ___lldiv@divisor:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x25
   391  000026                     	ds	2
   392  000028                     BCDsendNumber@LoopIndex:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x27
   396  000028                     	ds	2
   397  00002A                     ___lldiv@quotient:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0x29
   401  00002A                     	ds	4
   402  00002E                     ___lldiv@counter:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x2D
   406  00002E                     	ds	1
   407  00002F                     ?_GetAvgSpeed:
   408                           	opt stack 0
   409  00002F                     SpeedCalcManage@HundredMeterReference:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x2E
   413  00002F                     	ds	2
   414  000031                     GetAvgSpeed@AvgSpeedKphMph:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x30
   418  000031                     	ds	2
   419  000033                     GetAvgSpeed@bIsKph:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x32
   423  000033                     	ds	1
   424  000034                     GetAvgSpeed@KphMphFactor:
   425                           	opt stack 0
   426                           
   427                           ; 4 bytes @ 0x33
   428  000034                     	ds	4
   429  000038                     APP_MANAGE@AvgSpeedKph:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x37
   433  000038                     	ds	2
   434  00003A                     APP_MANAGE@TravelledDistance:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x39
   438  00003A                     	ds	2
   439  00003C                     
   440                           ; 1 bytes @ 0x3B
   441  00003C                     	ds	2
   442  00003E                     tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           
   449                           ; 1 bytes @ 0x3D
   450 ;;
   451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   452 ;;
   453 ;; *************** function _main *****************
   454 ;; Defined at:
   455 ;;		line 86 in file "main.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   469 ;;      Params:         0       0       0       0       0       0       0
   470 ;;      Locals:         0       0       0       0       0       0       0
   471 ;;      Temps:          0       0       0       0       0       0       0
   472 ;;      Totals:         0       0       0       0       0       0       0
   473 ;;Total ram usage:        0 bytes
   474 ;; Hardware stack levels required when called:    9
   475 ;; This function calls:
   476 ;;		_APP_INITIALIZE
   477 ;;		_CreateTask
   478 ;;		_HWI_DIGITAL_INITIALIZE
   479 ;;		_HWI_INTERRUPTS_INTITALIZE
   480 ;;		_RunScheduler
   481 ;;		_SpeedCalcNotifyInitialize
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text0
   488  000B0A                     __ptext0:
   489                           	opt stack 0
   490  000B0A                     _main:
   491                           	opt stack 22
   492                           
   493                           ;main.c: 87: HWI_INTERRUPTS_INTITALIZE();
   494                           
   495                           ;incstack = 0
   496  000B0A  EC29  F006         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   497                           
   498                           ;main.c: 88: HWI_DIGITAL_INITIALIZE();
   499  000B0E  ECFA  F006         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   500                           
   501                           ;main.c: 89: SpeedCalcNotifyInitialize();
   502  000B12  EC1E  F007         	call	_SpeedCalcNotifyInitialize	;wreg free
   503                           
   504                           ;main.c: 90: APP_INITIALIZE();
   505  000B16  EC1F  F007         	call	_APP_INITIALIZE	;wreg free
   506                           
   507                           ;main.c: 92: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   508  000B1A  0E22               	movlw	low _ManageSpeedCalc
   509  000B1C  6E16               	movwf	CreateTask@MangeFunction,c
   510  000B1E  0E0E               	movlw	high _ManageSpeedCalc
   511  000B20  6E17               	movwf	CreateTask@MangeFunction+1,c
   512  000B22  0E00               	movlw	0
   513  000B24  6E18               	movwf	CreateTask@TaskId,c
   514  000B26  0E14               	movlw	20
   515  000B28  6E19               	movwf	CreateTask@Period,c
   516  000B2A  EC03  F005         	call	_CreateTask	;wreg free
   517                           
   518                           ;main.c: 94: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100);
   519  000B2E  0E1C               	movlw	low _ManageApplication
   520  000B30  6E16               	movwf	CreateTask@MangeFunction,c
   521  000B32  0E0E               	movlw	high _ManageApplication
   522  000B34  6E17               	movwf	CreateTask@MangeFunction+1,c
   523  000B36  0E02               	movlw	2
   524  000B38  6E18               	movwf	CreateTask@TaskId,c
   525  000B3A  0E64               	movlw	100
   526  000B3C  6E19               	movwf	CreateTask@Period,c
   527  000B3E  EC03  F005         	call	_CreateTask	;wreg free
   528                           
   529                           ;main.c: 96: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 50);
   530  000B42  0E16               	movlw	low _DisplayAlphaNumeric
   531  000B44  6E16               	movwf	CreateTask@MangeFunction,c
   532  000B46  0E0E               	movlw	high _DisplayAlphaNumeric
   533  000B48  6E17               	movwf	CreateTask@MangeFunction+1,c
   534  000B4A  0E01               	movlw	1
   535  000B4C  6E18               	movwf	CreateTask@TaskId,c
   536  000B4E  0E32               	movlw	50
   537  000B50  6E19               	movwf	CreateTask@Period,c
   538  000B52  EC03  F005         	call	_CreateTask	;wreg free
   539                           
   540                           ;main.c: 99: RunScheduler();
   541  000B56  ECE0  F003         	call	_RunScheduler	;wreg free
   542                           
   543                           ;main.c: 101: return;
   544  000B5A  EF07  F000         	goto	start
   545  000B5E                     __end_of_main:
   546                           	opt stack 0
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           
   554 ;; *************** function _SpeedCalcNotifyInitialize *****************
   555 ;; Defined at:
   556 ;;		line 22 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;		None
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		None
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   570 ;;      Params:         0       0       0       0       0       0       0
   571 ;;      Locals:         0       0       0       0       0       0       0
   572 ;;      Temps:          0       0       0       0       0       0       0
   573 ;;      Totals:         0       0       0       0       0       0       0
   574 ;;Total ram usage:        0 bytes
   575 ;; Hardware stack levels used:    1
   576 ;; Hardware stack levels required when called:    4
   577 ;; This function calls:
   578 ;;		Nothing
   579 ;; This function is called by:
   580 ;;		_main
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text1
   585  000E3C                     __ptext1:
   586                           	opt stack 0
   587  000E3C                     _SpeedCalcNotifyInitialize:
   588                           	opt stack 26
   589                           
   590                           ;incstack = 0
   591  000E3C  0012               	return		;funcret
   592  000E3E                     __end_of_SpeedCalcNotifyInitialize:
   593                           	opt stack 0
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           
   601 ;; *************** function _RunScheduler *****************
   602 ;; Defined at:
   603 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;		None
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   617 ;;      Params:         0       0       0       0       0       0       0
   618 ;;      Locals:         0       0       0       0       0       0       0
   619 ;;      Temps:          2       0       0       0       0       0       0
   620 ;;      Totals:         2       0       0       0       0       0       0
   621 ;;Total ram usage:        2 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; Hardware stack levels required when called:    8
   624 ;; This function calls:
   625 ;;		_DisplayAlphaNumeric
   626 ;;		_ManageApplication
   627 ;;		_ManageSpeedCalc
   628 ;; This function is called by:
   629 ;;		_main
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text2
   634  0007C0                     __ptext2:
   635                           	opt stack 0
   636  0007C0                     _RunScheduler:
   637                           	opt stack 22
   638  0007C0                     
   639                           ;Scheduler.c: 29: {
   640                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 3 ; TaskIndex++)
   641  0007C0  0E00               	movlw	0
   642  0007C2  6E5A               	movwf	RunScheduler@TaskIndex,c
   643  0007C4                     l1484:
   644  0007C4  0E02               	movlw	2
   645  0007C6  645A               	cpfsgt	RunScheduler@TaskIndex,c
   646  0007C8  D001               	goto	l1488
   647  0007CA  D7FA               	goto	l1482
   648  0007CC                     l1488:
   649                           
   650                           ;Scheduler.c: 31: {
   651                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   652  0007CC  505A               	movf	RunScheduler@TaskIndex,w,c
   653  0007CE  0D04               	mullw	4
   654  0007D0  0E02               	movlw	2
   655  0007D2  26F3               	addwf	prodl,f,c
   656  0007D4  0E00               	movlw	0
   657  0007D6  22F4               	addwfc	prodh,f,c
   658  0007D8  0E3E               	movlw	low _ArrayTask
   659  0007DA  24F3               	addwf	prodl,w,c
   660  0007DC  6ED9               	movwf	fsr2l,c
   661  0007DE  0E00               	movlw	high _ArrayTask
   662  0007E0  20F4               	addwfc	prodh,w,c
   663  0007E2  6EDA               	movwf	fsr2h,c
   664  0007E4  505A               	movf	RunScheduler@TaskIndex,w,c
   665  0007E6  0D04               	mullw	4
   666  0007E8  0E03               	movlw	3
   667  0007EA  26F3               	addwf	prodl,f,c
   668  0007EC  0E00               	movlw	0
   669  0007EE  22F4               	addwfc	prodh,f,c
   670  0007F0  0E3E               	movlw	low _ArrayTask
   671  0007F2  24F3               	addwf	prodl,w,c
   672  0007F4  6EE1               	movwf	fsr1l,c
   673  0007F6  0E00               	movlw	high _ArrayTask
   674  0007F8  20F4               	addwfc	prodh,w,c
   675  0007FA  6EE2               	movwf	fsr1h,c
   676  0007FC  50DE               	movf	postinc2,w,c
   677  0007FE  5CE6               	subwf	postinc1,w,c
   678  000800  A0D8               	btfss	status,0,c
   679  000802  D022               	goto	l1494
   680                           
   681                           ;Scheduler.c: 33: {
   682                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   683  000804  505A               	movf	RunScheduler@TaskIndex,w,c
   684  000806  0D04               	mullw	4
   685  000808  0E3E               	movlw	low _ArrayTask
   686  00080A  24F3               	addwf	prodl,w,c
   687  00080C  6ED9               	movwf	fsr2l,c
   688  00080E  0E00               	movlw	high _ArrayTask
   689  000810  20F4               	addwfc	prodh,w,c
   690  000812  6EDA               	movwf	fsr2h,c
   691  000814  D801               	call	u668
   692  000816  D00A               	goto	l1492
   693  000818                     u668:
   694  000818  0005               	push	
   695  00081A  6EFA               	movwf	pclath,c
   696  00081C  50DE               	movf	postinc2,w,c
   697  00081E  6EFD               	movwf	tosl,c
   698  000820  50DE               	movf	postinc2,w,c
   699  000822  6EFE               	movwf	tosh,c
   700  000824  50F8               	movf	tblptru,w,c
   701  000826  6EFF               	movwf	tosu,c
   702  000828  50FA               	movf	pclath,w,c
   703  00082A  0012               	return		;indir
   704  00082C                     l1492:
   705                           
   706                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   707  00082C  505A               	movf	RunScheduler@TaskIndex,w,c
   708  00082E  0D04               	mullw	4
   709  000830  0E03               	movlw	3
   710  000832  26F3               	addwf	prodl,f,c
   711  000834  0E00               	movlw	0
   712  000836  22F4               	addwfc	prodh,f,c
   713  000838  0E3E               	movlw	low _ArrayTask
   714  00083A  24F3               	addwf	prodl,w,c
   715  00083C  6ED9               	movwf	fsr2l,c
   716  00083E  0E00               	movlw	high _ArrayTask
   717  000840  20F4               	addwfc	prodh,w,c
   718  000842  6EDA               	movwf	fsr2h,c
   719  000844  0E00               	movlw	0
   720  000846  6EDF               	movwf	indf2,c
   721  000848                     l1494:
   722  000848  2A5A               	incf	RunScheduler@TaskIndex,f,c
   723  00084A  D7BC               	goto	l1484
   724  00084C                     __end_of_RunScheduler:
   725                           	opt stack 0
   726                           tosu	equ	0xFFF
   727                           tosh	equ	0xFFE
   728                           tosl	equ	0xFFD
   729                           pclath	equ	0xFFA
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           prodh	equ	0xFF4
   735                           prodl	equ	0xFF3
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postinc1	equ	0xFE6
   739                           fsr1h	equ	0xFE2
   740                           fsr1l	equ	0xFE1
   741                           indf2	equ	0xFDF
   742                           postinc2	equ	0xFDE
   743                           fsr2h	equ	0xFDA
   744                           fsr2l	equ	0xFD9
   745                           status	equ	0xFD8
   746                           
   747 ;; *************** function _DisplayAlphaNumeric *****************
   748 ;; Defined at:
   749 ;;		line 104 in file "main.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   763 ;;      Params:         0       0       0       0       0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0
   766 ;;      Totals:         0       0       0       0       0       0       0
   767 ;;Total ram usage:        0 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    6
   770 ;; This function calls:
   771 ;;		_BCDManage7segment
   772 ;; This function is called by:
   773 ;;		_main
   774 ;;		_RunScheduler
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text3
   779  000E16                     __ptext3:
   780                           	opt stack 0
   781  000E16                     _DisplayAlphaNumeric:
   782                           	opt stack 23
   783                           
   784                           ;main.c: 106: BCDManage7segment();
   785                           
   786                           ;incstack = 0
   787  000E16  EC01  F006         	call	_BCDManage7segment	;wreg free
   788  000E1A  0012               	return		;funcret
   789  000E1C                     __end_of_DisplayAlphaNumeric:
   790                           	opt stack 0
   791                           tosu	equ	0xFFF
   792                           tosh	equ	0xFFE
   793                           tosl	equ	0xFFD
   794                           pclath	equ	0xFFA
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           prodh	equ	0xFF4
   800                           prodl	equ	0xFF3
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postinc1	equ	0xFE6
   804                           fsr1h	equ	0xFE2
   805                           fsr1l	equ	0xFE1
   806                           indf2	equ	0xFDF
   807                           postinc2	equ	0xFDE
   808                           fsr2h	equ	0xFDA
   809                           fsr2l	equ	0xFD9
   810                           status	equ	0xFD8
   811                           
   812 ;; *************** function _ManageApplication *****************
   813 ;; Defined at:
   814 ;;		line 108 in file "main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   828 ;;      Params:         0       0       0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    7
   835 ;; This function calls:
   836 ;;		_APP_MANAGE
   837 ;; This function is called by:
   838 ;;		_main
   839 ;;		_RunScheduler
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text4
   844  000E1C                     __ptext4:
   845                           	opt stack 0
   846  000E1C                     _ManageApplication:
   847                           	opt stack 22
   848                           
   849                           ;main.c: 110: APP_MANAGE();
   850                           
   851                           ;incstack = 0
   852  000E1C  ECA0  F004         	call	_APP_MANAGE	;wreg free
   853  000E20  0012               	return		;funcret
   854  000E22                     __end_of_ManageApplication:
   855                           	opt stack 0
   856                           tosu	equ	0xFFF
   857                           tosh	equ	0xFFE
   858                           tosl	equ	0xFFD
   859                           pclath	equ	0xFFA
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           postinc1	equ	0xFE6
   869                           fsr1h	equ	0xFE2
   870                           fsr1l	equ	0xFE1
   871                           indf2	equ	0xFDF
   872                           postinc2	equ	0xFDE
   873                           fsr2h	equ	0xFDA
   874                           fsr2l	equ	0xFD9
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _ManageSpeedCalc *****************
   878 ;; Defined at:
   879 ;;		line 112 in file "main.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   893 ;;      Params:         0       0       0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0
   896 ;;      Totals:         0       0       0       0       0       0       0
   897 ;;Total ram usage:        0 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    6
   900 ;; This function calls:
   901 ;;		_SpeedCalcManage
   902 ;; This function is called by:
   903 ;;		_main
   904 ;;		_RunScheduler
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text5
   909  000E22                     __ptext5:
   910                           	opt stack 0
   911  000E22                     _ManageSpeedCalc:
   912                           	opt stack 23
   913                           
   914                           ;main.c: 114: SpeedCalcManage();
   915                           
   916                           ;incstack = 0
   917  000E22  EC2F  F005         	call	_SpeedCalcManage	;wreg free
   918  000E26  0012               	return		;funcret
   919  000E28                     __end_of_ManageSpeedCalc:
   920                           	opt stack 0
   921                           tosu	equ	0xFFF
   922                           tosh	equ	0xFFE
   923                           tosl	equ	0xFFD
   924                           pclath	equ	0xFFA
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           prodh	equ	0xFF4
   930                           prodl	equ	0xFF3
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postinc1	equ	0xFE6
   934                           fsr1h	equ	0xFE2
   935                           fsr1l	equ	0xFE1
   936                           indf2	equ	0xFDF
   937                           postinc2	equ	0xFDE
   938                           fsr2h	equ	0xFDA
   939                           fsr2l	equ	0xFD9
   940                           status	equ	0xFD8
   941                           
   942 ;; *************** function _SpeedCalcManage *****************
   943 ;; Defined at:
   944 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  HundredMeter    2   46[COMRAM] unsigned short 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   958 ;;      Params:         0       0       0       0       0       0       0
   959 ;;      Locals:         2       0       0       0       0       0       0
   960 ;;      Temps:          0       0       0       0       0       0       0
   961 ;;      Totals:         2       0       0       0       0       0       0
   962 ;;Total ram usage:        2 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    5
   965 ;; This function calls:
   966 ;;		___lldiv
   967 ;; This function is called by:
   968 ;;		_ManageSpeedCalc
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text6
   973  000A5E                     __ptext6:
   974                           	opt stack 0
   975  000A5E                     _SpeedCalcManage:
   976                           	opt stack 23
   977                           
   978                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
   979                           ;SpeedCalc.c: 67: LapDistanceCounter += LapCounter;
   980                           
   981                           ;incstack = 0
   982  000A5E  505C               	movf	_LapCounter,w,c
   983  000A60  2658               	addwf	_LapDistanceCounter,f,c
   984  000A62  0E00               	movlw	0
   985  000A64  2259               	addwfc	_LapDistanceCounter+1,f,c
   986                           
   987                           ;SpeedCalc.c: 69: LapCounter = (unsigned char)0;
   988  000A66  0E00               	movlw	0
   989  000A68  6E5C               	movwf	_LapCounter,c
   990                           
   991                           ;SpeedCalc.c: 71: HundredMeterReference = (unsigned short)((unsigned long)100000 /
   992                           ;SpeedCalc.c: 72: (unsigned long)CircumFactor);
   993  000A6A  0EA0               	movlw	160
   994  000A6C  6E22               	movwf	___lldiv@dividend,c
   995  000A6E  0E86               	movlw	134
   996  000A70  6E23               	movwf	___lldiv@dividend+1,c
   997  000A72  0E01               	movlw	1
   998  000A74  6E24               	movwf	___lldiv@dividend+2,c
   999  000A76  0E00               	movlw	0
  1000  000A78  6E25               	movwf	___lldiv@dividend+3,c
  1001  000A7A  C05F  F026         	movff	_CircumFactor,___lldiv@divisor
  1002  000A7E  C060  F027         	movff	_CircumFactor+1,___lldiv@divisor+1
  1003  000A82  6A28               	clrf	___lldiv@divisor+2,c
  1004  000A84  6A29               	clrf	___lldiv@divisor+3,c
  1005  000A86  EC26  F004         	call	___lldiv	;wreg free
  1006  000A8A  C022  F02F         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1007  000A8E  C023  F030         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1008                           
  1009                           ;SpeedCalc.c: 74: if(LapDistanceCounter >= HundredMeterReference)
  1010  000A92  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1011  000A94  5C58               	subwf	_LapDistanceCounter,w,c
  1012  000A96  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1013  000A98  5859               	subwfb	_LapDistanceCounter+1,w,c
  1014  000A9A  A0D8               	btfss	status,0,c
  1015  000A9C  0012               	return	
  1016                           
  1017                           ;SpeedCalc.c: 75: {
  1018                           ;SpeedCalc.c: 76: DistTravelCntr ++;
  1019  000A9E  0E01               	movlw	1
  1020  000AA0  2652               	addwf	_DistTravelCntr,f,c
  1021  000AA2  0E00               	movlw	0
  1022  000AA4  2253               	addwfc	_DistTravelCntr+1,f,c
  1023  000AA6  2254               	addwfc	_DistTravelCntr+2,f,c
  1024  000AA8  2255               	addwfc	_DistTravelCntr+3,f,c
  1025                           
  1026                           ;SpeedCalc.c: 77: LapDistanceCounter -= HundredMeterReference;
  1027  000AAA  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1028  000AAC  5E58               	subwf	_LapDistanceCounter,f,c
  1029  000AAE  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1030  000AB0  5A59               	subwfb	_LapDistanceCounter+1,f,c
  1031                           
  1032                           ;SpeedCalc.c: 78: }
  1033  000AB2  0012               	return	
  1034  000AB4                     __end_of_SpeedCalcManage:
  1035                           	opt stack 0
  1036                           tosu	equ	0xFFF
  1037                           tosh	equ	0xFFE
  1038                           tosl	equ	0xFFD
  1039                           pclath	equ	0xFFA
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           prodh	equ	0xFF4
  1045                           prodl	equ	0xFF3
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postinc1	equ	0xFE6
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           indf2	equ	0xFDF
  1052                           postinc2	equ	0xFDE
  1053                           fsr2h	equ	0xFDA
  1054                           fsr2l	equ	0xFD9
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _APP_MANAGE *****************
  1058 ;; Defined at:
  1059 ;;		line 15 in file "../../../../Common/App/APP.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  TravelledDis    2   57[COMRAM] unsigned short 
  1064 ;;  AvgSpeedKph     2   55[COMRAM] unsigned short 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1074 ;;      Params:         0       0       0       0       0       0       0
  1075 ;;      Locals:         4       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0
  1077 ;;      Totals:         4       0       0       0       0       0       0
  1078 ;;Total ram usage:        4 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    6
  1081 ;; This function calls:
  1082 ;;		_BCDsendNumber
  1083 ;;		_GetAvgSpeed
  1084 ;;		_GetDistance
  1085 ;;		_SetCircumfirunce
  1086 ;;		___wmul
  1087 ;; This function is called by:
  1088 ;;		_ManageApplication
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text7
  1093  000940                     __ptext7:
  1094                           	opt stack 0
  1095  000940                     _APP_MANAGE:
  1096                           	opt stack 22
  1097                           
  1098                           ;APP.c: 17: unsigned short AvgSpeedKph;
  1099                           ;APP.c: 18: unsigned short TravelledDistance;
  1100                           ;APP.c: 22: SetCircumfirunce(2000);
  1101                           
  1102                           ;incstack = 0
  1103  000940  0E07               	movlw	7
  1104  000942  6E17               	movwf	SetCircumfirunce@Circum+1,c
  1105  000944  0ED0               	movlw	208
  1106  000946  6E16               	movwf	SetCircumfirunce@Circum,c
  1107  000948  EC01  F007         	call	_SetCircumfirunce	;wreg free
  1108                           
  1109                           ;APP.c: 24: AvgSpeedKph = GetAvgSpeed(1);
  1110  00094C  0E01               	movlw	1
  1111  00094E  EC67  F004         	call	_GetAvgSpeed
  1112  000952  C02F  F038         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  1113  000956  C030  F039         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  1114                           
  1115                           ;APP.c: 25: TravelledDistance = GetDistance();
  1116  00095A  ECF1  F006         	call	_GetDistance	;wreg free
  1117  00095E  C016  F03A         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  1118  000962  C017  F03B         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  1119                           
  1120                           ;APP.c: 26: TravelledDistance *= (unsigned short)10;
  1121  000966  C03A  F016         	movff	APP_MANAGE@TravelledDistance,___wmul@multiplier
  1122  00096A  C03B  F017         	movff	APP_MANAGE@TravelledDistance+1,___wmul@multiplier+1
  1123  00096E  0E00               	movlw	0
  1124  000970  6E19               	movwf	___wmul@multiplicand+1,c
  1125  000972  0E0A               	movlw	10
  1126  000974  6E18               	movwf	___wmul@multiplicand,c
  1127  000976  ECAD  F006         	call	___wmul	;wreg free
  1128  00097A  C016  F03A         	movff	?___wmul,APP_MANAGE@TravelledDistance
  1129  00097E  C017  F03B         	movff	?___wmul+1,APP_MANAGE@TravelledDistance+1
  1130                           
  1131                           ;APP.c: 27: TravelledDistance /= (unsigned short)16;
  1132  000982  3A3A               	swapf	APP_MANAGE@TravelledDistance,f,c
  1133  000984  3A3B               	swapf	APP_MANAGE@TravelledDistance+1,f,c
  1134  000986  0E0F               	movlw	15
  1135  000988  163A               	andwf	APP_MANAGE@TravelledDistance,f,c
  1136  00098A  503B               	movf	APP_MANAGE@TravelledDistance+1,w,c
  1137  00098C  0BF0               	andlw	240
  1138  00098E  123A               	iorwf	APP_MANAGE@TravelledDistance,f,c
  1139  000990  0E0F               	movlw	15
  1140  000992  163B               	andwf	APP_MANAGE@TravelledDistance+1,f,c
  1141                           
  1142                           ;APP.c: 39: BCDsendNumber(AvgSpeedKph,1);
  1143  000994  C038  F01D         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  1144  000998  C039  F01E         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  1145  00099C  0E01               	movlw	1
  1146  00099E  6E1F               	movwf	BCDsendNumber@DecimalPlace,c
  1147  0009A0  EC07  F003         	call	_BCDsendNumber	;wreg free
  1148  0009A4  0012               	return		;funcret
  1149  0009A6                     __end_of_APP_MANAGE:
  1150                           	opt stack 0
  1151                           tosu	equ	0xFFF
  1152                           tosh	equ	0xFFE
  1153                           tosl	equ	0xFFD
  1154                           pclath	equ	0xFFA
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           prodh	equ	0xFF4
  1160                           prodl	equ	0xFF3
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           postinc1	equ	0xFE6
  1164                           fsr1h	equ	0xFE2
  1165                           fsr1l	equ	0xFE1
  1166                           indf2	equ	0xFDF
  1167                           postinc2	equ	0xFDE
  1168                           fsr2h	equ	0xFDA
  1169                           fsr2l	equ	0xFD9
  1170                           status	equ	0xFD8
  1171                           
  1172 ;; *************** function _SetCircumfirunce *****************
  1173 ;; Defined at:
  1174 ;;		line 96 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  Circum          2   21[COMRAM] unsigned short 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;		None
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		None
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1188 ;;      Params:         2       0       0       0       0       0       0
  1189 ;;      Locals:         0       0       0       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0       0       0
  1191 ;;      Totals:         2       0       0       0       0       0       0
  1192 ;;Total ram usage:        2 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    4
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_APP_MANAGE
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text8
  1203  000E02                     __ptext8:
  1204                           	opt stack 0
  1205  000E02                     _SetCircumfirunce:
  1206                           	opt stack 23
  1207                           
  1208                           ;SpeedCalc.c: 98: CircumFactor = (unsigned short)Circum;
  1209                           
  1210                           ;incstack = 0
  1211  000E02  C016  F05F         	movff	SetCircumfirunce@Circum,_CircumFactor
  1212  000E06  C017  F060         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  1213  000E0A  0012               	return		;funcret
  1214  000E0C                     __end_of_SetCircumfirunce:
  1215                           	opt stack 0
  1216                           tosu	equ	0xFFF
  1217                           tosh	equ	0xFFE
  1218                           tosl	equ	0xFFD
  1219                           pclath	equ	0xFFA
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           prodh	equ	0xFF4
  1225                           prodl	equ	0xFF3
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postinc1	equ	0xFE6
  1229                           fsr1h	equ	0xFE2
  1230                           fsr1l	equ	0xFE1
  1231                           indf2	equ	0xFDF
  1232                           postinc2	equ	0xFDE
  1233                           fsr2h	equ	0xFDA
  1234                           fsr2l	equ	0xFD9
  1235                           status	equ	0xFD8
  1236                           
  1237 ;; *************** function _GetDistance *****************
  1238 ;; Defined at:
  1239 ;;		line 90 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  4   21[COMRAM] unsigned long 
  1246 ;; Registers used:
  1247 ;;		None
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1253 ;;      Params:         4       0       0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0
  1256 ;;      Totals:         4       0       0       0       0       0       0
  1257 ;;Total ram usage:        4 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    4
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_APP_MANAGE
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text9
  1268  000DE2                     __ptext9:
  1269                           	opt stack 0
  1270  000DE2                     _GetDistance:
  1271                           	opt stack 23
  1272                           
  1273                           ;SpeedCalc.c: 92: return DistTravelCntr;
  1274                           
  1275                           ;incstack = 0
  1276  000DE2  C052  F016         	movff	_DistTravelCntr,?_GetDistance
  1277  000DE6  C053  F017         	movff	_DistTravelCntr+1,?_GetDistance+1
  1278  000DEA  C054  F018         	movff	_DistTravelCntr+2,?_GetDistance+2
  1279  000DEE  C055  F019         	movff	_DistTravelCntr+3,?_GetDistance+3
  1280  000DF2  0012               	return		;funcret
  1281  000DF4                     __end_of_GetDistance:
  1282                           	opt stack 0
  1283                           tosu	equ	0xFFF
  1284                           tosh	equ	0xFFE
  1285                           tosl	equ	0xFFD
  1286                           pclath	equ	0xFFA
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           prodh	equ	0xFF4
  1292                           prodl	equ	0xFF3
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           postinc1	equ	0xFE6
  1296                           fsr1h	equ	0xFE2
  1297                           fsr1l	equ	0xFE1
  1298                           indf2	equ	0xFDF
  1299                           postinc2	equ	0xFDE
  1300                           fsr2h	equ	0xFDA
  1301                           fsr2l	equ	0xFD9
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function _GetAvgSpeed *****************
  1305 ;; Defined at:
  1306 ;;		line 102 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  bIsKph          1    wreg     unsigned char 
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;  bIsKph          1   50[COMRAM] unsigned char 
  1311 ;;  KphMphFactor    4   51[COMRAM] unsigned long 
  1312 ;;  AvgSpeedKphM    2   48[COMRAM] unsigned short 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2   46[COMRAM] unsigned short 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1322 ;;      Params:         2       0       0       0       0       0       0
  1323 ;;      Locals:         7       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0
  1325 ;;      Totals:         9       0       0       0       0       0       0
  1326 ;;Total ram usage:        9 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    5
  1329 ;; This function calls:
  1330 ;;		___lldiv
  1331 ;;		___lmul
  1332 ;; This function is called by:
  1333 ;;		_APP_MANAGE
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text10
  1338  0008CE                     __ptext10:
  1339                           	opt stack 0
  1340  0008CE                     _GetAvgSpeed:
  1341                           	opt stack 22
  1342                           
  1343                           ;incstack = 0
  1344                           ;GetAvgSpeed@bIsKph stored from wreg
  1345  0008CE  6E33               	movwf	GetAvgSpeed@bIsKph,c
  1346                           
  1347                           ;SpeedCalc.c: 104: unsigned short AvgSpeedKphMph;
  1348                           ;SpeedCalc.c: 105: unsigned long KphMphFactor;
  1349                           ;SpeedCalc.c: 107: if( (unsigned char)1 == bIsKph )
  1350  0008D0  0433               	decf	GetAvgSpeed@bIsKph,w,c
  1351  0008D2  A4D8               	btfss	status,2,c
  1352  0008D4  D004               	goto	l1328
  1353                           
  1354                           ;SpeedCalc.c: 108: {
  1355                           ;SpeedCalc.c: 109: KphMphFactor = (unsigned long)360;
  1356  0008D6  0E68               	movlw	104
  1357  0008D8  6E34               	movwf	GetAvgSpeed@KphMphFactor,c
  1358  0008DA  0E01               	movlw	1
  1359  0008DC  D003               	goto	L1
  1360  0008DE                     l1328:
  1361                           
  1362                           ;SpeedCalc.c: 111: else
  1363                           ;SpeedCalc.c: 112: {
  1364                           ;SpeedCalc.c: 113: KphMphFactor = (unsigned long)225;
  1365  0008DE  0EE1               	movlw	225
  1366  0008E0  6E34               	movwf	GetAvgSpeed@KphMphFactor,c
  1367  0008E2  0E00               	movlw	0
  1368  0008E4                     L1:
  1369  0008E4  6E35               	movwf	GetAvgSpeed@KphMphFactor+1,c
  1370  0008E6  0E00               	movlw	0
  1371  0008E8  6E36               	movwf	GetAvgSpeed@KphMphFactor+2,c
  1372  0008EA  0E00               	movlw	0
  1373  0008EC  6E37               	movwf	GetAvgSpeed@KphMphFactor+3,c
  1374                           
  1375                           ;SpeedCalc.c: 114: }
  1376                           ;SpeedCalc.c: 116: AvgSpeedKphMph = (unsigned short)
  1377                           ;SpeedCalc.c: 117: ((KphMphFactor * (unsigned long)CircumFactor )
  1378                           ;SpeedCalc.c: 118: / (unsigned long)LapTimeTenthMilli);
  1379  0008EE  C05F  F016         	movff	_CircumFactor,___lmul@multiplier
  1380  0008F2  C060  F017         	movff	_CircumFactor+1,___lmul@multiplier+1
  1381  0008F6  6A18               	clrf	___lmul@multiplier+2,c
  1382  0008F8  6A19               	clrf	___lmul@multiplier+3,c
  1383  0008FA  C034  F01A         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  1384  0008FE  C035  F01B         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  1385  000902  C036  F01C         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  1386  000906  C037  F01D         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  1387  00090A  EC5A  F005         	call	___lmul	;wreg free
  1388  00090E  C016  F022         	movff	?___lmul,___lldiv@dividend
  1389  000912  C017  F023         	movff	?___lmul+1,___lldiv@dividend+1
  1390  000916  C018  F024         	movff	?___lmul+2,___lldiv@dividend+2
  1391  00091A  C019  F025         	movff	?___lmul+3,___lldiv@dividend+3
  1392  00091E  C056  F026         	movff	_LapTimeTenthMilli,___lldiv@divisor
  1393  000922  C057  F027         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  1394  000926  6A28               	clrf	___lldiv@divisor+2,c
  1395  000928  6A29               	clrf	___lldiv@divisor+3,c
  1396  00092A  EC26  F004         	call	___lldiv	;wreg free
  1397  00092E  C022  F031         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  1398  000932  C023  F032         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  1399                           
  1400                           ;SpeedCalc.c: 121: return AvgSpeedKphMph;
  1401  000936  C031  F02F         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  1402  00093A  C032  F030         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  1403  00093E  0012               	return	
  1404  000940                     __end_of_GetAvgSpeed:
  1405                           	opt stack 0
  1406                           tosu	equ	0xFFF
  1407                           tosh	equ	0xFFE
  1408                           tosl	equ	0xFFD
  1409                           pclath	equ	0xFFA
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           prodh	equ	0xFF4
  1415                           prodl	equ	0xFF3
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postinc1	equ	0xFE6
  1419                           fsr1h	equ	0xFE2
  1420                           fsr1l	equ	0xFE1
  1421                           indf2	equ	0xFDF
  1422                           postinc2	equ	0xFDE
  1423                           fsr2h	equ	0xFDA
  1424                           fsr2l	equ	0xFD9
  1425                           status	equ	0xFD8
  1426                           
  1427 ;; *************** function ___lmul *****************
  1428 ;; Defined at:
  1429 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  multiplier      4   21[COMRAM] unsigned long 
  1432 ;;  multiplicand    4   25[COMRAM] unsigned long 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  product         4   29[COMRAM] unsigned long 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  4   21[COMRAM] unsigned long 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1444 ;;      Params:         8       0       0       0       0       0       0
  1445 ;;      Locals:         4       0       0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0
  1447 ;;      Totals:        12       0       0       0       0       0       0
  1448 ;;Total ram usage:       12 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    4
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_GetAvgSpeed
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text11
  1459  000AB4                     __ptext11:
  1460                           	opt stack 0
  1461  000AB4                     ___lmul:
  1462                           	opt stack 22
  1463                           
  1464                           ;incstack = 0
  1465  000AB4  0E00               	movlw	0
  1466  000AB6  6E1E               	movwf	___lmul@product,c
  1467  000AB8  0E00               	movlw	0
  1468  000ABA  6E1F               	movwf	___lmul@product+1,c
  1469  000ABC  0E00               	movlw	0
  1470  000ABE  6E20               	movwf	___lmul@product+2,c
  1471  000AC0  0E00               	movlw	0
  1472  000AC2  6E21               	movwf	___lmul@product+3,c
  1473  000AC4                     l1270:
  1474  000AC4  A016               	btfss	___lmul@multiplier,0,c
  1475  000AC6  D008               	goto	l1274
  1476  000AC8  501A               	movf	___lmul@multiplicand,w,c
  1477  000ACA  261E               	addwf	___lmul@product,f,c
  1478  000ACC  501B               	movf	___lmul@multiplicand+1,w,c
  1479  000ACE  221F               	addwfc	___lmul@product+1,f,c
  1480  000AD0  501C               	movf	___lmul@multiplicand+2,w,c
  1481  000AD2  2220               	addwfc	___lmul@product+2,f,c
  1482  000AD4  501D               	movf	___lmul@multiplicand+3,w,c
  1483  000AD6  2221               	addwfc	___lmul@product+3,f,c
  1484  000AD8                     l1274:
  1485  000AD8  90D8               	bcf	status,0,c
  1486  000ADA  361A               	rlcf	___lmul@multiplicand,f,c
  1487  000ADC  361B               	rlcf	___lmul@multiplicand+1,f,c
  1488  000ADE  361C               	rlcf	___lmul@multiplicand+2,f,c
  1489  000AE0  361D               	rlcf	___lmul@multiplicand+3,f,c
  1490  000AE2  90D8               	bcf	status,0,c
  1491  000AE4  3219               	rrcf	___lmul@multiplier+3,f,c
  1492  000AE6  3218               	rrcf	___lmul@multiplier+2,f,c
  1493  000AE8  3217               	rrcf	___lmul@multiplier+1,f,c
  1494  000AEA  3216               	rrcf	___lmul@multiplier,f,c
  1495  000AEC  5016               	movf	___lmul@multiplier,w,c
  1496  000AEE  1017               	iorwf	___lmul@multiplier+1,w,c
  1497  000AF0  1018               	iorwf	___lmul@multiplier+2,w,c
  1498  000AF2  1019               	iorwf	___lmul@multiplier+3,w,c
  1499  000AF4  A4D8               	btfss	status,2,c
  1500  000AF6  D7E6               	goto	l1270
  1501  000AF8  C01E  F016         	movff	___lmul@product,?___lmul
  1502  000AFC  C01F  F017         	movff	___lmul@product+1,?___lmul+1
  1503  000B00  C020  F018         	movff	___lmul@product+2,?___lmul+2
  1504  000B04  C021  F019         	movff	___lmul@product+3,?___lmul+3
  1505  000B08  0012               	return		;funcret
  1506  000B0A                     __end_of___lmul:
  1507                           	opt stack 0
  1508                           tosu	equ	0xFFF
  1509                           tosh	equ	0xFFE
  1510                           tosl	equ	0xFFD
  1511                           pclath	equ	0xFFA
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           prodh	equ	0xFF4
  1517                           prodl	equ	0xFF3
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postinc1	equ	0xFE6
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           indf2	equ	0xFDF
  1524                           postinc2	equ	0xFDE
  1525                           fsr2h	equ	0xFDA
  1526                           fsr2l	equ	0xFD9
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function ___lldiv *****************
  1530 ;; Defined at:
  1531 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  dividend        4   33[COMRAM] unsigned long 
  1534 ;;  divisor         4   37[COMRAM] unsigned long 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  quotient        4   41[COMRAM] unsigned long 
  1537 ;;  counter         1   45[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  4   33[COMRAM] unsigned long 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         8       0       0       0       0       0       0
  1548 ;;      Locals:         5       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0
  1550 ;;      Totals:        13       0       0       0       0       0       0
  1551 ;;Total ram usage:       13 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    4
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_SpeedCalcManage
  1558 ;;		_GetAvgSpeed
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text12
  1563  00084C                     __ptext12:
  1564                           	opt stack 0
  1565  00084C                     ___lldiv:
  1566                           	opt stack 23
  1567                           
  1568                           ;incstack = 0
  1569  00084C  0E00               	movlw	0
  1570  00084E  6E2A               	movwf	___lldiv@quotient,c
  1571  000850  0E00               	movlw	0
  1572  000852  6E2B               	movwf	___lldiv@quotient+1,c
  1573  000854  0E00               	movlw	0
  1574  000856  6E2C               	movwf	___lldiv@quotient+2,c
  1575  000858  0E00               	movlw	0
  1576  00085A  6E2D               	movwf	___lldiv@quotient+3,c
  1577  00085C  5026               	movf	___lldiv@divisor,w,c
  1578  00085E  1027               	iorwf	___lldiv@divisor+1,w,c
  1579  000860  1028               	iorwf	___lldiv@divisor+2,w,c
  1580  000862  1029               	iorwf	___lldiv@divisor+3,w,c
  1581  000864  B4D8               	btfsc	status,2,c
  1582  000866  D02A               	goto	l638
  1583  000868  0E01               	movlw	1
  1584  00086A  6E2E               	movwf	___lldiv@counter,c
  1585  00086C  D006               	goto	l1286
  1586  00086E                     l1284:
  1587  00086E  90D8               	bcf	status,0,c
  1588  000870  3626               	rlcf	___lldiv@divisor,f,c
  1589  000872  3627               	rlcf	___lldiv@divisor+1,f,c
  1590  000874  3628               	rlcf	___lldiv@divisor+2,f,c
  1591  000876  3629               	rlcf	___lldiv@divisor+3,f,c
  1592  000878  2A2E               	incf	___lldiv@counter,f,c
  1593  00087A                     l1286:
  1594  00087A  AE29               	btfss	___lldiv@divisor+3,7,c
  1595  00087C  D7F8               	goto	l1284
  1596  00087E                     l1288:
  1597  00087E  90D8               	bcf	status,0,c
  1598  000880  362A               	rlcf	___lldiv@quotient,f,c
  1599  000882  362B               	rlcf	___lldiv@quotient+1,f,c
  1600  000884  362C               	rlcf	___lldiv@quotient+2,f,c
  1601  000886  362D               	rlcf	___lldiv@quotient+3,f,c
  1602  000888  5026               	movf	___lldiv@divisor,w,c
  1603  00088A  5C22               	subwf	___lldiv@dividend,w,c
  1604  00088C  5027               	movf	___lldiv@divisor+1,w,c
  1605  00088E  5823               	subwfb	___lldiv@dividend+1,w,c
  1606  000890  5028               	movf	___lldiv@divisor+2,w,c
  1607  000892  5824               	subwfb	___lldiv@dividend+2,w,c
  1608  000894  5029               	movf	___lldiv@divisor+3,w,c
  1609  000896  5825               	subwfb	___lldiv@dividend+3,w,c
  1610  000898  A0D8               	btfss	status,0,c
  1611  00089A  D009               	goto	l1296
  1612  00089C  5026               	movf	___lldiv@divisor,w,c
  1613  00089E  5E22               	subwf	___lldiv@dividend,f,c
  1614  0008A0  5027               	movf	___lldiv@divisor+1,w,c
  1615  0008A2  5A23               	subwfb	___lldiv@dividend+1,f,c
  1616  0008A4  5028               	movf	___lldiv@divisor+2,w,c
  1617  0008A6  5A24               	subwfb	___lldiv@dividend+2,f,c
  1618  0008A8  5029               	movf	___lldiv@divisor+3,w,c
  1619  0008AA  5A25               	subwfb	___lldiv@dividend+3,f,c
  1620  0008AC  802A               	bsf	___lldiv@quotient,0,c
  1621  0008AE                     l1296:
  1622  0008AE  90D8               	bcf	status,0,c
  1623  0008B0  3229               	rrcf	___lldiv@divisor+3,f,c
  1624  0008B2  3228               	rrcf	___lldiv@divisor+2,f,c
  1625  0008B4  3227               	rrcf	___lldiv@divisor+1,f,c
  1626  0008B6  3226               	rrcf	___lldiv@divisor,f,c
  1627  0008B8  2E2E               	decfsz	___lldiv@counter,f,c
  1628  0008BA  D7E1               	goto	l1288
  1629  0008BC                     l638:
  1630  0008BC  C02A  F022         	movff	___lldiv@quotient,?___lldiv
  1631  0008C0  C02B  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  1632  0008C4  C02C  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  1633  0008C8  C02D  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  1634  0008CC  0012               	return		;funcret
  1635  0008CE                     __end_of___lldiv:
  1636                           	opt stack 0
  1637                           tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postinc1	equ	0xFE6
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function _BCDsendNumber *****************
  1659 ;; Defined at:
  1660 ;;		line 25 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  Number          2   28[COMRAM] unsigned short 
  1663 ;;  DecimalPlace    1   30[COMRAM] unsigned char 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  Buffer          2   37[COMRAM] unsigned short 
  1666 ;;  Output          2   35[COMRAM] unsigned short 
  1667 ;;  Link            2   33[COMRAM] unsigned short 
  1668 ;;  LoopIndex       1   39[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1678 ;;      Params:         3       0       0       0       0       0       0
  1679 ;;      Locals:         7       0       0       0       0       0       0
  1680 ;;      Temps:          2       0       0       0       0       0       0
  1681 ;;      Totals:        12       0       0       0       0       0       0
  1682 ;;Total ram usage:       12 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    5
  1685 ;; This function calls:
  1686 ;;		___lwdiv
  1687 ;;		___wmul
  1688 ;; This function is called by:
  1689 ;;		_APP_MANAGE
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text13
  1694  00060E                     __ptext13:
  1695                           	opt stack 0
  1696  00060E                     _BCDsendNumber:
  1697                           	opt stack 22
  1698                           
  1699                           ;BCDdisplay.c: 27: unsigned short Link,Output,Buffer;
  1700                           ;BCDdisplay.c: 28: unsigned char LoopIndex;
  1701                           ;BCDdisplay.c: 31: Buffer = Number;
  1702                           
  1703                           ;incstack = 0
  1704  00060E  C01D  F026         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  1705  000612  C01E  F027         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  1706                           
  1707                           ;BCDdisplay.c: 32: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  1708  000616  0E00               	movlw	0
  1709  000618  6E28               	movwf	BCDsendNumber@LoopIndex,c
  1710  00061A                     l1342:
  1711  00061A  0E03               	movlw	3
  1712  00061C  6428               	cpfsgt	BCDsendNumber@LoopIndex,c
  1713  00061E  D001               	goto	l1346
  1714  000620  D05C               	goto	l1366
  1715  000622                     l1346:
  1716                           
  1717                           ;BCDdisplay.c: 33: {
  1718                           ;BCDdisplay.c: 34: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  1719  000622  5026               	movf	BCDsendNumber@Buffer,w,c
  1720  000624  1027               	iorwf	BCDsendNumber@Buffer+1,w,c
  1721  000626  A4D8               	btfss	status,2,c
  1722  000628  D004               	goto	l29
  1723  00062A  5028               	movf	BCDsendNumber@LoopIndex,w,c
  1724  00062C  5C1F               	subwf	BCDsendNumber@DecimalPlace,w,c
  1725  00062E  A0D8               	btfss	status,0,c
  1726  000630  D02D               	goto	l1356
  1727  000632                     l29:
  1728                           
  1729                           ;BCDdisplay.c: 35: {
  1730                           ;BCDdisplay.c: 36: Link = Buffer;
  1731  000632  C026  F022         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  1732  000636  C027  F023         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  1733                           
  1734                           ;BCDdisplay.c: 37: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  1735  00063A  C026  F016         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  1736  00063E  C027  F017         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  1737  000642  0E00               	movlw	0
  1738  000644  6E19               	movwf	___lwdiv@divisor+1,c
  1739  000646  0E0A               	movlw	10
  1740  000648  6E18               	movwf	___lwdiv@divisor,c
  1741  00064A  ECAF  F005         	call	___lwdiv	;wreg free
  1742  00064E  C016  F026         	movff	?___lwdiv,BCDsendNumber@Buffer
  1743  000652  C017  F027         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  1744                           
  1745                           ;BCDdisplay.c: 38: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  1746  000656  C026  F016         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  1747  00065A  C027  F017         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  1748  00065E  0E00               	movlw	0
  1749  000660  6E19               	movwf	___wmul@multiplicand+1,c
  1750  000662  0E0A               	movlw	10
  1751  000664  6E18               	movwf	___wmul@multiplicand,c
  1752  000666  ECAD  F006         	call	___wmul	;wreg free
  1753  00066A  1E16               	comf	?___wmul,f,c
  1754  00066C  1E17               	comf	?___wmul+1,f,c
  1755  00066E  4A16               	infsnz	?___wmul,f,c
  1756  000670  2A17               	incf	?___wmul+1,f,c
  1757  000672  5022               	movf	BCDsendNumber@Link,w,c
  1758  000674  2416               	addwf	?___wmul,w,c
  1759  000676  6E24               	movwf	BCDsendNumber@Output,c
  1760  000678  5023               	movf	BCDsendNumber@Link+1,w,c
  1761  00067A  2017               	addwfc	?___wmul+1,w,c
  1762  00067C  6E25               	movwf	BCDsendNumber@Output+1,c
  1763                           
  1764                           ;BCDdisplay.c: 40: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  1765  00067E  0E01               	movlw	low _SevenSegmentMAP
  1766  000680  2424               	addwf	BCDsendNumber@Output,w,c
  1767  000682  6EF6               	movwf	tblptrl,c
  1768  000684  0E06               	movlw	high _SevenSegmentMAP
  1769  000686  2025               	addwfc	BCDsendNumber@Output+1,w,c
  1770  000688  6EF7               	movwf	tblptrh,c
  1771  00068A                     	if	0	;There are less than 3 active tblptr bytes
  1772  00068A  D008               	goto	L2
  1773  00068C                     l1356:
  1774                           
  1775                           ;BCDdisplay.c: 42: else if (LoopIndex <= DecimalPlace)
  1776  00068C  5028               	movf	BCDsendNumber@LoopIndex,w,c
  1777  00068E  5C1F               	subwf	BCDsendNumber@DecimalPlace,w,c
  1778  000690  A0D8               	btfss	status,0,c
  1779  000692  D015               	goto	l1360
  1780                           
  1781                           ;BCDdisplay.c: 43: {
  1782                           ;BCDdisplay.c: 44: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  1783  000694  0E01               	movlw	low _SevenSegmentMAP
  1784  000696  6EF6               	movwf	tblptrl,c
  1785  000698                     	if	1	;There is more than 1 active tblptr byte
  1786  000698  0E06               	movlw	high _SevenSegmentMAP
  1787  00069A  6EF7               	movwf	tblptrh,c
  1788  00069C                     	endif
  1789  00069C                     	if	0	;There are less than 3 active tblptr bytes
  1790  00069C                     L2:
  1791  00069C                     	endif
  1792  00069C  0008               	tblrd		*
  1793  00069E  50F5               	movf	tablat,w,c
  1794  0006A0  6E20               	movwf	??_BCDsendNumber& (0+255),c
  1795  0006A2  6A21               	clrf	(??_BCDsendNumber+1)& (0+255),c
  1796  0006A4  5028               	movf	BCDsendNumber@LoopIndex,w,c
  1797  0006A6  0D02               	mullw	2
  1798  0006A8  0E4A               	movlw	low _BCDNumber
  1799  0006AA  24F3               	addwf	prodl,w,c
  1800  0006AC  6ED9               	movwf	fsr2l,c
  1801  0006AE  0E00               	movlw	high _BCDNumber
  1802  0006B0  20F4               	addwfc	prodh,w,c
  1803  0006B2  6EDA               	movwf	fsr2h,c
  1804  0006B4  C020  FFDE         	movff	??_BCDsendNumber,postinc2
  1805  0006B8  C021  FFDD         	movff	??_BCDsendNumber+1,postdec2
  1806                           
  1807                           ;BCDdisplay.c: 45: }
  1808  0006BC  D00C               	goto	l1362
  1809  0006BE                     l1360:
  1810                           
  1811                           ;BCDdisplay.c: 46: else
  1812                           ;BCDdisplay.c: 47: {
  1813                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = 0x0;
  1814  0006BE  5028               	movf	BCDsendNumber@LoopIndex,w,c
  1815  0006C0  0D02               	mullw	2
  1816  0006C2  0E4A               	movlw	low _BCDNumber
  1817  0006C4  24F3               	addwf	prodl,w,c
  1818  0006C6  6ED9               	movwf	fsr2l,c
  1819  0006C8  0E00               	movlw	high _BCDNumber
  1820  0006CA  20F4               	addwfc	prodh,w,c
  1821  0006CC  6EDA               	movwf	fsr2h,c
  1822  0006CE  0E00               	movlw	0
  1823  0006D0  6EDE               	movwf	postinc2,c
  1824  0006D2  0E00               	movlw	0
  1825  0006D4  6EDD               	movwf	postdec2,c
  1826  0006D6                     l1362:
  1827  0006D6  2A28               	incf	BCDsendNumber@LoopIndex,f,c
  1828  0006D8  D7A0               	goto	l1342
  1829  0006DA                     l1366:
  1830                           
  1831                           ;BCDdisplay.c: 49: }
  1832                           ;BCDdisplay.c: 50: }
  1833                           ;BCDdisplay.c: 51: if(DecimalPlace != (unsigned char)0)
  1834  0006DA  501F               	movf	BCDsendNumber@DecimalPlace,w,c
  1835  0006DC  B4D8               	btfsc	status,2,c
  1836  0006DE  0012               	return	
  1837                           
  1838                           ;BCDdisplay.c: 52: {
  1839                           ;BCDdisplay.c: 53: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  1840  0006E0  501F               	movf	BCDsendNumber@DecimalPlace,w,c
  1841  0006E2  0D02               	mullw	2
  1842  0006E4  0E4A               	movlw	low _BCDNumber
  1843  0006E6  24F3               	addwf	prodl,w,c
  1844  0006E8  6ED9               	movwf	fsr2l,c
  1845  0006EA  0E00               	movlw	high _BCDNumber
  1846  0006EC  20F4               	addwfc	prodh,w,c
  1847  0006EE  6EDA               	movwf	fsr2h,c
  1848  0006F0  0E0B               	movlw	low (_SevenSegmentMAP+10)
  1849  0006F2  6EF6               	movwf	tblptrl,c
  1850  0006F4  0E06               	movlw	high (_SevenSegmentMAP+10)
  1851  0006F6  6EF7               	movwf	tblptrh,c
  1852  0006F8                     	if	0	;tblptru may be non-zero
  1853  0006F8                     	endif
  1854  0006F8                     	if	0	;tblptru may be non-zero
  1855  0006F8                     	endif
  1856  0006F8  0008               	tblrd		*
  1857  0006FA  50F5               	movf	tablat,w,c
  1858  0006FC  12DE               	iorwf	postinc2,f,c
  1859  0006FE  0E00               	movlw	0
  1860  000700  12DD               	iorwf	postdec2,f,c
  1861  000702  0012               	return	
  1862  000704                     __end_of_BCDsendNumber:
  1863                           	opt stack 0
  1864                           tosu	equ	0xFFF
  1865                           tosh	equ	0xFFE
  1866                           tosl	equ	0xFFD
  1867                           pclath	equ	0xFFA
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postinc1	equ	0xFE6
  1877                           fsr1h	equ	0xFE2
  1878                           fsr1l	equ	0xFE1
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function ___wmul *****************
  1887 ;; Defined at:
  1888 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  multiplier      2   21[COMRAM] unsigned int 
  1891 ;;  multiplicand    2   23[COMRAM] unsigned int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  product         2   25[COMRAM] unsigned int 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2   21[COMRAM] unsigned int 
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0, prodl, prodh
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1903 ;;      Params:         4       0       0       0       0       0       0
  1904 ;;      Locals:         2       0       0       0       0       0       0
  1905 ;;      Temps:          0       0       0       0       0       0       0
  1906 ;;      Totals:         6       0       0       0       0       0       0
  1907 ;;Total ram usage:        6 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    4
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_APP_MANAGE
  1914 ;;		_BCDsendNumber
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text14
  1919  000D5A                     __ptext14:
  1920                           	opt stack 0
  1921  000D5A                     ___wmul:
  1922                           	opt stack 23
  1923                           
  1924                           ;incstack = 0
  1925  000D5A  5016               	movf	___wmul@multiplier,w,c
  1926  000D5C  0218               	mulwf	___wmul@multiplicand,c
  1927  000D5E  CFF3 F01A          	movff	prodl,___wmul@product
  1928  000D62  CFF4 F01B          	movff	prodh,___wmul@product+1
  1929  000D66  5016               	movf	___wmul@multiplier,w,c
  1930  000D68  0219               	mulwf	___wmul@multiplicand+1,c
  1931  000D6A  50F3               	movf	prodl,w,c
  1932  000D6C  261B               	addwf	___wmul@product+1,f,c
  1933  000D6E  5017               	movf	___wmul@multiplier+1,w,c
  1934  000D70  0218               	mulwf	___wmul@multiplicand,c
  1935  000D72  50F3               	movf	prodl,w,c
  1936  000D74  261B               	addwf	___wmul@product+1,f,c
  1937  000D76  C01A  F016         	movff	___wmul@product,?___wmul
  1938  000D7A  C01B  F017         	movff	___wmul@product+1,?___wmul+1
  1939  000D7E  0012               	return	
  1940  000D80                     __end_of___wmul:
  1941                           	opt stack 0
  1942                           tosu	equ	0xFFF
  1943                           tosh	equ	0xFFE
  1944                           tosl	equ	0xFFD
  1945                           pclath	equ	0xFFA
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postinc1	equ	0xFE6
  1955                           fsr1h	equ	0xFE2
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           postinc2	equ	0xFDE
  1959                           postdec2	equ	0xFDD
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function ___lwdiv *****************
  1965 ;; Defined at:
  1966 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  dividend        2   21[COMRAM] unsigned int 
  1969 ;;  divisor         2   23[COMRAM] unsigned int 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  quotient        2   25[COMRAM] unsigned int 
  1972 ;;  counter         1   27[COMRAM] unsigned char 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  2   21[COMRAM] unsigned int 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1982 ;;      Params:         4       0       0       0       0       0       0
  1983 ;;      Locals:         3       0       0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0
  1985 ;;      Totals:         7       0       0       0       0       0       0
  1986 ;;Total ram usage:        7 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    4
  1989 ;; This function calls:
  1990 ;;		Nothing
  1991 ;; This function is called by:
  1992 ;;		_BCDsendNumber
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text15
  1997  000B5E                     __ptext15:
  1998                           	opt stack 0
  1999  000B5E                     ___lwdiv:
  2000                           	opt stack 22
  2001                           
  2002                           ;incstack = 0
  2003  000B5E  0E00               	movlw	0
  2004  000B60  6E1B               	movwf	___lwdiv@quotient+1,c
  2005  000B62  0E00               	movlw	0
  2006  000B64  6E1A               	movwf	___lwdiv@quotient,c
  2007  000B66  5018               	movf	___lwdiv@divisor,w,c
  2008  000B68  1019               	iorwf	___lwdiv@divisor+1,w,c
  2009  000B6A  B4D8               	btfsc	status,2,c
  2010  000B6C  D01C               	goto	l691
  2011  000B6E  0E01               	movlw	1
  2012  000B70  6E1C               	movwf	___lwdiv@counter,c
  2013  000B72  D004               	goto	l1308
  2014  000B74                     l1306:
  2015  000B74  90D8               	bcf	status,0,c
  2016  000B76  3618               	rlcf	___lwdiv@divisor,f,c
  2017  000B78  3619               	rlcf	___lwdiv@divisor+1,f,c
  2018  000B7A  2A1C               	incf	___lwdiv@counter,f,c
  2019  000B7C                     l1308:
  2020  000B7C  AE19               	btfss	___lwdiv@divisor+1,7,c
  2021  000B7E  D7FA               	goto	l1306
  2022  000B80                     l1310:
  2023  000B80  90D8               	bcf	status,0,c
  2024  000B82  361A               	rlcf	___lwdiv@quotient,f,c
  2025  000B84  361B               	rlcf	___lwdiv@quotient+1,f,c
  2026  000B86  5018               	movf	___lwdiv@divisor,w,c
  2027  000B88  5C16               	subwf	___lwdiv@dividend,w,c
  2028  000B8A  5019               	movf	___lwdiv@divisor+1,w,c
  2029  000B8C  5817               	subwfb	___lwdiv@dividend+1,w,c
  2030  000B8E  A0D8               	btfss	status,0,c
  2031  000B90  D005               	goto	l1318
  2032  000B92  5018               	movf	___lwdiv@divisor,w,c
  2033  000B94  5E16               	subwf	___lwdiv@dividend,f,c
  2034  000B96  5019               	movf	___lwdiv@divisor+1,w,c
  2035  000B98  5A17               	subwfb	___lwdiv@dividend+1,f,c
  2036  000B9A  801A               	bsf	___lwdiv@quotient,0,c
  2037  000B9C                     l1318:
  2038  000B9C  90D8               	bcf	status,0,c
  2039  000B9E  3219               	rrcf	___lwdiv@divisor+1,f,c
  2040  000BA0  3218               	rrcf	___lwdiv@divisor,f,c
  2041  000BA2  2E1C               	decfsz	___lwdiv@counter,f,c
  2042  000BA4  D7ED               	goto	l1310
  2043  000BA6                     l691:
  2044  000BA6  C01A  F016         	movff	___lwdiv@quotient,?___lwdiv
  2045  000BAA  C01B  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2046  000BAE  0012               	return		;funcret
  2047  000BB0                     __end_of___lwdiv:
  2048                           	opt stack 0
  2049                           tosu	equ	0xFFF
  2050                           tosh	equ	0xFFE
  2051                           tosl	equ	0xFFD
  2052                           pclath	equ	0xFFA
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postinc1	equ	0xFE6
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _BCDManage7segment *****************
  2072 ;; Defined at:
  2073 ;;		line 57 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2087 ;;      Params:         0       0       0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0
  2089 ;;      Temps:          3       0       0       0       0       0       0
  2090 ;;      Totals:         3       0       0       0       0       0       0
  2091 ;;Total ram usage:        3 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    5
  2094 ;; This function calls:
  2095 ;;		_HWI_4Digit_WRITE
  2096 ;;		_HWI_8Digit_WRITE
  2097 ;; This function is called by:
  2098 ;;		_DisplayAlphaNumeric
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text16
  2103  000C02                     __ptext16:
  2104                           	opt stack 0
  2105  000C02                     _BCDManage7segment:
  2106                           	opt stack 23
  2107                           
  2108                           ;BCDdisplay.c: 59: static unsigned char DigitIndex = (unsigned char)0;
  2109                           ;BCDdisplay.c: 62: HWI_4Digit_WRITE(0,(~((unsigned char) 0x8 >> DigitIndex)));
  2110                           
  2111                           ;incstack = 0
  2112  000C02  C05E  F018         	movff	BCDManage7segment@DigitIndex,??_BCDManage7segment
  2113  000C06  0E08               	movlw	8
  2114  000C08  6E19               	movwf	(??_BCDManage7segment+1)& (0+255),c
  2115  000C0A  0E00               	movlw	0
  2116  000C0C  6E1A               	movwf	(??_BCDManage7segment+2)& (0+255),c
  2117  000C0E  2A18               	incf	??_BCDManage7segment,f,c
  2118  000C10  D003               	goto	u554
  2119  000C12                     u555:
  2120  000C12  341A               	rlcf	??_BCDManage7segment+2,w,c
  2121  000C14  321A               	rrcf	??_BCDManage7segment+2,f,c
  2122  000C16  3219               	rrcf	??_BCDManage7segment+1,f,c
  2123  000C18                     u554:
  2124  000C18  2E18               	decfsz	??_BCDManage7segment,f,c
  2125  000C1A  D7FB               	goto	u555
  2126  000C1C  5019               	movf	??_BCDManage7segment+1,w,c
  2127  000C1E  0AFF               	xorlw	255
  2128  000C20  6E16               	movwf	HWI_4Digit_WRITE@value,c
  2129  000C22  0E00               	movlw	0
  2130  000C24  EC7F  F006         	call	_HWI_4Digit_WRITE
  2131                           
  2132                           ;BCDdisplay.c: 63: HWI_8Digit_WRITE(1,BCDNumber[DigitIndex]);
  2133  000C28  505E               	movf	BCDManage7segment@DigitIndex,w,c
  2134  000C2A  0D02               	mullw	2
  2135  000C2C  0E4A               	movlw	low _BCDNumber
  2136  000C2E  24F3               	addwf	prodl,w,c
  2137  000C30  6ED9               	movwf	fsr2l,c
  2138  000C32  0E00               	movlw	high _BCDNumber
  2139  000C34  20F4               	addwfc	prodh,w,c
  2140  000C36  6EDA               	movwf	fsr2h,c
  2141  000C38  50DF               	movf	indf2,w,c
  2142  000C3A  6E16               	movwf	HWI_8Digit_WRITE@value,c
  2143  000C3C  0E01               	movlw	1
  2144  000C3E  ECC0  F006         	call	_HWI_8Digit_WRITE
  2145                           
  2146                           ;BCDdisplay.c: 70: DigitIndex ++;
  2147  000C42  2A5E               	incf	BCDManage7segment@DigitIndex,f,c
  2148                           
  2149                           ;BCDdisplay.c: 71: if(DigitIndex == 4)
  2150  000C44  0E04               	movlw	4
  2151  000C46  185E               	xorwf	BCDManage7segment@DigitIndex,w,c
  2152  000C48  A4D8               	btfss	status,2,c
  2153  000C4A  0012               	return	
  2154                           
  2155                           ;BCDdisplay.c: 72: {
  2156                           ;BCDdisplay.c: 73: DigitIndex = (unsigned char)0;
  2157  000C4C  0E00               	movlw	0
  2158  000C4E  6E5E               	movwf	BCDManage7segment@DigitIndex,c
  2159  000C50  0012               	return	
  2160  000C52                     __end_of_BCDManage7segment:
  2161                           	opt stack 0
  2162                           tosu	equ	0xFFF
  2163                           tosh	equ	0xFFE
  2164                           tosl	equ	0xFFD
  2165                           pclath	equ	0xFFA
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           postinc1	equ	0xFE6
  2175                           fsr1h	equ	0xFE2
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _HWI_8Digit_WRITE *****************
  2185 ;; Defined at:
  2186 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  port            1    wreg     unsigned char 
  2189 ;;  value           1   21[COMRAM] unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  port            1   22[COMRAM] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2201 ;;      Params:         1       0       0       0       0       0       0
  2202 ;;      Locals:         1       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0
  2204 ;;      Totals:         2       0       0       0       0       0       0
  2205 ;;Total ram usage:        2 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    4
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_BCDManage7segment
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text17
  2216  000D80                     __ptext17:
  2217                           	opt stack 0
  2218  000D80                     _HWI_8Digit_WRITE:
  2219                           	opt stack 23
  2220                           
  2221                           ;incstack = 0
  2222                           ;HWI_8Digit_WRITE@port stored from wreg
  2223  000D80  6E17               	movwf	HWI_8Digit_WRITE@port,c
  2224                           
  2225                           ;HWI_DIGITAL.c: 43: switch (port)
  2226  000D82  D009               	goto	l1382
  2227  000D84                     l162:
  2228                           
  2229                           ;HWI_DIGITAL.c: 46: PORTC = value;
  2230  000D84  C016  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  2231                           
  2232                           ;HWI_DIGITAL.c: 47: break;
  2233  000D88  0012               	return	
  2234  000D8A                     l164:
  2235                           
  2236                           ;HWI_DIGITAL.c: 49: PORTD = value;
  2237  000D8A  C016  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2238                           
  2239                           ;HWI_DIGITAL.c: 50: break;
  2240  000D8E  0012               	return	
  2241  000D90                     l165:
  2242                           
  2243                           ;HWI_DIGITAL.c: 52: PORTD = value;
  2244  000D90  C016  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2245                           
  2246                           ;HWI_DIGITAL.c: 53: }
  2247  000D94  0012               	return	
  2248  000D96                     l1382:
  2249  000D96  5017               	movf	HWI_8Digit_WRITE@port,w,c
  2250                           
  2251                           ; Switch size 1, requested type "space"
  2252                           ; Number of cases is 2, Range of values is 0 to 1
  2253                           ; switch strategies available:
  2254                           ; Name         Instructions Cycles
  2255                           ; simple_byte            7     4 (average)
  2256                           ;	Chosen strategy is simple_byte
  2257  000D98  0A00               	xorlw	0	; case 0
  2258  000D9A  B4D8               	btfsc	status,2,c
  2259  000D9C  D7F3               	goto	l162
  2260  000D9E  0A01               	xorlw	1	; case 1
  2261  000DA0  B4D8               	btfsc	status,2,c
  2262  000DA2  D7F3               	goto	l164
  2263  000DA4  D7F5               	goto	l165
  2264  000DA6                     __end_of_HWI_8Digit_WRITE:
  2265                           	opt stack 0
  2266                           tosu	equ	0xFFF
  2267                           tosh	equ	0xFFE
  2268                           tosl	equ	0xFFD
  2269                           pclath	equ	0xFFA
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           postinc1	equ	0xFE6
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _HWI_4Digit_WRITE *****************
  2289 ;; Defined at:
  2290 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  port            1    wreg     unsigned char 
  2293 ;;  value           1   21[COMRAM] unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  port            1   22[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2305 ;;      Params:         1       0       0       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0       0       0
  2308 ;;      Totals:         2       0       0       0       0       0       0
  2309 ;;Total ram usage:        2 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    4
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_BCDManage7segment
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text18
  2320  000CFE                     __ptext18:
  2321                           	opt stack 0
  2322  000CFE                     _HWI_4Digit_WRITE:
  2323                           	opt stack 23
  2324                           
  2325                           ;incstack = 0
  2326                           ;HWI_4Digit_WRITE@port stored from wreg
  2327  000CFE  6E17               	movwf	HWI_4Digit_WRITE@port,c
  2328                           
  2329                           ;HWI_DIGITAL.c: 10: switch (port)
  2330  000D00  D00F               	goto	l1378
  2331  000D02                     l1372:
  2332                           
  2333                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  2334  000D02  508B               	movf	3979,w,c	;volatile
  2335  000D04  0BF0               	andlw	240
  2336  000D06  1016               	iorwf	HWI_4Digit_WRITE@value,w,c
  2337  000D08  6E82               	movwf	3970,c	;volatile
  2338                           
  2339                           ;HWI_DIGITAL.c: 14: break;
  2340  000D0A  0012               	return	
  2341  000D0C                     l1374:
  2342                           
  2343                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  2344  000D0C  508C               	movf	3980,w,c	;volatile
  2345  000D0E  0BF0               	andlw	240
  2346  000D10  1016               	iorwf	HWI_4Digit_WRITE@value,w,c
  2347  000D12  6E83               	movwf	3971,c	;volatile
  2348                           
  2349                           ;HWI_DIGITAL.c: 17: break;
  2350  000D14  0012               	return	
  2351  000D16                     l1376:
  2352                           
  2353                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  2354  000D16  508C               	movf	3980,w,c	;volatile
  2355  000D18  0BF0               	andlw	240
  2356  000D1A  1016               	iorwf	HWI_4Digit_WRITE@value,w,c
  2357  000D1C  6E83               	movwf	3971,c	;volatile
  2358                           
  2359                           ;HWI_DIGITAL.c: 20: }
  2360  000D1E  0012               	return	
  2361  000D20                     l1378:
  2362  000D20  5017               	movf	HWI_4Digit_WRITE@port,w,c
  2363                           
  2364                           ; Switch size 1, requested type "space"
  2365                           ; Number of cases is 2, Range of values is 0 to 1
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            7     4 (average)
  2369                           ;	Chosen strategy is simple_byte
  2370  000D22  0A00               	xorlw	0	; case 0
  2371  000D24  B4D8               	btfsc	status,2,c
  2372  000D26  D7ED               	goto	l1372
  2373  000D28  0A01               	xorlw	1	; case 1
  2374  000D2A  B4D8               	btfsc	status,2,c
  2375  000D2C  D7EF               	goto	l1374
  2376  000D2E  D7F3               	goto	l1376
  2377  000D30                     __end_of_HWI_4Digit_WRITE:
  2378                           	opt stack 0
  2379                           tosu	equ	0xFFF
  2380                           tosh	equ	0xFFE
  2381                           tosl	equ	0xFFD
  2382                           pclath	equ	0xFFA
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postinc1	equ	0xFE6
  2392                           fsr1h	equ	0xFE2
  2393                           fsr1l	equ	0xFE1
  2394                           indf2	equ	0xFDF
  2395                           postinc2	equ	0xFDE
  2396                           postdec2	equ	0xFDD
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  2402 ;; Defined at:
  2403 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, status,2
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2417 ;;      Params:         0       0       0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0
  2419 ;;      Temps:          0       0       0       0       0       0       0
  2420 ;;      Totals:         0       0       0       0       0       0       0
  2421 ;;Total ram usage:        0 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; Hardware stack levels required when called:    4
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text19
  2432  000C52                     __ptext19:
  2433                           	opt stack 0
  2434  000C52                     _HWI_INTERRUPTS_INTITALIZE:
  2435                           	opt stack 26
  2436                           
  2437                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  2438                           
  2439                           ;incstack = 0
  2440  000C52  8093               	bsf	3987,0,c	;volatile
  2441                           
  2442                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  2443  000C54  8293               	bsf	3987,1,c	;volatile
  2444                           
  2445                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  2446  000C56  0EF0               	movlw	240
  2447  000C58  6EF2               	movwf	intcon,c	;volatile
  2448                           
  2449                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  2450  000C5A  0E08               	movlw	8
  2451  000C5C  6EF0               	movwf	intcon3,c	;volatile
  2452                           
  2453                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  2454  000C5E  0ED1               	movlw	209
  2455  000C60  6ED5               	movwf	4053,c	;volatile
  2456                           
  2457                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  2458  000C62  0E85               	movlw	133
  2459  000C64  6ECD               	movwf	4045,c	;volatile
  2460                           
  2461                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  2462  000C66  0E9D               	movlw	157
  2463  000C68  6EB1               	movwf	4017,c	;volatile
  2464                           
  2465                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  2466  000C6A  8CF1               	bsf	intcon2,6,c	;volatile
  2467                           
  2468                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  2469  000C6C  8AF1               	bsf	intcon2,5,c	;volatile
  2470                           
  2471                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  2472  000C6E  94F2               	bcf	intcon,2,c	;volatile
  2473                           
  2474                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  2475  000C70  8AF2               	bsf	intcon,5,c	;volatile
  2476                           
  2477                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  2478  000C72  909E               	bcf	3998,0,c	;volatile
  2479                           
  2480                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  2481  000C74  809D               	bsf	3997,0,c	;volatile
  2482                           
  2483                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  2484  000C76  92A1               	bcf	4001,1,c	;volatile
  2485                           
  2486                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  2487  000C78  82A0               	bsf	4000,1,c	;volatile
  2488                           
  2489                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  2490  000C7A  0E13               	movlw	19
  2491  000C7C  6ED6               	movwf	4054,c	;volatile
  2492                           
  2493                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  2494  000C7E  0E00               	movlw	0
  2495  000C80  6ECF               	movwf	4047,c	;volatile
  2496  000C82  0E00               	movlw	0
  2497  000C84  6ECE               	movwf	4046,c	;volatile
  2498                           
  2499                           ;HWI_Interrupts.c: 47: TMR3L=0;
  2500  000C86  0E00               	movlw	0
  2501  000C88  6EB2               	movwf	4018,c	;volatile
  2502                           
  2503                           ;HWI_Interrupts.c: 48: TMR3H=0;
  2504  000C8A  0E00               	movlw	0
  2505  000C8C  6EB3               	movwf	4019,c	;volatile
  2506  000C8E  0012               	return		;funcret
  2507  000C90                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  2508                           	opt stack 0
  2509                           tosu	equ	0xFFF
  2510                           tosh	equ	0xFFE
  2511                           tosl	equ	0xFFD
  2512                           pclath	equ	0xFFA
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           intcon	equ	0xFF2
  2520                           intcon2	equ	0xFF1
  2521                           intcon3	equ	0xFF0
  2522                           postinc0	equ	0xFEE
  2523                           wreg	equ	0xFE8
  2524                           postinc1	equ	0xFE6
  2525                           fsr1h	equ	0xFE2
  2526                           fsr1l	equ	0xFE1
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  2535 ;; Defined at:
  2536 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         0       0       0       0       0       0       0
  2554 ;;Total ram usage:        0 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    4
  2557 ;; This function calls:
  2558 ;;		Nothing
  2559 ;; This function is called by:
  2560 ;;		_main
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text20
  2565  000DF4                     __ptext20:
  2566                           	opt stack 0
  2567  000DF4                     _HWI_DIGITAL_INITIALIZE:
  2568                           	opt stack 26
  2569                           
  2570                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  2571                           
  2572                           ;incstack = 0
  2573  000DF4  0E00               	movlw	0
  2574  000DF6  6E95               	movwf	3989,c	;volatile
  2575                           
  2576                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  2577  000DF8  0E00               	movlw	0
  2578  000DFA  6E83               	movwf	3971,c	;volatile
  2579                           
  2580                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  2581  000DFC  0E00               	movlw	0
  2582  000DFE  6E94               	movwf	3988,c	;volatile
  2583  000E00  0012               	return		;funcret
  2584  000E02                     __end_of_HWI_DIGITAL_INITIALIZE:
  2585                           	opt stack 0
  2586                           tosu	equ	0xFFF
  2587                           tosh	equ	0xFFE
  2588                           tosl	equ	0xFFD
  2589                           pclath	equ	0xFFA
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           intcon2	equ	0xFF1
  2598                           intcon3	equ	0xFF0
  2599                           postinc0	equ	0xFEE
  2600                           wreg	equ	0xFE8
  2601                           postinc1	equ	0xFE6
  2602                           fsr1h	equ	0xFE2
  2603                           fsr1l	equ	0xFE1
  2604                           indf2	equ	0xFDF
  2605                           postinc2	equ	0xFDE
  2606                           postdec2	equ	0xFDD
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _CreateTask *****************
  2612 ;; Defined at:
  2613 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  MangeFunctio    2   21[COMRAM] PTR FTN()void 
  2616 ;;		 -> DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  2617 ;;  TaskId          1   23[COMRAM] unsigned char 
  2618 ;;  Period          1   24[COMRAM] unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2630 ;;      Params:         4       0       0       0       0       0       0
  2631 ;;      Locals:         0       0       0       0       0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0
  2633 ;;      Totals:         4       0       0       0       0       0       0
  2634 ;;Total ram usage:        4 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    4
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text21
  2645  000A06                     __ptext21:
  2646                           	opt stack 0
  2647  000A06                     _CreateTask:
  2648                           	opt stack 26
  2649                           
  2650                           ;Scheduler.c: 8: if(TaskId < 3)
  2651                           
  2652                           ;incstack = 0
  2653  000A06  0E03               	movlw	3
  2654  000A08  6018               	cpfslt	CreateTask@TaskId,c
  2655  000A0A  0012               	return	
  2656                           
  2657                           ;Scheduler.c: 9: {
  2658                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  2659  000A0C  5018               	movf	CreateTask@TaskId,w,c
  2660  000A0E  0D04               	mullw	4
  2661  000A10  0E3E               	movlw	low _ArrayTask
  2662  000A12  24F3               	addwf	prodl,w,c
  2663  000A14  6ED9               	movwf	fsr2l,c
  2664  000A16  0E00               	movlw	high _ArrayTask
  2665  000A18  20F4               	addwfc	prodh,w,c
  2666  000A1A  6EDA               	movwf	fsr2h,c
  2667  000A1C  C016  FFDE         	movff	CreateTask@MangeFunction,postinc2
  2668  000A20  C017  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  2669                           
  2670                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  2671  000A24  5018               	movf	CreateTask@TaskId,w,c
  2672  000A26  0D04               	mullw	4
  2673  000A28  0E02               	movlw	2
  2674  000A2A  26F3               	addwf	prodl,f,c
  2675  000A2C  0E00               	movlw	0
  2676  000A2E  22F4               	addwfc	prodh,f,c
  2677  000A30  0E3E               	movlw	low _ArrayTask
  2678  000A32  24F3               	addwf	prodl,w,c
  2679  000A34  6ED9               	movwf	fsr2l,c
  2680  000A36  0E00               	movlw	high _ArrayTask
  2681  000A38  20F4               	addwfc	prodh,w,c
  2682  000A3A  6EDA               	movwf	fsr2h,c
  2683  000A3C  C019  FFDF         	movff	CreateTask@Period,indf2
  2684                           
  2685                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  2686  000A40  5018               	movf	CreateTask@TaskId,w,c
  2687  000A42  0D04               	mullw	4
  2688  000A44  0E03               	movlw	3
  2689  000A46  26F3               	addwf	prodl,f,c
  2690  000A48  0E00               	movlw	0
  2691  000A4A  22F4               	addwfc	prodh,f,c
  2692  000A4C  0E3E               	movlw	low _ArrayTask
  2693  000A4E  24F3               	addwf	prodl,w,c
  2694  000A50  6ED9               	movwf	fsr2l,c
  2695  000A52  0E00               	movlw	high _ArrayTask
  2696  000A54  20F4               	addwfc	prodh,w,c
  2697  000A56  6EDA               	movwf	fsr2h,c
  2698  000A58  0E00               	movlw	0
  2699  000A5A  6EDF               	movwf	indf2,c
  2700  000A5C  0012               	return	
  2701  000A5E                     __end_of_CreateTask:
  2702                           	opt stack 0
  2703                           tosu	equ	0xFFF
  2704                           tosh	equ	0xFFE
  2705                           tosl	equ	0xFFD
  2706                           pclath	equ	0xFFA
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           intcon2	equ	0xFF1
  2715                           intcon3	equ	0xFF0
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postinc1	equ	0xFE6
  2719                           fsr1h	equ	0xFE2
  2720                           fsr1l	equ	0xFE1
  2721                           indf2	equ	0xFDF
  2722                           postinc2	equ	0xFDE
  2723                           postdec2	equ	0xFDD
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _APP_INITIALIZE *****************
  2729 ;; Defined at:
  2730 ;;		line 10 in file "../../../../Common/App/APP.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		None
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2744 ;;      Params:         0       0       0       0       0       0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0
  2746 ;;      Temps:          0       0       0       0       0       0       0
  2747 ;;      Totals:         0       0       0       0       0       0       0
  2748 ;;Total ram usage:        0 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    4
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text22
  2759  000E3E                     __ptext22:
  2760                           	opt stack 0
  2761  000E3E                     _APP_INITIALIZE:
  2762                           	opt stack 26
  2763                           
  2764                           ;incstack = 0
  2765  000E3E  0012               	return		;funcret
  2766  000E40                     __end_of_APP_INITIALIZE:
  2767                           	opt stack 0
  2768                           tosu	equ	0xFFF
  2769                           tosh	equ	0xFFE
  2770                           tosl	equ	0xFFD
  2771                           pclath	equ	0xFFA
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           intcon2	equ	0xFF1
  2780                           intcon3	equ	0xFF0
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postinc1	equ	0xFE6
  2784                           fsr1h	equ	0xFE2
  2785                           fsr1l	equ	0xFE1
  2786                           indf2	equ	0xFDF
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _ISR *****************
  2794 ;; Defined at:
  2795 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         0       0       0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0
  2811 ;;      Temps:         14       0       0       0       0       0       0
  2812 ;;      Totals:        14       0       0       0       0       0       0
  2813 ;;Total ram usage:       14 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    3
  2816 ;; This function calls:
  2817 ;;		_APP_ISR1
  2818 ;;		_APP_ISR2
  2819 ;;		_APP_ISR3
  2820 ;;		_SchedulerTick
  2821 ;; This function is called by:
  2822 ;;		Interrupt level 2
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	intcode
  2827  000008                     __pintcode:
  2828                           	opt stack 0
  2829  000008                     _ISR:
  2830                           	opt stack 22
  2831                           
  2832                           ;incstack = 0
  2833  000008  8261               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2834  00000A  ED82  F003         	call	int_func,f	;refresh shadow registers
  2835                           tosu	equ	0xFFF
  2836                           tosh	equ	0xFFE
  2837                           tosl	equ	0xFFD
  2838                           pclath	equ	0xFFA
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           intcon	equ	0xFF2
  2846                           intcon2	equ	0xFF1
  2847                           intcon3	equ	0xFF0
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           postinc1	equ	0xFE6
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           postinc2	equ	0xFDE
  2855                           postdec2	equ	0xFDD
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860                           	psect	intcode_body
  2861  000704                     __pintcode_body:
  2862                           	opt stack 22
  2863  000704                     int_func:
  2864                           	opt stack 22
  2865  000704  0006               	pop		; remove dummy address from shadow register refresh
  2866  000706  CFFA F008          	movff	pclath,??_ISR
  2867  00070A  CFFB F009          	movff	pclatu,??_ISR+1
  2868  00070E  CFE9 F00A          	movff	fsr0l,??_ISR+2
  2869  000712  CFEA F00B          	movff	fsr0h,??_ISR+3
  2870  000716  CFE1 F00C          	movff	fsr1l,??_ISR+4
  2871  00071A  CFE2 F00D          	movff	fsr1h,??_ISR+5
  2872  00071E  CFD9 F00E          	movff	fsr2l,??_ISR+6
  2873  000722  CFDA F00F          	movff	fsr2h,??_ISR+7
  2874  000726  CFF3 F010          	movff	prodl,??_ISR+8
  2875  00072A  CFF4 F011          	movff	prodh,??_ISR+9
  2876  00072E  CFF6 F012          	movff	tblptrl,??_ISR+10
  2877  000732  CFF7 F013          	movff	tblptrh,??_ISR+11
  2878  000736  CFF8 F014          	movff	tblptru,??_ISR+12
  2879  00073A  CFF5 F015          	movff	tablat,??_ISR+13
  2880                           
  2881                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  2882  00073E  A4F2               	btfss	intcon,2,c	;volatile
  2883  000740  D005               	goto	i2l1506
  2884                           
  2885                           ;HWI_Interrupts.c: 55: {
  2886                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  2887  000742  94F2               	bcf	intcon,2,c	;volatile
  2888                           
  2889                           ;HWI_Interrupts.c: 57: TMR0L=18;
  2890  000744  0E12               	movlw	18
  2891  000746  6ED6               	movwf	4054,c	;volatile
  2892                           
  2893                           ;HWI_Interrupts.c: 58: SchedulerTick();
  2894  000748  EC98  F006         	call	_SchedulerTick	;wreg free
  2895  00074C                     i2l1506:
  2896                           
  2897                           ;HWI_Interrupts.c: 59: }
  2898                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  2899  00074C  A2A1               	btfss	4001,1,c	;volatile
  2900  00074E  D005               	goto	i2l1512
  2901                           
  2902                           ;HWI_Interrupts.c: 61: {
  2903                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  2904  000750  92A1               	bcf	4001,1,c	;volatile
  2905                           
  2906                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  2907  000752  0EEF               	movlw	239
  2908  000754  6EB3               	movwf	4019,c	;volatile
  2909                           
  2910                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  2911  000756  0E00               	movlw	0
  2912  000758  6EB2               	movwf	4018,c	;volatile
  2913  00075A                     i2l1512:
  2914                           
  2915                           ;HWI_Interrupts.c: 65: }
  2916                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  2917  00075A  A09E               	btfss	3998,0,c	;volatile
  2918  00075C  D007               	goto	i2l1520
  2919                           
  2920                           ;HWI_Interrupts.c: 67: {
  2921                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  2922  00075E  909E               	bcf	3998,0,c	;volatile
  2923                           
  2924                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  2925  000760  0E00               	movlw	0
  2926  000762  6ECF               	movwf	4047,c	;volatile
  2927  000764  0E00               	movlw	0
  2928  000766  6ECE               	movwf	4046,c	;volatile
  2929                           
  2930                           ;HWI_Interrupts.c: 70: APP_ISR3();
  2931  000768  EC14  F007         	call	_APP_ISR3	;wreg free
  2932  00076C                     i2l1520:
  2933                           
  2934                           ;HWI_Interrupts.c: 71: }
  2935                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  2936  00076C  B29E               	btfsc	3998,1,c	;volatile
  2937                           
  2938                           ;HWI_Interrupts.c: 73: {
  2939                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  2940  00076E  929E               	bcf	3998,1,c	;volatile
  2941                           
  2942                           ;HWI_Interrupts.c: 76: }
  2943                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  2944  000770  A2F2               	btfss	intcon,1,c	;volatile
  2945  000772  D003               	goto	i2l1528
  2946                           
  2947                           ;HWI_Interrupts.c: 79: {
  2948                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  2949  000774  92F2               	bcf	intcon,1,c	;volatile
  2950                           
  2951                           ;HWI_Interrupts.c: 81: APP_ISR1();
  2952  000776  EC1A  F007         	call	_APP_ISR1	;wreg free
  2953  00077A                     i2l1528:
  2954                           
  2955                           ;HWI_Interrupts.c: 82: }
  2956                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  2957  00077A  A0F0               	btfss	intcon3,0,c	;volatile
  2958  00077C  D003               	goto	i2l243
  2959                           
  2960                           ;HWI_Interrupts.c: 85: {
  2961                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  2962  00077E  90F0               	bcf	intcon3,0,c	;volatile
  2963                           
  2964                           ;HWI_Interrupts.c: 87: APP_ISR2();
  2965  000780  EC17  F007         	call	_APP_ISR2	;wreg free
  2966  000784                     i2l243:
  2967  000784  C015  FFF5         	movff	??_ISR+13,tablat
  2968  000788  C014  FFF8         	movff	??_ISR+12,tblptru
  2969  00078C  C013  FFF7         	movff	??_ISR+11,tblptrh
  2970  000790  C012  FFF6         	movff	??_ISR+10,tblptrl
  2971  000794  C011  FFF4         	movff	??_ISR+9,prodh
  2972  000798  C010  FFF3         	movff	??_ISR+8,prodl
  2973  00079C  C00F  FFDA         	movff	??_ISR+7,fsr2h
  2974  0007A0  C00E  FFD9         	movff	??_ISR+6,fsr2l
  2975  0007A4  C00D  FFE2         	movff	??_ISR+5,fsr1h
  2976  0007A8  C00C  FFE1         	movff	??_ISR+4,fsr1l
  2977  0007AC  C00B  FFEA         	movff	??_ISR+3,fsr0h
  2978  0007B0  C00A  FFE9         	movff	??_ISR+2,fsr0l
  2979  0007B4  C009  FFFB         	movff	??_ISR+1,pclatu
  2980  0007B8  C008  FFFA         	movff	??_ISR,pclath
  2981  0007BC  9261               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2982  0007BE  0011               	retfie		f
  2983  0007C0                     __end_of_ISR:
  2984                           	opt stack 0
  2985                           tosu	equ	0xFFF
  2986                           tosh	equ	0xFFE
  2987                           tosl	equ	0xFFD
  2988                           pclatu	equ	0xFFB
  2989                           pclath	equ	0xFFA
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           intcon	equ	0xFF2
  2997                           intcon2	equ	0xFF1
  2998                           intcon3	equ	0xFF0
  2999                           postinc0	equ	0xFEE
  3000                           fsr0h	equ	0xFEA
  3001                           fsr0l	equ	0xFE9
  3002                           wreg	equ	0xFE8
  3003                           postinc1	equ	0xFE6
  3004                           fsr1h	equ	0xFE2
  3005                           fsr1l	equ	0xFE1
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _SchedulerTick *****************
  3014 ;; Defined at:
  3015 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3029 ;;      Params:         0       0       0       0       0       0       0
  3030 ;;      Locals:         1       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0
  3032 ;;      Totals:         1       0       0       0       0       0       0
  3033 ;;Total ram usage:        1 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_ISR
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text24
  3043  000D30                     __ptext24:
  3044                           	opt stack 0
  3045  000D30                     _SchedulerTick:
  3046                           	opt stack 24
  3047                           
  3048                           ;Scheduler.c: 18: unsigned char TaskIndex;
  3049                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 3 ; TaskIndex++)
  3050                           
  3051                           ;incstack = 0
  3052  000D30  0E00               	movlw	0
  3053  000D32  6E01               	movwf	SchedulerTick@TaskIndex,c
  3054  000D34                     i2l1140:
  3055  000D34  0E02               	movlw	2
  3056  000D36  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  3057  000D38  D001               	goto	i2l1144
  3058  000D3A  0012               	return	
  3059  000D3C                     i2l1144:
  3060                           
  3061                           ;Scheduler.c: 20: {
  3062                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  3063  000D3C  5001               	movf	SchedulerTick@TaskIndex,w,c
  3064  000D3E  0D04               	mullw	4
  3065  000D40  0E03               	movlw	3
  3066  000D42  26F3               	addwf	prodl,f,c
  3067  000D44  0E00               	movlw	0
  3068  000D46  22F4               	addwfc	prodh,f,c
  3069  000D48  0E3E               	movlw	low _ArrayTask
  3070  000D4A  24F3               	addwf	prodl,w,c
  3071  000D4C  6ED9               	movwf	fsr2l,c
  3072  000D4E  0E00               	movlw	high _ArrayTask
  3073  000D50  20F4               	addwfc	prodh,w,c
  3074  000D52  6EDA               	movwf	fsr2h,c
  3075  000D54  2ADF               	incf	indf2,f,c
  3076  000D56  2A01               	incf	SchedulerTick@TaskIndex,f,c
  3077  000D58  D7ED               	goto	i2l1140
  3078  000D5A                     __end_of_SchedulerTick:
  3079                           	opt stack 0
  3080                           tosu	equ	0xFFF
  3081                           tosh	equ	0xFFE
  3082                           tosl	equ	0xFFD
  3083                           pclatu	equ	0xFFB
  3084                           pclath	equ	0xFFA
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           intcon2	equ	0xFF1
  3093                           intcon3	equ	0xFF0
  3094                           postinc0	equ	0xFEE
  3095                           fsr0h	equ	0xFEA
  3096                           fsr0l	equ	0xFE9
  3097                           wreg	equ	0xFE8
  3098                           postinc1	equ	0xFE6
  3099                           fsr1h	equ	0xFE2
  3100                           fsr1l	equ	0xFE1
  3101                           indf2	equ	0xFDF
  3102                           postinc2	equ	0xFDE
  3103                           postdec2	equ	0xFDD
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           
  3108 ;; *************** function _APP_ISR3 *****************
  3109 ;; Defined at:
  3110 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3124 ;;      Params:         0       0       0       0       0       0       0
  3125 ;;      Locals:         0       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0
  3127 ;;      Totals:         0       0       0       0       0       0       0
  3128 ;;Total ram usage:        0 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    1
  3131 ;; This function calls:
  3132 ;;		_HWtimerCallback
  3133 ;; This function is called by:
  3134 ;;		_ISR
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text25
  3139  000E28                     __ptext25:
  3140                           	opt stack 0
  3141  000E28                     _APP_ISR3:
  3142                           	opt stack 23
  3143                           
  3144                           ;AppInterrupts.c: 20: HWtimerCallback();
  3145                           
  3146                           ;incstack = 0
  3147  000E28  EC06  F007         	call	_HWtimerCallback	;wreg free
  3148  000E2C  0012               	return		;funcret
  3149  000E2E                     __end_of_APP_ISR3:
  3150                           	opt stack 0
  3151                           tosu	equ	0xFFF
  3152                           tosh	equ	0xFFE
  3153                           tosl	equ	0xFFD
  3154                           pclatu	equ	0xFFB
  3155                           pclath	equ	0xFFA
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           intcon2	equ	0xFF1
  3164                           intcon3	equ	0xFF0
  3165                           postinc0	equ	0xFEE
  3166                           fsr0h	equ	0xFEA
  3167                           fsr0l	equ	0xFE9
  3168                           wreg	equ	0xFE8
  3169                           postinc1	equ	0xFE6
  3170                           fsr1h	equ	0xFE2
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _HWtimerCallback *****************
  3180 ;; Defined at:
  3181 ;;		line 124 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         0       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_APP_ISR3
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text26
  3209  000E0C                     __ptext26:
  3210                           	opt stack 0
  3211  000E0C                     _HWtimerCallback:
  3212                           	opt stack 23
  3213                           
  3214                           ;SpeedCalc.c: 126: if(TimerOVFLcount < 64)
  3215                           
  3216                           ;incstack = 0
  3217  000E0C  0E40               	movlw	64
  3218  000E0E  605B               	cpfslt	_TimerOVFLcount,c
  3219  000E10  0012               	return	
  3220                           
  3221                           ;SpeedCalc.c: 127: {
  3222                           ;SpeedCalc.c: 128: TimerOVFLcount++;
  3223  000E12  2A5B               	incf	_TimerOVFLcount,f,c
  3224  000E14  0012               	return	
  3225  000E16                     __end_of_HWtimerCallback:
  3226                           	opt stack 0
  3227                           tosu	equ	0xFFF
  3228                           tosh	equ	0xFFE
  3229                           tosl	equ	0xFFD
  3230                           pclatu	equ	0xFFB
  3231                           pclath	equ	0xFFA
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           intcon2	equ	0xFF1
  3240                           intcon3	equ	0xFF0
  3241                           postinc0	equ	0xFEE
  3242                           fsr0h	equ	0xFEA
  3243                           fsr0l	equ	0xFE9
  3244                           wreg	equ	0xFE8
  3245                           postinc1	equ	0xFE6
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           postdec2	equ	0xFDD
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _APP_ISR2 *****************
  3256 ;; Defined at:
  3257 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3271 ;;      Params:         0       0       0       0       0       0       0
  3272 ;;      Locals:         0       0       0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0
  3274 ;;      Totals:         0       0       0       0       0       0       0
  3275 ;;Total ram usage:        0 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    2
  3278 ;; This function calls:
  3279 ;;		_SensorTwoNotify
  3280 ;; This function is called by:
  3281 ;;		_ISR
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text27
  3286  000E2E                     __ptext27:
  3287                           	opt stack 0
  3288  000E2E                     _APP_ISR2:
  3289                           	opt stack 22
  3290                           
  3291                           ;AppInterrupts.c: 15: SensorTwoNotify();
  3292                           
  3293                           ;incstack = 0
  3294  000E2E  ECD3  F004         	call	_SensorTwoNotify	;wreg free
  3295  000E32  0012               	return		;funcret
  3296  000E34                     __end_of_APP_ISR2:
  3297                           	opt stack 0
  3298                           tosu	equ	0xFFF
  3299                           tosh	equ	0xFFE
  3300                           tosl	equ	0xFFD
  3301                           pclatu	equ	0xFFB
  3302                           pclath	equ	0xFFA
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           intcon2	equ	0xFF1
  3311                           intcon3	equ	0xFF0
  3312                           postinc0	equ	0xFEE
  3313                           fsr0h	equ	0xFEA
  3314                           fsr0l	equ	0xFE9
  3315                           wreg	equ	0xFE8
  3316                           postinc1	equ	0xFE6
  3317                           fsr1h	equ	0xFE2
  3318                           fsr1l	equ	0xFE1
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function _SensorTwoNotify *****************
  3327 ;; Defined at:
  3328 ;;		line 42 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;		None
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3342 ;;      Params:         0       0       0       0       0       0       0
  3343 ;;      Locals:         0       0       0       0       0       0       0
  3344 ;;      Temps:          0       0       0       0       0       0       0
  3345 ;;      Totals:         0       0       0       0       0       0       0
  3346 ;;Total ram usage:        0 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    1
  3349 ;; This function calls:
  3350 ;;		_ReloadHWtimer
  3351 ;;		i2___lwdiv
  3352 ;;		i2___wmul
  3353 ;; This function is called by:
  3354 ;;		_APP_ISR2
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text28
  3359  0009A6                     __ptext28:
  3360                           	opt stack 0
  3361  0009A6                     _SensorTwoNotify:
  3362                           	opt stack 22
  3363                           
  3364                           ;SpeedCalc.c: 44: if( (unsigned char)0 == NotifyFlag )
  3365                           
  3366                           ;incstack = 0
  3367  0009A6  505D               	movf	_NotifyFlag,w,c
  3368  0009A8  A4D8               	btfss	status,2,c
  3369  0009AA  D028               	goto	i2l1466
  3370                           
  3371                           ;SpeedCalc.c: 45: {
  3372                           ;SpeedCalc.c: 46: NotifyFlag = (unsigned char)1;
  3373  0009AC  0E01               	movlw	1
  3374  0009AE  6E5D               	movwf	_NotifyFlag,c
  3375                           
  3376                           ;SpeedCalc.c: 47: LapCounter++;
  3377  0009B0  2A5C               	incf	_LapCounter,f,c
  3378                           
  3379                           ;SpeedCalc.c: 48: LapTimeTenthMilli = ReloadHWtimer((unsigned char)1);
  3380  0009B2  0E01               	movlw	1
  3381  0009B4  EC48  F006         	call	_ReloadHWtimer
  3382  0009B8  C001  F056         	movff	?_ReloadHWtimer,_LapTimeTenthMilli
  3383  0009BC  C002  F057         	movff	?_ReloadHWtimer+1,_LapTimeTenthMilli+1
  3384                           
  3385                           ;SpeedCalc.c: 49: LapTimeTenthMilli /= 100;
  3386  0009C0  C056  F001         	movff	_LapTimeTenthMilli,i2___lwdiv@dividend
  3387  0009C4  C057  F002         	movff	_LapTimeTenthMilli+1,i2___lwdiv@dividend+1
  3388  0009C8  0E00               	movlw	0
  3389  0009CA  6E04               	movwf	i2___lwdiv@divisor+1,c
  3390  0009CC  0E64               	movlw	100
  3391  0009CE  6E03               	movwf	i2___lwdiv@divisor,c
  3392  0009D0  ECD8  F005         	call	i2___lwdiv	;wreg free
  3393  0009D4  C001  F056         	movff	?i2___lwdiv,_LapTimeTenthMilli
  3394  0009D8  C002  F057         	movff	?i2___lwdiv+1,_LapTimeTenthMilli+1
  3395                           
  3396                           ;SpeedCalc.c: 50: LapTimeTenthMilli +=
  3397                           ;SpeedCalc.c: 51: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  3398  0009DC  C05B  F001         	movff	_TimerOVFLcount,i2___wmul@multiplier
  3399  0009E0  6A02               	clrf	i2___wmul@multiplier+1,c
  3400  0009E2  0E02               	movlw	2
  3401  0009E4  6E04               	movwf	i2___wmul@multiplicand+1,c
  3402  0009E6  0E8F               	movlw	143
  3403  0009E8  6E03               	movwf	i2___wmul@multiplicand,c
  3404  0009EA  ECD3  F006         	call	i2___wmul	;wreg free
  3405  0009EE  5001               	movf	?i2___wmul,w,c
  3406  0009F0  2656               	addwf	_LapTimeTenthMilli,f,c
  3407  0009F2  5002               	movf	?i2___wmul+1,w,c
  3408  0009F4  2257               	addwfc	_LapTimeTenthMilli+1,f,c
  3409                           
  3410                           ;SpeedCalc.c: 52: TimerOVFLcount = (unsigned char)0;
  3411  0009F6  0E00               	movlw	0
  3412  0009F8  6E5B               	movwf	_TimerOVFLcount,c
  3413                           
  3414                           ;SpeedCalc.c: 53: }
  3415  0009FA  0012               	return	
  3416  0009FC                     i2l1466:
  3417                           
  3418                           ;SpeedCalc.c: 54: else
  3419                           ;SpeedCalc.c: 55: {
  3420                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  3421  0009FC  505C               	movf	_LapCounter,w,c
  3422  0009FE  B4D8               	btfsc	status,2,c
  3423  000A00  0012               	return	
  3424                           
  3425                           ;SpeedCalc.c: 57: {
  3426                           ;SpeedCalc.c: 58: LapCounter--;
  3427  000A02  065C               	decf	_LapCounter,f,c
  3428  000A04  0012               	return	
  3429  000A06                     __end_of_SensorTwoNotify:
  3430                           	opt stack 0
  3431                           tosu	equ	0xFFF
  3432                           tosh	equ	0xFFE
  3433                           tosl	equ	0xFFD
  3434                           pclatu	equ	0xFFB
  3435                           pclath	equ	0xFFA
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           intcon2	equ	0xFF1
  3444                           intcon3	equ	0xFF0
  3445                           postinc0	equ	0xFEE
  3446                           fsr0h	equ	0xFEA
  3447                           fsr0l	equ	0xFE9
  3448                           wreg	equ	0xFE8
  3449                           postinc1	equ	0xFE6
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function i2___wmul *****************
  3460 ;; Defined at:
  3461 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  multiplier      2    0[COMRAM] unsigned int 
  3464 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  __wmul          2    4[COMRAM] unsigned int 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  2    0[COMRAM] unsigned int 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0, prodl, prodh
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3476 ;;      Params:         4       0       0       0       0       0       0
  3477 ;;      Locals:         2       0       0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0
  3479 ;;      Totals:         6       0       0       0       0       0       0
  3480 ;;Total ram usage:        6 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_SensorTwoNotify
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text29
  3490  000DA6                     __ptext29:
  3491                           	opt stack 0
  3492  000DA6                     i2___wmul:
  3493                           	opt stack 22
  3494                           
  3495                           ;incstack = 0
  3496  000DA6  5001               	movf	i2___wmul@multiplier,w,c
  3497  000DA8  0203               	mulwf	i2___wmul@multiplicand,c
  3498  000DAA  CFF3 F005          	movff	prodl,i2___wmul@product
  3499  000DAE  CFF4 F006          	movff	prodh,i2___wmul@product+1
  3500  000DB2  5001               	movf	i2___wmul@multiplier,w,c
  3501  000DB4  0204               	mulwf	i2___wmul@multiplicand+1,c
  3502  000DB6  50F3               	movf	prodl,w,c
  3503  000DB8  2606               	addwf	i2___wmul@product+1,f,c
  3504  000DBA  5002               	movf	i2___wmul@multiplier+1,w,c
  3505  000DBC  0203               	mulwf	i2___wmul@multiplicand,c
  3506  000DBE  50F3               	movf	prodl,w,c
  3507  000DC0  2606               	addwf	i2___wmul@product+1,f,c
  3508  000DC2  C005  F001         	movff	i2___wmul@product,?i2___wmul
  3509  000DC6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  3510  000DCA  0012               	return	
  3511  000DCC                     __end_ofi2___wmul:
  3512                           	opt stack 0
  3513                           tosu	equ	0xFFF
  3514                           tosh	equ	0xFFE
  3515                           tosl	equ	0xFFD
  3516                           pclatu	equ	0xFFB
  3517                           pclath	equ	0xFFA
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           intcon2	equ	0xFF1
  3526                           intcon3	equ	0xFF0
  3527                           postinc0	equ	0xFEE
  3528                           fsr0h	equ	0xFEA
  3529                           fsr0l	equ	0xFE9
  3530                           wreg	equ	0xFE8
  3531                           postinc1	equ	0xFE6
  3532                           fsr1h	equ	0xFE2
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function i2___lwdiv *****************
  3542 ;; Defined at:
  3543 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        2    0[COMRAM] unsigned int 
  3546 ;;  divisor         2    2[COMRAM] unsigned int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3549 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  2    0[COMRAM] unsigned int 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3559 ;;      Params:         4       0       0       0       0       0       0
  3560 ;;      Locals:         3       0       0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0
  3562 ;;      Totals:         7       0       0       0       0       0       0
  3563 ;;Total ram usage:        7 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_SensorTwoNotify
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text30
  3573  000BB0                     __ptext30:
  3574                           	opt stack 0
  3575  000BB0                     i2___lwdiv:
  3576                           	opt stack 22
  3577                           
  3578                           ;incstack = 0
  3579  000BB0  0E00               	movlw	0
  3580  000BB2  6E06               	movwf	i2___lwdiv@quotient+1,c
  3581  000BB4  0E00               	movlw	0
  3582  000BB6  6E05               	movwf	i2___lwdiv@quotient,c
  3583  000BB8  5003               	movf	i2___lwdiv@divisor,w,c
  3584  000BBA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3585  000BBC  B4D8               	btfsc	status,2,c
  3586  000BBE  D01C               	goto	i2l691
  3587  000BC0  0E01               	movlw	1
  3588  000BC2  6E07               	movwf	i2___lwdiv@counter,c
  3589  000BC4  D004               	goto	i2l1438
  3590  000BC6                     i2l1436:
  3591  000BC6  90D8               	bcf	status,0,c
  3592  000BC8  3603               	rlcf	i2___lwdiv@divisor,f,c
  3593  000BCA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3594  000BCC  2A07               	incf	i2___lwdiv@counter,f,c
  3595  000BCE                     i2l1438:
  3596  000BCE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3597  000BD0  D7FA               	goto	i2l1436
  3598  000BD2                     i2l1440:
  3599  000BD2  90D8               	bcf	status,0,c
  3600  000BD4  3605               	rlcf	i2___lwdiv@quotient,f,c
  3601  000BD6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3602  000BD8  5003               	movf	i2___lwdiv@divisor,w,c
  3603  000BDA  5C01               	subwf	i2___lwdiv@dividend,w,c
  3604  000BDC  5004               	movf	i2___lwdiv@divisor+1,w,c
  3605  000BDE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3606  000BE0  A0D8               	btfss	status,0,c
  3607  000BE2  D005               	goto	i2l1448
  3608  000BE4  5003               	movf	i2___lwdiv@divisor,w,c
  3609  000BE6  5E01               	subwf	i2___lwdiv@dividend,f,c
  3610  000BE8  5004               	movf	i2___lwdiv@divisor+1,w,c
  3611  000BEA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3612  000BEC  8005               	bsf	i2___lwdiv@quotient,0,c
  3613  000BEE                     i2l1448:
  3614  000BEE  90D8               	bcf	status,0,c
  3615  000BF0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3616  000BF2  3203               	rrcf	i2___lwdiv@divisor,f,c
  3617  000BF4  2E07               	decfsz	i2___lwdiv@counter,f,c
  3618  000BF6  D7ED               	goto	i2l1440
  3619  000BF8                     i2l691:
  3620  000BF8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3621  000BFC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3622  000C00  0012               	return		;funcret
  3623  000C02                     __end_ofi2___lwdiv:
  3624                           	opt stack 0
  3625                           tosu	equ	0xFFF
  3626                           tosh	equ	0xFFE
  3627                           tosl	equ	0xFFD
  3628                           pclatu	equ	0xFFB
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon2	equ	0xFF1
  3638                           intcon3	equ	0xFF0
  3639                           postinc0	equ	0xFEE
  3640                           fsr0h	equ	0xFEA
  3641                           fsr0l	equ	0xFE9
  3642                           wreg	equ	0xFE8
  3643                           postinc1	equ	0xFE6
  3644                           fsr1h	equ	0xFE2
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _ReloadHWtimer *****************
  3654 ;; Defined at:
  3655 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  TimerId         1    wreg     unsigned char 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  TimerId         1    2[COMRAM] unsigned char 
  3660 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    0[COMRAM] unsigned short 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3670 ;;      Params:         2       0       0       0       0       0       0
  3671 ;;      Locals:         3       0       0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0
  3673 ;;      Totals:         5       0       0       0       0       0       0
  3674 ;;Total ram usage:        5 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_SensorTwoNotify
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text31
  3684  000C90                     __ptext31:
  3685                           	opt stack 0
  3686  000C90                     _ReloadHWtimer:
  3687                           	opt stack 22
  3688                           
  3689                           ;incstack = 0
  3690                           ;ReloadHWtimer@TimerId stored from wreg
  3691  000C90  6E03               	movwf	ReloadHWtimer@TimerId,c
  3692                           
  3693                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  3694  000C92  0E00               	movlw	0
  3695  000C94  6E05               	movwf	ReloadHWtimer@ElapsedTime+1,c
  3696  000C96  0E00               	movlw	0
  3697  000C98  6E04               	movwf	ReloadHWtimer@ElapsedTime,c
  3698                           
  3699                           ;HWI_Interrupts.c: 95: switch(TimerId)
  3700  000C9A  D009               	goto	i2l1412
  3701  000C9C                     i2l249:
  3702                           
  3703                           ;HWI_Interrupts.c: 98: case 1:
  3704                           ;HWI_Interrupts.c: 99: case 2:
  3705                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  3706  000C9C  CFCE F004          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  3707  000CA0  CFCF F005          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  3708                           
  3709                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  3710  000CA4  0E00               	movlw	0
  3711  000CA6  6ECF               	movwf	4047,c	;volatile
  3712  000CA8  0E00               	movlw	0
  3713  000CAA  6ECE               	movwf	4046,c	;volatile
  3714                           
  3715                           ;HWI_Interrupts.c: 105: }
  3716                           
  3717                           ;HWI_Interrupts.c: 104: break;
  3718                           
  3719                           ;HWI_Interrupts.c: 103: default:
  3720                           
  3721                           ;HWI_Interrupts.c: 102: break;
  3722  000CAC  D00A               	goto	i2l250
  3723  000CAE                     i2l1412:
  3724  000CAE  5003               	movf	ReloadHWtimer@TimerId,w,c
  3725                           
  3726                           ; Switch size 1, requested type "space"
  3727                           ; Number of cases is 3, Range of values is 0 to 2
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte           10     6 (average)
  3731                           ;	Chosen strategy is simple_byte
  3732  000CB0  0A00               	xorlw	0	; case 0
  3733  000CB2  B4D8               	btfsc	status,2,c
  3734  000CB4  D7F3               	goto	i2l249
  3735  000CB6  0A01               	xorlw	1	; case 1
  3736  000CB8  B4D8               	btfsc	status,2,c
  3737  000CBA  D7F0               	goto	i2l249
  3738  000CBC  0A03               	xorlw	3	; case 2
  3739  000CBE  B4D8               	btfsc	status,2,c
  3740  000CC0  D7ED               	goto	i2l249
  3741  000CC2                     i2l250:
  3742                           
  3743                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  3744  000CC2  C004  F001         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  3745  000CC6  C005  F002         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  3746  000CCA  0012               	return		;funcret
  3747  000CCC                     __end_of_ReloadHWtimer:
  3748                           	opt stack 0
  3749                           tosu	equ	0xFFF
  3750                           tosh	equ	0xFFE
  3751                           tosl	equ	0xFFD
  3752                           pclatu	equ	0xFFB
  3753                           pclath	equ	0xFFA
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           intcon2	equ	0xFF1
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           postinc1	equ	0xFE6
  3768                           fsr1h	equ	0xFE2
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _APP_ISR1 *****************
  3778 ;; Defined at:
  3779 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      void 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3793 ;;      Params:         0       0       0       0       0       0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0
  3796 ;;      Totals:         0       0       0       0       0       0       0
  3797 ;;Total ram usage:        0 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    1
  3800 ;; This function calls:
  3801 ;;		_SensorOneNotify
  3802 ;; This function is called by:
  3803 ;;		_ISR
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text32
  3808  000E34                     __ptext32:
  3809                           	opt stack 0
  3810  000E34                     _APP_ISR1:
  3811                           	opt stack 23
  3812                           
  3813                           ;AppInterrupts.c: 10: SensorOneNotify();
  3814                           
  3815                           ;incstack = 0
  3816  000E34  ECE6  F006         	call	_SensorOneNotify	;wreg free
  3817  000E38  0012               	return		;funcret
  3818  000E3A                     __end_of_APP_ISR1:
  3819                           	opt stack 0
  3820                           tosu	equ	0xFFF
  3821                           tosh	equ	0xFFE
  3822                           tosl	equ	0xFFD
  3823                           pclatu	equ	0xFFB
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           intcon2	equ	0xFF1
  3833                           intcon3	equ	0xFF0
  3834                           postinc0	equ	0xFEE
  3835                           fsr0h	equ	0xFEA
  3836                           fsr0l	equ	0xFE9
  3837                           wreg	equ	0xFE8
  3838                           postinc1	equ	0xFE6
  3839                           fsr1h	equ	0xFE2
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _SensorOneNotify *****************
  3849 ;; Defined at:
  3850 ;;		line 27 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3864 ;;      Params:         0       0       0       0       0       0       0
  3865 ;;      Locals:         0       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0
  3867 ;;      Totals:         0       0       0       0       0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_APP_ISR1
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text33
  3878  000DCC                     __ptext33:
  3879                           	opt stack 0
  3880  000DCC                     _SensorOneNotify:
  3881                           	opt stack 23
  3882                           
  3883                           ;SpeedCalc.c: 29: if( (unsigned char)1 == NotifyFlag )
  3884                           
  3885                           ;incstack = 0
  3886  000DCC  045D               	decf	_NotifyFlag,w,c
  3887  000DCE  A4D8               	btfss	status,2,c
  3888  000DD0  D003               	goto	i2l1096
  3889                           
  3890                           ;SpeedCalc.c: 30: {
  3891                           ;SpeedCalc.c: 31: NotifyFlag = (unsigned char)0;
  3892  000DD2  0E00               	movlw	0
  3893  000DD4  6E5D               	movwf	_NotifyFlag,c
  3894                           
  3895                           ;SpeedCalc.c: 32: }
  3896  000DD6  0012               	return	
  3897  000DD8                     i2l1096:
  3898                           
  3899                           ;SpeedCalc.c: 33: else
  3900                           ;SpeedCalc.c: 34: {
  3901                           ;SpeedCalc.c: 35: if(LapCounter != (unsigned char)0)
  3902  000DD8  505C               	movf	_LapCounter,w,c
  3903  000DDA  B4D8               	btfsc	status,2,c
  3904  000DDC  0012               	return	
  3905                           
  3906                           ;SpeedCalc.c: 36: {
  3907                           ;SpeedCalc.c: 37: LapCounter--;
  3908  000DDE  065C               	decf	_LapCounter,f,c
  3909  000DE0  0012               	return	
  3910  000DE2                     __end_of_SensorOneNotify:
  3911                           	opt stack 0
  3912                           tosu	equ	0xFFF
  3913                           tosh	equ	0xFFE
  3914                           tosl	equ	0xFFD
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           intcon2	equ	0xFF1
  3925                           intcon3	equ	0xFF0
  3926                           postinc0	equ	0xFEE
  3927                           fsr0h	equ	0xFEA
  3928                           fsr0l	equ	0xFE9
  3929                           wreg	equ	0xFE8
  3930                           postinc1	equ	0xFE6
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           tosu	equ	0xFFF
  3940                           tosh	equ	0xFFE
  3941                           tosl	equ	0xFFD
  3942                           pclatu	equ	0xFFB
  3943                           pclath	equ	0xFFA
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           intcon	equ	0xFF2
  3951                           intcon2	equ	0xFF1
  3952                           intcon3	equ	0xFF0
  3953                           postinc0	equ	0xFEE
  3954                           fsr0h	equ	0xFEA
  3955                           fsr0l	equ	0xFE9
  3956                           wreg	equ	0xFE8
  3957                           postinc1	equ	0xFE6
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967                           	psect	text34
  3968  000000                     __ptext34:
  3969                           	opt stack 0
  3970                           tosu	equ	0xFFF
  3971                           tosh	equ	0xFFE
  3972                           tosl	equ	0xFFD
  3973                           pclatu	equ	0xFFB
  3974                           pclath	equ	0xFFA
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           intcon2	equ	0xFF1
  3983                           intcon3	equ	0xFF0
  3984                           postinc0	equ	0xFEE
  3985                           fsr0h	equ	0xFEA
  3986                           fsr0l	equ	0xFE9
  3987                           wreg	equ	0xFE8
  3988                           postinc1	equ	0xFE6
  3989                           fsr1h	equ	0xFE2
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998                           	psect	rparam
  3999  0000                     tosu	equ	0xFFF
  4000                           tosh	equ	0xFFE
  4001                           tosl	equ	0xFFD
  4002                           pclatu	equ	0xFFB
  4003                           pclath	equ	0xFFA
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           postinc1	equ	0xFE6
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027                           	psect	temp
  4028  000061                     btemp:
  4029                           	opt stack 0
  4030  000061                     	ds	1
  4031  0000                     int$flags	set	btemp
  4032                           tosu	equ	0xFFF
  4033                           tosh	equ	0xFFE
  4034                           tosl	equ	0xFFD
  4035                           pclatu	equ	0xFFB
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           intcon2	equ	0xFF1
  4045                           intcon3	equ	0xFF0
  4046                           postinc0	equ	0xFEE
  4047                           fsr0h	equ	0xFEA
  4048                           fsr0l	equ	0xFE9
  4049                           wreg	equ	0xFE8
  4050                           postinc1	equ	0xFE6
  4051                           fsr1h	equ	0xFE2
  4052                           fsr1l	equ	0xFE1
  4053                           indf2	equ	0xFDF
  4054                           postinc2	equ	0xFDE
  4055                           postdec2	equ	0xFDD
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    11
    Data        2
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61      96
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    S105$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 


Critical Paths under _main in COMRAM

    _main->_RunScheduler
    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->i2___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4300
                     _APP_INITIALIZE
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (1) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunScheduler                                         2     2      0    3592
                                             59 COMRAM     2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (2) _ManageSpeedCalc                                      0     0      0     463
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (3) _SpeedCalcManage                                      2     2      0     463
                                             46 COMRAM     2     2      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _ManageApplication                                    0     0      0    2825
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (3) _APP_MANAGE                                           4     4      0    2825
                                             55 COMRAM     4     4      0
                      _BCDsendNumber
                        _GetAvgSpeed
                        _GetDistance
                   _SetCircumfirunce
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetCircumfirunce                                     2     0      2      86
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetDistance                                          4     0      4       0
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GetAvgSpeed                                          9     7      2     809
                                             46 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     322
                                             21 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     418
                                             33 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _BCDsendNumber                                       12     9      3    1389
                                             28 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     493
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayAlphaNumeric                                  0     0      0     304
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (3) _BCDManage7segment                                    3     3      0     304
                                             23 COMRAM     3     3      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (4) _HWI_8Digit_WRITE                                     2     1      1     152
                                             21 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _HWI_4Digit_WRITE                                     2     1      1     152
                                             21 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CreateTask                                           4     0      4     708
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _APP_INITIALIZE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0     514
                                              7 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (7) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (8) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR2                                             0     0      0     469
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (8) _SensorTwoNotify                                      0     0      0     469
                      _ReloadHWtimer
                          i2___lwdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) _ReloadHWtimer                                        5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (8) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_INITIALIZE
   _CreateTask
   _HWI_DIGITAL_INITIALIZE
   _HWI_INTERRUPTS_INTITALIZE
   _RunScheduler
     _DisplayAlphaNumeric *
       _BCDManage7segment
         _HWI_4Digit_WRITE
         _HWI_8Digit_WRITE
     _ManageApplication *
       _APP_MANAGE
         _BCDsendNumber
           ___lwdiv
           ___wmul
         _GetAvgSpeed
           ___lldiv
             ___lmul (ARG)
           ___lmul
         _GetDistance
         _SetCircumfirunce
         ___wmul
     _ManageSpeedCalc *
       _SpeedCalcManage
         ___lldiv
           ___lmul (ARG)
   _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
       i2___lwdiv
       i2___wmul
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      60       1       76.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60      15        0.0%
DATA                 0      0      60       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 09 18:55:52 2017

                                  l29 0632                   __end_of_GetAvgSpeed 0940  
                 ___wmul@multiplicand 0018                    i2___lwdiv@dividend 0001  
                         __CFG_BORV$3 000000                     GetAvgSpeed@bIsKph 0033  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                 __end_of_GetDistance 0DF4                           __CFG_OSC$XT 000000  
                         __CFG_LVP$ON 000000                                   l162 0D84  
                                 l164 0D8A                                   l165 0D90  
                                 l638 08BC                                   l691 0BA6  
                        __CFG_CPB$OFF 000000                          __CFG_CPD$OFF 000000  
                                 _ISR 0008                                   u554 0C18  
                                 u555 0C12                                   u668 0818  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                                  ?_ISR 0001  
                        __CFG_WDT$OFF 000000                                  l1310 0B80  
                                l1306 0B74                                  l1308 0B7C  
                                l1318 0B9C                                  l1342 061A  
                                l1270 0AC4                                  l1360 06BE  
                                l1328 08DE                                  l1362 06D6  
                                l1346 0622                                  l1274 0AD8  
                                l1372 0D02                                  l1356 068C  
                                l1284 086E                                  l1374 0D0C  
                                l1382 0D96                                  l1366 06DA  
                                l1286 087A                                  l1376 0D16  
                                l1296 08AE                                  l1288 087E  
                                l1378 0D20                                  l1482 07C0  
                                l1492 082C                                  l1484 07C4  
                                l1494 0848                                  l1488 07CC  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _TMR1 000FCE                                  _main 0B0A  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                  i2___lwdiv@quotient 0005                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0061                                  prodh 000FF4  
                                prodl 000FF3                     _BCDManage7segment 0C02  
                                start 000E                         __CFG_IESO$OFF 000000  
                  ?_BCDManage7segment 0001              __size_of_SpeedCalcManage 0056  
                        ___param_bank 000000                      __end_of_APP_ISR1 0E3A  
                    __end_of_APP_ISR2 0E34                      __end_of_APP_ISR3 0E2E  
                               ??_ISR 0008                   BCDsendNumber@Buffer 0026  
           _SpeedCalcNotifyInitialize 0E3C                   BCDsendNumber@Number 001D  
                 __size_of_APP_MANAGE 0066                   ??_BCDManage7segment 0018  
                 BCDsendNumber@Output 0024                                 ?_main 0001  
                          _CreateTask 0A06                       __end_of___lldiv 08CE  
                          _LapCounter 005C                                 _T0CON 000FD5  
                               _T1CON 000FCD                                 _T3CON 000FB1  
                     __end_of___lwdiv 0BB0                                 i2l250 0CC2  
                               i2l243 0784                                 i2l249 0C9C  
                               i2l691 0BF8                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR3L 000FB2  
                   _ManageApplication 0E1C                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISC 000F94  
                               _TRISD 000F95                         __CFG_PWRT$OFF 000000  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                       __CFG_WRT2$OFF 000000                   ___lmul@multiplicand 001A  
                       __CFG_WRT3$OFF 000000                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
                  ?_ManageApplication 0001                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                      __CFG_EBTRB$OFF 000000               CreateTask@MangeFunction 0016  
           BCDsendNumber@DecimalPlace 001F                                 pclath 000FFA  
                               tablat 000FF5                      __end_ofi2___wmul 0DCC  
                 ??_ManageApplication 003C                     ?_HWI_8Digit_WRITE 0016  
           __end_of_BCDManage7segment 0C52                                 status 000FD8  
               __end_of_BCDsendNumber 0704       __size_of_HWI_DIGITAL_INITIALIZE 000E  
                  ??_HWI_8Digit_WRITE 0017                    __size_ofi2___lwdiv 0052  
                         _GetAvgSpeed 08CE                        __CFG_MCLRE$OFF 000000  
                     __initialization 0CCC                           _GetDistance 0DE2  
                        __end_of_main 0B5E             __end_of_ManageApplication 0E22  
                              ??_main 003E                         __activetblptr 000002  
                              _INT0IF 007F91                                _INT1IF 007F80  
                              i2l1140 0D34                                i2l1144 0D3C  
                              i2l1412 0CAE                                i2l1096 0DD8  
                              i2l1440 0BD2                                i2l1520 076C  
                              i2l1512 075A                                i2l1506 074C  
                              i2l1436 0BC6                                i2l1438 0BCE  
                              i2l1448 0BEE                                i2l1528 077A  
                              i2l1466 09FC           BCDManage7segment@DigitIndex 005E  
                              _INTCON 000FF2              __size_of_SensorOneNotify 0016  
            __size_of_ManageSpeedCalc 0006                  HWI_8Digit_WRITE@port 0017  
                              _TMR0IE 007F95                                _TMR0IF 007F92  
                              _TMR1IE 007CE8                                _TMR1IF 007CF0  
                              _TMR2IF 007CF1                                _TMR3IE 007D01  
                              _TMR3IF 007D09                   _DisplayAlphaNumeric 0E16  
                      __CFG_XINST$OFF 000000                            _NotifyFlag 005D  
                              ___lmul 0AB4                                ___wmul 0D5A  
                      __CFG_STVREN$ON 000000                             ??___lldiv 002A  
                           ??___lwdiv 001A                                clear_0 0CEA  
                   ??_SpeedCalcManage 002F                           ?_CreateTask 0016  
              _HWI_DIGITAL_INITIALIZE 0DF4                      CreateTask@Period 0019  
                    CreateTask@TaskId 0018                          __pdataCOMRAM 005F  
                ?_DisplayAlphaNumeric 0001                     __end_ofi2___lwdiv 0C02  
                        __mediumconst 0000              __size_of_SensorTwoNotify 0060  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                          ??_APP_MANAGE 0038  
                           ?_APP_ISR1 0001                             ?_APP_ISR2 0001  
                           ?_APP_ISR3 0001                __size_of_SchedulerTick 002A  
            ReloadHWtimer@ElapsedTime 0004            __size_of_BCDManage7segment 0050  
                          __accesstop 0080               __end_of__initialization 0CF0  
                     __CFG_PBADEN$OFF 000000                     ?_SetCircumfirunce 0016  
                       ___rparam_used 000001                    ??_SetCircumfirunce 0018  
                      _TimerOVFLcount 005B                        __pcstackCOMRAM 0001  
                   BCDsendNumber@Link 0022             GetAvgSpeed@AvgSpeedKphMph 0031  
           __size_of_HWI_4Digit_WRITE 0032            __size_of_ManageApplication 0006  
                  __end_of_APP_MANAGE 09A6                             ?i2___wmul 0001  
               ??_DisplayAlphaNumeric 001B  SpeedCalcManage@HundredMeterReference 002F  
            __size_of_HWtimerCallback 000A    __size_of_SpeedCalcNotifyInitialize 0002  
              __size_of_ReloadHWtimer 003C                            ??_APP_ISR1 0001  
                          ??_APP_ISR2 0008                            ??_APP_ISR3 0001  
                        _CircumFactor 005F                   __size_of_CreateTask 0058  
                   ??_SensorOneNotify 0001                     ??_ManageSpeedCalc 0031  
             __size_of_APP_INITIALIZE 0002                               ?___lmul 0016  
              SetCircumfirunce@Circum 0016                               ?___wmul 0016  
                       _SchedulerTick 0D30                        ___lmul@product 001E  
  __size_of_HWI_INTERRUPTS_INTITALIZE 003E            ?_HWI_INTERRUPTS_INTITALIZE 0001  
                          ??i2___wmul 0005                               _INTCON3 000FF0  
               HWI_8Digit_WRITE@value 0016                     ??_SensorTwoNotify 0008  
                             __Hparam 0000                          ?_GetAvgSpeed 002F  
                           _BCDNumber 004A                               __Lparam 0000  
                        ?_GetDistance 0016                       __size_of___lmul 0056  
                       _ReloadHWtimer 0C90                        ?_SchedulerTick 0001  
                             ___lldiv 084C                       __size_of___wmul 0026  
                             ___lwdiv 0B5E                          __psmallconst 0600  
           __size_of_HWI_8Digit_WRITE 0026                               __pcinit 0CCC  
                             __ramtop 0600                               __ptext0 0B0A  
                             __ptext1 0E3C                               __ptext2 07C0  
                             __ptext3 0E16                               __ptext4 0E1C  
                             __ptext5 0E22                               __ptext6 0A5E  
                             __ptext7 0940                               __ptext8 0E02  
                             __ptext9 0DE2     __end_of_HWI_INTERRUPTS_INTITALIZE 0C90  
                        __size_of_ISR 07B8                         ?_RunScheduler 0001  
              SchedulerTick@TaskIndex 0001                        __pintcode_body 0704  
                end_of_initialization 0CF0                     ??_HWtimerCallback 0001  
                       __Lmediumconst 0000                               int_func 0704  
                 i2___wmul@multiplier 0001                       _SevenSegmentMAP 0601  
                     ___lldiv@divisor 0026                       _SpeedCalcManage 0A5E  
                     ___lldiv@counter 002E                        ?_ReloadHWtimer 0001  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
             ?_HWI_DIGITAL_INITIALIZE 0001           APP_MANAGE@TravelledDistance 003A  
                    _HWI_4Digit_WRITE 0CFE                          ??_CreateTask 001A  
              __size_of_BCDsendNumber 00F6                        ??_RunScheduler 003C  
                           _TRISBbits 000F93                     i2___lwdiv@divisor 0003  
                           i2___lwdiv 0BB0                     i2___lwdiv@counter 0007  
                   __size_of_APP_ISR1 0006                     __size_of_APP_ISR2 0006  
                   __size_of_APP_ISR3 0006                    __end_of_CreateTask 0A5E  
                      _APP_INITIALIZE 0E3E                        _DistTravelCntr 0052  
                     ??_SchedulerTick 0001                     _LapTimeTenthMilli 0056  
      __end_of_HWI_DIGITAL_INITIALIZE 0E02                        __end_of___lmul 0B0A  
                      __end_of___wmul 0D80                         __pidataCOMRAM 0E3A  
                           _ArrayTask 003E             __size_of_SetCircumfirunce 000A  
                    i2___wmul@product 0005                   start_initialization 0CCC  
                         __end_of_ISR 07C0                     __size_ofi2___wmul 0026  
                     _SensorOneNotify 0DCC                            ?i2___lwdiv 0001  
             __end_of_SevenSegmentMAP 060C                       _ManageSpeedCalc 0E22  
             __end_of_SpeedCalcManage 0AB4                __end_of_APP_INITIALIZE 0E40  
                       _BCDsendNumber 060E                       ??_ReloadHWtimer 0003  
                            ??___lmul 001E                              ??___wmul 001A  
                __size_of_GetAvgSpeed 0072           __end_of_DisplayAlphaNumeric 0E1C  
                    __CFG_LPT1OSC$OFF 000000                  __size_of_GetDistance 0012  
                    _HWI_8Digit_WRITE 0D80           ??_HWI_INTERRUPTS_INTITALIZE 0016  
                     _SensorTwoNotify 09A6                           __pbssCOMRAM 003E  
              BCDsendNumber@LoopIndex 0028                 APP_MANAGE@AvgSpeedKph 0038  
               RunScheduler@TaskIndex 005A                        ?_BCDsendNumber 001D  
                     ?_APP_INITIALIZE 0001                      ___lwdiv@dividend 0016  
                __end_of_RunScheduler 084C                     __CFG_CCP2MX$PORTC 000000  
                           __pintcode 0008                              ?___lldiv 0022  
                            ?___lwdiv 0016                       _HWtimerCallback 0E0C  
                         __smallconst 0600               __end_of_SensorOneNotify 0DE2  
             __end_of_ManageSpeedCalc 0E28                 HWI_4Digit_WRITE@value 0016  
                    ___lwdiv@quotient 001A                           ??i2___lwdiv 0005  
            __end_of_HWI_4Digit_WRITE 0D30                              _APP_ISR1 0E34  
                            _APP_ISR2 0E2E                              _APP_ISR3 0E28  
          ?_SpeedCalcNotifyInitialize 0001                      ?_SpeedCalcManage 0001  
           _HWI_INTERRUPTS_INTITALIZE 0C52                  ReloadHWtimer@TimerId 0003  
                      ___wmul@product 001A                      __CFG_WDTPS$32768 000000  
             __end_of_SensorTwoNotify 0A06                      _SetCircumfirunce 0E02  
                   ___wmul@multiplier 0016                              i2___wmul 0DA6  
                   ___lmul@multiplier 0016                           _INTCON2bits 000FF1  
                     ??_BCDsendNumber 0020     __end_of_SpeedCalcNotifyInitialize 0E3E  
                            __Hrparam 0000                              __Lrparam 0000  
                  __CFG_BOREN$SBORDIS 000000               __end_of_HWtimerCallback 0E16  
               i2___wmul@multiplicand 0003                      __size_of___lldiv 0082  
                    __size_of___lwdiv 0052                      ?_SensorOneNotify 0001  
                    ?_ManageSpeedCalc 0001                       ___lwdiv@divisor 0018  
                     ___lwdiv@counter 001C                              __ptext10 08CE  
                            __ptext11 0AB4                              __ptext20 0DF4  
                            __ptext12 084C                              __ptext21 0A06  
                            __ptext13 060E                              __ptext30 0BB0  
                            __ptext22 0E3E                              __ptext14 0D5A  
                            __ptext31 0C90                              __ptext15 0B5E  
                            __ptext32 0E34                              __ptext24 0D30  
                            __ptext16 0C02                              __ptext33 0DCC  
                            __ptext25 0E28                              __ptext17 0D80  
                            __ptext34 0000                              __ptext26 0E0C  
                            __ptext18 0CFE                              __ptext27 0E2E  
                            __ptext19 0C52                              __ptext28 09A6  
                            __ptext29 0DA6                            _APP_MANAGE 0940  
            __end_of_HWI_8Digit_WRITE 0DA6                    _LapDistanceCounter 0058  
               __size_of_RunScheduler 008C                  HWI_4Digit_WRITE@port 0017  
                       __size_of_main 0054                              int$flags 0061  
               __end_of_SchedulerTick 0D5A                      ?_SensorTwoNotify 0001  
             GetAvgSpeed@KphMphFactor 0034                          _RunScheduler 07C0  
                    ??_APP_INITIALIZE 0016                              intlevel2 0000  
                    ___lldiv@dividend 0022                         ??_GetAvgSpeed 0031  
                       ??_GetDistance 001A                 __end_of_ReloadHWtimer 0CCC  
                    ?_HWtimerCallback 0001                      ___lldiv@quotient 002A  
        __size_of_DisplayAlphaNumeric 0006                           ?_APP_MANAGE 0001  
         ??_SpeedCalcNotifyInitialize 0016                     ?_HWI_4Digit_WRITE 0016  
            __end_of_SetCircumfirunce 0E0C              ??_HWI_DIGITAL_INITIALIZE 0016  
                  ??_HWI_4Digit_WRITE 0017  
