

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jul 04 01:28:23 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.41
    65                           ; Generated 25/01/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4520 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  00177E                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _CircumFactor
   104  00177E  00C8               	dw	200
   105                           
   106                           	psect	smallconst
   107  000600                     __psmallconst:
   108                           	opt stack 0
   109  000600  00                 	db	0
   110  000601                     _Segment7ASCIItable:
   111                           	opt stack 0
   112  000601  EE                 	db	238
   113  000602  3E                 	db	62
   114  000603  9C                 	db	156
   115  000604  7A                 	db	122
   116  000605  9E                 	db	158
   117  000606  8E                 	db	142
   118  000607  F6                 	db	246
   119  000608  2E                 	db	46
   120  000609  0C                 	db	12
   121  00060A  78                 	db	120
   122  00060B  00                 	db	0
   123  00060C  00                 	db	0
   124  00060D  00                 	db	0
   125  00060E  00                 	db	0
   126  00060F  00                 	db	0
   127  000610  00                 	db	0
   128  000611  00                 	db	0
   129  000612  00                 	db	0
   130  000613  B6                 	db	182
   131  000614  00                 	db	0
   132  000615  00                 	db	0
   133  000616  7C                 	db	124
   134  000617  00                 	db	0
   135  000618  00                 	db	0
   136  000619  00                 	db	0
   137  00061A  00                 	db	0
   138  00061B                     __end_of_Segment7ASCIItable:
   139                           	opt stack 0
   140  00061B                     _KeyArrayConfig:
   141                           	opt stack 0
   142  00061B  0F                 	db	15
   143  00061C  00                 	db	0
   144  00061D  0006               	dw	6
   145  00061F  0006               	dw	6
   146  000621  0064               	dw	100
   147  000623  10                 	db	16
   148  000624  00                 	db	0
   149  000625  0006               	dw	6
   150  000627  0006               	dw	6
   151  000629  0064               	dw	100
   152  00062B  11                 	db	17
   153  00062C  00                 	db	0
   154  00062D  0006               	dw	6
   155  00062F  0006               	dw	6
   156  000631  0064               	dw	100
   157  000633                     __end_of_KeyArrayConfig:
   158                           	opt stack 0
   159  000633                     _SevenSegmentMAP:
   160                           	opt stack 0
   161  000633  FC                 	db	252
   162  000634  60                 	db	96
   163  000635  DA                 	db	218
   164  000636  F2                 	db	242
   165  000637  66                 	db	102
   166  000638  B6                 	db	182
   167  000639  BE                 	db	190
   168  00063A  E0                 	db	224
   169  00063B  FE                 	db	254
   170  00063C  F6                 	db	246
   171  00063D  01                 	db	1
   172  00063E                     __end_of_SevenSegmentMAP:
   173                           	opt stack 0
   174  0000                     _TMR1	set	4046
   175  0000                     _TMR3H	set	4019
   176  0000                     _TMR3L	set	4018
   177  0000                     _TMR0L	set	4054
   178  0000                     _INTCON2bits	set	4081
   179  0000                     _T3CON	set	4017
   180  0000                     _T1CON	set	4045
   181  0000                     _T0CON	set	4053
   182  0000                     _INTCON3	set	4080
   183  0000                     _INTCON	set	4082
   184  0000                     _PORTBbits	set	3969
   185  0000                     _TRISBbits	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _TRISD	set	3989
   188  0000                     _LATD	set	3980
   189  0000                     _PORTD	set	3971
   190  0000                     _LATC	set	3979
   191  0000                     _PORTC	set	3970
   192  0000                     _EECON2	set	4007
   193  0000                     _INTCONbits	set	4082
   194  0000                     _EEDATA	set	4008
   195  0000                     _EEADR	set	4009
   196  0000                     _EECON1bits	set	4006
   197  0000                     _INT1IF	set	32640
   198  0000                     _INT0IF	set	32657
   199  0000                     _TMR2IF	set	31985
   200  0000                     _TMR3IE	set	32001
   201  0000                     _TMR3IF	set	32009
   202  0000                     _TMR1IE	set	31976
   203  0000                     _TMR1IF	set	31984
   204  0000                     _TMR0IE	set	32661
   205  0000                     _TMR0IF	set	32658
   206                           
   207                           ; #config settings
   208  00063E  00                 	db	0	; dummy byte at the end
   209  0000                     
   210                           	psect	cinit
   211  001456                     __pcinit:
   212                           	opt stack 0
   213  001456                     start_initialization:
   214                           	opt stack 0
   215  001456                     __initialization:
   216                           	opt stack 0
   217                           
   218                           ; Initialize objects allocated to COMRAM (2 bytes)
   219                           ; load TBLPTR registers with __pidataCOMRAM
   220  001456  0E7E               	movlw	low __pidataCOMRAM
   221  001458  6EF6               	movwf	tblptrl,c
   222  00145A  0E17               	movlw	high __pidataCOMRAM
   223  00145C  6EF7               	movwf	tblptrh,c
   224  00145E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   225  001460  6EF8               	movwf	tblptru,c
   226  001462  0009               	tblrd		*+	;fetch initializer
   227  001464  CFF5 F06A          	movff	tablat,__pdataCOMRAM
   228  001468  0009               	tblrd		*+	;fetch initializer
   229  00146A  CFF5 F06B          	movff	tablat,__pdataCOMRAM+1
   230                           
   231                           ; Clear objects allocated to BANK0 (66 bytes)
   232  00146E  EE00  F080         	lfsr	0,__pbssBANK0
   233  001472  0E42               	movlw	66
   234  001474                     clear_0:
   235  001474  6AEE               	clrf	postinc0,c
   236  001476  06E8               	decf	wreg,f,c
   237  001478  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to COMRAM (51 bytes)
   240  00147A  EE00  F037         	lfsr	0,__pbssCOMRAM
   241  00147E  0E33               	movlw	51
   242  001480                     clear_1:
   243  001480  6AEE               	clrf	postinc0,c
   244  001482  06E8               	decf	wreg,f,c
   245  001484  E1FD               	bnz	clear_1
   246  001486                     end_of_initialization:
   247                           	opt stack 0
   248  001486                     __end_of__initialization:
   249                           	opt stack 0
   250  001486  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   251  001488  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   252  00148A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   253  00148C  6EF8               	movwf	tblptru,c
   254  00148E  0100               	movlb	0
   255  001490  EFA5  F00B         	goto	_main	;jump to C main() function
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssCOMRAM
   264  000037                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000037                     _BCDAlpha:
   267                           	opt stack 0
   268  000037                     	ds	8
   269  00003F                     _DistTravelCntr:
   270                           	opt stack 0
   271  00003F                     	ds	4
   272  000043                     _HWtimerCount:
   273                           	opt stack 0
   274  000043                     	ds	2
   275  000045                     _LapTimeTenthMilli:
   276                           	opt stack 0
   277  000045                     	ds	2
   278  000047                     _LapDistanceCounter:
   279                           	opt stack 0
   280  000047                     	ds	2
   281  000049                     _WriteFnCallback:
   282                           	opt stack 0
   283  000049                     	ds	2
   284  00004B                     APP_MANAGE@bIsBlinkMode:
   285                           	opt stack 0
   286  00004B                     	ds	2
   287  00004D                     APP_MANAGE@blinkIndex:
   288                           	opt stack 0
   289  00004D                     	ds	2
   290  00004F                     RunScheduler@TaskIndex:
   291                           	opt stack 0
   292  00004F                     	ds	1
   293  000050                     _HwTimerOVFLcount:
   294                           	opt stack 0
   295  000050                     	ds	1
   296  000051                     _TimerOVFLcount:
   297                           	opt stack 0
   298  000051                     	ds	1
   299  000052                     _LapCounter:
   300                           	opt stack 0
   301  000052                     	ds	1
   302  000053                     _NotifyFlag:
   303                           	opt stack 0
   304  000053                     	ds	1
   305  000054                     EepromManage@WriteIndex:
   306                           	opt stack 0
   307  000054                     	ds	1
   308  000055                     _DataSize:
   309                           	opt stack 0
   310  000055                     	ds	1
   311  000056                     _EEPROMaddr:
   312                           	opt stack 0
   313  000056                     	ds	1
   314  000057                     _WriteRequest:
   315                           	opt stack 0
   316  000057                     	ds	1
   317  000058                     BCDManage7segment@BlinkCounter:
   318                           	opt stack 0
   319  000058                     	ds	1
   320  000059                     _BlinkFlag:
   321                           	opt stack 0
   322  000059                     	ds	1
   323  00005A                     _BlinkDuration:
   324                           	opt stack 0
   325  00005A                     	ds	1
   326  00005B                     _BlinkIndex:
   327                           	opt stack 0
   328  00005B                     	ds	1
   329  00005C                     _bIsAnodeUsed:
   330                           	opt stack 0
   331  00005C                     	ds	1
   332  00005D                     _WriteFlag:
   333                           	opt stack 0
   334  00005D                     	ds	1
   335  00005E                     _KeyInternalData:
   336                           	opt stack 0
   337  00005E                     	ds	9
   338  000067                     _Circum:
   339                           	opt stack 0
   340  000067                     	ds	2
   341  000069                     BCDManage7segment@DigitIndex:
   342                           	opt stack 0
   343  000069                     	ds	1
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           
   351                           	psect	dataCOMRAM
   352  00006A                     __pdataCOMRAM:
   353                           	opt stack 0
   354  00006A                     _CircumFactor:
   355                           	opt stack 0
   356  00006A                     	ds	2
   357                           tblptru	equ	0xFF8
   358                           tblptrh	equ	0xFF7
   359                           tblptrl	equ	0xFF6
   360                           tablat	equ	0xFF5
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	bssBANK0
   365  000080                     __pbssBANK0:
   366                           	opt stack 0
   367  000080                     _DataArray:
   368                           	opt stack 0
   369  000080                     	ds	50
   370  0000B2                     _ArrayTask:
   371                           	opt stack 0
   372  0000B2                     	ds	16
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380                           	psect	cstackBANK0
   381  0000C2                     __pcstackBANK0:
   382                           	opt stack 0
   383  0000C2                     APP_MANAGE@AvgSpeedKph:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x0
   387  0000C2                     	ds	2
   388  0000C4                     APP_MANAGE@keystatus2:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x2
   392  0000C4                     	ds	1
   393  0000C5                     APP_MANAGE@TravelledDistance:
   394                           	opt stack 0
   395                           
   396                           ; 4 bytes @ 0x3
   397  0000C5                     	ds	4
   398  0000C9                     APP_MANAGE@keystatus:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x7
   402  0000C9                     	ds	1
   403  0000CA                     
   404                           ; 1 bytes @ 0x8
   405  0000CA                     	ds	2
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	cstackCOMRAM
   414  000001                     __pcstackCOMRAM:
   415                           	opt stack 0
   416  000001                     ?_ReloadHWtimer:
   417                           	opt stack 0
   418  000001                     SchedulerTick@TaskIndex:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x0
   422  000001                     	ds	2
   423  000003                     ReloadHWtimer@TimerId:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x2
   427  000003                     	ds	1
   428  000004                     ReloadHWtimer@ElapsedTime:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x3
   432  000004                     	ds	2
   433  000006                     ??_ISR:
   434                           
   435                           ; 1 bytes @ 0x5
   436  000006                     	ds	14
   437  000014                     ?___wmul:
   438                           	opt stack 0
   439  000014                     ?___lwdiv:
   440                           	opt stack 0
   441  000014                     ?_GetDistance:
   442                           	opt stack 0
   443  000014                     ?___lmul:
   444                           	opt stack 0
   445  000014                     BCDInitialize@bIsCommonAnode:
   446                           	opt stack 0
   447  000014                     BlinkDigit@duration:
   448                           	opt stack 0
   449  000014                     GetKeyStatus@KeyStatus:
   450                           	opt stack 0
   451  000014                     HWIeeprom_Write@Data:
   452                           	opt stack 0
   453  000014                     HWI_4Digit_WRITE@value:
   454                           	opt stack 0
   455  000014                     HWI_8Digit_WRITE@value:
   456                           	opt stack 0
   457  000014                     HWI_DIGI_READ@pin:
   458                           	opt stack 0
   459  000014                     Eeprom_Write_Block@DataPtr:
   460                           	opt stack 0
   461  000014                     SetCircumfirunce@Circum:
   462                           	opt stack 0
   463  000014                     CreateTask@MangeFunction:
   464                           	opt stack 0
   465  000014                     HWIeeprom_Read@Data:
   466                           	opt stack 0
   467  000014                     ___wmul@multiplier:
   468                           	opt stack 0
   469  000014                     ___lwdiv@dividend:
   470                           	opt stack 0
   471  000014                     ___lmul@multiplier:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x13
   475  000014                     	ds	1
   476  000015                     BlinkDigit@Index:
   477                           	opt stack 0
   478  000015                     GetKeyStatus@KeyID:
   479                           	opt stack 0
   480  000015                     HWIeeprom_Write@address:
   481                           	opt stack 0
   482  000015                     HWI_4Digit_WRITE@port:
   483                           	opt stack 0
   484  000015                     HWI_8Digit_WRITE@port:
   485                           	opt stack 0
   486  000015                     HWI_DIGI_READ@HWIread:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x14
   490  000015                     	ds	1
   491  000016                     ??_BCDManage7segment:
   492  000016                     Eeprom_Write_Block@BlockSize:
   493                           	opt stack 0
   494  000016                     CreateTask@TaskId:
   495                           	opt stack 0
   496  000016                     HWIeeprom_Write@WriteSuccess:
   497                           	opt stack 0
   498  000016                     HWIeeprom_Read@address:
   499                           	opt stack 0
   500  000016                     ___wmul@multiplicand:
   501                           	opt stack 0
   502  000016                     ___lwdiv@divisor:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x15
   506  000016                     	ds	1
   507  000017                     EepromManage@WriteSuccess:
   508                           	opt stack 0
   509  000017                     CreateTask@Period:
   510                           	opt stack 0
   511  000017                     HWIeeprom_Read@ReadSuccess:
   512                           	opt stack 0
   513  000017                     Eeprom_Write_Block@ptrFnCallback:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x16
   517  000017                     	ds	1
   518  000018                     BCDManage7segment@Index:
   519                           	opt stack 0
   520  000018                     MangeKeys@KeyState:
   521                           	opt stack 0
   522  000018                     ___lwdiv@counter:
   523                           	opt stack 0
   524  000018                     Eeprom_Read_Block@DataPtr:
   525                           	opt stack 0
   526  000018                     ___wmul@product:
   527                           	opt stack 0
   528  000018                     ___lmul@multiplicand:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x17
   532  000018                     	ds	1
   533  000019                     BCDManage7segment@BCD:
   534                           	opt stack 0
   535  000019                     Eeprom_Write_Block@WriteGranted:
   536                           	opt stack 0
   537  000019                     MangeKeys@HWIreading:
   538                           	opt stack 0
   539  000019                     ___lwdiv@quotient:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x18
   543  000019                     	ds	1
   544  00001A                     Eeprom_Write_Block@address:
   545                           	opt stack 0
   546  00001A                     Eeprom_Read_Block@BlockSize:
   547                           	opt stack 0
   548  00001A                     MangeKeys@KeyID:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x19
   552  00001A                     	ds	1
   553  00001B                     ?_IncrementDecrementSingleDigit:
   554                           	opt stack 0
   555  00001B                     Eeprom_Write_Block@LoopIndex:
   556                           	opt stack 0
   557  00001B                     Eeprom_Read_Block@ReadGranted:
   558                           	opt stack 0
   559  00001B                     ManageDrivers@LoopIndex:
   560                           	opt stack 0
   561  00001B                     IncrementDecrementSingleDigit@Number:
   562                           	opt stack 0
   563  00001B                     BCDsendNumber@Number:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1A
   567  00001B                     	ds	1
   568  00001C                     Eeprom_Read_Block@address:
   569                           	opt stack 0
   570  00001C                     ___lmul@product:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x1B
   574  00001C                     	ds	1
   575  00001D                     IncrementDecrementSingleDigit@Index:
   576                           	opt stack 0
   577  00001D                     BCDsendNumber@DecimalPlace:
   578                           	opt stack 0
   579  00001D                     Eeprom_Read_Block@ReadSuccess:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x1C
   583  00001D                     	ds	1
   584  00001E                     IncrementDecrementSingleDigit@bIsincrement:
   585                           	opt stack 0
   586  00001E                     BCDsendNumber@EnableTranc:
   587                           	opt stack 0
   588  00001E                     Eeprom_Read_Block@LoopIndex:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x1D
   592  00001E                     	ds	1
   593  00001F                     ??_BCDsendNumber:
   594  00001F                     ??_IncrementDecrementSingleDigit:
   595  00001F                     
   596                           ; 1 bytes @ 0x1E
   597  00001F                     	ds	1
   598  000020                     ?___lldiv:
   599                           	opt stack 0
   600  000020                     IncrementDecrementSingleDigit@Link:
   601                           	opt stack 0
   602  000020                     ___lldiv@dividend:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x1F
   606  000020                     	ds	1
   607  000021                     BCDsendNumber@Link:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x20
   611  000021                     	ds	1
   612  000022                     IncrementDecrementSingleDigit@NumberReturned:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x21
   616  000022                     	ds	1
   617  000023                     BCDsendNumber@Output:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x22
   621  000023                     	ds	1
   622  000024                     IncrementDecrementSingleDigit@PowIndex:
   623                           	opt stack 0
   624  000024                     ___lldiv@divisor:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x23
   628  000024                     	ds	1
   629  000025                     IncrementDecrementSingleDigit@unitPosition:
   630                           	opt stack 0
   631  000025                     BCDsendNumber@Buffer:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x24
   635  000025                     	ds	2
   636  000027                     BCDsendNumber@LoopIndex:
   637                           	opt stack 0
   638  000027                     IncrementDecrementSingleDigit@Output:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x26
   642  000027                     	ds	1
   643  000028                     ___lldiv@quotient:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x27
   647  000028                     	ds	3
   648  00002B                     IncrementDecrementSingleDigit@LoopIndex:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x2A
   652  00002B                     	ds	1
   653  00002C                     ___lldiv@counter:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x2B
   657  00002C                     	ds	1
   658  00002D                     ??_SpeedCalcManage:
   659  00002D                     ?_GetAvgSpeed:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x2C
   663  00002D                     	ds	2
   664  00002F                     GetAvgSpeed@bIsKph:
   665                           	opt stack 0
   666  00002F                     SpeedCalcManage@HundredMeterReference:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2E
   670  00002F                     	ds	1
   671  000030                     GetAvgSpeed@KphMphFactor:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x2F
   675  000030                     	ds	1
   676  000031                     
   677                           ; 1 bytes @ 0x30
   678  000031                     	ds	3
   679  000034                     GetAvgSpeed@AvgSpeedKphMph:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x33
   683  000034                     	ds	2
   684  000036                     ??_APP_MANAGE:
   685                           
   686                           ; 1 bytes @ 0x35
   687  000036                     	ds	1
   688  000037                     tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           
   695                           ; 1 bytes @ 0x36
   696 ;;
   697 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   698 ;;
   699 ;; *************** function _main *****************
   700 ;; Defined at:
   701 ;;		line 78 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   715 ;;      Params:         0       0       0       0       0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0
   718 ;;      Totals:         0       0       0       0       0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels required when called:   10
   721 ;; This function calls:
   722 ;;		_Start_App
   723 ;; This function is called by:
   724 ;;		Startup code after reset
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text0
   729  00174A                     __ptext0:
   730                           	opt stack 0
   731  00174A                     _main:
   732                           	opt stack 21
   733                           
   734                           ;main.c: 80: Start_App();
   735                           
   736                           ;incstack = 0
   737  00174A  EC03  F009         	call	_Start_App	;wreg free
   738                           
   739                           ;main.c: 81: return;
   740  00174E  EF07  F000         	goto	start
   741  001752                     __end_of_main:
   742                           	opt stack 0
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           
   750 ;; *************** function _Start_App *****************
   751 ;; Defined at:
   752 ;;		line 21 in file "../../../../OS/OS_manage/OS_manage.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   766 ;;      Params:         0       0       0       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0
   769 ;;      Totals:         0       0       0       0       0       0       0
   770 ;;Total ram usage:        0 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; Hardware stack levels required when called:    9
   773 ;; This function calls:
   774 ;;		_APP_INITIALIZE
   775 ;;		_BCDInitialize
   776 ;;		_CreateTask
   777 ;;		_HWI_DIGITAL_INITIALIZE
   778 ;;		_HWI_INTERRUPTS_INTITALIZE
   779 ;;		_RunScheduler
   780 ;;		_SpeedCalcNotifyInitialize
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text1
   787  001206                     __ptext1:
   788                           	opt stack 0
   789  001206                     _Start_App:
   790                           	opt stack 21
   791                           
   792                           ;OS_manage.c: 23: HWI_INTERRUPTS_INTITALIZE();
   793                           
   794                           ;incstack = 0
   795  001206  EC4A  F00A         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   796                           
   797                           ;OS_manage.c: 24: HWI_DIGITAL_INITIALIZE();
   798  00120A  EC74  F00B         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   799                           
   800                           ;OS_manage.c: 25: SpeedCalcNotifyInitialize();
   801  00120E  ECC0  F00B         	call	_SpeedCalcNotifyInitialize	;wreg free
   802                           
   803                           ;OS_manage.c: 26: APP_INITIALIZE();
   804  001212  EC18  F00B         	call	_APP_INITIALIZE	;wreg free
   805                           
   806                           ;OS_manage.c: 27: BCDInitialize(1);
   807  001216  0E01               	movlw	1
   808  001218  ECA9  F00B         	call	_BCDInitialize
   809                           
   810                           ;OS_manage.c: 29: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   811  00121C  0E66               	movlw	low _ManageSpeedCalc
   812  00121E  6E14               	movwf	CreateTask@MangeFunction,c
   813  001220  0E17               	movlw	high _ManageSpeedCalc
   814  001222  6E15               	movwf	CreateTask@MangeFunction+1,c
   815  001224  0E00               	movlw	0
   816  001226  6E16               	movwf	CreateTask@TaskId,c
   817  001228  0E14               	movlw	20
   818  00122A  6E17               	movwf	CreateTask@Period,c
   819  00122C  EC6A  F009         	call	_CreateTask	;wreg free
   820                           
   821                           ;OS_manage.c: 31: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100)
      +                          ;
   822  001230  0E60               	movlw	low _ManageApplication
   823  001232  6E14               	movwf	CreateTask@MangeFunction,c
   824  001234  0E17               	movlw	high _ManageApplication
   825  001236  6E15               	movwf	CreateTask@MangeFunction+1,c
   826  001238  0E02               	movlw	2
   827  00123A  6E16               	movwf	CreateTask@TaskId,c
   828  00123C  0E64               	movlw	100
   829  00123E  6E17               	movwf	CreateTask@Period,c
   830  001240  EC6A  F009         	call	_CreateTask	;wreg free
   831                           
   832                           ;OS_manage.c: 33: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 4)
      +                          ;
   833  001244  0E5A               	movlw	low _DisplayAlphaNumeric
   834  001246  6E14               	movwf	CreateTask@MangeFunction,c
   835  001248  0E17               	movlw	high _DisplayAlphaNumeric
   836  00124A  6E15               	movwf	CreateTask@MangeFunction+1,c
   837  00124C  0E01               	movlw	1
   838  00124E  6E16               	movwf	CreateTask@TaskId,c
   839  001250  0E04               	movlw	4
   840  001252  6E17               	movwf	CreateTask@Period,c
   841  001254  EC6A  F009         	call	_CreateTask	;wreg free
   842                           
   843                           ;OS_manage.c: 35: CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
   844  001258  0ECC               	movlw	low _ManageDrivers
   845  00125A  6E14               	movwf	CreateTask@MangeFunction,c
   846  00125C  0E16               	movlw	high _ManageDrivers
   847  00125E  6E15               	movwf	CreateTask@MangeFunction+1,c
   848  001260  0E03               	movlw	3
   849  001262  6E16               	movwf	CreateTask@TaskId,c
   850  001264  0E0A               	movlw	10
   851  001266  6E17               	movwf	CreateTask@Period,c
   852  001268  EC6A  F009         	call	_CreateTask	;wreg free
   853                           
   854                           ;OS_manage.c: 37: RunScheduler();
   855  00126C  EC7C  F008         	call	_RunScheduler	;wreg free
   856  001270  0012               	return		;funcret
   857  001272                     __end_of_Start_App:
   858                           	opt stack 0
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           
   866 ;; *************** function _SpeedCalcNotifyInitialize *****************
   867 ;; Defined at:
   868 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		None
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   882 ;;      Params:         0       0       0       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0       0       0
   884 ;;      Temps:          0       0       0       0       0       0       0
   885 ;;      Totals:         0       0       0       0       0       0       0
   886 ;;Total ram usage:        0 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; Hardware stack levels required when called:    4
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_Start_App
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text2
   897  001780                     __ptext2:
   898                           	opt stack 0
   899  001780                     _SpeedCalcNotifyInitialize:
   900                           	opt stack 25
   901                           
   902                           ;incstack = 0
   903  001780  0012               	return		;funcret
   904  001782                     __end_of_SpeedCalcNotifyInitialize:
   905                           	opt stack 0
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           
   913 ;; *************** function _RunScheduler *****************
   914 ;; Defined at:
   915 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   929 ;;      Params:         0       0       0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0       0       0
   931 ;;      Temps:          0       2       0       0       0       0       0
   932 ;;      Totals:         0       2       0       0       0       0       0
   933 ;;Total ram usage:        2 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    8
   936 ;; This function calls:
   937 ;;		_DisplayAlphaNumeric
   938 ;;		_ManageApplication
   939 ;;		_ManageDrivers
   940 ;;		_ManageSpeedCalc
   941 ;; This function is called by:
   942 ;;		_Start_App
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947  0010F8                     __ptext3:
   948                           	opt stack 0
   949  0010F8                     _RunScheduler:
   950                           	opt stack 21
   951  0010F8                     
   952                           ;Scheduler.c: 29: {
   953                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 4 ; TaskIndex++)
   954  0010F8  0E00               	movlw	0
   955  0010FA  6E4F               	movwf	RunScheduler@TaskIndex,c
   956  0010FC                     l2714:
   957  0010FC  0E03               	movlw	3
   958  0010FE  644F               	cpfsgt	RunScheduler@TaskIndex,c
   959  001100  D001               	goto	l2718
   960  001102  D7FA               	goto	l2712
   961  001104                     l2718:
   962                           
   963                           ;Scheduler.c: 31: {
   964                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   965  001104  504F               	movf	RunScheduler@TaskIndex,w,c
   966  001106  0D04               	mullw	4
   967  001108  0E02               	movlw	2
   968  00110A  26F3               	addwf	prodl,f,c
   969  00110C  0E00               	movlw	0
   970  00110E  22F4               	addwfc	prodh,f,c
   971  001110  0EB2               	movlw	low _ArrayTask
   972  001112  24F3               	addwf	prodl,w,c
   973  001114  6ED9               	movwf	fsr2l,c
   974  001116  0E00               	movlw	high _ArrayTask
   975  001118  20F4               	addwfc	prodh,w,c
   976  00111A  6EDA               	movwf	fsr2h,c
   977  00111C  504F               	movf	RunScheduler@TaskIndex,w,c
   978  00111E  0D04               	mullw	4
   979  001120  0E03               	movlw	3
   980  001122  26F3               	addwf	prodl,f,c
   981  001124  0E00               	movlw	0
   982  001126  22F4               	addwfc	prodh,f,c
   983  001128  0EB2               	movlw	low _ArrayTask
   984  00112A  24F3               	addwf	prodl,w,c
   985  00112C  6EE1               	movwf	fsr1l,c
   986  00112E  0E00               	movlw	high _ArrayTask
   987  001130  20F4               	addwfc	prodh,w,c
   988  001132  6EE2               	movwf	fsr1h,c
   989  001134  50DE               	movf	postinc2,w,c
   990  001136  5CE6               	subwf	postinc1,w,c
   991  001138  A0D8               	btfss	status,0,c
   992  00113A  D022               	goto	l2724
   993                           
   994                           ;Scheduler.c: 33: {
   995                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   996  00113C  504F               	movf	RunScheduler@TaskIndex,w,c
   997  00113E  0D04               	mullw	4
   998  001140  0EB2               	movlw	low _ArrayTask
   999  001142  24F3               	addwf	prodl,w,c
  1000  001144  6ED9               	movwf	fsr2l,c
  1001  001146  0E00               	movlw	high _ArrayTask
  1002  001148  20F4               	addwfc	prodh,w,c
  1003  00114A  6EDA               	movwf	fsr2h,c
  1004  00114C  D801               	call	u2158
  1005  00114E  D00A               	goto	l2722
  1006  001150                     u2158:
  1007  001150  0005               	push	
  1008  001152  6EFA               	movwf	pclath,c
  1009  001154  50DE               	movf	postinc2,w,c
  1010  001156  6EFD               	movwf	tosl,c
  1011  001158  50DE               	movf	postinc2,w,c
  1012  00115A  6EFE               	movwf	tosh,c
  1013  00115C  50F8               	movf	tblptru,w,c
  1014  00115E  6EFF               	movwf	tosu,c
  1015  001160  50FA               	movf	pclath,w,c
  1016  001162  0012               	return		;indir
  1017  001164                     l2722:
  1018                           
  1019                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
  1020  001164  504F               	movf	RunScheduler@TaskIndex,w,c
  1021  001166  0D04               	mullw	4
  1022  001168  0E03               	movlw	3
  1023  00116A  26F3               	addwf	prodl,f,c
  1024  00116C  0E00               	movlw	0
  1025  00116E  22F4               	addwfc	prodh,f,c
  1026  001170  0EB2               	movlw	low _ArrayTask
  1027  001172  24F3               	addwf	prodl,w,c
  1028  001174  6ED9               	movwf	fsr2l,c
  1029  001176  0E00               	movlw	high _ArrayTask
  1030  001178  20F4               	addwfc	prodh,w,c
  1031  00117A  6EDA               	movwf	fsr2h,c
  1032  00117C  0E00               	movlw	0
  1033  00117E  6EDF               	movwf	indf2,c
  1034  001180                     l2724:
  1035  001180  2A4F               	incf	RunScheduler@TaskIndex,f,c
  1036  001182  D7BC               	goto	l2714
  1037  001184                     __end_of_RunScheduler:
  1038                           	opt stack 0
  1039                           tosu	equ	0xFFF
  1040                           tosh	equ	0xFFE
  1041                           tosl	equ	0xFFD
  1042                           pclath	equ	0xFFA
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           postinc1	equ	0xFE6
  1052                           fsr1h	equ	0xFE2
  1053                           fsr1l	equ	0xFE1
  1054                           indf2	equ	0xFDF
  1055                           postinc2	equ	0xFDE
  1056                           fsr2h	equ	0xFDA
  1057                           fsr2l	equ	0xFD9
  1058                           status	equ	0xFD8
  1059                           
  1060 ;; *************** function _ManageDrivers *****************
  1061 ;; Defined at:
  1062 ;;		line 54 in file "../../../../OS/OS_manage/OS_manage.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1076 ;;      Params:         0       0       0       0       0       0       0
  1077 ;;      Locals:         1       0       0       0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0
  1079 ;;      Totals:         1       0       0       0       0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    6
  1083 ;; This function calls:
  1084 ;;		_EepromManage
  1085 ;;		_MangeKeys
  1086 ;; This function is called by:
  1087 ;;		_Start_App
  1088 ;;		_RunScheduler
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text4
  1093  0016CC                     __ptext4:
  1094                           	opt stack 0
  1095  0016CC                     _ManageDrivers:
  1096                           	opt stack 22
  1097                           
  1098                           ;OS_manage.c: 56: unsigned char LoopIndex;
  1099                           ;OS_manage.c: 57: for(LoopIndex = (unsigned char)0 ; LoopIndex < (unsigned char)3 ; Loop
      +                          Index++)
  1100                           
  1101                           ;incstack = 0
  1102  0016CC  0E00               	movlw	0
  1103  0016CE  6E1B               	movwf	ManageDrivers@LoopIndex,c
  1104  0016D0                     l2314:
  1105  0016D0  0E02               	movlw	2
  1106  0016D2  641B               	cpfsgt	ManageDrivers@LoopIndex,c
  1107  0016D4  D001               	goto	l2318
  1108  0016D6  D005               	goto	l2324
  1109  0016D8                     l2318:
  1110                           
  1111                           ;OS_manage.c: 58: {
  1112                           ;OS_manage.c: 59: MangeKeys(LoopIndex);
  1113  0016D8  501B               	movf	ManageDrivers@LoopIndex,w,c
  1114  0016DA  EC20  F003         	call	_MangeKeys
  1115  0016DE  2A1B               	incf	ManageDrivers@LoopIndex,f,c
  1116  0016E0  D7F7               	goto	l2314
  1117  0016E2                     l2324:
  1118                           
  1119                           ;OS_manage.c: 60: }
  1120                           ;OS_manage.c: 61: EepromManage();
  1121  0016E2  EC0B  F00A         	call	_EepromManage	;wreg free
  1122  0016E6  0012               	return		;funcret
  1123  0016E8                     __end_of_ManageDrivers:
  1124                           	opt stack 0
  1125                           tosu	equ	0xFFF
  1126                           tosh	equ	0xFFE
  1127                           tosl	equ	0xFFD
  1128                           pclath	equ	0xFFA
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           prodh	equ	0xFF4
  1134                           prodl	equ	0xFF3
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postinc1	equ	0xFE6
  1138                           fsr1h	equ	0xFE2
  1139                           fsr1l	equ	0xFE1
  1140                           indf2	equ	0xFDF
  1141                           postinc2	equ	0xFDE
  1142                           fsr2h	equ	0xFDA
  1143                           fsr2l	equ	0xFD9
  1144                           status	equ	0xFD8
  1145                           
  1146 ;; *************** function _DisplayAlphaNumeric *****************
  1147 ;; Defined at:
  1148 ;;		line 41 in file "../../../../OS/OS_manage/OS_manage.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1162 ;;      Params:         0       0       0       0       0       0       0
  1163 ;;      Locals:         0       0       0       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0       0       0
  1165 ;;      Totals:         0       0       0       0       0       0       0
  1166 ;;Total ram usage:        0 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    6
  1169 ;; This function calls:
  1170 ;;		_BCDManage7segment
  1171 ;; This function is called by:
  1172 ;;		_Start_App
  1173 ;;		_RunScheduler
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text5
  1178  00175A                     __ptext5:
  1179                           	opt stack 0
  1180  00175A                     _DisplayAlphaNumeric:
  1181                           	opt stack 22
  1182                           
  1183                           ;OS_manage.c: 43: BCDManage7segment();
  1184                           
  1185                           ;incstack = 0
  1186  00175A  EC9F  F007         	call	_BCDManage7segment	;wreg free
  1187  00175E  0012               	return		;funcret
  1188  001760                     __end_of_DisplayAlphaNumeric:
  1189                           	opt stack 0
  1190                           tosu	equ	0xFFF
  1191                           tosh	equ	0xFFE
  1192                           tosl	equ	0xFFD
  1193                           pclath	equ	0xFFA
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           prodh	equ	0xFF4
  1199                           prodl	equ	0xFF3
  1200                           postinc0	equ	0xFEE
  1201                           wreg	equ	0xFE8
  1202                           postinc1	equ	0xFE6
  1203                           fsr1h	equ	0xFE2
  1204                           fsr1l	equ	0xFE1
  1205                           indf2	equ	0xFDF
  1206                           postinc2	equ	0xFDE
  1207                           fsr2h	equ	0xFDA
  1208                           fsr2l	equ	0xFD9
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _ManageApplication *****************
  1212 ;; Defined at:
  1213 ;;		line 45 in file "../../../../OS/OS_manage/OS_manage.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1227 ;;      Params:         0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0
  1230 ;;      Totals:         0       0       0       0       0       0       0
  1231 ;;Total ram usage:        0 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    7
  1234 ;; This function calls:
  1235 ;;		_APP_MANAGE
  1236 ;; This function is called by:
  1237 ;;		_Start_App
  1238 ;;		_RunScheduler
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text6
  1243  001760                     __ptext6:
  1244                           	opt stack 0
  1245  001760                     _ManageApplication:
  1246                           	opt stack 21
  1247                           
  1248                           ;OS_manage.c: 47: APP_MANAGE();
  1249                           
  1250                           ;incstack = 0
  1251  001760  EC37  F005         	call	_APP_MANAGE	;wreg free
  1252  001764  0012               	return		;funcret
  1253  001766                     __end_of_ManageApplication:
  1254                           	opt stack 0
  1255                           tosu	equ	0xFFF
  1256                           tosh	equ	0xFFE
  1257                           tosl	equ	0xFFD
  1258                           pclath	equ	0xFFA
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           prodh	equ	0xFF4
  1264                           prodl	equ	0xFF3
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           postinc1	equ	0xFE6
  1268                           fsr1h	equ	0xFE2
  1269                           fsr1l	equ	0xFE1
  1270                           indf2	equ	0xFDF
  1271                           postinc2	equ	0xFDE
  1272                           fsr2h	equ	0xFDA
  1273                           fsr2l	equ	0xFD9
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _ManageSpeedCalc *****************
  1277 ;; Defined at:
  1278 ;;		line 49 in file "../../../../OS/OS_manage/OS_manage.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1292 ;;      Params:         0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    6
  1299 ;; This function calls:
  1300 ;;		_SpeedCalcManage
  1301 ;; This function is called by:
  1302 ;;		_Start_App
  1303 ;;		_RunScheduler
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text7
  1308  001766                     __ptext7:
  1309                           	opt stack 0
  1310  001766                     _ManageSpeedCalc:
  1311                           	opt stack 22
  1312                           
  1313                           ;OS_manage.c: 51: SpeedCalcManage();
  1314                           
  1315                           ;incstack = 0
  1316  001766  EC34  F008         	call	_SpeedCalcManage	;wreg free
  1317  00176A  0012               	return		;funcret
  1318  00176C                     __end_of_ManageSpeedCalc:
  1319                           	opt stack 0
  1320                           tosu	equ	0xFFF
  1321                           tosh	equ	0xFFE
  1322                           tosl	equ	0xFFD
  1323                           pclath	equ	0xFFA
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           prodh	equ	0xFF4
  1329                           prodl	equ	0xFF3
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postinc1	equ	0xFE6
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           indf2	equ	0xFDF
  1336                           postinc2	equ	0xFDE
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _SpeedCalcManage *****************
  1342 ;; Defined at:
  1343 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  HundredMeter    2   46[COMRAM] unsigned short 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1357 ;;      Params:         0       0       0       0       0       0       0
  1358 ;;      Locals:         2       0       0       0       0       0       0
  1359 ;;      Temps:          2       0       0       0       0       0       0
  1360 ;;      Totals:         4       0       0       0       0       0       0
  1361 ;;Total ram usage:        4 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    5
  1364 ;; This function calls:
  1365 ;;		___lldiv
  1366 ;;		___lwdiv
  1367 ;;		___wmul
  1368 ;; This function is called by:
  1369 ;;		_ManageSpeedCalc
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text8
  1374  001068                     __ptext8:
  1375                           	opt stack 0
  1376  001068                     _SpeedCalcManage:
  1377                           	opt stack 22
  1378                           
  1379                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
  1380                           ;SpeedCalc.c: 67: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
  1381                           ;SpeedCalc.c: 68: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  1382                           
  1383                           ;incstack = 0
  1384  001068  C043  F014         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
  1385  00106C  C044  F015         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
  1386  001070  0E00               	movlw	0
  1387  001072  6E17               	movwf	___lwdiv@divisor+1,c
  1388  001074  0E64               	movlw	100
  1389  001076  6E16               	movwf	___lwdiv@divisor,c
  1390  001078  ECC1  F009         	call	___lwdiv	;wreg free
  1391  00107C  C014  F02D         	movff	?___lwdiv,??_SpeedCalcManage
  1392  001080  C015  F02E         	movff	?___lwdiv+1,??_SpeedCalcManage+1
  1393  001084  C051  F014         	movff	_TimerOVFLcount,___wmul@multiplier
  1394  001088  6A15               	clrf	___wmul@multiplier+1,c
  1395  00108A  0E02               	movlw	2
  1396  00108C  6E17               	movwf	___wmul@multiplicand+1,c
  1397  00108E  0E8F               	movlw	143
  1398  001090  6E16               	movwf	___wmul@multiplicand,c
  1399  001092  EC40  F00B         	call	___wmul	;wreg free
  1400  001096  5014               	movf	?___wmul,w,c
  1401  001098  242D               	addwf	??_SpeedCalcManage,w,c
  1402  00109A  6E45               	movwf	_LapTimeTenthMilli,c
  1403  00109C  5015               	movf	?___wmul+1,w,c
  1404  00109E  202E               	addwfc	??_SpeedCalcManage+1,w,c
  1405  0010A0  6E46               	movwf	_LapTimeTenthMilli+1,c
  1406                           
  1407                           ;SpeedCalc.c: 70: LapDistanceCounter += LapCounter;
  1408  0010A2  5052               	movf	_LapCounter,w,c	;volatile
  1409  0010A4  2647               	addwf	_LapDistanceCounter,f,c
  1410  0010A6  0E00               	movlw	0
  1411  0010A8  2248               	addwfc	_LapDistanceCounter+1,f,c
  1412                           
  1413                           ;SpeedCalc.c: 72: LapCounter = (unsigned char)0;
  1414  0010AA  0E00               	movlw	0
  1415  0010AC  6E52               	movwf	_LapCounter,c	;volatile
  1416                           
  1417                           ;SpeedCalc.c: 74: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1418                           ;SpeedCalc.c: 75: (unsigned long)CircumFactor);
  1419  0010AE  0EA0               	movlw	160
  1420  0010B0  6E20               	movwf	___lldiv@dividend,c
  1421  0010B2  0E86               	movlw	134
  1422  0010B4  6E21               	movwf	___lldiv@dividend+1,c
  1423  0010B6  0E01               	movlw	1
  1424  0010B8  6E22               	movwf	___lldiv@dividend+2,c
  1425  0010BA  0E00               	movlw	0
  1426  0010BC  6E23               	movwf	___lldiv@dividend+3,c
  1427  0010BE  C06A  F024         	movff	_CircumFactor,___lldiv@divisor
  1428  0010C2  C06B  F025         	movff	_CircumFactor+1,___lldiv@divisor+1
  1429  0010C6  6A26               	clrf	___lldiv@divisor+2,c
  1430  0010C8  6A27               	clrf	___lldiv@divisor+3,c
  1431  0010CA  ECC2  F008         	call	___lldiv	;wreg free
  1432  0010CE  C020  F02F         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1433  0010D2  C021  F030         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1434                           
  1435                           ;SpeedCalc.c: 77: if(LapDistanceCounter >= HundredMeterReference)
  1436  0010D6  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1437  0010D8  5C47               	subwf	_LapDistanceCounter,w,c
  1438  0010DA  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1439  0010DC  5848               	subwfb	_LapDistanceCounter+1,w,c
  1440  0010DE  A0D8               	btfss	status,0,c
  1441  0010E0  0012               	return	
  1442                           
  1443                           ;SpeedCalc.c: 78: {
  1444                           ;SpeedCalc.c: 79: DistTravelCntr ++;
  1445  0010E2  0E01               	movlw	1
  1446  0010E4  263F               	addwf	_DistTravelCntr,f,c
  1447  0010E6  0E00               	movlw	0
  1448  0010E8  2240               	addwfc	_DistTravelCntr+1,f,c
  1449  0010EA  2241               	addwfc	_DistTravelCntr+2,f,c
  1450  0010EC  2242               	addwfc	_DistTravelCntr+3,f,c
  1451                           
  1452                           ;SpeedCalc.c: 80: LapDistanceCounter -= HundredMeterReference;
  1453  0010EE  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1454  0010F0  5E47               	subwf	_LapDistanceCounter,f,c
  1455  0010F2  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1456  0010F4  5A48               	subwfb	_LapDistanceCounter+1,f,c
  1457                           
  1458                           ;SpeedCalc.c: 81: }
  1459  0010F6  0012               	return	
  1460  0010F8                     __end_of_SpeedCalcManage:
  1461                           	opt stack 0
  1462                           tosu	equ	0xFFF
  1463                           tosh	equ	0xFFE
  1464                           tosl	equ	0xFFD
  1465                           pclath	equ	0xFFA
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodh	equ	0xFF4
  1471                           prodl	equ	0xFF3
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postinc1	equ	0xFE6
  1475                           fsr1h	equ	0xFE2
  1476                           fsr1l	equ	0xFE1
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _MangeKeys *****************
  1484 ;; Defined at:
  1485 ;;		line 29 in file "../../../../Common/Driver/Key/Key.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  KeyID           1    wreg     unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  KeyID           1   25[COMRAM] unsigned char 
  1490 ;;  HWIreading      1   24[COMRAM] unsigned char 
  1491 ;;  KeyState        1   23[COMRAM] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1501 ;;      Params:         0       0       0       0       0       0       0
  1502 ;;      Locals:         3       0       0       0       0       0       0
  1503 ;;      Temps:          2       0       0       0       0       0       0
  1504 ;;      Totals:         5       0       0       0       0       0       0
  1505 ;;Total ram usage:        5 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    5
  1508 ;; This function calls:
  1509 ;;		_HWI_DIGI_READ
  1510 ;; This function is called by:
  1511 ;;		_ManageDrivers
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text9
  1516  000640                     __ptext9:
  1517                           	opt stack 0
  1518  000640                     _MangeKeys:
  1519                           	opt stack 22
  1520                           
  1521                           ;incstack = 0
  1522                           ;MangeKeys@KeyID stored from wreg
  1523  000640  6E1A               	movwf	MangeKeys@KeyID,c
  1524                           
  1525                           ;Key.c: 31: unsigned char HWIreading;
  1526                           ;Key.c: 32: unsigned char KeyState;
  1527                           ;Key.c: 34: KeyState = KeyInternalData[KeyID].KeyState & (unsigned char)0x3F;
  1528  000642  501A               	movf	MangeKeys@KeyID,w,c
  1529  000644  0D03               	mullw	3
  1530  000646  0E5E               	movlw	low _KeyInternalData
  1531  000648  24F3               	addwf	prodl,w,c
  1532  00064A  6ED9               	movwf	fsr2l,c
  1533  00064C  0E00               	movlw	high _KeyInternalData
  1534  00064E  20F4               	addwfc	prodh,w,c
  1535  000650  6EDA               	movwf	fsr2h,c
  1536  000652  50DF               	movf	indf2,w,c
  1537  000654  0B3F               	andlw	63
  1538  000656  6E18               	movwf	MangeKeys@KeyState,c
  1539                           
  1540                           ;Key.c: 35: HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
  1541  000658  501A               	movf	MangeKeys@KeyID,w,c
  1542  00065A  0D08               	mullw	8
  1543  00065C  0E1B               	movlw	low _KeyArrayConfig
  1544  00065E  24F3               	addwf	prodl,w,c
  1545  000660  6EF6               	movwf	tblptrl,c
  1546  000662  0E06               	movlw	high _KeyArrayConfig
  1547  000664  20F4               	addwfc	prodh,w,c
  1548  000666  6EF7               	movwf	tblptrh,c
  1549  000668                     	if	0	;There are less than 3 active tblptr bytes
  1550  000668                     	endif
  1551  000668  0008               	tblrd		*
  1552  00066A  50F5               	movf	tablat,w,c
  1553  00066C  EC69  F00A         	call	_HWI_DIGI_READ
  1554  000670  6E19               	movwf	MangeKeys@HWIreading,c
  1555                           
  1556                           ;Key.c: 37: switch(KeyState)
  1557  000672  D1F2               	goto	l2264
  1558  000674                     l2218:
  1559                           
  1560                           ;Key.c: 40: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1561  000674  501A               	movf	MangeKeys@KeyID,w,c
  1562  000676  0D08               	mullw	8
  1563  000678  0E01               	movlw	1
  1564  00067A  26F3               	addwf	prodl,f,c
  1565  00067C  0E00               	movlw	0
  1566  00067E  22F4               	addwfc	prodh,f,c
  1567  000680  0E1B               	movlw	low _KeyArrayConfig
  1568  000682  24F3               	addwf	prodl,w,c
  1569  000684  6EF6               	movwf	tblptrl,c
  1570  000686  0E06               	movlw	high _KeyArrayConfig
  1571  000688  20F4               	addwfc	prodh,w,c
  1572  00068A  6EF7               	movwf	tblptrh,c
  1573  00068C                     	if	0	;There are less than 3 active tblptr bytes
  1574  00068C                     	endif
  1575  00068C  0008               	tblrd		*
  1576  00068E  50F5               	movf	tablat,w,c
  1577  000690  1819               	xorwf	MangeKeys@HWIreading,w,c
  1578  000692  A4D8               	btfss	status,2,c
  1579  000694  D059               	goto	l2228
  1580                           
  1581                           ;Key.c: 41: {
  1582                           ;Key.c: 42: KeyInternalData[KeyID].KeyCounter++;
  1583  000696  501A               	movf	MangeKeys@KeyID,w,c
  1584  000698  0D03               	mullw	3
  1585  00069A  0E01               	movlw	1
  1586  00069C  26F3               	addwf	prodl,f,c
  1587  00069E  0E00               	movlw	0
  1588  0006A0  22F4               	addwfc	prodh,f,c
  1589  0006A2  0E5E               	movlw	low _KeyInternalData
  1590  0006A4  24F3               	addwf	prodl,w,c
  1591  0006A6  6ED9               	movwf	fsr2l,c
  1592  0006A8  0E00               	movlw	high _KeyInternalData
  1593  0006AA  20F4               	addwfc	prodh,w,c
  1594  0006AC  6EDA               	movwf	fsr2h,c
  1595  0006AE  2ADE               	incf	postinc2,f,c
  1596  0006B0  0E00               	movlw	0
  1597  0006B2  22DD               	addwfc	postdec2,f,c
  1598                           
  1599                           ;Key.c: 43: if(KeyArrayConfig[KeyID].ShortPress ==
  1600                           ;Key.c: 44: KeyInternalData[KeyID].KeyCounter)
  1601  0006B4  501A               	movf	MangeKeys@KeyID,w,c
  1602  0006B6  0D03               	mullw	3
  1603  0006B8  0E01               	movlw	1
  1604  0006BA  26F3               	addwf	prodl,f,c
  1605  0006BC  0E00               	movlw	0
  1606  0006BE  22F4               	addwfc	prodh,f,c
  1607  0006C0  0E5E               	movlw	low _KeyInternalData
  1608  0006C2  24F3               	addwf	prodl,w,c
  1609  0006C4  6ED9               	movwf	fsr2l,c
  1610  0006C6  0E00               	movlw	high _KeyInternalData
  1611  0006C8  20F4               	addwfc	prodh,w,c
  1612  0006CA  6EDA               	movwf	fsr2h,c
  1613  0006CC  501A               	movf	MangeKeys@KeyID,w,c
  1614  0006CE  0D08               	mullw	8
  1615  0006D0  0E04               	movlw	4
  1616  0006D2  26F3               	addwf	prodl,f,c
  1617  0006D4  0E00               	movlw	0
  1618  0006D6  22F4               	addwfc	prodh,f,c
  1619  0006D8  0E1B               	movlw	low _KeyArrayConfig
  1620  0006DA  24F3               	addwf	prodl,w,c
  1621  0006DC  6EF6               	movwf	tblptrl,c
  1622  0006DE  0E06               	movlw	high _KeyArrayConfig
  1623  0006E0  20F4               	addwfc	prodh,w,c
  1624  0006E2  6EF7               	movwf	tblptrh,c
  1625  0006E4                     	if	0	;There are less than 3 active tblptr bytes
  1626  0006E4                     	endif
  1627  0006E4  50DE               	movf	postinc2,w,c
  1628  0006E6  0009               	tblrd		*+
  1629  0006E8  18F5               	xorwf	tablat,w,c
  1630  0006EA  E104               	bnz	u1431
  1631  0006EC  50DE               	movf	postinc2,w,c
  1632  0006EE  0009               	tblrd		*+
  1633  0006F0  18F5               	xorwf	tablat,w,c
  1634  0006F2  A4D8               	btfss	status,2,c
  1635  0006F4                     u1431:
  1636  0006F4  0012               	return	
  1637                           
  1638                           ;Key.c: 45: {
  1639                           ;Key.c: 46: KeyInternalData[KeyID].KeyState = (unsigned char)0x81;
  1640  0006F6  501A               	movf	MangeKeys@KeyID,w,c
  1641  0006F8  0D03               	mullw	3
  1642  0006FA  0E5E               	movlw	low _KeyInternalData
  1643  0006FC  24F3               	addwf	prodl,w,c
  1644  0006FE  6ED9               	movwf	fsr2l,c
  1645  000700  0E00               	movlw	high _KeyInternalData
  1646  000702  20F4               	addwfc	prodh,w,c
  1647  000704  6EDA               	movwf	fsr2h,c
  1648  000706  0E81               	movlw	129
  1649  000708  6EDF               	movwf	indf2,c
  1650                           
  1651                           ;Key.c: 47: KeyInternalData[KeyID].KeyCounter =
  1652                           ;Key.c: 48: KeyArrayConfig[KeyID].ReleaseTicks;
  1653  00070A  501A               	movf	MangeKeys@KeyID,w,c
  1654  00070C  0D08               	mullw	8
  1655  00070E  0E02               	movlw	2
  1656  000710  26F3               	addwf	prodl,f,c
  1657  000712  0E00               	movlw	0
  1658  000714  22F4               	addwfc	prodh,f,c
  1659  000716  0E1B               	movlw	low _KeyArrayConfig
  1660  000718  24F3               	addwf	prodl,w,c
  1661  00071A  6EF6               	movwf	tblptrl,c
  1662  00071C  0E06               	movlw	high _KeyArrayConfig
  1663  00071E  20F4               	addwfc	prodh,w,c
  1664  000720  6EF7               	movwf	tblptrh,c
  1665  000722                     	if	0	;There are less than 3 active tblptr bytes
  1666  000722                     	endif
  1667  000722  501A               	movf	MangeKeys@KeyID,w,c
  1668  000724  0D03               	mullw	3
  1669  000726  0E01               	movlw	1
  1670  000728  26F3               	addwf	prodl,f,c
  1671  00072A  0E00               	movlw	0
  1672  00072C  22F4               	addwfc	prodh,f,c
  1673  00072E  0E5E               	movlw	low _KeyInternalData
  1674  000730  24F3               	addwf	prodl,w,c
  1675  000732  6ED9               	movwf	fsr2l,c
  1676  000734  0E00               	movlw	high _KeyInternalData
  1677  000736  20F4               	addwfc	prodh,w,c
  1678  000738  6EDA               	movwf	fsr2h,c
  1679  00073A  0009               	tblrd		*+
  1680  00073C  CFF5 FFDE          	movff	tablat,postinc2
  1681  000740  0008               	tblrd		*
  1682  000742  CFF5 FFDD          	movff	tablat,postdec2
  1683                           
  1684                           ;Key.c: 49: }
  1685                           ;Key.c: 50: }
  1686  000746  0012               	return	
  1687  000748                     l2228:
  1688                           
  1689                           ;Key.c: 51: else
  1690                           ;Key.c: 52: {
  1691                           ;Key.c: 53: KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
  1692  000748  501A               	movf	MangeKeys@KeyID,w,c
  1693  00074A  0D03               	mullw	3
  1694  00074C  0E01               	movlw	1
  1695  00074E  26F3               	addwf	prodl,f,c
  1696  000750  0E00               	movlw	0
  1697  000752  22F4               	addwfc	prodh,f,c
  1698  000754  0E5E               	movlw	low _KeyInternalData
  1699  000756  24F3               	addwf	prodl,w,c
  1700  000758  6ED9               	movwf	fsr2l,c
  1701  00075A  0E00               	movlw	high _KeyInternalData
  1702  00075C  20F4               	addwfc	prodh,w,c
  1703  00075E  6EDA               	movwf	fsr2h,c
  1704  000760  0E00               	movlw	0
  1705  000762  6EDE               	movwf	postinc2,c
  1706  000764  0E00               	movlw	0
  1707  000766  6EDD               	movwf	postdec2,c
  1708                           
  1709                           ;Key.c: 54: }
  1710                           ;Key.c: 55: break;
  1711  000768  0012               	return	
  1712  00076A                     l2230:
  1713                           
  1714                           ;Key.c: 57: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1715  00076A  501A               	movf	MangeKeys@KeyID,w,c
  1716  00076C  0D08               	mullw	8
  1717  00076E  0E01               	movlw	1
  1718  000770  26F3               	addwf	prodl,f,c
  1719  000772  0E00               	movlw	0
  1720  000774  22F4               	addwfc	prodh,f,c
  1721  000776  0E1B               	movlw	low _KeyArrayConfig
  1722  000778  24F3               	addwf	prodl,w,c
  1723  00077A  6EF6               	movwf	tblptrl,c
  1724  00077C  0E06               	movlw	high _KeyArrayConfig
  1725  00077E  20F4               	addwfc	prodh,w,c
  1726  000780  6EF7               	movwf	tblptrh,c
  1727  000782                     	if	0	;There are less than 3 active tblptr bytes
  1728  000782                     	endif
  1729  000782  0008               	tblrd		*
  1730  000784  50F5               	movf	tablat,w,c
  1731  000786  1819               	xorwf	MangeKeys@HWIreading,w,c
  1732  000788  A4D8               	btfss	status,2,c
  1733  00078A  D098               	goto	l2244
  1734                           
  1735                           ;Key.c: 58: {
  1736                           ;Key.c: 59: if ( KeyInternalData[KeyID].KeyCounter >=
  1737                           ;Key.c: 60: KeyArrayConfig[KeyID].ReleaseTicks)
  1738  00078C  501A               	movf	MangeKeys@KeyID,w,c
  1739  00078E  0D08               	mullw	8
  1740  000790  0E02               	movlw	2
  1741  000792  26F3               	addwf	prodl,f,c
  1742  000794  0E00               	movlw	0
  1743  000796  22F4               	addwfc	prodh,f,c
  1744  000798  0E1B               	movlw	low _KeyArrayConfig
  1745  00079A  24F3               	addwf	prodl,w,c
  1746  00079C  6EF6               	movwf	tblptrl,c
  1747  00079E  0E06               	movlw	high _KeyArrayConfig
  1748  0007A0  20F4               	addwfc	prodh,w,c
  1749  0007A2  6EF7               	movwf	tblptrh,c
  1750  0007A4                     	if	0	;There are less than 3 active tblptr bytes
  1751  0007A4                     	endif
  1752  0007A4  501A               	movf	MangeKeys@KeyID,w,c
  1753  0007A6  0D03               	mullw	3
  1754  0007A8  0E01               	movlw	1
  1755  0007AA  26F3               	addwf	prodl,f,c
  1756  0007AC  0E00               	movlw	0
  1757  0007AE  22F4               	addwfc	prodh,f,c
  1758  0007B0  0E5E               	movlw	low _KeyInternalData
  1759  0007B2  24F3               	addwf	prodl,w,c
  1760  0007B4  6ED9               	movwf	fsr2l,c
  1761  0007B6  0E00               	movlw	high _KeyInternalData
  1762  0007B8  20F4               	addwfc	prodh,w,c
  1763  0007BA  6EDA               	movwf	fsr2h,c
  1764  0007BC  0009               	tblrd		*+
  1765  0007BE  50F5               	movf	tablat,w,c
  1766  0007C0  5CDE               	subwf	postinc2,w,c
  1767  0007C2  0009               	tblrd		*+
  1768  0007C4  50F5               	movf	tablat,w,c
  1769  0007C6  58DE               	subwfb	postinc2,w,c
  1770  0007C8  A0D8               	btfss	status,0,c
  1771  0007CA  D059               	goto	l2242
  1772                           
  1773                           ;Key.c: 61: {
  1774                           ;Key.c: 62: KeyInternalData[KeyID].KeyCounter++;
  1775  0007CC  501A               	movf	MangeKeys@KeyID,w,c
  1776  0007CE  0D03               	mullw	3
  1777  0007D0  0E01               	movlw	1
  1778  0007D2  26F3               	addwf	prodl,f,c
  1779  0007D4  0E00               	movlw	0
  1780  0007D6  22F4               	addwfc	prodh,f,c
  1781  0007D8  0E5E               	movlw	low _KeyInternalData
  1782  0007DA  24F3               	addwf	prodl,w,c
  1783  0007DC  6ED9               	movwf	fsr2l,c
  1784  0007DE  0E00               	movlw	high _KeyInternalData
  1785  0007E0  20F4               	addwfc	prodh,w,c
  1786  0007E2  6EDA               	movwf	fsr2h,c
  1787  0007E4  2ADE               	incf	postinc2,f,c
  1788  0007E6  0E00               	movlw	0
  1789  0007E8  22DD               	addwfc	postdec2,f,c
  1790                           
  1791                           ;Key.c: 63: if(KeyArrayConfig[KeyID].LongPress ==
  1792                           ;Key.c: 64: KeyInternalData[KeyID].KeyCounter)
  1793  0007EA  501A               	movf	MangeKeys@KeyID,w,c
  1794  0007EC  0D03               	mullw	3
  1795  0007EE  0E01               	movlw	1
  1796  0007F0  26F3               	addwf	prodl,f,c
  1797  0007F2  0E00               	movlw	0
  1798  0007F4  22F4               	addwfc	prodh,f,c
  1799  0007F6  0E5E               	movlw	low _KeyInternalData
  1800  0007F8  24F3               	addwf	prodl,w,c
  1801  0007FA  6ED9               	movwf	fsr2l,c
  1802  0007FC  0E00               	movlw	high _KeyInternalData
  1803  0007FE  20F4               	addwfc	prodh,w,c
  1804  000800  6EDA               	movwf	fsr2h,c
  1805  000802  501A               	movf	MangeKeys@KeyID,w,c
  1806  000804  0D08               	mullw	8
  1807  000806  0E06               	movlw	6
  1808  000808  26F3               	addwf	prodl,f,c
  1809  00080A  0E00               	movlw	0
  1810  00080C  22F4               	addwfc	prodh,f,c
  1811  00080E  0E1B               	movlw	low _KeyArrayConfig
  1812  000810  24F3               	addwf	prodl,w,c
  1813  000812  6EF6               	movwf	tblptrl,c
  1814  000814  0E06               	movlw	high _KeyArrayConfig
  1815  000816  20F4               	addwfc	prodh,w,c
  1816  000818  6EF7               	movwf	tblptrh,c
  1817  00081A                     	if	0	;There are less than 3 active tblptr bytes
  1818  00081A                     	endif
  1819  00081A  50DE               	movf	postinc2,w,c
  1820  00081C  0009               	tblrd		*+
  1821  00081E  18F5               	xorwf	tablat,w,c
  1822  000820  E104               	bnz	u1461
  1823  000822  50DE               	movf	postinc2,w,c
  1824  000824  0009               	tblrd		*+
  1825  000826  18F5               	xorwf	tablat,w,c
  1826  000828  A4D8               	btfss	status,2,c
  1827  00082A                     u1461:
  1828  00082A  0012               	return	
  1829                           
  1830                           ;Key.c: 65: {
  1831                           ;Key.c: 66: KeyInternalData[KeyID].KeyState = (unsigned char)0x82;
  1832  00082C  501A               	movf	MangeKeys@KeyID,w,c
  1833  00082E  0D03               	mullw	3
  1834  000830  0E5E               	movlw	low _KeyInternalData
  1835  000832  24F3               	addwf	prodl,w,c
  1836  000834  6ED9               	movwf	fsr2l,c
  1837  000836  0E00               	movlw	high _KeyInternalData
  1838  000838  20F4               	addwfc	prodh,w,c
  1839  00083A  6EDA               	movwf	fsr2h,c
  1840  00083C  0E82               	movlw	130
  1841  00083E  6EDF               	movwf	indf2,c
  1842                           
  1843                           ;Key.c: 67: KeyInternalData[KeyID].KeyCounter =
  1844                           ;Key.c: 68: KeyArrayConfig[KeyID].ReleaseTicks;
  1845  000840  501A               	movf	MangeKeys@KeyID,w,c
  1846  000842  0D08               	mullw	8
  1847  000844  0E02               	movlw	2
  1848  000846  26F3               	addwf	prodl,f,c
  1849  000848  0E00               	movlw	0
  1850  00084A  22F4               	addwfc	prodh,f,c
  1851  00084C  0E1B               	movlw	low _KeyArrayConfig
  1852  00084E  24F3               	addwf	prodl,w,c
  1853  000850  6EF6               	movwf	tblptrl,c
  1854  000852  0E06               	movlw	high _KeyArrayConfig
  1855  000854  20F4               	addwfc	prodh,w,c
  1856  000856  6EF7               	movwf	tblptrh,c
  1857  000858                     	if	0	;There are less than 3 active tblptr bytes
  1858  000858                     	endif
  1859  000858  501A               	movf	MangeKeys@KeyID,w,c
  1860  00085A  0D03               	mullw	3
  1861  00085C  0E01               	movlw	1
  1862  00085E  26F3               	addwf	prodl,f,c
  1863  000860  0E00               	movlw	0
  1864  000862  22F4               	addwfc	prodh,f,c
  1865  000864  0E5E               	movlw	low _KeyInternalData
  1866  000866  24F3               	addwf	prodl,w,c
  1867  000868  6ED9               	movwf	fsr2l,c
  1868  00086A  0E00               	movlw	high _KeyInternalData
  1869  00086C  20F4               	addwfc	prodh,w,c
  1870  00086E  6EDA               	movwf	fsr2h,c
  1871  000870  0009               	tblrd		*+
  1872  000872  CFF5 FFDE          	movff	tablat,postinc2
  1873  000876  0008               	tblrd		*
  1874  000878  CFF5 FFDD          	movff	tablat,postdec2
  1875                           
  1876                           ;Key.c: 69: }
  1877                           ;Key.c: 70: }
  1878  00087C  0012               	return	
  1879  00087E                     l2242:
  1880                           
  1881                           ;Key.c: 71: else
  1882                           ;Key.c: 72: {
  1883                           ;Key.c: 73: KeyInternalData[KeyID].KeyCounter =
  1884                           ;Key.c: 74: KeyArrayConfig[KeyID].ReleaseTicks;
  1885  00087E  501A               	movf	MangeKeys@KeyID,w,c
  1886  000880  0D08               	mullw	8
  1887  000882  0E02               	movlw	2
  1888  000884  26F3               	addwf	prodl,f,c
  1889  000886  0E00               	movlw	0
  1890  000888  22F4               	addwfc	prodh,f,c
  1891  00088A  0E1B               	movlw	low _KeyArrayConfig
  1892  00088C  24F3               	addwf	prodl,w,c
  1893  00088E  6EF6               	movwf	tblptrl,c
  1894  000890  0E06               	movlw	high _KeyArrayConfig
  1895  000892  20F4               	addwfc	prodh,w,c
  1896  000894  6EF7               	movwf	tblptrh,c
  1897  000896                     	if	0	;There are less than 3 active tblptr bytes
  1898  000896                     	endif
  1899  000896  501A               	movf	MangeKeys@KeyID,w,c
  1900  000898  0D03               	mullw	3
  1901  00089A  0E01               	movlw	1
  1902  00089C  26F3               	addwf	prodl,f,c
  1903  00089E  0E00               	movlw	0
  1904  0008A0  22F4               	addwfc	prodh,f,c
  1905  0008A2  0E5E               	movlw	low _KeyInternalData
  1906  0008A4  24F3               	addwf	prodl,w,c
  1907  0008A6  6ED9               	movwf	fsr2l,c
  1908  0008A8  0E00               	movlw	high _KeyInternalData
  1909  0008AA  20F4               	addwfc	prodh,w,c
  1910  0008AC  6EDA               	movwf	fsr2h,c
  1911  0008AE  0009               	tblrd		*+
  1912  0008B0  CFF5 FFDE          	movff	tablat,postinc2
  1913  0008B4  0008               	tblrd		*
  1914  0008B6  CFF5 FFDD          	movff	tablat,postdec2
  1915                           
  1916                           ;Key.c: 75: }
  1917                           ;Key.c: 76: }
  1918  0008BA  0012               	return	
  1919  0008BC                     l2244:
  1920                           
  1921                           ;Key.c: 77: else
  1922                           ;Key.c: 78: {
  1923                           ;Key.c: 79: if ( KeyInternalData[KeyID].KeyCounter >
  1924                           ;Key.c: 80: KeyArrayConfig[KeyID].ReleaseTicks)
  1925  0008BC  501A               	movf	MangeKeys@KeyID,w,c
  1926  0008BE  0D03               	mullw	3
  1927  0008C0  0E01               	movlw	1
  1928  0008C2  26F3               	addwf	prodl,f,c
  1929  0008C4  0E00               	movlw	0
  1930  0008C6  22F4               	addwfc	prodh,f,c
  1931  0008C8  0E5E               	movlw	low _KeyInternalData
  1932  0008CA  24F3               	addwf	prodl,w,c
  1933  0008CC  6ED9               	movwf	fsr2l,c
  1934  0008CE  0E00               	movlw	high _KeyInternalData
  1935  0008D0  20F4               	addwfc	prodh,w,c
  1936  0008D2  6EDA               	movwf	fsr2h,c
  1937  0008D4  501A               	movf	MangeKeys@KeyID,w,c
  1938  0008D6  0D08               	mullw	8
  1939  0008D8  0E02               	movlw	2
  1940  0008DA  26F3               	addwf	prodl,f,c
  1941  0008DC  0E00               	movlw	0
  1942  0008DE  22F4               	addwfc	prodh,f,c
  1943  0008E0  0E1B               	movlw	low _KeyArrayConfig
  1944  0008E2  24F3               	addwf	prodl,w,c
  1945  0008E4  6EF6               	movwf	tblptrl,c
  1946  0008E6  0E06               	movlw	high _KeyArrayConfig
  1947  0008E8  20F4               	addwfc	prodh,w,c
  1948  0008EA  6EF7               	movwf	tblptrh,c
  1949  0008EC                     	if	0	;There are less than 3 active tblptr bytes
  1950  0008EC                     	endif
  1951  0008EC  50DE               	movf	postinc2,w,c
  1952  0008EE  0009               	tblrd		*+
  1953  0008F0  5CF5               	subwf	tablat,w,c
  1954  0008F2  50DE               	movf	postinc2,w,c
  1955  0008F4  0009               	tblrd		*+
  1956  0008F6  58F5               	subwfb	tablat,w,c
  1957  0008F8  B0D8               	btfsc	status,0,c
  1958  0008FA  D01F               	goto	l2248
  1959                           
  1960                           ;Key.c: 81: {
  1961                           ;Key.c: 82: KeyInternalData[KeyID].KeyCounter =
  1962                           ;Key.c: 83: KeyArrayConfig[KeyID].ReleaseTicks;
  1963  0008FC  501A               	movf	MangeKeys@KeyID,w,c
  1964  0008FE  0D08               	mullw	8
  1965  000900  0E02               	movlw	2
  1966  000902  26F3               	addwf	prodl,f,c
  1967  000904  0E00               	movlw	0
  1968  000906  22F4               	addwfc	prodh,f,c
  1969  000908  0E1B               	movlw	low _KeyArrayConfig
  1970  00090A  24F3               	addwf	prodl,w,c
  1971  00090C  6EF6               	movwf	tblptrl,c
  1972  00090E  0E06               	movlw	high _KeyArrayConfig
  1973  000910  20F4               	addwfc	prodh,w,c
  1974  000912  6EF7               	movwf	tblptrh,c
  1975  000914                     	if	0	;There are less than 3 active tblptr bytes
  1976  000914                     	endif
  1977  000914  501A               	movf	MangeKeys@KeyID,w,c
  1978  000916  0D03               	mullw	3
  1979  000918  0E01               	movlw	1
  1980  00091A  26F3               	addwf	prodl,f,c
  1981  00091C  0E00               	movlw	0
  1982  00091E  22F4               	addwfc	prodh,f,c
  1983  000920  0E5E               	movlw	low _KeyInternalData
  1984  000922  24F3               	addwf	prodl,w,c
  1985  000924  6ED9               	movwf	fsr2l,c
  1986  000926  0E00               	movlw	high _KeyInternalData
  1987  000928  20F4               	addwfc	prodh,w,c
  1988  00092A  6EDA               	movwf	fsr2h,c
  1989  00092C  0009               	tblrd		*+
  1990  00092E  CFF5 FFDE          	movff	tablat,postinc2
  1991  000932  0008               	tblrd		*
  1992  000934  CFF5 FFDD          	movff	tablat,postdec2
  1993                           
  1994                           ;Key.c: 84: }
  1995  000938  0012               	return	
  1996  00093A                     l2248:
  1997                           
  1998                           ;Key.c: 85: else
  1999                           ;Key.c: 86: {
  2000                           ;Key.c: 87: KeyInternalData[KeyID].KeyCounter--;
  2001  00093A  501A               	movf	MangeKeys@KeyID,w,c
  2002  00093C  0D03               	mullw	3
  2003  00093E  0E01               	movlw	1
  2004  000940  26F3               	addwf	prodl,f,c
  2005  000942  0E00               	movlw	0
  2006  000944  22F4               	addwfc	prodh,f,c
  2007  000946  0E5E               	movlw	low _KeyInternalData
  2008  000948  24F3               	addwf	prodl,w,c
  2009  00094A  6ED9               	movwf	fsr2l,c
  2010  00094C  0E00               	movlw	high _KeyInternalData
  2011  00094E  20F4               	addwfc	prodh,w,c
  2012  000950  6EDA               	movwf	fsr2h,c
  2013  000952  06DE               	decf	postinc2,f,c
  2014  000954  0E00               	movlw	0
  2015  000956  5ADD               	subwfb	postdec2,f,c
  2016                           
  2017                           ;Key.c: 88: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2018  000958  501A               	movf	MangeKeys@KeyID,w,c
  2019  00095A  0D03               	mullw	3
  2020  00095C  0E01               	movlw	1
  2021  00095E  26F3               	addwf	prodl,f,c
  2022  000960  0E00               	movlw	0
  2023  000962  22F4               	addwfc	prodh,f,c
  2024  000964  0E5E               	movlw	low _KeyInternalData
  2025  000966  24F3               	addwf	prodl,w,c
  2026  000968  6ED9               	movwf	fsr2l,c
  2027  00096A  0E00               	movlw	high _KeyInternalData
  2028  00096C  20F4               	addwfc	prodh,w,c
  2029  00096E  6EDA               	movwf	fsr2h,c
  2030  000970  50DE               	movf	postinc2,w,c
  2031  000972  10DE               	iorwf	postinc2,w,c
  2032  000974  A4D8               	btfss	status,2,c
  2033  000976  0012               	return	
  2034                           
  2035                           ;Key.c: 89: {
  2036                           ;Key.c: 90: KeyInternalData[KeyID].KeyState = (unsigned char)0x40;
  2037  000978  501A               	movf	MangeKeys@KeyID,w,c
  2038  00097A  0D03               	mullw	3
  2039  00097C  0E5E               	movlw	low _KeyInternalData
  2040  00097E  24F3               	addwf	prodl,w,c
  2041  000980  6ED9               	movwf	fsr2l,c
  2042  000982  0E00               	movlw	high _KeyInternalData
  2043  000984  20F4               	addwfc	prodh,w,c
  2044  000986  6EDA               	movwf	fsr2h,c
  2045  000988  0E40               	movlw	64
  2046  00098A  6EDF               	movwf	indf2,c
  2047                           
  2048                           ;Key.c: 91: }
  2049                           ;Key.c: 92: }
  2050                           ;Key.c: 93: }
  2051                           ;Key.c: 94: break;
  2052  00098C  0012               	return	
  2053  00098E                     l2252:
  2054                           
  2055                           ;Key.c: 96: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  2056  00098E  501A               	movf	MangeKeys@KeyID,w,c
  2057  000990  0D08               	mullw	8
  2058  000992  0E01               	movlw	1
  2059  000994  26F3               	addwf	prodl,f,c
  2060  000996  0E00               	movlw	0
  2061  000998  22F4               	addwfc	prodh,f,c
  2062  00099A  0E1B               	movlw	low _KeyArrayConfig
  2063  00099C  24F3               	addwf	prodl,w,c
  2064  00099E  6EF6               	movwf	tblptrl,c
  2065  0009A0  0E06               	movlw	high _KeyArrayConfig
  2066  0009A2  20F4               	addwfc	prodh,w,c
  2067  0009A4  6EF7               	movwf	tblptrh,c
  2068  0009A6                     	if	0	;There are less than 3 active tblptr bytes
  2069  0009A6                     	endif
  2070  0009A6  0008               	tblrd		*
  2071  0009A8  50F5               	movf	tablat,w,c
  2072  0009AA  1819               	xorwf	MangeKeys@HWIreading,w,c
  2073  0009AC  A4D8               	btfss	status,2,c
  2074  0009AE  D01F               	goto	l2256
  2075                           
  2076                           ;Key.c: 97: {
  2077                           ;Key.c: 98: KeyInternalData[KeyID].KeyCounter =
  2078                           ;Key.c: 99: KeyArrayConfig[KeyID].ReleaseTicks;
  2079  0009B0  501A               	movf	MangeKeys@KeyID,w,c
  2080  0009B2  0D08               	mullw	8
  2081  0009B4  0E02               	movlw	2
  2082  0009B6  26F3               	addwf	prodl,f,c
  2083  0009B8  0E00               	movlw	0
  2084  0009BA  22F4               	addwfc	prodh,f,c
  2085  0009BC  0E1B               	movlw	low _KeyArrayConfig
  2086  0009BE  24F3               	addwf	prodl,w,c
  2087  0009C0  6EF6               	movwf	tblptrl,c
  2088  0009C2  0E06               	movlw	high _KeyArrayConfig
  2089  0009C4  20F4               	addwfc	prodh,w,c
  2090  0009C6  6EF7               	movwf	tblptrh,c
  2091  0009C8                     	if	0	;There are less than 3 active tblptr bytes
  2092  0009C8                     	endif
  2093  0009C8  501A               	movf	MangeKeys@KeyID,w,c
  2094  0009CA  0D03               	mullw	3
  2095  0009CC  0E01               	movlw	1
  2096  0009CE  26F3               	addwf	prodl,f,c
  2097  0009D0  0E00               	movlw	0
  2098  0009D2  22F4               	addwfc	prodh,f,c
  2099  0009D4  0E5E               	movlw	low _KeyInternalData
  2100  0009D6  24F3               	addwf	prodl,w,c
  2101  0009D8  6ED9               	movwf	fsr2l,c
  2102  0009DA  0E00               	movlw	high _KeyInternalData
  2103  0009DC  20F4               	addwfc	prodh,w,c
  2104  0009DE  6EDA               	movwf	fsr2h,c
  2105  0009E0  0009               	tblrd		*+
  2106  0009E2  CFF5 FFDE          	movff	tablat,postinc2
  2107  0009E6  0008               	tblrd		*
  2108  0009E8  CFF5 FFDD          	movff	tablat,postdec2
  2109                           
  2110                           ;Key.c: 100: }
  2111  0009EC  0012               	return	
  2112  0009EE                     l2256:
  2113                           
  2114                           ;Key.c: 101: else
  2115                           ;Key.c: 102: {
  2116                           ;Key.c: 103: KeyInternalData[KeyID].KeyCounter--;
  2117  0009EE  501A               	movf	MangeKeys@KeyID,w,c
  2118  0009F0  0D03               	mullw	3
  2119  0009F2  0E01               	movlw	1
  2120  0009F4  26F3               	addwf	prodl,f,c
  2121  0009F6  0E00               	movlw	0
  2122  0009F8  22F4               	addwfc	prodh,f,c
  2123  0009FA  0E5E               	movlw	low _KeyInternalData
  2124  0009FC  24F3               	addwf	prodl,w,c
  2125  0009FE  6ED9               	movwf	fsr2l,c
  2126  000A00  0E00               	movlw	high _KeyInternalData
  2127  000A02  20F4               	addwfc	prodh,w,c
  2128  000A04  6EDA               	movwf	fsr2h,c
  2129  000A06  06DE               	decf	postinc2,f,c
  2130  000A08  0E00               	movlw	0
  2131  000A0A  5ADD               	subwfb	postdec2,f,c
  2132                           
  2133                           ;Key.c: 104: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2134  000A0C  501A               	movf	MangeKeys@KeyID,w,c
  2135  000A0E  0D03               	mullw	3
  2136  000A10  0E01               	movlw	1
  2137  000A12  26F3               	addwf	prodl,f,c
  2138  000A14  0E00               	movlw	0
  2139  000A16  22F4               	addwfc	prodh,f,c
  2140  000A18  0E5E               	movlw	low _KeyInternalData
  2141  000A1A  24F3               	addwf	prodl,w,c
  2142  000A1C  6ED9               	movwf	fsr2l,c
  2143  000A1E  0E00               	movlw	high _KeyInternalData
  2144  000A20  20F4               	addwfc	prodh,w,c
  2145  000A22  6EDA               	movwf	fsr2h,c
  2146  000A24  50DE               	movf	postinc2,w,c
  2147  000A26  10DE               	iorwf	postinc2,w,c
  2148  000A28  A4D8               	btfss	status,2,c
  2149  000A2A  0012               	return	
  2150                           
  2151                           ;Key.c: 105: {
  2152                           ;Key.c: 106: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  2153  000A2C  501A               	movf	MangeKeys@KeyID,w,c
  2154  000A2E  0D03               	mullw	3
  2155  000A30  0E5E               	movlw	low _KeyInternalData
  2156  000A32  24F3               	addwf	prodl,w,c
  2157  000A34  6ED9               	movwf	fsr2l,c
  2158  000A36  0E00               	movlw	high _KeyInternalData
  2159  000A38  20F4               	addwfc	prodh,w,c
  2160  000A3A  6EDA               	movwf	fsr2h,c
  2161  000A3C  0E80               	movlw	128
  2162  000A3E  6EDF               	movwf	indf2,c
  2163                           
  2164                           ;Key.c: 107: }
  2165                           ;Key.c: 108: }
  2166                           ;Key.c: 109: break;
  2167  000A40  0012               	return	
  2168  000A42                     l2260:
  2169                           
  2170                           ;Key.c: 111: KeyInternalData[KeyID].KeyState = (unsigned char)0x00;
  2171  000A42  501A               	movf	MangeKeys@KeyID,w,c
  2172  000A44  0D03               	mullw	3
  2173  000A46  0E5E               	movlw	low _KeyInternalData
  2174  000A48  24F3               	addwf	prodl,w,c
  2175  000A4A  6ED9               	movwf	fsr2l,c
  2176  000A4C  0E00               	movlw	high _KeyInternalData
  2177  000A4E  20F4               	addwfc	prodh,w,c
  2178  000A50  6EDA               	movwf	fsr2h,c
  2179  000A52  0E00               	movlw	0
  2180  000A54  6EDF               	movwf	indf2,c
  2181                           
  2182                           ;Key.c: 113: }
  2183                           
  2184                           ;Key.c: 112: break;
  2185  000A56  0012               	return	
  2186  000A58                     l2264:
  2187  000A58  5018               	movf	MangeKeys@KeyState,w,c
  2188                           
  2189                           ; Switch size 1, requested type "space"
  2190                           ; Number of cases is 3, Range of values is 0 to 2
  2191                           ; switch strategies available:
  2192                           ; Name         Instructions Cycles
  2193                           ; simple_byte           10     6 (average)
  2194                           ;	Chosen strategy is simple_byte
  2195  000A5A  0A00               	xorlw	0	; case 0
  2196  000A5C  B4D8               	btfsc	status,2,c
  2197  000A5E  D60A               	goto	l2218
  2198  000A60  0A01               	xorlw	1	; case 1
  2199  000A62  B4D8               	btfsc	status,2,c
  2200  000A64  D682               	goto	l2230
  2201  000A66  0A03               	xorlw	3	; case 2
  2202  000A68  B4D8               	btfsc	status,2,c
  2203  000A6A  D791               	goto	l2252
  2204  000A6C  D7EA               	goto	l2260
  2205  000A6E                     __end_of_MangeKeys:
  2206                           	opt stack 0
  2207                           tosu	equ	0xFFF
  2208                           tosh	equ	0xFFE
  2209                           tosl	equ	0xFFD
  2210                           pclath	equ	0xFFA
  2211                           tblptru	equ	0xFF8
  2212                           tblptrh	equ	0xFF7
  2213                           tblptrl	equ	0xFF6
  2214                           tablat	equ	0xFF5
  2215                           prodh	equ	0xFF4
  2216                           prodl	equ	0xFF3
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postinc1	equ	0xFE6
  2220                           fsr1h	equ	0xFE2
  2221                           fsr1l	equ	0xFE1
  2222                           indf2	equ	0xFDF
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _HWI_DIGI_READ *****************
  2230 ;; Defined at:
  2231 ;;		line 92 in file "../../HWIsource/HWI_DIGITAL.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  pin             1    wreg     unsigned char 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  pin             1   19[COMRAM] unsigned char 
  2236 ;;  HWIread         1   20[COMRAM] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      unsigned char 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2246 ;;      Params:         0       0       0       0       0       0       0
  2247 ;;      Locals:         2       0       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0
  2249 ;;      Totals:         2       0       0       0       0       0       0
  2250 ;;Total ram usage:        2 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    4
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_MangeKeys
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text10
  2261  0014D2                     __ptext10:
  2262                           	opt stack 0
  2263  0014D2                     _HWI_DIGI_READ:
  2264                           	opt stack 22
  2265                           
  2266                           ;incstack = 0
  2267                           ;HWI_DIGI_READ@pin stored from wreg
  2268  0014D2  6E14               	movwf	HWI_DIGI_READ@pin,c
  2269                           
  2270                           ;HWI_DIGITAL.c: 94: unsigned char HWIread;
  2271                           ;HWI_DIGITAL.c: 96: switch (pin)
  2272  0014D4  D00F               	goto	l2092
  2273  0014D6                     l430:
  2274                           
  2275                           ;HWI_DIGITAL.c: 99: HWIread = PORTBbits.RB2;
  2276  0014D6  0E00               	movlw	0
  2277  0014D8  B481               	btfsc	3969,2,c	;volatile
  2278  0014DA  0E01               	movlw	1
  2279  0014DC  D009               	goto	L1
  2280  0014DE                     l432:
  2281                           
  2282                           ;HWI_DIGITAL.c: 102: HWIread = PORTBbits.RB3;
  2283  0014DE  0E00               	movlw	0
  2284  0014E0  B681               	btfsc	3969,3,c	;volatile
  2285  0014E2  0E01               	movlw	1
  2286  0014E4  D005               	goto	L1
  2287  0014E6                     l433:
  2288                           
  2289                           ;HWI_DIGITAL.c: 105: HWIread = PORTBbits.RB4;
  2290  0014E6  0E00               	movlw	0
  2291  0014E8  B881               	btfsc	3969,4,c	;volatile
  2292  0014EA  0E01               	movlw	1
  2293  0014EC  D001               	goto	L1
  2294  0014EE                     l2088:
  2295                           
  2296                           ;HWI_DIGITAL.c: 108: HWIread = (unsigned char)0;
  2297  0014EE  0E00               	movlw	0
  2298  0014F0                     L1:
  2299  0014F0  6E15               	movwf	HWI_DIGI_READ@HWIread,c
  2300                           
  2301                           ;HWI_DIGITAL.c: 110: }
  2302                           
  2303                           ;HWI_DIGITAL.c: 109: break;
  2304  0014F2  D00B               	goto	l431
  2305  0014F4                     l2092:
  2306  0014F4  5014               	movf	HWI_DIGI_READ@pin,w,c
  2307                           
  2308                           ; Switch size 1, requested type "space"
  2309                           ; Number of cases is 3, Range of values is 15 to 17
  2310                           ; switch strategies available:
  2311                           ; Name         Instructions Cycles
  2312                           ; simple_byte           10     6 (average)
  2313                           ;	Chosen strategy is simple_byte
  2314  0014F6  0A0F               	xorlw	15	; case 15
  2315  0014F8  B4D8               	btfsc	status,2,c
  2316  0014FA  D7ED               	goto	l430
  2317  0014FC  0A1F               	xorlw	31	; case 16
  2318  0014FE  B4D8               	btfsc	status,2,c
  2319  001500  D7EE               	goto	l432
  2320  001502  0A01               	xorlw	1	; case 17
  2321  001504  B4D8               	btfsc	status,2,c
  2322  001506  D7EF               	goto	l433
  2323  001508  D7F2               	goto	l2088
  2324  00150A                     l431:
  2325                           
  2326                           ;HWI_DIGITAL.c: 111: return HWIread;
  2327  00150A  5015               	movf	HWI_DIGI_READ@HWIread,w,c
  2328  00150C  0012               	return		;funcret
  2329  00150E                     __end_of_HWI_DIGI_READ:
  2330                           	opt stack 0
  2331                           tosu	equ	0xFFF
  2332                           tosh	equ	0xFFE
  2333                           tosl	equ	0xFFD
  2334                           pclath	equ	0xFFA
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postinc1	equ	0xFE6
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _EepromManage *****************
  2354 ;; Defined at:
  2355 ;;		line 74 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  WriteSuccess    1   22[COMRAM] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2369 ;;      Params:         0       0       0       0       0       0       0
  2370 ;;      Locals:         1       0       0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0
  2372 ;;      Totals:         1       0       0       0       0       0       0
  2373 ;;Total ram usage:        1 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    5
  2376 ;; This function calls:
  2377 ;;		_HWIeeprom_Write
  2378 ;; This function is called by:
  2379 ;;		_ManageDrivers
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text11
  2384  001416                     __ptext11:
  2385                           	opt stack 0
  2386  001416                     _EepromManage:
  2387                           	opt stack 22
  2388                           
  2389                           ;Eeprom.c: 76: static unsigned char WriteIndex = ((unsigned char)0);
  2390                           ;Eeprom.c: 77: unsigned char WriteSuccess;
  2391                           ;Eeprom.c: 79: if((unsigned char)1 == WriteRequest )
  2392                           
  2393                           ;incstack = 0
  2394  001416  0457               	decf	_WriteRequest,w,c
  2395  001418  A4D8               	btfss	status,2,c
  2396  00141A  0012               	return	
  2397                           
  2398                           ;Eeprom.c: 80: {
  2399                           ;Eeprom.c: 81: if(WriteIndex == DataSize)
  2400  00141C  5055               	movf	_DataSize,w,c
  2401  00141E  1854               	xorwf	EepromManage@WriteIndex,w,c
  2402  001420  A4D8               	btfss	status,2,c
  2403  001422  D005               	goto	l2208
  2404                           
  2405                           ;Eeprom.c: 82: {
  2406                           ;Eeprom.c: 83: WriteIndex = (unsigned char)0;
  2407  001424  0E00               	movlw	0
  2408  001426  6E54               	movwf	EepromManage@WriteIndex,c
  2409                           
  2410                           ;Eeprom.c: 84: WriteRequest = (unsigned char)0;
  2411  001428  0E00               	movlw	0
  2412  00142A  6E57               	movwf	_WriteRequest,c
  2413                           
  2414                           ;Eeprom.c: 88: }
  2415                           ;Eeprom.c: 89: }
  2416  00142C  0012               	return	
  2417  00142E                     l2208:
  2418                           
  2419                           ;Eeprom.c: 90: else
  2420                           ;Eeprom.c: 91: {
  2421                           ;Eeprom.c: 92: WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[Writ
      +                          eIndex]);
  2422  00142E  5054               	movf	EepromManage@WriteIndex,w,c
  2423  001430  0D01               	mullw	1
  2424  001432  0E80               	movlw	low _DataArray
  2425  001434  24F3               	addwf	prodl,w,c
  2426  001436  6ED9               	movwf	fsr2l,c
  2427  001438  0E00               	movlw	high _DataArray
  2428  00143A  20F4               	addwfc	prodh,w,c
  2429  00143C  6EDA               	movwf	fsr2h,c
  2430  00143E  50DF               	movf	indf2,w,c
  2431  001440  6E14               	movwf	HWIeeprom_Write@Data,c
  2432  001442  5056               	movf	_EEPROMaddr,w,c
  2433  001444  2454               	addwf	EepromManage@WriteIndex,w,c
  2434  001446  ECBE  F00A         	call	_HWIeeprom_Write
  2435  00144A  6E17               	movwf	EepromManage@WriteSuccess,c
  2436                           
  2437                           ;Eeprom.c: 93: if( (unsigned char)1 == WriteSuccess )
  2438  00144C  0417               	decf	EepromManage@WriteSuccess,w,c
  2439  00144E  A4D8               	btfss	status,2,c
  2440  001450  0012               	return	
  2441                           
  2442                           ;Eeprom.c: 94: {
  2443                           ;Eeprom.c: 95: WriteIndex++;
  2444  001452  2A54               	incf	EepromManage@WriteIndex,f,c
  2445  001454  0012               	return	
  2446  001456                     __end_of_EepromManage:
  2447                           	opt stack 0
  2448                           tosu	equ	0xFFF
  2449                           tosh	equ	0xFFE
  2450                           tosl	equ	0xFFD
  2451                           pclath	equ	0xFFA
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           postinc0	equ	0xFEE
  2459                           wreg	equ	0xFE8
  2460                           postinc1	equ	0xFE6
  2461                           fsr1h	equ	0xFE2
  2462                           fsr1l	equ	0xFE1
  2463                           indf2	equ	0xFDF
  2464                           postinc2	equ	0xFDE
  2465                           postdec2	equ	0xFDD
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _HWIeeprom_Write *****************
  2471 ;; Defined at:
  2472 ;;		line 6 in file "../../HWIeeprom/HWIeeprom.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  address         1    wreg     unsigned char 
  2475 ;;  Data            1   19[COMRAM] unsigned char 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  address         1   20[COMRAM] unsigned char 
  2478 ;;  WriteSuccess    1   21[COMRAM] unsigned char 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      unsigned char 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2488 ;;      Params:         1       0       0       0       0       0       0
  2489 ;;      Locals:         2       0       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0
  2491 ;;      Totals:         3       0       0       0       0       0       0
  2492 ;;Total ram usage:        3 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    4
  2495 ;; This function calls:
  2496 ;;		Nothing
  2497 ;; This function is called by:
  2498 ;;		_EepromManage
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text12
  2503  00157C                     __ptext12:
  2504                           	opt stack 0
  2505  00157C                     _HWIeeprom_Write:
  2506                           	opt stack 22
  2507                           
  2508                           ;incstack = 0
  2509                           ;HWIeeprom_Write@address stored from wreg
  2510  00157C  6E15               	movwf	HWIeeprom_Write@address,c
  2511                           
  2512                           ;HWIeeprom.c: 8: unsigned char WriteSuccess;
  2513                           ;HWIeeprom.c: 9: if((unsigned char)0 == EECON1bits.WR )
  2514  00157E  B2A6               	btfsc	4006,1,c	;volatile
  2515  001580  D010               	goto	l2080
  2516                           
  2517                           ;HWIeeprom.c: 10: {
  2518                           ;HWIeeprom.c: 11: EEADR = address;
  2519  001582  C015  FFA9         	movff	HWIeeprom_Write@address,4009	;volatile
  2520                           
  2521                           ;HWIeeprom.c: 12: EEDATA = Data;
  2522  001586  C014  FFA8         	movff	HWIeeprom_Write@Data,4008	;volatile
  2523                           
  2524                           ;HWIeeprom.c: 13: EECON1bits.EEPGD = (unsigned char)0;
  2525  00158A  9EA6               	bcf	4006,7,c	;volatile
  2526                           
  2527                           ;HWIeeprom.c: 14: EECON1bits.CFGS = (unsigned char)0;
  2528  00158C  9CA6               	bcf	4006,6,c	;volatile
  2529                           
  2530                           ;HWIeeprom.c: 15: EECON1bits.WREN = (unsigned char)1;
  2531  00158E  84A6               	bsf	4006,2,c	;volatile
  2532                           
  2533                           ;HWIeeprom.c: 17: INTCONbits.GIE = (unsigned char)0;
  2534  001590  9EF2               	bcf	intcon,7,c	;volatile
  2535                           
  2536                           ;HWIeeprom.c: 18: EECON2 = (unsigned char)0x55;
  2537  001592  0E55               	movlw	85
  2538  001594  6EA7               	movwf	4007,c	;volatile
  2539                           
  2540                           ;HWIeeprom.c: 19: EECON2 = (unsigned char)0xAA;
  2541  001596  0EAA               	movlw	170
  2542  001598  6EA7               	movwf	4007,c	;volatile
  2543                           
  2544                           ;HWIeeprom.c: 20: EECON1bits.WR = (unsigned char)1;
  2545  00159A  82A6               	bsf	4006,1,c	;volatile
  2546                           
  2547                           ;HWIeeprom.c: 21: INTCONbits.GIE = (unsigned char)1;
  2548  00159C  8EF2               	bsf	intcon,7,c	;volatile
  2549                           
  2550                           ;HWIeeprom.c: 22: WriteSuccess = (unsigned char)1;
  2551  00159E  0E01               	movlw	1
  2552  0015A0  D001               	goto	L2
  2553  0015A2                     l2080:
  2554                           
  2555                           ;HWIeeprom.c: 24: else
  2556                           ;HWIeeprom.c: 25: {
  2557                           ;HWIeeprom.c: 26: WriteSuccess = (unsigned char)0;
  2558  0015A2  0E00               	movlw	0
  2559  0015A4                     L2:
  2560  0015A4  6E16               	movwf	HWIeeprom_Write@WriteSuccess,c
  2561                           
  2562                           ;HWIeeprom.c: 27: }
  2563                           ;HWIeeprom.c: 29: return WriteSuccess;
  2564  0015A6  5016               	movf	HWIeeprom_Write@WriteSuccess,w,c
  2565  0015A8  0012               	return	
  2566  0015AA                     __end_of_HWIeeprom_Write:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           postinc1	equ	0xFE6
  2582                           fsr1h	equ	0xFE2
  2583                           fsr1l	equ	0xFE1
  2584                           indf2	equ	0xFDF
  2585                           postinc2	equ	0xFDE
  2586                           postdec2	equ	0xFDD
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _APP_MANAGE *****************
  2592 ;; Defined at:
  2593 ;;		line 52 in file "../../../../Common/App/APP.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  TravelledDis    4    3[BANK0 ] unsigned long 
  2598 ;;  AvgSpeedKph     2    0[BANK0 ] unsigned short 
  2599 ;;  keystatus       1    7[BANK0 ] unsigned char 
  2600 ;;  keystatus2      1    2[BANK0 ] unsigned char 
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2610 ;;      Params:         0       0       0       0       0       0       0
  2611 ;;      Locals:         0       8       0       0       0       0       0
  2612 ;;      Temps:          1       0       0       0       0       0       0
  2613 ;;      Totals:         1       8       0       0       0       0       0
  2614 ;;Total ram usage:        9 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    6
  2617 ;; This function calls:
  2618 ;;		_BCDsendNumber
  2619 ;;		_BlinkDigit
  2620 ;;		_Eeprom_Write_Block
  2621 ;;		_GetAvgSpeed
  2622 ;;		_GetDistance
  2623 ;;		_GetKeyStatus
  2624 ;;		_IncrementDecrementSingleDigit
  2625 ;;		_SetCircumfirunce
  2626 ;;		___lmul
  2627 ;; This function is called by:
  2628 ;;		_ManageApplication
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text13
  2633  000A6E                     __ptext13:
  2634                           	opt stack 0
  2635  000A6E                     _APP_MANAGE:
  2636                           	opt stack 21
  2637                           
  2638                           ;APP.c: 54: static unsigned blinkIndex = (unsigned char)0;
  2639                           ;APP.c: 55: static unsigned bIsBlinkMode = (unsigned char)0;
  2640                           ;APP.c: 56: unsigned short AvgSpeedKph;
  2641                           ;APP.c: 57: unsigned long TravelledDistance;
  2642                           ;APP.c: 58: unsigned char keystatus;
  2643                           ;APP.c: 59: unsigned char keystatus2;
  2644                           ;APP.c: 64: SetCircumfirunce(Circum);
  2645                           
  2646                           ;incstack = 0
  2647  000A6E  C067  F014         	movff	_Circum,SetCircumfirunce@Circum
  2648  000A72  C068  F015         	movff	_Circum+1,SetCircumfirunce@Circum+1
  2649  000A76  EC9B  F00B         	call	_SetCircumfirunce	;wreg free
  2650                           
  2651                           ;APP.c: 66: AvgSpeedKph = GetAvgSpeed(1);
  2652  000A7A  0E01               	movlw	1
  2653  000A7C  ECEB  F007         	call	_GetAvgSpeed
  2654  000A80  C02D  F0C2         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  2655  000A84  C02E  F0C3         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  2656                           
  2657                           ;APP.c: 67: TravelledDistance = GetDistance();
  2658  000A88  EC8C  F00B         	call	_GetDistance	;wreg free
  2659  000A8C  C014  F0C5         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  2660  000A90  C015  F0C6         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  2661  000A94  C016  F0C7         	movff	?_GetDistance+2,APP_MANAGE@TravelledDistance+2
  2662  000A98  C017  F0C8         	movff	?_GetDistance+3,APP_MANAGE@TravelledDistance+3
  2663                           
  2664                           ;APP.c: 68: TravelledDistance *= (unsigned long)10;
  2665  000A9C  C0C5  F014         	movff	APP_MANAGE@TravelledDistance,___lmul@multiplier
  2666  000AA0  C0C6  F015         	movff	APP_MANAGE@TravelledDistance+1,___lmul@multiplier+1
  2667  000AA4  C0C7  F016         	movff	APP_MANAGE@TravelledDistance+2,___lmul@multiplier+2
  2668  000AA8  C0C8  F017         	movff	APP_MANAGE@TravelledDistance+3,___lmul@multiplier+3
  2669  000AAC  0E0A               	movlw	10
  2670  000AAE  6E18               	movwf	___lmul@multiplicand,c
  2671  000AB0  0E00               	movlw	0
  2672  000AB2  6E19               	movwf	___lmul@multiplicand+1,c
  2673  000AB4  0E00               	movlw	0
  2674  000AB6  6E1A               	movwf	___lmul@multiplicand+2,c
  2675  000AB8  0E00               	movlw	0
  2676  000ABA  6E1B               	movwf	___lmul@multiplicand+3,c
  2677  000ABC  EC96  F009         	call	___lmul	;wreg free
  2678  000AC0  C014  F0C5         	movff	?___lmul,APP_MANAGE@TravelledDistance
  2679  000AC4  C015  F0C6         	movff	?___lmul+1,APP_MANAGE@TravelledDistance+1
  2680  000AC8  C016  F0C7         	movff	?___lmul+2,APP_MANAGE@TravelledDistance+2
  2681  000ACC  C017  F0C8         	movff	?___lmul+3,APP_MANAGE@TravelledDistance+3
  2682                           
  2683                           ;APP.c: 69: TravelledDistance /= (unsigned long)16;
  2684  000AD0  0E04               	movlw	4
  2685  000AD2  6E36               	movwf	??_APP_MANAGE& (0+255),c
  2686  000AD4                     u2035:
  2687  000AD4  90D8               	bcf	status,0,c
  2688  000AD6  0100               	movlb	0	; () banked
  2689  000AD8  33C8               	rrcf	(APP_MANAGE@TravelledDistance+3)& (0+255),f,b
  2690  000ADA  33C7               	rrcf	(APP_MANAGE@TravelledDistance+2)& (0+255),f,b
  2691  000ADC  33C6               	rrcf	(APP_MANAGE@TravelledDistance+1)& (0+255),f,b
  2692  000ADE  33C5               	rrcf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2693  000AE0  2E36               	decfsz	??_APP_MANAGE& (0+255),f,c
  2694  000AE2  D7F8               	goto	u2035
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;APP.c: 71: if( (unsigned char)0 == WriteFlag)
  2698  000AE4  505D               	movf	_WriteFlag,w,c
  2699  000AE6  A4D8               	btfss	status,2,c
  2700  000AE8  0012               	return	
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;APP.c: 72: {
  2704                           ;APP.c: 73: if(bIsBlinkMode == (unsigned char)0)
  2705  000AEA  504B               	movf	APP_MANAGE@bIsBlinkMode,w,c
  2706  000AEC  104C               	iorwf	APP_MANAGE@bIsBlinkMode+1,w,c
  2707  000AEE  A4D8               	btfss	status,2,c
  2708  000AF0  D019               	goto	l2664
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;APP.c: 74: {
  2712                           ;APP.c: 75: BCDsendNumber(AvgSpeedKph,1 ,1);
  2713  000AF2  C0C2  F01B         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  2714  000AF6  C0C3  F01C         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  2715  000AFA  0E01               	movlw	1
  2716  000AFC  6E1D               	movwf	BCDsendNumber@DecimalPlace,c
  2717  000AFE  0E01               	movlw	1
  2718  000B00  6E1E               	movwf	BCDsendNumber@EnableTranc,c
  2719  000B02  ECC3  F006         	call	_BCDsendNumber	;wreg free
  2720                           
  2721                           ;APP.c: 76: keystatus = GetKeyStatus(0);
  2722  000B06  0E00               	movlw	0
  2723  000B08  ECD5  F00A         	call	_GetKeyStatus
  2724  000B0C  0100               	movlb	0	; () banked
  2725  000B0E  6FC9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;APP.c: 77: if( keystatus == (unsigned char)0x82)
  2729  000B10  0E82               	movlw	130
  2730  000B12  0100               	movlb	0	; () banked
  2731  000B14  19C9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2732  000B16  A4D8               	btfss	status,2,c
  2733  000B18  0012               	return	
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;APP.c: 78: {
  2737                           ;APP.c: 79: bIsBlinkMode = (unsigned char)1;
  2738  000B1A  0E00               	movlw	0
  2739  000B1C  6E4C               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2740  000B1E  0E01               	movlw	1
  2741  000B20  6E4B               	movwf	APP_MANAGE@bIsBlinkMode,c
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;APP.c: 80: }
  2745                           ;APP.c: 81: }
  2746  000B22  0012               	return	
  2747  000B24                     l2664:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;APP.c: 82: else
  2751                           ;APP.c: 83: {
  2752                           ;APP.c: 85: BCDsendNumber(Circum,0 ,0);
  2753  000B24  C067  F01B         	movff	_Circum,BCDsendNumber@Number
  2754  000B28  C068  F01C         	movff	_Circum+1,BCDsendNumber@Number+1
  2755  000B2C  0E00               	movlw	0
  2756  000B2E  6E1D               	movwf	BCDsendNumber@DecimalPlace,c
  2757  000B30  0E00               	movlw	0
  2758  000B32  6E1E               	movwf	BCDsendNumber@EnableTranc,c
  2759  000B34  ECC3  F006         	call	_BCDsendNumber	;wreg free
  2760                           
  2761                           ;APP.c: 86: BlinkDigit(blinkIndex,100);
  2762  000B38  0E64               	movlw	100
  2763  000B3A  6E14               	movwf	BlinkDigit@duration,c
  2764  000B3C  504D               	movf	APP_MANAGE@blinkIndex,w,c
  2765  000B3E  EC95  F00B         	call	_BlinkDigit
  2766                           
  2767                           ;APP.c: 87: keystatus = GetKeyStatus(0);
  2768  000B42  0E00               	movlw	0
  2769  000B44  ECD5  F00A         	call	_GetKeyStatus
  2770  000B48  0100               	movlb	0	; () banked
  2771  000B4A  6FC9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;APP.c: 88: if( keystatus == (unsigned char)0x40)
  2775  000B4C  0E40               	movlw	64
  2776  000B4E  0100               	movlb	0	; () banked
  2777  000B50  19C9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2778  000B52  A4D8               	btfss	status,2,c
  2779  000B54  D00C               	goto	l2678
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;APP.c: 89: {
  2783                           ;APP.c: 90: blinkIndex++;
  2784  000B56  4A4D               	infsnz	APP_MANAGE@blinkIndex,f,c
  2785  000B58  2A4E               	incf	APP_MANAGE@blinkIndex+1,f,c
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;APP.c: 91: if(blinkIndex == 4)
  2789  000B5A  0E04               	movlw	4
  2790  000B5C  184D               	xorwf	APP_MANAGE@blinkIndex,w,c
  2791  000B5E  104E               	iorwf	APP_MANAGE@blinkIndex+1,w,c
  2792  000B60  A4D8               	btfss	status,2,c
  2793  000B62  0012               	return	
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;APP.c: 92: {
  2797                           ;APP.c: 93: blinkIndex=0;
  2798  000B64  0E00               	movlw	0
  2799  000B66  6E4E               	movwf	APP_MANAGE@blinkIndex+1,c
  2800  000B68  0E00               	movlw	0
  2801  000B6A  6E4D               	movwf	APP_MANAGE@blinkIndex,c
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;APP.c: 94: }
  2805                           ;APP.c: 95: }
  2806  000B6C  0012               	return	
  2807  000B6E                     l2678:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;APP.c: 96: else
  2811                           ;APP.c: 97: {
  2812                           ;APP.c: 98: keystatus = GetKeyStatus(1);
  2813  000B6E  0E01               	movlw	1
  2814  000B70  ECD5  F00A         	call	_GetKeyStatus
  2815  000B74  0100               	movlb	0	; () banked
  2816  000B76  6FC9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2817                           
  2818                           ;APP.c: 99: keystatus2 = GetKeyStatus(2);
  2819  000B78  0E02               	movlw	2
  2820  000B7A  ECD5  F00A         	call	_GetKeyStatus
  2821  000B7E  0100               	movlb	0	; () banked
  2822  000B80  6FC4               	movwf	APP_MANAGE@keystatus2& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;APP.c: 100: if(keystatus == (unsigned char)0x82 )
  2826  000B82  0E82               	movlw	130
  2827  000B84  0100               	movlb	0	; () banked
  2828  000B86  19C9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2829  000B88  A4D8               	btfss	status,2,c
  2830  000B8A  D017               	goto	l2688
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;APP.c: 101: {
  2834                           ;APP.c: 102: Eeprom_Write_Block(1,(unsigned char*)&Circum ,
  2835                           ;APP.c: 103: (unsigned char)sizeof(Circum),(void*)0);
  2836  000B8C  0E67               	movlw	low _Circum
  2837  000B8E  6E14               	movwf	Eeprom_Write_Block@DataPtr,c
  2838  000B90  0E00               	movlw	high _Circum
  2839  000B92  6E15               	movwf	Eeprom_Write_Block@DataPtr+1,c
  2840  000B94  0E02               	movlw	2
  2841  000B96  6E16               	movwf	Eeprom_Write_Block@BlockSize,c
  2842  000B98  0E00               	movlw	0
  2843  000B9A  6E17               	movwf	Eeprom_Write_Block@ptrFnCallback,c
  2844  000B9C  0E00               	movlw	0
  2845  000B9E  6E18               	movwf	Eeprom_Write_Block@ptrFnCallback+1,c
  2846  000BA0  0E01               	movlw	1
  2847  000BA2  EC39  F009         	call	_Eeprom_Write_Block
  2848                           
  2849                           ;APP.c: 104: BlinkDigit(1,0);
  2850  000BA6  0E00               	movlw	0
  2851  000BA8  6E14               	movwf	BlinkDigit@duration,c
  2852  000BAA  0E01               	movlw	1
  2853  000BAC  EC95  F00B         	call	_BlinkDigit
  2854                           
  2855                           ;APP.c: 105: bIsBlinkMode = (unsigned char)0;
  2856  000BB0  0E00               	movlw	0
  2857  000BB2  6E4C               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2858  000BB4  0E00               	movlw	0
  2859  000BB6  6E4B               	movwf	APP_MANAGE@bIsBlinkMode,c
  2860                           
  2861                           ;APP.c: 108: }
  2862  000BB8  0012               	return	
  2863  000BBA                     l2688:
  2864                           
  2865                           ;APP.c: 109: else if(keystatus == (unsigned char)0x40)
  2866  000BBA  0E40               	movlw	64
  2867  000BBC  0100               	movlb	0	; () banked
  2868  000BBE  19C9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2869  000BC0  A4D8               	btfss	status,2,c
  2870  000BC2  D00F               	goto	l2692
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;APP.c: 110: {
  2874                           ;APP.c: 111: Circum = IncrementDecrementSingleDigit(
  2875                           ;APP.c: 112: Circum,blinkIndex,(unsigned char)0);
  2876  000BC4  C067  F01B         	movff	_Circum,IncrementDecrementSingleDigit@Number
  2877  000BC8  C068  F01C         	movff	_Circum+1,IncrementDecrementSingleDigit@Number+1
  2878  000BCC  C04D  F01D         	movff	APP_MANAGE@blinkIndex,IncrementDecrementSingleDigit@Index
  2879  000BD0  0E00               	movlw	0
  2880  000BD2  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  2881  000BD4  EC05  F006         	call	_IncrementDecrementSingleDigit	;wreg free
  2882  000BD8  C01B  F067         	movff	?_IncrementDecrementSingleDigit,_Circum
  2883  000BDC  C01C  F068         	movff	?_IncrementDecrementSingleDigit+1,_Circum+1
  2884                           
  2885                           ;APP.c: 113: }
  2886  000BE0  0012               	return	
  2887  000BE2                     l2692:
  2888                           
  2889                           ;APP.c: 114: else if(keystatus2 == (unsigned char)0x40)
  2890  000BE2  0E40               	movlw	64
  2891  000BE4  0100               	movlb	0	; () banked
  2892  000BE6  19C4               	xorwf	APP_MANAGE@keystatus2& (0+255),w,b
  2893  000BE8  A4D8               	btfss	status,2,c
  2894  000BEA  0012               	return	
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;APP.c: 115: {
  2898                           ;APP.c: 116: Circum = IncrementDecrementSingleDigit(
  2899                           ;APP.c: 117: Circum,blinkIndex,(unsigned char)1);
  2900  000BEC  C067  F01B         	movff	_Circum,IncrementDecrementSingleDigit@Number
  2901  000BF0  C068  F01C         	movff	_Circum+1,IncrementDecrementSingleDigit@Number+1
  2902  000BF4  C04D  F01D         	movff	APP_MANAGE@blinkIndex,IncrementDecrementSingleDigit@Index
  2903  000BF8  0E01               	movlw	1
  2904  000BFA  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  2905  000BFC  EC05  F006         	call	_IncrementDecrementSingleDigit	;wreg free
  2906  000C00  C01B  F067         	movff	?_IncrementDecrementSingleDigit,_Circum
  2907  000C04  C01C  F068         	movff	?_IncrementDecrementSingleDigit+1,_Circum+1
  2908                           
  2909                           ;APP.c: 118: }
  2910                           ;APP.c: 119: }
  2911                           ;APP.c: 120: }
  2912                           ;APP.c: 121: }
  2913  000C08  0012               	return	
  2914  000C0A                     __end_of_APP_MANAGE:
  2915                           	opt stack 0
  2916                           tosu	equ	0xFFF
  2917                           tosh	equ	0xFFE
  2918                           tosl	equ	0xFFD
  2919                           pclath	equ	0xFFA
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           prodh	equ	0xFF4
  2925                           prodl	equ	0xFF3
  2926                           intcon	equ	0xFF2
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postinc1	equ	0xFE6
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           indf2	equ	0xFDF
  2933                           postinc2	equ	0xFDE
  2934                           postdec2	equ	0xFDD
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _SetCircumfirunce *****************
  2940 ;; Defined at:
  2941 ;;		line 99 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  Circum          2   19[COMRAM] unsigned short 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		None
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2955 ;;      Params:         2       0       0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0
  2958 ;;      Totals:         2       0       0       0       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_APP_MANAGE
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text14
  2970  001736                     __ptext14:
  2971                           	opt stack 0
  2972  001736                     _SetCircumfirunce:
  2973                           	opt stack 22
  2974                           
  2975                           ;SpeedCalc.c: 101: CircumFactor = (unsigned short)Circum;
  2976                           
  2977                           ;incstack = 0
  2978  001736  C014  F06A         	movff	SetCircumfirunce@Circum,_CircumFactor
  2979  00173A  C015  F06B         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  2980  00173E  0012               	return		;funcret
  2981  001740                     __end_of_SetCircumfirunce:
  2982                           	opt stack 0
  2983                           tosu	equ	0xFFF
  2984                           tosh	equ	0xFFE
  2985                           tosl	equ	0xFFD
  2986                           pclath	equ	0xFFA
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           postinc1	equ	0xFE6
  2997                           fsr1h	equ	0xFE2
  2998                           fsr1l	equ	0xFE1
  2999                           indf2	equ	0xFDF
  3000                           postinc2	equ	0xFDE
  3001                           postdec2	equ	0xFDD
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _IncrementDecrementSingleDigit *****************
  3007 ;; Defined at:
  3008 ;;		line 154 in file "../../../../Common/App/APP.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  Number          2   26[COMRAM] unsigned short 
  3011 ;;  Index           1   28[COMRAM] unsigned char 
  3012 ;;  bIsincrement    1   29[COMRAM] unsigned char 
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;  Output          4   38[COMRAM] unsigned char [4]
  3015 ;;  unitPosition    2   36[COMRAM] unsigned short 
  3016 ;;  NumberReturn    2   33[COMRAM] unsigned short 
  3017 ;;  Link            2   31[COMRAM] unsigned short 
  3018 ;;  LoopIndex       1   42[COMRAM] unsigned char 
  3019 ;;  PowIndex        1   35[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2   26[COMRAM] unsigned short 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3029 ;;      Params:         4       0       0       0       0       0       0
  3030 ;;      Locals:        12       0       0       0       0       0       0
  3031 ;;      Temps:          1       0       0       0       0       0       0
  3032 ;;      Totals:        17       0       0       0       0       0       0
  3033 ;;Total ram usage:       17 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    5
  3036 ;; This function calls:
  3037 ;;		___lwdiv
  3038 ;;		___wmul
  3039 ;; This function is called by:
  3040 ;;		_APP_MANAGE
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text15
  3045  000C0A                     __ptext15:
  3046                           	opt stack 0
  3047  000C0A                     _IncrementDecrementSingleDigit:
  3048                           	opt stack 21
  3049                           
  3050                           ;APP.c: 161: unsigned short NumberReturned = (unsigned short)0;
  3051                           
  3052                           ;incstack = 0
  3053  000C0A  0E00               	movlw	0
  3054  000C0C  6E23               	movwf	IncrementDecrementSingleDigit@NumberReturned+1,c
  3055  000C0E  0E00               	movlw	0
  3056  000C10  6E22               	movwf	IncrementDecrementSingleDigit@NumberReturned,c
  3057                           
  3058                           ;APP.c: 162: unsigned short Link;
  3059                           ;APP.c: 163: unsigned char LoopIndex;
  3060                           ;APP.c: 164: unsigned char PowIndex;
  3061                           ;APP.c: 165: unsigned char Output[4];
  3062                           ;APP.c: 166: unsigned short unitPosition = (unsigned short)1;
  3063  000C12  0E00               	movlw	0
  3064  000C14  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3065  000C16  0E01               	movlw	1
  3066  000C18  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3067                           
  3068                           ;APP.c: 169: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  3069  000C1A  0E00               	movlw	0
  3070  000C1C  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3071  000C1E                     l2590:
  3072  000C1E  0E03               	movlw	3
  3073  000C20  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3074  000C22  D001               	goto	l2594
  3075  000C24  D030               	goto	l2608
  3076  000C26                     l2594:
  3077                           
  3078                           ;APP.c: 170: {
  3079                           ;APP.c: 171: if((Number != (unsigned short)0) )
  3080  000C26  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3081  000C28  101C               	iorwf	IncrementDecrementSingleDigit@Number+1,w,c
  3082  000C2A  B4D8               	btfsc	status,2,c
  3083  000C2C  D020               	goto	l2602
  3084                           
  3085                           ;APP.c: 172: {
  3086                           ;APP.c: 173: Link = Number;
  3087  000C2E  C01B  F020         	movff	IncrementDecrementSingleDigit@Number,IncrementDecrementSingleDigit@Link
  3088  000C32  C01C  F021         	movff	IncrementDecrementSingleDigit@Number+1,IncrementDecrementSingleDigit@Link+1
  3089                           
  3090                           ;APP.c: 174: Number = (unsigned short)(Number/(unsigned short)10);
  3091  000C36  C01B  F014         	movff	IncrementDecrementSingleDigit@Number,___lwdiv@dividend
  3092  000C3A  C01C  F015         	movff	IncrementDecrementSingleDigit@Number+1,___lwdiv@dividend+1
  3093  000C3E  0E00               	movlw	0
  3094  000C40  6E17               	movwf	___lwdiv@divisor+1,c
  3095  000C42  0E0A               	movlw	10
  3096  000C44  6E16               	movwf	___lwdiv@divisor,c
  3097  000C46  ECC1  F009         	call	___lwdiv	;wreg free
  3098  000C4A  C014  F01B         	movff	?___lwdiv,IncrementDecrementSingleDigit@Number
  3099  000C4E  C015  F01C         	movff	?___lwdiv+1,IncrementDecrementSingleDigit@Number+1
  3100                           
  3101                           ;APP.c: 175: Output[LoopIndex] = Link -
  3102                           ;APP.c: 176: (unsigned short)(Number * (unsigned short)10);
  3103  000C52  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3104  000C54  0D01               	mullw	1
  3105  000C56  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3106  000C58  24F3               	addwf	prodl,w,c
  3107  000C5A  6ED9               	movwf	fsr2l,c
  3108  000C5C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3109  000C5E  20F4               	addwfc	prodh,w,c
  3110  000C60  6EDA               	movwf	fsr2h,c
  3111  000C62  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3112  000C64  0D0A               	mullw	10
  3113  000C66  50F3               	movf	prodl,w,c
  3114  000C68  0800               	sublw	0
  3115  000C6A  2420               	addwf	IncrementDecrementSingleDigit@Link,w,c
  3116  000C6C  D009               	goto	L3
  3117  000C6E                     l2602:
  3118                           
  3119                           ;APP.c: 178: else
  3120                           ;APP.c: 179: {
  3121                           ;APP.c: 180: Output[LoopIndex] = (unsigned short)0;
  3122  000C6E  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3123  000C70  0D01               	mullw	1
  3124  000C72  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3125  000C74  24F3               	addwf	prodl,w,c
  3126  000C76  6ED9               	movwf	fsr2l,c
  3127  000C78  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3128  000C7A  20F4               	addwfc	prodh,w,c
  3129  000C7C  6EDA               	movwf	fsr2h,c
  3130  000C7E  0E00               	movlw	0
  3131  000C80                     L3:
  3132  000C80  6EDF               	movwf	indf2,c
  3133  000C82  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3134  000C84  D7CC               	goto	l2590
  3135  000C86                     l2608:
  3136                           
  3137                           ;APP.c: 181: }
  3138                           ;APP.c: 182: }
  3139                           ;APP.c: 184: if((unsigned char)0 == bIsincrement)
  3140  000C86  501E               	movf	IncrementDecrementSingleDigit@bIsincrement,w,c
  3141  000C88  A4D8               	btfss	status,2,c
  3142  000C8A  D01F               	goto	l2616
  3143                           
  3144                           ;APP.c: 185: {
  3145                           ;APP.c: 186: if((unsigned char)0 == Output[Index])
  3146  000C8C  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3147  000C8E  0D01               	mullw	1
  3148  000C90  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3149  000C92  24F3               	addwf	prodl,w,c
  3150  000C94  6ED9               	movwf	fsr2l,c
  3151  000C96  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3152  000C98  20F4               	addwfc	prodh,w,c
  3153  000C9A  6EDA               	movwf	fsr2h,c
  3154  000C9C  50DF               	movf	indf2,w,c
  3155  000C9E  A4D8               	btfss	status,2,c
  3156  000CA0  D00A               	goto	l2614
  3157                           
  3158                           ;APP.c: 187: {
  3159                           ;APP.c: 188: Output[Index] =(unsigned char)9;
  3160  000CA2  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3161  000CA4  0D01               	mullw	1
  3162  000CA6  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3163  000CA8  24F3               	addwf	prodl,w,c
  3164  000CAA  6ED9               	movwf	fsr2l,c
  3165  000CAC  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3166  000CAE  20F4               	addwfc	prodh,w,c
  3167  000CB0  6EDA               	movwf	fsr2h,c
  3168  000CB2  0E09               	movlw	9
  3169  000CB4  D01F               	goto	L4
  3170  000CB6                     l2614:
  3171                           
  3172                           ;APP.c: 190: else
  3173                           ;APP.c: 191: {
  3174                           ;APP.c: 192: Output[Index]--;
  3175  000CB6  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3176  000CB8  0D01               	mullw	1
  3177  000CBA  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3178  000CBC  24F3               	addwf	prodl,w,c
  3179  000CBE  6ED9               	movwf	fsr2l,c
  3180  000CC0  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3181  000CC2  20F4               	addwfc	prodh,w,c
  3182  000CC4  6EDA               	movwf	fsr2h,c
  3183  000CC6  06DF               	decf	indf2,f,c
  3184                           
  3185                           ;APP.c: 193: }
  3186                           ;APP.c: 194: }
  3187  000CC8  D020               	goto	l2622
  3188  000CCA                     l2616:
  3189                           
  3190                           ;APP.c: 195: else
  3191                           ;APP.c: 196: {
  3192                           ;APP.c: 197: if( (unsigned char)9 == Output[Index])
  3193  000CCA  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3194  000CCC  0D01               	mullw	1
  3195  000CCE  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3196  000CD0  24F3               	addwf	prodl,w,c
  3197  000CD2  6ED9               	movwf	fsr2l,c
  3198  000CD4  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3199  000CD6  20F4               	addwfc	prodh,w,c
  3200  000CD8  6EDA               	movwf	fsr2h,c
  3201  000CDA  0E09               	movlw	9
  3202  000CDC  18DE               	xorwf	postinc2,w,c
  3203  000CDE  A4D8               	btfss	status,2,c
  3204  000CE0  D00B               	goto	l2620
  3205                           
  3206                           ;APP.c: 198: {
  3207                           ;APP.c: 199: Output[Index] = (unsigned char)0;
  3208  000CE2  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3209  000CE4  0D01               	mullw	1
  3210  000CE6  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3211  000CE8  24F3               	addwf	prodl,w,c
  3212  000CEA  6ED9               	movwf	fsr2l,c
  3213  000CEC  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3214  000CEE  20F4               	addwfc	prodh,w,c
  3215  000CF0  6EDA               	movwf	fsr2h,c
  3216  000CF2  0E00               	movlw	0
  3217  000CF4                     L4:
  3218  000CF4  6EDF               	movwf	indf2,c
  3219                           
  3220                           ;APP.c: 200: }
  3221  000CF6  D009               	goto	l2622
  3222  000CF8                     l2620:
  3223                           
  3224                           ;APP.c: 201: else
  3225                           ;APP.c: 202: {
  3226                           ;APP.c: 203: Output[Index]++;
  3227  000CF8  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3228  000CFA  0D01               	mullw	1
  3229  000CFC  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3230  000CFE  24F3               	addwf	prodl,w,c
  3231  000D00  6ED9               	movwf	fsr2l,c
  3232  000D02  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3233  000D04  20F4               	addwfc	prodh,w,c
  3234  000D06  6EDA               	movwf	fsr2h,c
  3235  000D08  2ADF               	incf	indf2,f,c
  3236  000D0A                     l2622:
  3237                           
  3238                           ;APP.c: 204: }
  3239                           ;APP.c: 205: }
  3240                           ;APP.c: 207: for(LoopIndex=(unsigned char)0;LoopIndex < 4; LoopIndex++)
  3241  000D0A  0E00               	movlw	0
  3242  000D0C  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3243  000D0E                     l2624:
  3244  000D0E  0E03               	movlw	3
  3245  000D10  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3246  000D12  D001               	goto	l2628
  3247  000D14  D033               	goto	l60
  3248  000D16                     l2628:
  3249                           
  3250                           ;APP.c: 208: {
  3251                           ;APP.c: 209: for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
  3252  000D16  0E00               	movlw	0
  3253  000D18  6E24               	movwf	IncrementDecrementSingleDigit@PowIndex,c
  3254                           
  3255                           ;APP.c: 210: PowIndex++ )
  3256  000D1A  D00F               	goto	l2634
  3257  000D1C                     l2630:
  3258                           
  3259                           ;APP.c: 211: {
  3260                           ;APP.c: 212: unitPosition *=(unsigned short)10;
  3261  000D1C  C025  F014         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplier
  3262  000D20  C026  F015         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplier+1
  3263  000D24  0E00               	movlw	0
  3264  000D26  6E17               	movwf	___wmul@multiplicand+1,c
  3265  000D28  0E0A               	movlw	10
  3266  000D2A  6E16               	movwf	___wmul@multiplicand,c
  3267  000D2C  EC40  F00B         	call	___wmul	;wreg free
  3268  000D30  C014  F025         	movff	?___wmul,IncrementDecrementSingleDigit@unitPosition
  3269  000D34  C015  F026         	movff	?___wmul+1,IncrementDecrementSingleDigit@unitPosition+1
  3270  000D38  2A24               	incf	IncrementDecrementSingleDigit@PowIndex,f,c
  3271  000D3A                     l2634:
  3272  000D3A  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3273  000D3C  5C24               	subwf	IncrementDecrementSingleDigit@PowIndex,w,c
  3274  000D3E  A0D8               	btfss	status,0,c
  3275  000D40  D7ED               	goto	l2630
  3276                           
  3277                           ;APP.c: 213: }
  3278                           ;APP.c: 214: NumberReturned +=
  3279                           ;APP.c: 215: (((unsigned short)Output[LoopIndex]) * unitPosition);
  3280  000D42  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3281  000D44  0D01               	mullw	1
  3282  000D46  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3283  000D48  24F3               	addwf	prodl,w,c
  3284  000D4A  6ED9               	movwf	fsr2l,c
  3285  000D4C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3286  000D4E  20F4               	addwfc	prodh,w,c
  3287  000D50  6EDA               	movwf	fsr2h,c
  3288  000D52  50DF               	movf	indf2,w,c
  3289  000D54  6E1F               	movwf	??_IncrementDecrementSingleDigit& (0+255),c
  3290  000D56  501F               	movf	??_IncrementDecrementSingleDigit,w,c
  3291  000D58  6E14               	movwf	___wmul@multiplier,c
  3292  000D5A  6A15               	clrf	___wmul@multiplier+1,c
  3293  000D5C  C025  F016         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplicand
  3294  000D60  C026  F017         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplicand+1
  3295  000D64  EC40  F00B         	call	___wmul	;wreg free
  3296  000D68  5014               	movf	?___wmul,w,c
  3297  000D6A  2622               	addwf	IncrementDecrementSingleDigit@NumberReturned,f,c
  3298  000D6C  5015               	movf	?___wmul+1,w,c
  3299  000D6E  2223               	addwfc	IncrementDecrementSingleDigit@NumberReturned+1,f,c
  3300                           
  3301                           ;APP.c: 216: unitPosition = (unsigned short)1;
  3302  000D70  0E00               	movlw	0
  3303  000D72  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3304  000D74  0E01               	movlw	1
  3305  000D76  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3306  000D78  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3307  000D7A  D7C9               	goto	l2624
  3308  000D7C                     l60:
  3309                           
  3310                           ;APP.c: 217: }
  3311                           ;APP.c: 219: return NumberReturned;
  3312  000D7C  C022  F01B         	movff	IncrementDecrementSingleDigit@NumberReturned,?_IncrementDecrementSingleDigit
  3313  000D80  C023  F01C         	movff	IncrementDecrementSingleDigit@NumberReturned+1,?_IncrementDecrementSingleDigit+1
  3314  000D84  0012               	return		;funcret
  3315  000D86                     __end_of_IncrementDecrementSingleDigit:
  3316                           	opt stack 0
  3317                           tosu	equ	0xFFF
  3318                           tosh	equ	0xFFE
  3319                           tosl	equ	0xFFD
  3320                           pclath	equ	0xFFA
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           intcon	equ	0xFF2
  3328                           postinc0	equ	0xFEE
  3329                           wreg	equ	0xFE8
  3330                           postinc1	equ	0xFE6
  3331                           fsr1h	equ	0xFE2
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _GetKeyStatus *****************
  3341 ;; Defined at:
  3342 ;;		line 19 in file "../../../../Common/Driver/Key/Key.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  KeyID           1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  KeyID           1   20[COMRAM] unsigned char 
  3347 ;;  KeyStatus       1   19[COMRAM] unsigned char 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      unsigned char 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3357 ;;      Params:         0       0       0       0       0       0       0
  3358 ;;      Locals:         2       0       0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0
  3360 ;;      Totals:         2       0       0       0       0       0       0
  3361 ;;Total ram usage:        2 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    4
  3364 ;; This function calls:
  3365 ;;		Nothing
  3366 ;; This function is called by:
  3367 ;;		_APP_MANAGE
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text16
  3372  0015AA                     __ptext16:
  3373                           	opt stack 0
  3374  0015AA                     _GetKeyStatus:
  3375                           	opt stack 22
  3376                           
  3377                           ;incstack = 0
  3378                           ;GetKeyStatus@KeyID stored from wreg
  3379  0015AA  6E15               	movwf	GetKeyStatus@KeyID,c
  3380                           
  3381                           ;Key.c: 21: unsigned char KeyStatus;
  3382                           ;Key.c: 23: KeyStatus = KeyInternalData[KeyID].KeyState;
  3383  0015AC  5015               	movf	GetKeyStatus@KeyID,w,c
  3384  0015AE  0D03               	mullw	3
  3385  0015B0  0E5E               	movlw	low _KeyInternalData
  3386  0015B2  24F3               	addwf	prodl,w,c
  3387  0015B4  6ED9               	movwf	fsr2l,c
  3388  0015B6  0E00               	movlw	high _KeyInternalData
  3389  0015B8  20F4               	addwfc	prodh,w,c
  3390  0015BA  6EDA               	movwf	fsr2h,c
  3391  0015BC  50DF               	movf	indf2,w,c
  3392  0015BE  6E14               	movwf	GetKeyStatus@KeyStatus,c
  3393                           
  3394                           ;Key.c: 24: KeyInternalData[KeyID].KeyState &= (unsigned char)0x3F;
  3395  0015C0  5015               	movf	GetKeyStatus@KeyID,w,c
  3396  0015C2  0D03               	mullw	3
  3397  0015C4  0E5E               	movlw	low _KeyInternalData
  3398  0015C6  24F3               	addwf	prodl,w,c
  3399  0015C8  6ED9               	movwf	fsr2l,c
  3400  0015CA  0E00               	movlw	high _KeyInternalData
  3401  0015CC  20F4               	addwfc	prodh,w,c
  3402  0015CE  6EDA               	movwf	fsr2h,c
  3403  0015D0  0E3F               	movlw	63
  3404  0015D2  16DF               	andwf	indf2,f,c
  3405                           
  3406                           ;Key.c: 26: return KeyStatus;
  3407  0015D4  5014               	movf	GetKeyStatus@KeyStatus,w,c
  3408  0015D6  0012               	return	
  3409  0015D8                     __end_of_GetKeyStatus:
  3410                           	opt stack 0
  3411                           tosu	equ	0xFFF
  3412                           tosh	equ	0xFFE
  3413                           tosl	equ	0xFFD
  3414                           pclath	equ	0xFFA
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           intcon	equ	0xFF2
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postinc1	equ	0xFE6
  3425                           fsr1h	equ	0xFE2
  3426                           fsr1l	equ	0xFE1
  3427                           indf2	equ	0xFDF
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434 ;; *************** function _GetDistance *****************
  3435 ;; Defined at:
  3436 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  4   19[COMRAM] unsigned long 
  3443 ;; Registers used:
  3444 ;;		None
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         4       0       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:         4       0       0       0       0       0       0
  3454 ;;Total ram usage:        4 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    4
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_APP_MANAGE
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text17
  3465  001718                     __ptext17:
  3466                           	opt stack 0
  3467  001718                     _GetDistance:
  3468                           	opt stack 22
  3469                           
  3470                           ;SpeedCalc.c: 95: return DistTravelCntr;
  3471                           
  3472                           ;incstack = 0
  3473  001718  C03F  F014         	movff	_DistTravelCntr,?_GetDistance
  3474  00171C  C040  F015         	movff	_DistTravelCntr+1,?_GetDistance+1
  3475  001720  C041  F016         	movff	_DistTravelCntr+2,?_GetDistance+2
  3476  001724  C042  F017         	movff	_DistTravelCntr+3,?_GetDistance+3
  3477  001728  0012               	return		;funcret
  3478  00172A                     __end_of_GetDistance:
  3479                           	opt stack 0
  3480                           tosu	equ	0xFFF
  3481                           tosh	equ	0xFFE
  3482                           tosl	equ	0xFFD
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postinc1	equ	0xFE6
  3494                           fsr1h	equ	0xFE2
  3495                           fsr1l	equ	0xFE1
  3496                           indf2	equ	0xFDF
  3497                           postinc2	equ	0xFDE
  3498                           postdec2	equ	0xFDD
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function _GetAvgSpeed *****************
  3504 ;; Defined at:
  3505 ;;		line 105 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  bIsKph          1    wreg     unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  bIsKph          1   46[COMRAM] unsigned char 
  3510 ;;  KphMphFactor    4   47[COMRAM] unsigned long 
  3511 ;;  AvgSpeedKphM    2   51[COMRAM] unsigned short 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  2   44[COMRAM] unsigned short 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3521 ;;      Params:         2       0       0       0       0       0       0
  3522 ;;      Locals:         7       0       0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0
  3524 ;;      Totals:         9       0       0       0       0       0       0
  3525 ;;Total ram usage:        9 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    5
  3528 ;; This function calls:
  3529 ;;		___lldiv
  3530 ;;		___lmul
  3531 ;; This function is called by:
  3532 ;;		_APP_MANAGE
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text18
  3537  000FD6                     __ptext18:
  3538                           	opt stack 0
  3539  000FD6                     _GetAvgSpeed:
  3540                           	opt stack 21
  3541                           
  3542                           ;incstack = 0
  3543                           ;GetAvgSpeed@bIsKph stored from wreg
  3544  000FD6  6E2F               	movwf	GetAvgSpeed@bIsKph,c
  3545                           
  3546                           ;SpeedCalc.c: 107: unsigned short AvgSpeedKphMph = (unsigned short)0;
  3547  000FD8  0E00               	movlw	0
  3548  000FDA  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  3549  000FDC  0E00               	movlw	0
  3550  000FDE  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  3551                           
  3552                           ;SpeedCalc.c: 108: unsigned long KphMphFactor;
  3553                           ;SpeedCalc.c: 110: if( (unsigned char)1 == bIsKph )
  3554  000FE0  042F               	decf	GetAvgSpeed@bIsKph,w,c
  3555  000FE2  A4D8               	btfss	status,2,c
  3556  000FE4  D004               	goto	l2508
  3557                           
  3558                           ;SpeedCalc.c: 111: {
  3559                           ;SpeedCalc.c: 112: KphMphFactor = (unsigned long)360;
  3560  000FE6  0E68               	movlw	104
  3561  000FE8  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3562  000FEA  0E01               	movlw	1
  3563  000FEC  D003               	goto	L5
  3564  000FEE                     l2508:
  3565                           
  3566                           ;SpeedCalc.c: 114: else
  3567                           ;SpeedCalc.c: 115: {
  3568                           ;SpeedCalc.c: 116: KphMphFactor = (unsigned long)225;
  3569  000FEE  0EE1               	movlw	225
  3570  000FF0  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3571  000FF2  0E00               	movlw	0
  3572  000FF4                     L5:
  3573  000FF4  6E31               	movwf	GetAvgSpeed@KphMphFactor+1,c
  3574  000FF6  0E00               	movlw	0
  3575  000FF8  6E32               	movwf	GetAvgSpeed@KphMphFactor+2,c
  3576  000FFA  0E00               	movlw	0
  3577  000FFC  6E33               	movwf	GetAvgSpeed@KphMphFactor+3,c
  3578                           
  3579                           ;SpeedCalc.c: 117: }
  3580                           ;SpeedCalc.c: 119: if(LapTimeTenthMilli != (unsigned short)0)
  3581  000FFE  5045               	movf	_LapTimeTenthMilli,w,c
  3582  001000  1046               	iorwf	_LapTimeTenthMilli+1,w,c
  3583  001002  B4D8               	btfsc	status,2,c
  3584  001004  D024               	goto	l2514
  3585                           
  3586                           ;SpeedCalc.c: 120: {
  3587                           ;SpeedCalc.c: 121: AvgSpeedKphMph = (unsigned short)
  3588                           ;SpeedCalc.c: 122: ((KphMphFactor * (unsigned long)CircumFactor )
  3589                           ;SpeedCalc.c: 123: / (unsigned long)LapTimeTenthMilli);
  3590  001006  C06A  F014         	movff	_CircumFactor,___lmul@multiplier
  3591  00100A  C06B  F015         	movff	_CircumFactor+1,___lmul@multiplier+1
  3592  00100E  6A16               	clrf	___lmul@multiplier+2,c
  3593  001010  6A17               	clrf	___lmul@multiplier+3,c
  3594  001012  C030  F018         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  3595  001016  C031  F019         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  3596  00101A  C032  F01A         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  3597  00101E  C033  F01B         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  3598  001022  EC96  F009         	call	___lmul	;wreg free
  3599  001026  C014  F020         	movff	?___lmul,___lldiv@dividend
  3600  00102A  C015  F021         	movff	?___lmul+1,___lldiv@dividend+1
  3601  00102E  C016  F022         	movff	?___lmul+2,___lldiv@dividend+2
  3602  001032  C017  F023         	movff	?___lmul+3,___lldiv@dividend+3
  3603  001036  C045  F024         	movff	_LapTimeTenthMilli,___lldiv@divisor
  3604  00103A  C046  F025         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  3605  00103E  6A26               	clrf	___lldiv@divisor+2,c
  3606  001040  6A27               	clrf	___lldiv@divisor+3,c
  3607  001042  ECC2  F008         	call	___lldiv	;wreg free
  3608  001046  C020  F034         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  3609  00104A  C021  F035         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  3610  00104E                     l2514:
  3611                           
  3612                           ;SpeedCalc.c: 124: }
  3613                           ;SpeedCalc.c: 126: if( (unsigned char)64 == HwTimerOVFLcount)
  3614  00104E  0E40               	movlw	64
  3615  001050  1850               	xorwf	_HwTimerOVFLcount,w,c	;volatile
  3616  001052  A4D8               	btfss	status,2,c
  3617  001054  D004               	goto	l2518
  3618                           
  3619                           ;SpeedCalc.c: 127: {
  3620                           ;SpeedCalc.c: 128: AvgSpeedKphMph = (unsigned short)0;
  3621  001056  0E00               	movlw	0
  3622  001058  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  3623  00105A  0E00               	movlw	0
  3624  00105C  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  3625  00105E                     l2518:
  3626                           
  3627                           ;SpeedCalc.c: 129: }
  3628                           ;SpeedCalc.c: 130: return AvgSpeedKphMph;
  3629  00105E  C034  F02D         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  3630  001062  C035  F02E         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  3631  001066  0012               	return	
  3632  001068                     __end_of_GetAvgSpeed:
  3633                           	opt stack 0
  3634                           tosu	equ	0xFFF
  3635                           tosh	equ	0xFFE
  3636                           tosl	equ	0xFFD
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           postinc0	equ	0xFEE
  3646                           wreg	equ	0xFE8
  3647                           postinc1	equ	0xFE6
  3648                           fsr1h	equ	0xFE2
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           fsr2h	equ	0xFDA
  3654                           fsr2l	equ	0xFD9
  3655                           status	equ	0xFD8
  3656                           
  3657 ;; *************** function ___lmul *****************
  3658 ;; Defined at:
  3659 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  multiplier      4   19[COMRAM] unsigned long 
  3662 ;;  multiplicand    4   23[COMRAM] unsigned long 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  product         4   27[COMRAM] unsigned long 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  4   19[COMRAM] unsigned long 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3674 ;;      Params:         8       0       0       0       0       0       0
  3675 ;;      Locals:         4       0       0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0
  3677 ;;      Totals:        12       0       0       0       0       0       0
  3678 ;;Total ram usage:       12 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    4
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_APP_MANAGE
  3685 ;;		_GetAvgSpeed
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text19
  3690  00132C                     __ptext19:
  3691                           	opt stack 0
  3692  00132C                     ___lmul:
  3693                           	opt stack 22
  3694                           
  3695                           ;incstack = 0
  3696  00132C  0E00               	movlw	0
  3697  00132E  6E1C               	movwf	___lmul@product,c
  3698  001330  0E00               	movlw	0
  3699  001332  6E1D               	movwf	___lmul@product+1,c
  3700  001334  0E00               	movlw	0
  3701  001336  6E1E               	movwf	___lmul@product+2,c
  3702  001338  0E00               	movlw	0
  3703  00133A  6E1F               	movwf	___lmul@product+3,c
  3704  00133C                     l2448:
  3705  00133C  A014               	btfss	___lmul@multiplier,0,c
  3706  00133E  D008               	goto	l2452
  3707  001340  5018               	movf	___lmul@multiplicand,w,c
  3708  001342  261C               	addwf	___lmul@product,f,c
  3709  001344  5019               	movf	___lmul@multiplicand+1,w,c
  3710  001346  221D               	addwfc	___lmul@product+1,f,c
  3711  001348  501A               	movf	___lmul@multiplicand+2,w,c
  3712  00134A  221E               	addwfc	___lmul@product+2,f,c
  3713  00134C  501B               	movf	___lmul@multiplicand+3,w,c
  3714  00134E  221F               	addwfc	___lmul@product+3,f,c
  3715  001350                     l2452:
  3716  001350  90D8               	bcf	status,0,c
  3717  001352  3618               	rlcf	___lmul@multiplicand,f,c
  3718  001354  3619               	rlcf	___lmul@multiplicand+1,f,c
  3719  001356  361A               	rlcf	___lmul@multiplicand+2,f,c
  3720  001358  361B               	rlcf	___lmul@multiplicand+3,f,c
  3721  00135A  90D8               	bcf	status,0,c
  3722  00135C  3217               	rrcf	___lmul@multiplier+3,f,c
  3723  00135E  3216               	rrcf	___lmul@multiplier+2,f,c
  3724  001360  3215               	rrcf	___lmul@multiplier+1,f,c
  3725  001362  3214               	rrcf	___lmul@multiplier,f,c
  3726  001364  5014               	movf	___lmul@multiplier,w,c
  3727  001366  1015               	iorwf	___lmul@multiplier+1,w,c
  3728  001368  1016               	iorwf	___lmul@multiplier+2,w,c
  3729  00136A  1017               	iorwf	___lmul@multiplier+3,w,c
  3730  00136C  A4D8               	btfss	status,2,c
  3731  00136E  D7E6               	goto	l2448
  3732  001370  C01C  F014         	movff	___lmul@product,?___lmul
  3733  001374  C01D  F015         	movff	___lmul@product+1,?___lmul+1
  3734  001378  C01E  F016         	movff	___lmul@product+2,?___lmul+2
  3735  00137C  C01F  F017         	movff	___lmul@product+3,?___lmul+3
  3736  001380  0012               	return		;funcret
  3737  001382                     __end_of___lmul:
  3738                           	opt stack 0
  3739                           tosu	equ	0xFFF
  3740                           tosh	equ	0xFFE
  3741                           tosl	equ	0xFFD
  3742                           pclath	equ	0xFFA
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           intcon	equ	0xFF2
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           postinc1	equ	0xFE6
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function ___lldiv *****************
  3763 ;; Defined at:
  3764 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  dividend        4   31[COMRAM] unsigned long 
  3767 ;;  divisor         4   35[COMRAM] unsigned long 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  quotient        4   39[COMRAM] unsigned long 
  3770 ;;  counter         1   43[COMRAM] unsigned char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  4   31[COMRAM] unsigned long 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3780 ;;      Params:         8       0       0       0       0       0       0
  3781 ;;      Locals:         5       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0
  3783 ;;      Totals:        13       0       0       0       0       0       0
  3784 ;;Total ram usage:       13 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    4
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_SpeedCalcManage
  3791 ;;		_GetAvgSpeed
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text20
  3796  001184                     __ptext20:
  3797                           	opt stack 0
  3798  001184                     ___lldiv:
  3799                           	opt stack 22
  3800                           
  3801                           ;incstack = 0
  3802  001184  0E00               	movlw	0
  3803  001186  6E28               	movwf	___lldiv@quotient,c
  3804  001188  0E00               	movlw	0
  3805  00118A  6E29               	movwf	___lldiv@quotient+1,c
  3806  00118C  0E00               	movlw	0
  3807  00118E  6E2A               	movwf	___lldiv@quotient+2,c
  3808  001190  0E00               	movlw	0
  3809  001192  6E2B               	movwf	___lldiv@quotient+3,c
  3810  001194  5024               	movf	___lldiv@divisor,w,c
  3811  001196  1025               	iorwf	___lldiv@divisor+1,w,c
  3812  001198  1026               	iorwf	___lldiv@divisor+2,w,c
  3813  00119A  1027               	iorwf	___lldiv@divisor+3,w,c
  3814  00119C  B4D8               	btfsc	status,2,c
  3815  00119E  D02A               	goto	l862
  3816  0011A0  0E01               	movlw	1
  3817  0011A2  6E2C               	movwf	___lldiv@counter,c
  3818  0011A4  D006               	goto	l2464
  3819  0011A6                     l2462:
  3820  0011A6  90D8               	bcf	status,0,c
  3821  0011A8  3624               	rlcf	___lldiv@divisor,f,c
  3822  0011AA  3625               	rlcf	___lldiv@divisor+1,f,c
  3823  0011AC  3626               	rlcf	___lldiv@divisor+2,f,c
  3824  0011AE  3627               	rlcf	___lldiv@divisor+3,f,c
  3825  0011B0  2A2C               	incf	___lldiv@counter,f,c
  3826  0011B2                     l2464:
  3827  0011B2  AE27               	btfss	___lldiv@divisor+3,7,c
  3828  0011B4  D7F8               	goto	l2462
  3829  0011B6                     l2466:
  3830  0011B6  90D8               	bcf	status,0,c
  3831  0011B8  3628               	rlcf	___lldiv@quotient,f,c
  3832  0011BA  3629               	rlcf	___lldiv@quotient+1,f,c
  3833  0011BC  362A               	rlcf	___lldiv@quotient+2,f,c
  3834  0011BE  362B               	rlcf	___lldiv@quotient+3,f,c
  3835  0011C0  5024               	movf	___lldiv@divisor,w,c
  3836  0011C2  5C20               	subwf	___lldiv@dividend,w,c
  3837  0011C4  5025               	movf	___lldiv@divisor+1,w,c
  3838  0011C6  5821               	subwfb	___lldiv@dividend+1,w,c
  3839  0011C8  5026               	movf	___lldiv@divisor+2,w,c
  3840  0011CA  5822               	subwfb	___lldiv@dividend+2,w,c
  3841  0011CC  5027               	movf	___lldiv@divisor+3,w,c
  3842  0011CE  5823               	subwfb	___lldiv@dividend+3,w,c
  3843  0011D0  A0D8               	btfss	status,0,c
  3844  0011D2  D009               	goto	l2474
  3845  0011D4  5024               	movf	___lldiv@divisor,w,c
  3846  0011D6  5E20               	subwf	___lldiv@dividend,f,c
  3847  0011D8  5025               	movf	___lldiv@divisor+1,w,c
  3848  0011DA  5A21               	subwfb	___lldiv@dividend+1,f,c
  3849  0011DC  5026               	movf	___lldiv@divisor+2,w,c
  3850  0011DE  5A22               	subwfb	___lldiv@dividend+2,f,c
  3851  0011E0  5027               	movf	___lldiv@divisor+3,w,c
  3852  0011E2  5A23               	subwfb	___lldiv@dividend+3,f,c
  3853  0011E4  8028               	bsf	___lldiv@quotient,0,c
  3854  0011E6                     l2474:
  3855  0011E6  90D8               	bcf	status,0,c
  3856  0011E8  3227               	rrcf	___lldiv@divisor+3,f,c
  3857  0011EA  3226               	rrcf	___lldiv@divisor+2,f,c
  3858  0011EC  3225               	rrcf	___lldiv@divisor+1,f,c
  3859  0011EE  3224               	rrcf	___lldiv@divisor,f,c
  3860  0011F0  2E2C               	decfsz	___lldiv@counter,f,c
  3861  0011F2  D7E1               	goto	l2466
  3862  0011F4                     l862:
  3863  0011F4  C028  F020         	movff	___lldiv@quotient,?___lldiv
  3864  0011F8  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  3865  0011FC  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  3866  001200  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  3867  001204  0012               	return		;funcret
  3868  001206                     __end_of___lldiv:
  3869                           	opt stack 0
  3870                           tosu	equ	0xFFF
  3871                           tosh	equ	0xFFE
  3872                           tosl	equ	0xFFD
  3873                           pclath	equ	0xFFA
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           intcon	equ	0xFF2
  3881                           postinc0	equ	0xFEE
  3882                           wreg	equ	0xFE8
  3883                           postinc1	equ	0xFE6
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           indf2	equ	0xFDF
  3887                           postinc2	equ	0xFDE
  3888                           postdec2	equ	0xFDD
  3889                           fsr2h	equ	0xFDA
  3890                           fsr2l	equ	0xFD9
  3891                           status	equ	0xFD8
  3892                           
  3893 ;; *************** function _Eeprom_Write_Block *****************
  3894 ;; Defined at:
  3895 ;;		line 13 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  address         1    wreg     unsigned char 
  3898 ;;  DataPtr         2   19[COMRAM] PTR unsigned char 
  3899 ;;		 -> Circum(2), 
  3900 ;;  BlockSize       1   21[COMRAM] unsigned char 
  3901 ;;  ptrFnCallbac    2   22[COMRAM] PTR FTN()void 
  3902 ;;		 -> Absolute function(1), 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  address         1   25[COMRAM] unsigned char 
  3905 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  3906 ;;  WriteGranted    1   24[COMRAM] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      unsigned char 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3916 ;;      Params:         5       0       0       0       0       0       0
  3917 ;;      Locals:         3       0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0
  3919 ;;      Totals:         8       0       0       0       0       0       0
  3920 ;;Total ram usage:        8 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    4
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_APP_MANAGE
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text21
  3931  001272                     __ptext21:
  3932                           	opt stack 0
  3933  001272                     _Eeprom_Write_Block:
  3934                           	opt stack 22
  3935                           
  3936                           ;incstack = 0
  3937                           ;Eeprom_Write_Block@address stored from wreg
  3938  001272  6E1A               	movwf	Eeprom_Write_Block@address,c
  3939                           
  3940                           ;Eeprom.c: 21: unsigned char WriteGranted;
  3941                           ;Eeprom.c: 22: unsigned char LoopIndex;
  3942                           ;Eeprom.c: 23: if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= 50))
  3943  001274  5057               	movf	_WriteRequest,w,c
  3944  001276  A4D8               	btfss	status,2,c
  3945  001278  D02A               	goto	l2584
  3946  00127A  0E33               	movlw	51
  3947  00127C  6016               	cpfslt	Eeprom_Write_Block@BlockSize,c
  3948  00127E  D027               	goto	l2584
  3949                           
  3950                           ;Eeprom.c: 24: {
  3951                           ;Eeprom.c: 25: WriteRequest = (unsigned char)1;
  3952  001280  0E01               	movlw	1
  3953  001282  6E57               	movwf	_WriteRequest,c
  3954                           
  3955                           ;Eeprom.c: 27: for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
  3956  001284  0E00               	movlw	0
  3957  001286  6E1B               	movwf	Eeprom_Write_Block@LoopIndex,c
  3958  001288  D013               	goto	l2578
  3959  00128A                     l2574:
  3960                           
  3961                           ;Eeprom.c: 28: {
  3962                           ;Eeprom.c: 29: DataArray[LoopIndex] = DataPtr[LoopIndex];
  3963  00128A  501B               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3964  00128C  0D01               	mullw	1
  3965  00128E  50F3               	movf	prodl,w,c
  3966  001290  2414               	addwf	Eeprom_Write_Block@DataPtr,w,c
  3967  001292  6ED9               	movwf	fsr2l,c
  3968  001294  50F4               	movf	prodh,w,c
  3969  001296  2015               	addwfc	Eeprom_Write_Block@DataPtr+1,w,c
  3970  001298  6EDA               	movwf	fsr2h,c
  3971  00129A  501B               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3972  00129C  0D01               	mullw	1
  3973  00129E  0E80               	movlw	low _DataArray
  3974  0012A0  24F3               	addwf	prodl,w,c
  3975  0012A2  6EE1               	movwf	fsr1l,c
  3976  0012A4  0E00               	movlw	high _DataArray
  3977  0012A6  20F4               	addwfc	prodh,w,c
  3978  0012A8  6EE2               	movwf	fsr1h,c
  3979  0012AA  CFDF FFE7          	movff	indf2,indf1
  3980  0012AE  2A1B               	incf	Eeprom_Write_Block@LoopIndex,f,c
  3981  0012B0                     l2578:
  3982  0012B0  5016               	movf	Eeprom_Write_Block@BlockSize,w,c
  3983  0012B2  5C1B               	subwf	Eeprom_Write_Block@LoopIndex,w,c
  3984  0012B4  A0D8               	btfss	status,0,c
  3985  0012B6  D7E9               	goto	l2574
  3986                           
  3987                           ;Eeprom.c: 30: }
  3988                           ;Eeprom.c: 31: DataSize = BlockSize;
  3989  0012B8  C016  F055         	movff	Eeprom_Write_Block@BlockSize,_DataSize
  3990                           
  3991                           ;Eeprom.c: 32: EEPROMaddr = address;
  3992  0012BC  C01A  F056         	movff	Eeprom_Write_Block@address,_EEPROMaddr
  3993                           
  3994                           ;Eeprom.c: 33: WriteFnCallback = ptrFnCallback;
  3995  0012C0  C017  F049         	movff	Eeprom_Write_Block@ptrFnCallback,_WriteFnCallback
  3996  0012C4  C018  F04A         	movff	Eeprom_Write_Block@ptrFnCallback+1,_WriteFnCallback+1
  3997                           
  3998                           ;Eeprom.c: 34: WriteGranted = (unsigned char)1;
  3999  0012C8  0E01               	movlw	1
  4000  0012CA  6E19               	movwf	Eeprom_Write_Block@WriteGranted,c
  4001                           
  4002                           ;Eeprom.c: 35: }
  4003  0012CC  0012               	return	
  4004  0012CE                     l2584:
  4005                           
  4006                           ;Eeprom.c: 36: else
  4007                           ;Eeprom.c: 37: {
  4008                           ;Eeprom.c: 38: WriteGranted = (unsigned char)0;
  4009  0012CE  0E00               	movlw	0
  4010  0012D0  6E19               	movwf	Eeprom_Write_Block@WriteGranted,c
  4011  0012D2  0012               	return	
  4012  0012D4                     __end_of_Eeprom_Write_Block:
  4013                           	opt stack 0
  4014                           tosu	equ	0xFFF
  4015                           tosh	equ	0xFFE
  4016                           tosl	equ	0xFFD
  4017                           pclath	equ	0xFFA
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf1	equ	0xFE7
  4028                           postinc1	equ	0xFE6
  4029                           fsr1h	equ	0xFE2
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _BlinkDigit *****************
  4039 ;; Defined at:
  4040 ;;		line 127 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  Index           1    wreg     unsigned char 
  4043 ;;  duration        1   19[COMRAM] unsigned char 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  Index           1   20[COMRAM] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4055 ;;      Params:         1       0       0       0       0       0       0
  4056 ;;      Locals:         1       0       0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0
  4058 ;;      Totals:         2       0       0       0       0       0       0
  4059 ;;Total ram usage:        2 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    4
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_APP_MANAGE
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text22
  4070  00172A                     __ptext22:
  4071                           	opt stack 0
  4072  00172A                     _BlinkDigit:
  4073                           	opt stack 22
  4074                           
  4075                           ;incstack = 0
  4076                           ;BlinkDigit@Index stored from wreg
  4077  00172A  6E15               	movwf	BlinkDigit@Index,c
  4078                           
  4079                           ;BCDdisplay.c: 129: BlinkIndex = Index;
  4080  00172C  C015  F05B         	movff	BlinkDigit@Index,_BlinkIndex
  4081                           
  4082                           ;BCDdisplay.c: 130: BlinkDuration = duration;
  4083  001730  C014  F05A         	movff	BlinkDigit@duration,_BlinkDuration
  4084  001734  0012               	return		;funcret
  4085  001736                     __end_of_BlinkDigit:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclath	equ	0xFFA
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           prodh	equ	0xFF4
  4096                           prodl	equ	0xFF3
  4097                           intcon	equ	0xFF2
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           indf1	equ	0xFE7
  4101                           postinc1	equ	0xFE6
  4102                           fsr1h	equ	0xFE2
  4103                           fsr1l	equ	0xFE1
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function _BCDsendNumber *****************
  4112 ;; Defined at:
  4113 ;;		line 34 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  Number          2   26[COMRAM] unsigned short 
  4116 ;;  DecimalPlace    1   28[COMRAM] unsigned char 
  4117 ;;  EnableTranc     1   29[COMRAM] unsigned char 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  Buffer          2   36[COMRAM] unsigned short 
  4120 ;;  Output          2   34[COMRAM] unsigned short 
  4121 ;;  Link            2   32[COMRAM] unsigned short 
  4122 ;;  LoopIndex       1   38[COMRAM] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4132 ;;      Params:         4       0       0       0       0       0       0
  4133 ;;      Locals:         7       0       0       0       0       0       0
  4134 ;;      Temps:          2       0       0       0       0       0       0
  4135 ;;      Totals:        13       0       0       0       0       0       0
  4136 ;;Total ram usage:       13 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    5
  4139 ;; This function calls:
  4140 ;;		___lwdiv
  4141 ;;		___wmul
  4142 ;; This function is called by:
  4143 ;;		_APP_MANAGE
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text23
  4148  000D86                     __ptext23:
  4149                           	opt stack 0
  4150  000D86                     _BCDsendNumber:
  4151                           	opt stack 21
  4152                           
  4153                           ;BCDdisplay.c: 41: unsigned short Link,Output,Buffer;
  4154                           ;BCDdisplay.c: 42: unsigned char LoopIndex;
  4155                           ;BCDdisplay.c: 44: Buffer = Number;
  4156                           
  4157                           ;incstack = 0
  4158  000D86  C01B  F025         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  4159  000D8A  C01C  F026         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  4160                           
  4161                           ;BCDdisplay.c: 45: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  4162  000D8E  0E00               	movlw	0
  4163  000D90  6E27               	movwf	BCDsendNumber@LoopIndex,c
  4164  000D92                     l2528:
  4165  000D92  0E03               	movlw	3
  4166  000D94  6427               	cpfsgt	BCDsendNumber@LoopIndex,c
  4167  000D96  D001               	goto	l2532
  4168  000D98  D05F               	goto	l2554
  4169  000D9A                     l2532:
  4170                           
  4171                           ;BCDdisplay.c: 46: {
  4172                           ;BCDdisplay.c: 47: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  4173  000D9A  5025               	movf	BCDsendNumber@Buffer,w,c
  4174  000D9C  1026               	iorwf	BCDsendNumber@Buffer+1,w,c
  4175  000D9E  A4D8               	btfss	status,2,c
  4176  000DA0  D004               	goto	l90
  4177  000DA2  5027               	movf	BCDsendNumber@LoopIndex,w,c
  4178  000DA4  5C1D               	subwf	BCDsendNumber@DecimalPlace,w,c
  4179  000DA6  A0D8               	btfss	status,0,c
  4180  000DA8  D02D               	goto	l2542
  4181  000DAA                     l90:
  4182                           
  4183                           ;BCDdisplay.c: 48: {
  4184                           ;BCDdisplay.c: 49: Link = Buffer;
  4185  000DAA  C025  F021         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  4186  000DAE  C026  F022         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  4187                           
  4188                           ;BCDdisplay.c: 50: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  4189  000DB2  C025  F014         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  4190  000DB6  C026  F015         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  4191  000DBA  0E00               	movlw	0
  4192  000DBC  6E17               	movwf	___lwdiv@divisor+1,c
  4193  000DBE  0E0A               	movlw	10
  4194  000DC0  6E16               	movwf	___lwdiv@divisor,c
  4195  000DC2  ECC1  F009         	call	___lwdiv	;wreg free
  4196  000DC6  C014  F025         	movff	?___lwdiv,BCDsendNumber@Buffer
  4197  000DCA  C015  F026         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  4198                           
  4199                           ;BCDdisplay.c: 51: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  4200  000DCE  C025  F014         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  4201  000DD2  C026  F015         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  4202  000DD6  0E00               	movlw	0
  4203  000DD8  6E17               	movwf	___wmul@multiplicand+1,c
  4204  000DDA  0E0A               	movlw	10
  4205  000DDC  6E16               	movwf	___wmul@multiplicand,c
  4206  000DDE  EC40  F00B         	call	___wmul	;wreg free
  4207  000DE2  1E14               	comf	?___wmul,f,c
  4208  000DE4  1E15               	comf	?___wmul+1,f,c
  4209  000DE6  4A14               	infsnz	?___wmul,f,c
  4210  000DE8  2A15               	incf	?___wmul+1,f,c
  4211  000DEA  5021               	movf	BCDsendNumber@Link,w,c
  4212  000DEC  2414               	addwf	?___wmul,w,c
  4213  000DEE  6E23               	movwf	BCDsendNumber@Output,c
  4214  000DF0  5022               	movf	BCDsendNumber@Link+1,w,c
  4215  000DF2  2015               	addwfc	?___wmul+1,w,c
  4216  000DF4  6E24               	movwf	BCDsendNumber@Output+1,c
  4217                           
  4218                           ;BCDdisplay.c: 53: BCDAlpha[LoopIndex] = SevenSegmentMAP[Output];
  4219  000DF6  0E33               	movlw	low _SevenSegmentMAP
  4220  000DF8  2423               	addwf	BCDsendNumber@Output,w,c
  4221  000DFA  6EF6               	movwf	tblptrl,c
  4222  000DFC  0E06               	movlw	high _SevenSegmentMAP
  4223  000DFE  2024               	addwfc	BCDsendNumber@Output+1,w,c
  4224  000E00  6EF7               	movwf	tblptrh,c
  4225  000E02                     	if	0	;There are less than 3 active tblptr bytes
  4226  000E02  D00B               	goto	L6
  4227  000E04                     l2542:
  4228                           
  4229                           ;BCDdisplay.c: 55: else if ((LoopIndex <= DecimalPlace)
  4230                           ;BCDdisplay.c: 56: ||( (unsigned char)0) == EnableTranc)
  4231  000E04  5027               	movf	BCDsendNumber@LoopIndex,w,c
  4232  000E06  5C1D               	subwf	BCDsendNumber@DecimalPlace,w,c
  4233  000E08  B0D8               	btfsc	status,0,c
  4234  000E0A  D003               	goto	l2546
  4235  000E0C  501E               	movf	BCDsendNumber@EnableTranc,w,c
  4236  000E0E  A4D8               	btfss	status,2,c
  4237  000E10  D015               	goto	l2548
  4238  000E12                     l2546:
  4239                           
  4240                           ;BCDdisplay.c: 57: {
  4241                           ;BCDdisplay.c: 58: BCDAlpha[LoopIndex] = SevenSegmentMAP[0];
  4242  000E12  0E33               	movlw	low _SevenSegmentMAP
  4243  000E14  6EF6               	movwf	tblptrl,c
  4244  000E16                     	if	1	;There is more than 1 active tblptr byte
  4245  000E16  0E06               	movlw	high _SevenSegmentMAP
  4246  000E18  6EF7               	movwf	tblptrh,c
  4247  000E1A                     	endif
  4248  000E1A                     	if	0	;There are less than 3 active tblptr bytes
  4249  000E1A                     L6:
  4250  000E1A                     	endif
  4251  000E1A  0008               	tblrd		*
  4252  000E1C  50F5               	movf	tablat,w,c
  4253  000E1E  6E1F               	movwf	??_BCDsendNumber& (0+255),c
  4254  000E20  6A20               	clrf	(??_BCDsendNumber+1)& (0+255),c
  4255  000E22  5027               	movf	BCDsendNumber@LoopIndex,w,c
  4256  000E24  0D02               	mullw	2
  4257  000E26  0E37               	movlw	low _BCDAlpha
  4258  000E28  24F3               	addwf	prodl,w,c
  4259  000E2A  6ED9               	movwf	fsr2l,c
  4260  000E2C  0E00               	movlw	high _BCDAlpha
  4261  000E2E  20F4               	addwfc	prodh,w,c
  4262  000E30  6EDA               	movwf	fsr2h,c
  4263  000E32  C01F  FFDE         	movff	??_BCDsendNumber,postinc2
  4264  000E36  C020  FFDD         	movff	??_BCDsendNumber+1,postdec2
  4265                           
  4266                           ;BCDdisplay.c: 59: }
  4267  000E3A  D00C               	goto	l2550
  4268  000E3C                     l2548:
  4269                           
  4270                           ;BCDdisplay.c: 60: else
  4271                           ;BCDdisplay.c: 61: {
  4272                           ;BCDdisplay.c: 62: BCDAlpha[LoopIndex] = 0x0;
  4273  000E3C  5027               	movf	BCDsendNumber@LoopIndex,w,c
  4274  000E3E  0D02               	mullw	2
  4275  000E40  0E37               	movlw	low _BCDAlpha
  4276  000E42  24F3               	addwf	prodl,w,c
  4277  000E44  6ED9               	movwf	fsr2l,c
  4278  000E46  0E00               	movlw	high _BCDAlpha
  4279  000E48  20F4               	addwfc	prodh,w,c
  4280  000E4A  6EDA               	movwf	fsr2h,c
  4281  000E4C  0E00               	movlw	0
  4282  000E4E  6EDE               	movwf	postinc2,c
  4283  000E50  0E00               	movlw	0
  4284  000E52  6EDD               	movwf	postdec2,c
  4285  000E54                     l2550:
  4286  000E54  2A27               	incf	BCDsendNumber@LoopIndex,f,c
  4287  000E56  D79D               	goto	l2528
  4288  000E58                     l2554:
  4289                           
  4290                           ;BCDdisplay.c: 63: }
  4291                           ;BCDdisplay.c: 64: }
  4292                           ;BCDdisplay.c: 65: if(DecimalPlace != (unsigned char)0)
  4293  000E58  501D               	movf	BCDsendNumber@DecimalPlace,w,c
  4294  000E5A  B4D8               	btfsc	status,2,c
  4295  000E5C  0012               	return	
  4296                           
  4297                           ;BCDdisplay.c: 66: {
  4298                           ;BCDdisplay.c: 67: BCDAlpha[DecimalPlace] |= SevenSegmentMAP[10];
  4299  000E5E  501D               	movf	BCDsendNumber@DecimalPlace,w,c
  4300  000E60  0D02               	mullw	2
  4301  000E62  0E37               	movlw	low _BCDAlpha
  4302  000E64  24F3               	addwf	prodl,w,c
  4303  000E66  6ED9               	movwf	fsr2l,c
  4304  000E68  0E00               	movlw	high _BCDAlpha
  4305  000E6A  20F4               	addwfc	prodh,w,c
  4306  000E6C  6EDA               	movwf	fsr2h,c
  4307  000E6E  0E3D               	movlw	low (_SevenSegmentMAP+10)
  4308  000E70  6EF6               	movwf	tblptrl,c
  4309  000E72  0E06               	movlw	high (_SevenSegmentMAP+10)
  4310  000E74  6EF7               	movwf	tblptrh,c
  4311  000E76                     	if	0	;tblptru may be non-zero
  4312  000E76                     	endif
  4313  000E76                     	if	0	;tblptru may be non-zero
  4314  000E76                     	endif
  4315  000E76  0008               	tblrd		*
  4316  000E78  50F5               	movf	tablat,w,c
  4317  000E7A  12DE               	iorwf	postinc2,f,c
  4318  000E7C  0E00               	movlw	0
  4319  000E7E  12DD               	iorwf	postdec2,f,c
  4320  000E80  0012               	return	
  4321  000E82                     __end_of_BCDsendNumber:
  4322                           	opt stack 0
  4323                           tosu	equ	0xFFF
  4324                           tosh	equ	0xFFE
  4325                           tosl	equ	0xFFD
  4326                           pclath	equ	0xFFA
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           indf1	equ	0xFE7
  4337                           postinc1	equ	0xFE6
  4338                           fsr1h	equ	0xFE2
  4339                           fsr1l	equ	0xFE1
  4340                           indf2	equ	0xFDF
  4341                           postinc2	equ	0xFDE
  4342                           postdec2	equ	0xFDD
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function ___wmul *****************
  4348 ;; Defined at:
  4349 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  multiplier      2   19[COMRAM] unsigned int 
  4352 ;;  multiplicand    2   21[COMRAM] unsigned int 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  product         2   23[COMRAM] unsigned int 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  2   19[COMRAM] unsigned int 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0, prodl, prodh
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4364 ;;      Params:         4       0       0       0       0       0       0
  4365 ;;      Locals:         2       0       0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0
  4367 ;;      Totals:         6       0       0       0       0       0       0
  4368 ;;Total ram usage:        6 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    4
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_IncrementDecrementSingleDigit
  4375 ;;		_BCDsendNumber
  4376 ;;		_SpeedCalcManage
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text24
  4381  001680                     __ptext24:
  4382                           	opt stack 0
  4383  001680                     ___wmul:
  4384                           	opt stack 22
  4385                           
  4386                           ;incstack = 0
  4387  001680  5014               	movf	___wmul@multiplier,w,c
  4388  001682  0216               	mulwf	___wmul@multiplicand,c
  4389  001684  CFF3 F018          	movff	prodl,___wmul@product
  4390  001688  CFF4 F019          	movff	prodh,___wmul@product+1
  4391  00168C  5014               	movf	___wmul@multiplier,w,c
  4392  00168E  0217               	mulwf	___wmul@multiplicand+1,c
  4393  001690  50F3               	movf	prodl,w,c
  4394  001692  2619               	addwf	___wmul@product+1,f,c
  4395  001694  5015               	movf	___wmul@multiplier+1,w,c
  4396  001696  0216               	mulwf	___wmul@multiplicand,c
  4397  001698  50F3               	movf	prodl,w,c
  4398  00169A  2619               	addwf	___wmul@product+1,f,c
  4399  00169C  C018  F014         	movff	___wmul@product,?___wmul
  4400  0016A0  C019  F015         	movff	___wmul@product+1,?___wmul+1
  4401  0016A4  0012               	return	
  4402  0016A6                     __end_of___wmul:
  4403                           	opt stack 0
  4404                           tosu	equ	0xFFF
  4405                           tosh	equ	0xFFE
  4406                           tosl	equ	0xFFD
  4407                           pclath	equ	0xFFA
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           postinc0	equ	0xFEE
  4416                           wreg	equ	0xFE8
  4417                           indf1	equ	0xFE7
  4418                           postinc1	equ	0xFE6
  4419                           fsr1h	equ	0xFE2
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8
  4427                           
  4428 ;; *************** function ___lwdiv *****************
  4429 ;; Defined at:
  4430 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;  dividend        2   19[COMRAM] unsigned int 
  4433 ;;  divisor         2   21[COMRAM] unsigned int 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  quotient        2   24[COMRAM] unsigned int 
  4436 ;;  counter         1   23[COMRAM] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  2   19[COMRAM] unsigned int 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         4       0       0       0       0       0       0
  4447 ;;      Locals:         3       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:         7       0       0       0       0       0       0
  4450 ;;Total ram usage:        7 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    4
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_IncrementDecrementSingleDigit
  4457 ;;		_BCDsendNumber
  4458 ;;		_SpeedCalcManage
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text25
  4463  001382                     __ptext25:
  4464                           	opt stack 0
  4465  001382                     ___lwdiv:
  4466                           	opt stack 22
  4467                           
  4468                           ;incstack = 0
  4469  001382  0E00               	movlw	0
  4470  001384  6E1A               	movwf	___lwdiv@quotient+1,c
  4471  001386  0E00               	movlw	0
  4472  001388  6E19               	movwf	___lwdiv@quotient,c
  4473  00138A  5016               	movf	___lwdiv@divisor,w,c
  4474  00138C  1017               	iorwf	___lwdiv@divisor+1,w,c
  4475  00138E  B4D8               	btfsc	status,2,c
  4476  001390  D01C               	goto	l915
  4477  001392  0E01               	movlw	1
  4478  001394  6E18               	movwf	___lwdiv@counter,c
  4479  001396  D004               	goto	l2486
  4480  001398                     l2484:
  4481  001398  90D8               	bcf	status,0,c
  4482  00139A  3616               	rlcf	___lwdiv@divisor,f,c
  4483  00139C  3617               	rlcf	___lwdiv@divisor+1,f,c
  4484  00139E  2A18               	incf	___lwdiv@counter,f,c
  4485  0013A0                     l2486:
  4486  0013A0  AE17               	btfss	___lwdiv@divisor+1,7,c
  4487  0013A2  D7FA               	goto	l2484
  4488  0013A4                     l2488:
  4489  0013A4  90D8               	bcf	status,0,c
  4490  0013A6  3619               	rlcf	___lwdiv@quotient,f,c
  4491  0013A8  361A               	rlcf	___lwdiv@quotient+1,f,c
  4492  0013AA  5016               	movf	___lwdiv@divisor,w,c
  4493  0013AC  5C14               	subwf	___lwdiv@dividend,w,c
  4494  0013AE  5017               	movf	___lwdiv@divisor+1,w,c
  4495  0013B0  5815               	subwfb	___lwdiv@dividend+1,w,c
  4496  0013B2  A0D8               	btfss	status,0,c
  4497  0013B4  D005               	goto	l2496
  4498  0013B6  5016               	movf	___lwdiv@divisor,w,c
  4499  0013B8  5E14               	subwf	___lwdiv@dividend,f,c
  4500  0013BA  5017               	movf	___lwdiv@divisor+1,w,c
  4501  0013BC  5A15               	subwfb	___lwdiv@dividend+1,f,c
  4502  0013BE  8019               	bsf	___lwdiv@quotient,0,c
  4503  0013C0                     l2496:
  4504  0013C0  90D8               	bcf	status,0,c
  4505  0013C2  3217               	rrcf	___lwdiv@divisor+1,f,c
  4506  0013C4  3216               	rrcf	___lwdiv@divisor,f,c
  4507  0013C6  2E18               	decfsz	___lwdiv@counter,f,c
  4508  0013C8  D7ED               	goto	l2488
  4509  0013CA                     l915:
  4510  0013CA  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  4511  0013CE  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4512  0013D2  0012               	return		;funcret
  4513  0013D4                     __end_of___lwdiv:
  4514                           	opt stack 0
  4515                           tosu	equ	0xFFF
  4516                           tosh	equ	0xFFE
  4517                           tosl	equ	0xFFD
  4518                           pclath	equ	0xFFA
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           indf1	equ	0xFE7
  4529                           postinc1	equ	0xFE6
  4530                           fsr1h	equ	0xFE2
  4531                           fsr1l	equ	0xFE1
  4532                           indf2	equ	0xFDF
  4533                           postinc2	equ	0xFDE
  4534                           postdec2	equ	0xFDD
  4535                           fsr2h	equ	0xFDA
  4536                           fsr2l	equ	0xFD9
  4537                           status	equ	0xFD8
  4538                           
  4539 ;; *************** function _BCDManage7segment *****************
  4540 ;; Defined at:
  4541 ;;		line 71 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  BCD             1   24[COMRAM] unsigned char 
  4546 ;;  Index           1   23[COMRAM] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      void 
  4549 ;; Registers used:
  4550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4556 ;;      Params:         0       0       0       0       0       0       0
  4557 ;;      Locals:         2       0       0       0       0       0       0
  4558 ;;      Temps:          2       0       0       0       0       0       0
  4559 ;;      Totals:         4       0       0       0       0       0       0
  4560 ;;Total ram usage:        4 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		_HWI_4Digit_WRITE
  4565 ;;		_HWI_8Digit_WRITE
  4566 ;; This function is called by:
  4567 ;;		_DisplayAlphaNumeric
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text26
  4572  000F3E                     __ptext26:
  4573                           	opt stack 0
  4574  000F3E                     _BCDManage7segment:
  4575                           	opt stack 22
  4576                           
  4577                           ;BCDdisplay.c: 73: static unsigned char DigitIndex = (unsigned char)0;
  4578                           ;BCDdisplay.c: 74: static unsigned char BlinkCounter = (unsigned char)0;
  4579                           ;BCDdisplay.c: 75: unsigned char Index;
  4580                           ;BCDdisplay.c: 76: unsigned char BCD = (unsigned char)0;
  4581                           
  4582                           ;incstack = 0
  4583  000F3E  0E00               	movlw	0
  4584  000F40  6E19               	movwf	BCDManage7segment@BCD,c
  4585                           
  4586                           ;BCDdisplay.c: 79: if( BlinkDuration != (unsigned char)0)
  4587  000F42  505A               	movf	_BlinkDuration,w,c
  4588  000F44  B4D8               	btfsc	status,2,c
  4589  000F46  D00A               	goto	l2156
  4590                           
  4591                           ;BCDdisplay.c: 80: {
  4592                           ;BCDdisplay.c: 81: BlinkCounter++;
  4593  000F48  2A58               	incf	BCDManage7segment@BlinkCounter,f,c
  4594                           
  4595                           ;BCDdisplay.c: 82: if(BlinkCounter == BlinkDuration)
  4596  000F4A  505A               	movf	_BlinkDuration,w,c
  4597  000F4C  1858               	xorwf	BCDManage7segment@BlinkCounter,w,c
  4598  000F4E  A4D8               	btfss	status,2,c
  4599  000F50  D007               	goto	l2158
  4600                           
  4601                           ;BCDdisplay.c: 83: {
  4602                           ;BCDdisplay.c: 84: BlinkFlag ^= (unsigned char)1;
  4603  000F52  0E01               	movlw	1
  4604  000F54  1A59               	xorwf	_BlinkFlag,f,c
  4605                           
  4606                           ;BCDdisplay.c: 85: BlinkCounter = (unsigned char)0;
  4607  000F56  0E00               	movlw	0
  4608  000F58  6E58               	movwf	BCDManage7segment@BlinkCounter,c
  4609                           
  4610                           ;BCDdisplay.c: 86: }
  4611                           ;BCDdisplay.c: 87: }
  4612  000F5A  D002               	goto	l2158
  4613  000F5C                     l2156:
  4614                           
  4615                           ;BCDdisplay.c: 88: else
  4616                           ;BCDdisplay.c: 89: {
  4617                           ;BCDdisplay.c: 90: BlinkFlag = (unsigned char)0;
  4618  000F5C  0E00               	movlw	0
  4619  000F5E  6E59               	movwf	_BlinkFlag,c
  4620  000F60                     l2158:
  4621                           
  4622                           ;BCDdisplay.c: 91: }
  4623                           ;BCDdisplay.c: 93: if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex))
  4624  000F60  0459               	decf	_BlinkFlag,w,c
  4625  000F62  A4D8               	btfss	status,2,c
  4626  000F64  D007               	goto	l2164
  4627  000F66  505B               	movf	_BlinkIndex,w,c
  4628  000F68  1869               	xorwf	BCDManage7segment@DigitIndex,w,c
  4629  000F6A  A4D8               	btfss	status,2,c
  4630  000F6C  D003               	goto	l2164
  4631                           
  4632                           ;BCDdisplay.c: 94: {
  4633                           ;BCDdisplay.c: 95: Index = (unsigned char)0xF;
  4634  000F6E  0E0F               	movlw	15
  4635  000F70  6E18               	movwf	BCDManage7segment@Index,c
  4636                           
  4637                           ;BCDdisplay.c: 96: }
  4638  000F72  D01A               	goto	l2168
  4639  000F74                     l2164:
  4640                           
  4641                           ;BCDdisplay.c: 97: else
  4642                           ;BCDdisplay.c: 98: {
  4643                           ;BCDdisplay.c: 99: Index = (~(((unsigned char) 0x1 << ((4 - DigitIndex)
  4644                           ;BCDdisplay.c: 100: - (unsigned char)1))));
  4645  000F74  2869               	incf	BCDManage7segment@DigitIndex,w,c
  4646  000F76  0800               	sublw	0
  4647  000F78  6E16               	movwf	??_BCDManage7segment& (0+255),c
  4648  000F7A  0E04               	movlw	4
  4649  000F7C  2616               	addwf	??_BCDManage7segment,f,c
  4650  000F7E  0E01               	movlw	1
  4651  000F80  6E17               	movwf	(??_BCDManage7segment+1)& (0+255),c
  4652  000F82  2A16               	incf	??_BCDManage7segment,f,c
  4653  000F84  D002               	goto	u1354
  4654  000F86                     u1355:
  4655  000F86  90D8               	bcf	status,0,c
  4656  000F88  3617               	rlcf	??_BCDManage7segment+1,f,c
  4657  000F8A                     u1354:
  4658  000F8A  2E16               	decfsz	??_BCDManage7segment,f,c
  4659  000F8C  D7FC               	goto	u1355
  4660  000F8E  5017               	movf	??_BCDManage7segment+1,w,c
  4661  000F90  0AFF               	xorlw	255
  4662  000F92  6E18               	movwf	BCDManage7segment@Index,c
  4663                           
  4664                           ;BCDdisplay.c: 101: BCD = BCDAlpha[DigitIndex];
  4665  000F94  5069               	movf	BCDManage7segment@DigitIndex,w,c
  4666  000F96  0D02               	mullw	2
  4667  000F98  0E37               	movlw	low _BCDAlpha
  4668  000F9A  24F3               	addwf	prodl,w,c
  4669  000F9C  6ED9               	movwf	fsr2l,c
  4670  000F9E  0E00               	movlw	high _BCDAlpha
  4671  000FA0  20F4               	addwfc	prodh,w,c
  4672  000FA2  6EDA               	movwf	fsr2h,c
  4673  000FA4  50DF               	movf	indf2,w,c
  4674  000FA6  6E19               	movwf	BCDManage7segment@BCD,c
  4675  000FA8                     l2168:
  4676                           
  4677                           ;BCDdisplay.c: 102: }
  4678                           ;BCDdisplay.c: 104: if( (unsigned char)1 == bIsAnodeUsed)
  4679  000FA8  045C               	decf	_bIsAnodeUsed,w,c
  4680  000FAA  A4D8               	btfss	status,2,c
  4681  000FAC  D002               	goto	l2172
  4682                           
  4683                           ;BCDdisplay.c: 105: {
  4684                           ;BCDdisplay.c: 106: Index = (unsigned char)~Index;
  4685  000FAE  1E18               	comf	BCDManage7segment@Index,f,c
  4686                           
  4687                           ;BCDdisplay.c: 107: BCD = (unsigned char)~BCD;
  4688  000FB0  1E19               	comf	BCDManage7segment@BCD,f,c
  4689  000FB2                     l2172:
  4690                           
  4691                           ;BCDdisplay.c: 108: }
  4692                           ;BCDdisplay.c: 110: HWI_4Digit_WRITE(0,Index);
  4693  000FB2  C018  F014         	movff	BCDManage7segment@Index,HWI_4Digit_WRITE@value
  4694  000FB6  0E00               	movlw	0
  4695  000FB8  ECA5  F00A         	call	_HWI_4Digit_WRITE
  4696                           
  4697                           ;BCDdisplay.c: 111: HWI_8Digit_WRITE(1,BCD);
  4698  000FBC  C019  F014         	movff	BCDManage7segment@BCD,HWI_8Digit_WRITE@value
  4699  000FC0  0E01               	movlw	1
  4700  000FC2  EC53  F00B         	call	_HWI_8Digit_WRITE
  4701                           
  4702                           ;BCDdisplay.c: 118: DigitIndex ++;
  4703  000FC6  2A69               	incf	BCDManage7segment@DigitIndex,f,c
  4704                           
  4705                           ;BCDdisplay.c: 119: if(DigitIndex == 4)
  4706  000FC8  0E04               	movlw	4
  4707  000FCA  1869               	xorwf	BCDManage7segment@DigitIndex,w,c
  4708  000FCC  A4D8               	btfss	status,2,c
  4709  000FCE  0012               	return	
  4710                           
  4711                           ;BCDdisplay.c: 120: {
  4712                           ;BCDdisplay.c: 121: DigitIndex = (unsigned char)0;
  4713  000FD0  0E00               	movlw	0
  4714  000FD2  6E69               	movwf	BCDManage7segment@DigitIndex,c
  4715  000FD4  0012               	return	
  4716  000FD6                     __end_of_BCDManage7segment:
  4717                           	opt stack 0
  4718                           tosu	equ	0xFFF
  4719                           tosh	equ	0xFFE
  4720                           tosl	equ	0xFFD
  4721                           pclath	equ	0xFFA
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           indf1	equ	0xFE7
  4732                           postinc1	equ	0xFE6
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function _HWI_8Digit_WRITE *****************
  4743 ;; Defined at:
  4744 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  port            1    wreg     unsigned char 
  4747 ;;  value           1   19[COMRAM] unsigned char 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  port            1   20[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2, status,0
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4759 ;;      Params:         1       0       0       0       0       0       0
  4760 ;;      Locals:         1       0       0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0
  4762 ;;      Totals:         2       0       0       0       0       0       0
  4763 ;;Total ram usage:        2 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    4
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_BCDManage7segment
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text27
  4774  0016A6                     __ptext27:
  4775                           	opt stack 0
  4776  0016A6                     _HWI_8Digit_WRITE:
  4777                           	opt stack 22
  4778                           
  4779                           ;incstack = 0
  4780                           ;HWI_8Digit_WRITE@port stored from wreg
  4781  0016A6  6E15               	movwf	HWI_8Digit_WRITE@port,c
  4782                           
  4783                           ;HWI_DIGITAL.c: 43: switch (port)
  4784  0016A8  D009               	goto	l2054
  4785  0016AA                     l411:
  4786                           
  4787                           ;HWI_DIGITAL.c: 46: PORTC = value;
  4788  0016AA  C014  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  4789                           
  4790                           ;HWI_DIGITAL.c: 47: break;
  4791  0016AE  0012               	return	
  4792  0016B0                     l413:
  4793                           
  4794                           ;HWI_DIGITAL.c: 49: PORTD = value;
  4795  0016B0  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4796                           
  4797                           ;HWI_DIGITAL.c: 50: break;
  4798  0016B4  0012               	return	
  4799  0016B6                     l414:
  4800                           
  4801                           ;HWI_DIGITAL.c: 52: PORTD = value;
  4802  0016B6  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4803                           
  4804                           ;HWI_DIGITAL.c: 54: }
  4805                           
  4806                           ;HWI_DIGITAL.c: 53: break;
  4807  0016BA  0012               	return	
  4808  0016BC                     l2054:
  4809  0016BC  5015               	movf	HWI_8Digit_WRITE@port,w,c
  4810                           
  4811                           ; Switch size 1, requested type "space"
  4812                           ; Number of cases is 2, Range of values is 0 to 1
  4813                           ; switch strategies available:
  4814                           ; Name         Instructions Cycles
  4815                           ; simple_byte            7     4 (average)
  4816                           ;	Chosen strategy is simple_byte
  4817  0016BE  0A00               	xorlw	0	; case 0
  4818  0016C0  B4D8               	btfsc	status,2,c
  4819  0016C2  D7F3               	goto	l411
  4820  0016C4  0A01               	xorlw	1	; case 1
  4821  0016C6  B4D8               	btfsc	status,2,c
  4822  0016C8  D7F3               	goto	l413
  4823  0016CA  D7F5               	goto	l414
  4824  0016CC                     __end_of_HWI_8Digit_WRITE:
  4825                           	opt stack 0
  4826                           tosu	equ	0xFFF
  4827                           tosh	equ	0xFFE
  4828                           tosl	equ	0xFFD
  4829                           pclath	equ	0xFFA
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           indf1	equ	0xFE7
  4840                           postinc1	equ	0xFE6
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _HWI_4Digit_WRITE *****************
  4851 ;; Defined at:
  4852 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  port            1    wreg     unsigned char 
  4855 ;;  value           1   19[COMRAM] unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  port            1   20[COMRAM] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4867 ;;      Params:         1       0       0       0       0       0       0
  4868 ;;      Locals:         1       0       0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0
  4870 ;;      Totals:         2       0       0       0       0       0       0
  4871 ;;Total ram usage:        2 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    4
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_BCDManage7segment
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text28
  4882  00154A                     __ptext28:
  4883                           	opt stack 0
  4884  00154A                     _HWI_4Digit_WRITE:
  4885                           	opt stack 22
  4886                           
  4887                           ;incstack = 0
  4888                           ;HWI_4Digit_WRITE@port stored from wreg
  4889  00154A  6E15               	movwf	HWI_4Digit_WRITE@port,c
  4890                           
  4891                           ;HWI_DIGITAL.c: 10: switch (port)
  4892  00154C  D00F               	goto	l2048
  4893  00154E                     l2042:
  4894                           
  4895                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  4896  00154E  508B               	movf	3979,w,c	;volatile
  4897  001550  0BF0               	andlw	240
  4898  001552  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4899  001554  6E82               	movwf	3970,c	;volatile
  4900                           
  4901                           ;HWI_DIGITAL.c: 14: break;
  4902  001556  0012               	return	
  4903  001558                     l2044:
  4904                           
  4905                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  4906  001558  508C               	movf	3980,w,c	;volatile
  4907  00155A  0BF0               	andlw	240
  4908  00155C  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4909  00155E  6E83               	movwf	3971,c	;volatile
  4910                           
  4911                           ;HWI_DIGITAL.c: 17: break;
  4912  001560  0012               	return	
  4913  001562                     l2046:
  4914                           
  4915                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  4916  001562  508C               	movf	3980,w,c	;volatile
  4917  001564  0BF0               	andlw	240
  4918  001566  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4919  001568  6E83               	movwf	3971,c	;volatile
  4920                           
  4921                           ;HWI_DIGITAL.c: 20: }
  4922  00156A  0012               	return	
  4923  00156C                     l2048:
  4924  00156C  5015               	movf	HWI_4Digit_WRITE@port,w,c
  4925                           
  4926                           ; Switch size 1, requested type "space"
  4927                           ; Number of cases is 2, Range of values is 0 to 1
  4928                           ; switch strategies available:
  4929                           ; Name         Instructions Cycles
  4930                           ; simple_byte            7     4 (average)
  4931                           ;	Chosen strategy is simple_byte
  4932  00156E  0A00               	xorlw	0	; case 0
  4933  001570  B4D8               	btfsc	status,2,c
  4934  001572  D7ED               	goto	l2042
  4935  001574  0A01               	xorlw	1	; case 1
  4936  001576  B4D8               	btfsc	status,2,c
  4937  001578  D7EF               	goto	l2044
  4938  00157A  D7F3               	goto	l2046
  4939  00157C                     __end_of_HWI_4Digit_WRITE:
  4940                           	opt stack 0
  4941                           tosu	equ	0xFFF
  4942                           tosh	equ	0xFFE
  4943                           tosl	equ	0xFFD
  4944                           pclath	equ	0xFFA
  4945                           tblptru	equ	0xFF8
  4946                           tblptrh	equ	0xFF7
  4947                           tblptrl	equ	0xFF6
  4948                           tablat	equ	0xFF5
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postinc1	equ	0xFE6
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  4966 ;; Defined at:
  4967 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, status,2
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4981 ;;      Params:         0       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0
  4984 ;;      Totals:         0       0       0       0       0       0       0
  4985 ;;Total ram usage:        0 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    4
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_Start_App
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text29
  4996  001494                     __ptext29:
  4997                           	opt stack 0
  4998  001494                     _HWI_INTERRUPTS_INTITALIZE:
  4999                           	opt stack 25
  5000                           
  5001                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  5002                           
  5003                           ;incstack = 0
  5004  001494  8093               	bsf	3987,0,c	;volatile
  5005                           
  5006                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  5007  001496  8293               	bsf	3987,1,c	;volatile
  5008                           
  5009                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  5010  001498  0EF0               	movlw	240
  5011  00149A  6EF2               	movwf	intcon,c	;volatile
  5012                           
  5013                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  5014  00149C  0E08               	movlw	8
  5015  00149E  6EF0               	movwf	intcon3,c	;volatile
  5016                           
  5017                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  5018  0014A0  0ED1               	movlw	209
  5019  0014A2  6ED5               	movwf	4053,c	;volatile
  5020                           
  5021                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  5022  0014A4  0E85               	movlw	133
  5023  0014A6  6ECD               	movwf	4045,c	;volatile
  5024                           
  5025                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  5026  0014A8  0E9D               	movlw	157
  5027  0014AA  6EB1               	movwf	4017,c	;volatile
  5028                           
  5029                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  5030  0014AC  8CF1               	bsf	intcon2,6,c	;volatile
  5031                           
  5032                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  5033  0014AE  8AF1               	bsf	intcon2,5,c	;volatile
  5034                           
  5035                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  5036  0014B0  94F2               	bcf	intcon,2,c	;volatile
  5037                           
  5038                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  5039  0014B2  8AF2               	bsf	intcon,5,c	;volatile
  5040                           
  5041                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  5042  0014B4  909E               	bcf	3998,0,c	;volatile
  5043                           
  5044                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  5045  0014B6  809D               	bsf	3997,0,c	;volatile
  5046                           
  5047                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  5048  0014B8  92A1               	bcf	4001,1,c	;volatile
  5049                           
  5050                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  5051  0014BA  82A0               	bsf	4000,1,c	;volatile
  5052                           
  5053                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  5054  0014BC  0E13               	movlw	19
  5055  0014BE  6ED6               	movwf	4054,c	;volatile
  5056                           
  5057                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  5058  0014C0  0E00               	movlw	0
  5059  0014C2  6ECF               	movwf	4047,c	;volatile
  5060  0014C4  0E00               	movlw	0
  5061  0014C6  6ECE               	movwf	4046,c	;volatile
  5062                           
  5063                           ;HWI_Interrupts.c: 47: TMR3L=0;
  5064  0014C8  0E00               	movlw	0
  5065  0014CA  6EB2               	movwf	4018,c	;volatile
  5066                           
  5067                           ;HWI_Interrupts.c: 48: TMR3H=0;
  5068  0014CC  0E00               	movlw	0
  5069  0014CE  6EB3               	movwf	4019,c	;volatile
  5070  0014D0  0012               	return		;funcret
  5071  0014D2                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  5072                           	opt stack 0
  5073                           tosu	equ	0xFFF
  5074                           tosh	equ	0xFFE
  5075                           tosl	equ	0xFFD
  5076                           pclath	equ	0xFFA
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           intcon3	equ	0xFF0
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           indf1	equ	0xFE7
  5089                           postinc1	equ	0xFE6
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  5100 ;; Defined at:
  5101 ;;		line 75 in file "../../HWIsource/HWI_DIGITAL.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;		None
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5115 ;;      Params:         0       0       0       0       0       0       0
  5116 ;;      Locals:         0       0       0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0       0       0
  5118 ;;      Totals:         0       0       0       0       0       0       0
  5119 ;;Total ram usage:        0 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    4
  5122 ;; This function calls:
  5123 ;;		Nothing
  5124 ;; This function is called by:
  5125 ;;		_Start_App
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           	psect	text30
  5130  0016E8                     __ptext30:
  5131                           	opt stack 0
  5132  0016E8                     _HWI_DIGITAL_INITIALIZE:
  5133                           	opt stack 25
  5134                           
  5135                           ;HWI_DIGITAL.c: 78: TRISD = 0x0;
  5136                           
  5137                           ;incstack = 0
  5138  0016E8  0E00               	movlw	0
  5139  0016EA  6E95               	movwf	3989,c	;volatile
  5140                           
  5141                           ;HWI_DIGITAL.c: 79: PORTD = 0x0;
  5142  0016EC  0E00               	movlw	0
  5143  0016EE  6E83               	movwf	3971,c	;volatile
  5144                           
  5145                           ;HWI_DIGITAL.c: 81: TRISC = 0x0;
  5146  0016F0  0E00               	movlw	0
  5147  0016F2  6E94               	movwf	3988,c	;volatile
  5148                           
  5149                           ;HWI_DIGITAL.c: 82: TRISBbits.RB2 = 1;
  5150  0016F4  8493               	bsf	3987,2,c	;volatile
  5151                           
  5152                           ;HWI_DIGITAL.c: 83: TRISBbits.RB3 = 1;
  5153  0016F6  8693               	bsf	3987,3,c	;volatile
  5154                           
  5155                           ;HWI_DIGITAL.c: 86: TRISBbits.RB4 =1;
  5156  0016F8  8893               	bsf	3987,4,c	;volatile
  5157                           
  5158                           ;HWI_DIGITAL.c: 87: TRISBbits.RB5 =0;
  5159  0016FA  9A93               	bcf	3987,5,c	;volatile
  5160                           
  5161                           ;HWI_DIGITAL.c: 88: TRISBbits.RB6 =0;
  5162  0016FC  9C93               	bcf	3987,6,c	;volatile
  5163                           
  5164                           ;HWI_DIGITAL.c: 89: TRISBbits.RB7 =0;
  5165  0016FE  9E93               	bcf	3987,7,c	;volatile
  5166  001700  0012               	return		;funcret
  5167  001702                     __end_of_HWI_DIGITAL_INITIALIZE:
  5168                           	opt stack 0
  5169                           tosu	equ	0xFFF
  5170                           tosh	equ	0xFFE
  5171                           tosl	equ	0xFFD
  5172                           pclath	equ	0xFFA
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           intcon3	equ	0xFF0
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           indf1	equ	0xFE7
  5185                           postinc1	equ	0xFE6
  5186                           fsr1h	equ	0xFE2
  5187                           fsr1l	equ	0xFE1
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _CreateTask *****************
  5196 ;; Defined at:
  5197 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  5200 ;;		 -> ManageDrivers(1), DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  5201 ;;  TaskId          1   21[COMRAM] unsigned char 
  5202 ;;  Period          1   22[COMRAM] unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5214 ;;      Params:         4       0       0       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0       0       0
  5217 ;;      Totals:         4       0       0       0       0       0       0
  5218 ;;Total ram usage:        4 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    4
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_Start_App
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text31
  5229  0012D4                     __ptext31:
  5230                           	opt stack 0
  5231  0012D4                     _CreateTask:
  5232                           	opt stack 25
  5233                           
  5234                           ;Scheduler.c: 8: if(TaskId < 4)
  5235                           
  5236                           ;incstack = 0
  5237  0012D4  0E04               	movlw	4
  5238  0012D6  6016               	cpfslt	CreateTask@TaskId,c
  5239  0012D8  0012               	return	
  5240                           
  5241                           ;Scheduler.c: 9: {
  5242                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  5243  0012DA  5016               	movf	CreateTask@TaskId,w,c
  5244  0012DC  0D04               	mullw	4
  5245  0012DE  0EB2               	movlw	low _ArrayTask
  5246  0012E0  24F3               	addwf	prodl,w,c
  5247  0012E2  6ED9               	movwf	fsr2l,c
  5248  0012E4  0E00               	movlw	high _ArrayTask
  5249  0012E6  20F4               	addwfc	prodh,w,c
  5250  0012E8  6EDA               	movwf	fsr2h,c
  5251  0012EA  C014  FFDE         	movff	CreateTask@MangeFunction,postinc2
  5252  0012EE  C015  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  5253                           
  5254                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  5255  0012F2  5016               	movf	CreateTask@TaskId,w,c
  5256  0012F4  0D04               	mullw	4
  5257  0012F6  0E02               	movlw	2
  5258  0012F8  26F3               	addwf	prodl,f,c
  5259  0012FA  0E00               	movlw	0
  5260  0012FC  22F4               	addwfc	prodh,f,c
  5261  0012FE  0EB2               	movlw	low _ArrayTask
  5262  001300  24F3               	addwf	prodl,w,c
  5263  001302  6ED9               	movwf	fsr2l,c
  5264  001304  0E00               	movlw	high _ArrayTask
  5265  001306  20F4               	addwfc	prodh,w,c
  5266  001308  6EDA               	movwf	fsr2h,c
  5267  00130A  C017  FFDF         	movff	CreateTask@Period,indf2
  5268                           
  5269                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  5270  00130E  5016               	movf	CreateTask@TaskId,w,c
  5271  001310  0D04               	mullw	4
  5272  001312  0E03               	movlw	3
  5273  001314  26F3               	addwf	prodl,f,c
  5274  001316  0E00               	movlw	0
  5275  001318  22F4               	addwfc	prodh,f,c
  5276  00131A  0EB2               	movlw	low _ArrayTask
  5277  00131C  24F3               	addwf	prodl,w,c
  5278  00131E  6ED9               	movwf	fsr2l,c
  5279  001320  0E00               	movlw	high _ArrayTask
  5280  001322  20F4               	addwfc	prodh,w,c
  5281  001324  6EDA               	movwf	fsr2h,c
  5282  001326  0E00               	movlw	0
  5283  001328  6EDF               	movwf	indf2,c
  5284  00132A  0012               	return	
  5285  00132C                     __end_of_CreateTask:
  5286                           	opt stack 0
  5287                           tosu	equ	0xFFF
  5288                           tosh	equ	0xFFE
  5289                           tosl	equ	0xFFD
  5290                           pclath	equ	0xFFA
  5291                           tblptru	equ	0xFF8
  5292                           tblptrh	equ	0xFF7
  5293                           tblptrl	equ	0xFF6
  5294                           tablat	equ	0xFF5
  5295                           prodh	equ	0xFF4
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           intcon3	equ	0xFF0
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           indf1	equ	0xFE7
  5303                           postinc1	equ	0xFE6
  5304                           fsr1h	equ	0xFE2
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _BCDInitialize *****************
  5314 ;; Defined at:
  5315 ;;		line 29 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  bIsCommonAno    1    wreg     unsigned char 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  bIsCommonAno    1   19[COMRAM] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5329 ;;      Params:         0       0       0       0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0
  5332 ;;      Totals:         1       0       0       0       0       0       0
  5333 ;;Total ram usage:        1 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    4
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_Start_App
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text32
  5344  001752                     __ptext32:
  5345                           	opt stack 0
  5346  001752                     _BCDInitialize:
  5347                           	opt stack 25
  5348                           
  5349                           ;incstack = 0
  5350                           ;BCDInitialize@bIsCommonAnode stored from wreg
  5351  001752  6E14               	movwf	BCDInitialize@bIsCommonAnode,c
  5352                           
  5353                           ;BCDdisplay.c: 31: bIsAnodeUsed = bIsCommonAnode;
  5354  001754  C014  F05C         	movff	BCDInitialize@bIsCommonAnode,_bIsAnodeUsed
  5355  001758  0012               	return		;funcret
  5356  00175A                     __end_of_BCDInitialize:
  5357                           	opt stack 0
  5358                           tosu	equ	0xFFF
  5359                           tosh	equ	0xFFE
  5360                           tosl	equ	0xFFD
  5361                           pclath	equ	0xFFA
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           intcon2	equ	0xFF1
  5370                           intcon3	equ	0xFF0
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           postinc1	equ	0xFE6
  5375                           fsr1h	equ	0xFE2
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _APP_INITIALIZE *****************
  5385 ;; Defined at:
  5386 ;;		line 34 in file "../../../../Common/App/APP.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5400 ;;      Params:         0       0       0       0       0       0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0
  5403 ;;      Totals:         0       0       0       0       0       0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    6
  5407 ;; This function calls:
  5408 ;;		_Eeprom_Read_Block
  5409 ;; This function is called by:
  5410 ;;		_Start_App
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text33
  5415  001630                     __ptext33:
  5416                           	opt stack 0
  5417  001630                     _APP_INITIALIZE:
  5418                           	opt stack 23
  5419                           
  5420                           ;APP.c: 37: Eeprom_Read_Block(1 , (unsigned char*)&Circum , (unsigned char)sizeof(Circum
      +                          ));
  5421                           
  5422                           ;incstack = 0
  5423  001630  0E67               	movlw	low _Circum
  5424  001632  6E18               	movwf	Eeprom_Read_Block@DataPtr,c
  5425  001634  0E00               	movlw	high _Circum
  5426  001636  6E19               	movwf	Eeprom_Read_Block@DataPtr+1,c
  5427  001638  0E02               	movlw	2
  5428  00163A  6E1A               	movwf	Eeprom_Read_Block@BlockSize,c
  5429  00163C  0E01               	movlw	1
  5430  00163E  ECEA  F009         	call	_Eeprom_Read_Block
  5431                           
  5432                           ;APP.c: 46: if(Circum > (unsigned short)9999)
  5433  001642  0E10               	movlw	16
  5434  001644  5C67               	subwf	_Circum,w,c
  5435  001646  0E27               	movlw	39
  5436  001648  5868               	subwfb	_Circum+1,w,c
  5437  00164A  A0D8               	btfss	status,0,c
  5438  00164C  0012               	return	
  5439                           
  5440                           ;APP.c: 47: {
  5441                           ;APP.c: 48: Circum = (unsigned short)0;
  5442  00164E  0E00               	movlw	0
  5443  001650  6E68               	movwf	_Circum+1,c
  5444  001652  0E00               	movlw	0
  5445  001654  6E67               	movwf	_Circum,c
  5446  001656  0012               	return	
  5447  001658                     __end_of_APP_INITIALIZE:
  5448                           	opt stack 0
  5449                           tosu	equ	0xFFF
  5450                           tosh	equ	0xFFE
  5451                           tosl	equ	0xFFD
  5452                           pclath	equ	0xFFA
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           intcon2	equ	0xFF1
  5461                           intcon3	equ	0xFF0
  5462                           postinc0	equ	0xFEE
  5463                           wreg	equ	0xFE8
  5464                           indf1	equ	0xFE7
  5465                           postinc1	equ	0xFE6
  5466                           fsr1h	equ	0xFE2
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _Eeprom_Read_Block *****************
  5476 ;; Defined at:
  5477 ;;		line 42 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  address         1    wreg     unsigned char 
  5480 ;;  DataPtr         2   23[COMRAM] PTR unsigned char 
  5481 ;;		 -> Circum(2), 
  5482 ;;  BlockSize       1   25[COMRAM] unsigned char 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  address         1   27[COMRAM] unsigned char 
  5485 ;;  LoopIndex       1   29[COMRAM] unsigned char 
  5486 ;;  ReadSuccess     1   28[COMRAM] unsigned char 
  5487 ;;  ReadGranted     1   26[COMRAM] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      unsigned char 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5497 ;;      Params:         3       0       0       0       0       0       0
  5498 ;;      Locals:         4       0       0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0
  5500 ;;      Totals:         7       0       0       0       0       0       0
  5501 ;;Total ram usage:        7 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    5
  5504 ;; This function calls:
  5505 ;;		_HWIeeprom_Read
  5506 ;; This function is called by:
  5507 ;;		_APP_INITIALIZE
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text34
  5512  0013D4                     __ptext34:
  5513                           	opt stack 0
  5514  0013D4                     _Eeprom_Read_Block:
  5515                           	opt stack 23
  5516                           
  5517                           ;incstack = 0
  5518                           ;Eeprom_Read_Block@address stored from wreg
  5519  0013D4  6E1C               	movwf	Eeprom_Read_Block@address,c
  5520                           
  5521                           ;Eeprom.c: 49: unsigned char LoopIndex = (unsigned char)0 ;
  5522  0013D6  0E00               	movlw	0
  5523  0013D8  6E1E               	movwf	Eeprom_Read_Block@LoopIndex,c
  5524                           
  5525                           ;Eeprom.c: 50: unsigned char ReadSuccess;
  5526                           ;Eeprom.c: 51: unsigned char ReadGranted;
  5527                           ;Eeprom.c: 53: if( (unsigned char)0 == WriteRequest)
  5528  0013DA  5057               	movf	_WriteRequest,w,c
  5529  0013DC  B4D8               	btfsc	status,2,c
  5530  0013DE  D011               	goto	l2290
  5531  0013E0  D017               	goto	l2294
  5532  0013E2                     l2284:
  5533                           
  5534                           ;Eeprom.c: 56: {
  5535                           ;Eeprom.c: 57: ReadSuccess = HWIeeprom_Read(address + LoopIndex , &DataPtr[LoopIndex]);
  5536  0013E2  501E               	movf	Eeprom_Read_Block@LoopIndex,w,c
  5537  0013E4  0D01               	mullw	1
  5538  0013E6  50F3               	movf	prodl,w,c
  5539  0013E8  2418               	addwf	Eeprom_Read_Block@DataPtr,w,c
  5540  0013EA  6E14               	movwf	HWIeeprom_Read@Data,c
  5541  0013EC  50F4               	movf	prodh,w,c
  5542  0013EE  2019               	addwfc	Eeprom_Read_Block@DataPtr+1,w,c
  5543  0013F0  6E15               	movwf	HWIeeprom_Read@Data+1,c
  5544  0013F2  501C               	movf	Eeprom_Read_Block@address,w,c
  5545  0013F4  241E               	addwf	Eeprom_Read_Block@LoopIndex,w,c
  5546  0013F6  EC2C  F00B         	call	_HWIeeprom_Read
  5547  0013FA  6E1D               	movwf	Eeprom_Read_Block@ReadSuccess,c
  5548                           
  5549                           ;Eeprom.c: 58: if((unsigned char)1 == ReadSuccess)
  5550  0013FC  041D               	decf	Eeprom_Read_Block@ReadSuccess,w,c
  5551  0013FE  B4D8               	btfsc	status,2,c
  5552                           
  5553                           ;Eeprom.c: 59: {
  5554                           ;Eeprom.c: 60: LoopIndex++;
  5555  001400  2A1E               	incf	Eeprom_Read_Block@LoopIndex,f,c
  5556  001402                     l2290:
  5557  001402  501A               	movf	Eeprom_Read_Block@BlockSize,w,c
  5558  001404  5C1E               	subwf	Eeprom_Read_Block@LoopIndex,w,c
  5559  001406  A0D8               	btfss	status,0,c
  5560  001408  D7EC               	goto	l2284
  5561                           
  5562                           ;Eeprom.c: 61: }
  5563                           ;Eeprom.c: 62: }
  5564                           ;Eeprom.c: 63: ReadGranted = (unsigned char)1;
  5565  00140A  0E01               	movlw	1
  5566  00140C  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  5567                           
  5568                           ;Eeprom.c: 64: }
  5569  00140E  0012               	return	
  5570  001410                     l2294:
  5571                           
  5572                           ;Eeprom.c: 65: else
  5573                           ;Eeprom.c: 66: {
  5574                           ;Eeprom.c: 67: ReadGranted = (unsigned char)0;
  5575  001410  0E00               	movlw	0
  5576  001412  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  5577  001414  0012               	return	
  5578  001416                     __end_of_Eeprom_Read_Block:
  5579                           	opt stack 0
  5580                           tosu	equ	0xFFF
  5581                           tosh	equ	0xFFE
  5582                           tosl	equ	0xFFD
  5583                           pclath	equ	0xFFA
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           intcon3	equ	0xFF0
  5593                           postinc0	equ	0xFEE
  5594                           wreg	equ	0xFE8
  5595                           indf1	equ	0xFE7
  5596                           postinc1	equ	0xFE6
  5597                           fsr1h	equ	0xFE2
  5598                           fsr1l	equ	0xFE1
  5599                           indf2	equ	0xFDF
  5600                           postinc2	equ	0xFDE
  5601                           postdec2	equ	0xFDD
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _HWIeeprom_Read *****************
  5607 ;; Defined at:
  5608 ;;		line 31 in file "../../HWIeeprom/HWIeeprom.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  address         1    wreg     unsigned char 
  5611 ;;  Data            2   19[COMRAM] PTR unsigned char 
  5612 ;;		 -> Circum(2), 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  address         1   21[COMRAM] unsigned char 
  5615 ;;  ReadSuccess     1   22[COMRAM] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      unsigned char 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr2l, fsr2h, status,2
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         2       0       0       0       0       0       0
  5626 ;;      Locals:         2       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         4       0       0       0       0       0       0
  5629 ;;Total ram usage:        4 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    4
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_Eeprom_Read_Block
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text35
  5640  001658                     __ptext35:
  5641                           	opt stack 0
  5642  001658                     _HWIeeprom_Read:
  5643                           	opt stack 23
  5644                           
  5645                           ;incstack = 0
  5646                           ;HWIeeprom_Read@address stored from wreg
  5647  001658  6E16               	movwf	HWIeeprom_Read@address,c
  5648                           
  5649                           ;HWIeeprom.c: 33: unsigned char ReadSuccess;
  5650                           ;HWIeeprom.c: 34: if((unsigned char)0 == EECON1bits.WR )
  5651  00165A  B2A6               	btfsc	4006,1,c	;volatile
  5652  00165C  D00D               	goto	l2194
  5653                           
  5654                           ;HWIeeprom.c: 35: {
  5655                           ;HWIeeprom.c: 36: EEADR = address;
  5656  00165E  C016  FFA9         	movff	HWIeeprom_Read@address,4009	;volatile
  5657                           
  5658                           ;HWIeeprom.c: 37: EECON1bits.EEPGD = (unsigned char)0;
  5659  001662  9EA6               	bcf	4006,7,c	;volatile
  5660                           
  5661                           ;HWIeeprom.c: 38: EECON1bits.CFGS = (unsigned char)0;
  5662  001664  9CA6               	bcf	4006,6,c	;volatile
  5663                           
  5664                           ;HWIeeprom.c: 39: EECON1bits.RD = (unsigned char)1;
  5665  001666  80A6               	bsf	4006,0,c	;volatile
  5666                           
  5667                           ;HWIeeprom.c: 40: *Data = EEDATA;
  5668  001668  C014  FFD9         	movff	HWIeeprom_Read@Data,fsr2l
  5669  00166C  C015  FFDA         	movff	HWIeeprom_Read@Data+1,fsr2h
  5670  001670  CFA8 FFDF          	movff	4008,indf2	;volatile
  5671                           
  5672                           ;HWIeeprom.c: 41: ReadSuccess = (unsigned char)1;
  5673  001674  0E01               	movlw	1
  5674  001676  D001               	goto	L7
  5675  001678                     l2194:
  5676                           
  5677                           ;HWIeeprom.c: 43: else
  5678                           ;HWIeeprom.c: 44: {
  5679                           ;HWIeeprom.c: 45: ReadSuccess = (unsigned char)0;
  5680  001678  0E00               	movlw	0
  5681  00167A                     L7:
  5682  00167A  6E17               	movwf	HWIeeprom_Read@ReadSuccess,c
  5683                           
  5684                           ;HWIeeprom.c: 46: }
  5685                           ;HWIeeprom.c: 48: return ReadSuccess;
  5686  00167C  5017               	movf	HWIeeprom_Read@ReadSuccess,w,c
  5687  00167E  0012               	return	
  5688  001680                     __end_of_HWIeeprom_Read:
  5689                           	opt stack 0
  5690                           tosu	equ	0xFFF
  5691                           tosh	equ	0xFFE
  5692                           tosl	equ	0xFFD
  5693                           pclath	equ	0xFFA
  5694                           tblptru	equ	0xFF8
  5695                           tblptrh	equ	0xFF7
  5696                           tblptrl	equ	0xFF6
  5697                           tablat	equ	0xFF5
  5698                           prodh	equ	0xFF4
  5699                           prodl	equ	0xFF3
  5700                           intcon	equ	0xFF2
  5701                           intcon2	equ	0xFF1
  5702                           intcon3	equ	0xFF0
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           indf1	equ	0xFE7
  5706                           postinc1	equ	0xFE6
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _ISR *****************
  5717 ;; Defined at:
  5718 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5732 ;;      Params:         0       0       0       0       0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0
  5734 ;;      Temps:         14       0       0       0       0       0       0
  5735 ;;      Totals:        14       0       0       0       0       0       0
  5736 ;;Total ram usage:       14 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		_APP_ISR1
  5741 ;;		_APP_ISR2
  5742 ;;		_APP_ISR3
  5743 ;;		_SchedulerTick
  5744 ;; This function is called by:
  5745 ;;		Interrupt level 2
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	intcode
  5750  000008                     __pintcode:
  5751                           	opt stack 0
  5752  000008                     _ISR:
  5753                           	opt stack 21
  5754                           
  5755                           ;incstack = 0
  5756  000008  826C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5757  00000A  ED41  F007         	call	int_func,f	;refresh shadow registers
  5758                           tosu	equ	0xFFF
  5759                           tosh	equ	0xFFE
  5760                           tosl	equ	0xFFD
  5761                           pclath	equ	0xFFA
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           intcon3	equ	0xFF0
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           indf1	equ	0xFE7
  5774                           postinc1	equ	0xFE6
  5775                           fsr1h	equ	0xFE2
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784                           	psect	intcode_body
  5785  000E82                     __pintcode_body:
  5786                           	opt stack 21
  5787  000E82                     int_func:
  5788                           	opt stack 21
  5789  000E82  0006               	pop		; remove dummy address from shadow register refresh
  5790  000E84  CFFA F006          	movff	pclath,??_ISR
  5791  000E88  CFFB F007          	movff	pclatu,??_ISR+1
  5792  000E8C  CFE9 F008          	movff	fsr0l,??_ISR+2
  5793  000E90  CFEA F009          	movff	fsr0h,??_ISR+3
  5794  000E94  CFE1 F00A          	movff	fsr1l,??_ISR+4
  5795  000E98  CFE2 F00B          	movff	fsr1h,??_ISR+5
  5796  000E9C  CFD9 F00C          	movff	fsr2l,??_ISR+6
  5797  000EA0  CFDA F00D          	movff	fsr2h,??_ISR+7
  5798  000EA4  CFF3 F00E          	movff	prodl,??_ISR+8
  5799  000EA8  CFF4 F00F          	movff	prodh,??_ISR+9
  5800  000EAC  CFF6 F010          	movff	tblptrl,??_ISR+10
  5801  000EB0  CFF7 F011          	movff	tblptrh,??_ISR+11
  5802  000EB4  CFF8 F012          	movff	tblptru,??_ISR+12
  5803  000EB8  CFF5 F013          	movff	tablat,??_ISR+13
  5804                           
  5805                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  5806  000EBC  A4F2               	btfss	intcon,2,c	;volatile
  5807  000EBE  D005               	goto	i2l2408
  5808                           
  5809                           ;HWI_Interrupts.c: 55: {
  5810                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  5811  000EC0  94F2               	bcf	intcon,2,c	;volatile
  5812                           
  5813                           ;HWI_Interrupts.c: 57: TMR0L=18;
  5814  000EC2  0E12               	movlw	18
  5815  000EC4  6ED6               	movwf	4054,c	;volatile
  5816                           
  5817                           ;HWI_Interrupts.c: 58: SchedulerTick();
  5818  000EC6  EC03  F00B         	call	_SchedulerTick	;wreg free
  5819  000ECA                     i2l2408:
  5820                           
  5821                           ;HWI_Interrupts.c: 59: }
  5822                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  5823  000ECA  A2A1               	btfss	4001,1,c	;volatile
  5824  000ECC  D005               	goto	i2l2414
  5825                           
  5826                           ;HWI_Interrupts.c: 61: {
  5827                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  5828  000ECE  92A1               	bcf	4001,1,c	;volatile
  5829                           
  5830                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  5831  000ED0  0EEF               	movlw	239
  5832  000ED2  6EB3               	movwf	4019,c	;volatile
  5833                           
  5834                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  5835  000ED4  0E00               	movlw	0
  5836  000ED6  6EB2               	movwf	4018,c	;volatile
  5837  000ED8                     i2l2414:
  5838                           
  5839                           ;HWI_Interrupts.c: 65: }
  5840                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  5841  000ED8  A09E               	btfss	3998,0,c	;volatile
  5842  000EDA  D007               	goto	i2l2422
  5843                           
  5844                           ;HWI_Interrupts.c: 67: {
  5845                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  5846  000EDC  909E               	bcf	3998,0,c	;volatile
  5847                           
  5848                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  5849  000EDE  0E00               	movlw	0
  5850  000EE0  6ECF               	movwf	4047,c	;volatile
  5851  000EE2  0E00               	movlw	0
  5852  000EE4  6ECE               	movwf	4046,c	;volatile
  5853                           
  5854                           ;HWI_Interrupts.c: 70: APP_ISR3();
  5855  000EE6  ECB6  F00B         	call	_APP_ISR3	;wreg free
  5856  000EEA                     i2l2422:
  5857                           
  5858                           ;HWI_Interrupts.c: 71: }
  5859                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  5860  000EEA  B29E               	btfsc	3998,1,c	;volatile
  5861                           
  5862                           ;HWI_Interrupts.c: 73: {
  5863                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  5864  000EEC  929E               	bcf	3998,1,c	;volatile
  5865                           
  5866                           ;HWI_Interrupts.c: 76: }
  5867                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  5868  000EEE  A2F2               	btfss	intcon,1,c	;volatile
  5869  000EF0  D003               	goto	i2l2430
  5870                           
  5871                           ;HWI_Interrupts.c: 79: {
  5872                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  5873  000EF2  92F2               	bcf	intcon,1,c	;volatile
  5874                           
  5875                           ;HWI_Interrupts.c: 81: APP_ISR1();
  5876  000EF4  ECBC  F00B         	call	_APP_ISR1	;wreg free
  5877  000EF8                     i2l2430:
  5878                           
  5879                           ;HWI_Interrupts.c: 82: }
  5880                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  5881  000EF8  A0F0               	btfss	intcon3,0,c	;volatile
  5882  000EFA  D003               	goto	i2l498
  5883                           
  5884                           ;HWI_Interrupts.c: 85: {
  5885                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  5886  000EFC  90F0               	bcf	intcon3,0,c	;volatile
  5887                           
  5888                           ;HWI_Interrupts.c: 87: APP_ISR2();
  5889  000EFE  ECB9  F00B         	call	_APP_ISR2	;wreg free
  5890  000F02                     i2l498:
  5891  000F02  C013  FFF5         	movff	??_ISR+13,tablat
  5892  000F06  C012  FFF8         	movff	??_ISR+12,tblptru
  5893  000F0A  C011  FFF7         	movff	??_ISR+11,tblptrh
  5894  000F0E  C010  FFF6         	movff	??_ISR+10,tblptrl
  5895  000F12  C00F  FFF4         	movff	??_ISR+9,prodh
  5896  000F16  C00E  FFF3         	movff	??_ISR+8,prodl
  5897  000F1A  C00D  FFDA         	movff	??_ISR+7,fsr2h
  5898  000F1E  C00C  FFD9         	movff	??_ISR+6,fsr2l
  5899  000F22  C00B  FFE2         	movff	??_ISR+5,fsr1h
  5900  000F26  C00A  FFE1         	movff	??_ISR+4,fsr1l
  5901  000F2A  C009  FFEA         	movff	??_ISR+3,fsr0h
  5902  000F2E  C008  FFE9         	movff	??_ISR+2,fsr0l
  5903  000F32  C007  FFFB         	movff	??_ISR+1,pclatu
  5904  000F36  C006  FFFA         	movff	??_ISR,pclath
  5905  000F3A  926C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5906  000F3C  0011               	retfie		f
  5907  000F3E                     __end_of_ISR:
  5908                           	opt stack 0
  5909                           tosu	equ	0xFFF
  5910                           tosh	equ	0xFFE
  5911                           tosl	equ	0xFFD
  5912                           pclatu	equ	0xFFB
  5913                           pclath	equ	0xFFA
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           intcon2	equ	0xFF1
  5922                           intcon3	equ	0xFF0
  5923                           postinc0	equ	0xFEE
  5924                           fsr0h	equ	0xFEA
  5925                           fsr0l	equ	0xFE9
  5926                           wreg	equ	0xFE8
  5927                           indf1	equ	0xFE7
  5928                           postinc1	equ	0xFE6
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _SchedulerTick *****************
  5939 ;; Defined at:
  5940 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5954 ;;      Params:         0       0       0       0       0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0
  5957 ;;      Totals:         1       0       0       0       0       0       0
  5958 ;;Total ram usage:        1 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_ISR
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text37
  5968  001606                     __ptext37:
  5969                           	opt stack 0
  5970  001606                     _SchedulerTick:
  5971                           	opt stack 23
  5972                           
  5973                           ;Scheduler.c: 18: unsigned char TaskIndex;
  5974                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 4 ; TaskIndex++)
  5975                           
  5976                           ;incstack = 0
  5977  001606  0E00               	movlw	0
  5978  001608  6E01               	movwf	SchedulerTick@TaskIndex,c
  5979  00160A                     i2l2390:
  5980  00160A  0E03               	movlw	3
  5981  00160C  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  5982  00160E  D001               	goto	i2l2394
  5983  001610  0012               	return	
  5984  001612                     i2l2394:
  5985                           
  5986                           ;Scheduler.c: 20: {
  5987                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  5988  001612  5001               	movf	SchedulerTick@TaskIndex,w,c
  5989  001614  0D04               	mullw	4
  5990  001616  0E03               	movlw	3
  5991  001618  26F3               	addwf	prodl,f,c
  5992  00161A  0E00               	movlw	0
  5993  00161C  22F4               	addwfc	prodh,f,c
  5994  00161E  0EB2               	movlw	low _ArrayTask
  5995  001620  24F3               	addwf	prodl,w,c
  5996  001622  6ED9               	movwf	fsr2l,c
  5997  001624  0E00               	movlw	high _ArrayTask
  5998  001626  20F4               	addwfc	prodh,w,c
  5999  001628  6EDA               	movwf	fsr2h,c
  6000  00162A  2ADF               	incf	indf2,f,c
  6001  00162C  2A01               	incf	SchedulerTick@TaskIndex,f,c
  6002  00162E  D7ED               	goto	i2l2390
  6003  001630                     __end_of_SchedulerTick:
  6004                           	opt stack 0
  6005                           tosu	equ	0xFFF
  6006                           tosh	equ	0xFFE
  6007                           tosl	equ	0xFFD
  6008                           pclatu	equ	0xFFB
  6009                           pclath	equ	0xFFA
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           intcon2	equ	0xFF1
  6018                           intcon3	equ	0xFF0
  6019                           postinc0	equ	0xFEE
  6020                           fsr0h	equ	0xFEA
  6021                           fsr0l	equ	0xFE9
  6022                           wreg	equ	0xFE8
  6023                           indf1	equ	0xFE7
  6024                           postinc1	equ	0xFE6
  6025                           fsr1h	equ	0xFE2
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _APP_ISR3 *****************
  6035 ;; Defined at:
  6036 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6050 ;;      Params:         0       0       0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0
  6053 ;;      Totals:         0       0       0       0       0       0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    1
  6057 ;; This function calls:
  6058 ;;		_HWtimerCallback
  6059 ;; This function is called by:
  6060 ;;		_ISR
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           	psect	text38
  6065  00176C                     __ptext38:
  6066                           	opt stack 0
  6067  00176C                     _APP_ISR3:
  6068                           	opt stack 22
  6069                           
  6070                           ;AppInterrupts.c: 20: HWtimerCallback();
  6071                           
  6072                           ;incstack = 0
  6073  00176C  ECA0  F00B         	call	_HWtimerCallback	;wreg free
  6074  001770  0012               	return		;funcret
  6075  001772                     __end_of_APP_ISR3:
  6076                           	opt stack 0
  6077                           tosu	equ	0xFFF
  6078                           tosh	equ	0xFFE
  6079                           tosl	equ	0xFFD
  6080                           pclatu	equ	0xFFB
  6081                           pclath	equ	0xFFA
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           intcon2	equ	0xFF1
  6090                           intcon3	equ	0xFF0
  6091                           postinc0	equ	0xFEE
  6092                           fsr0h	equ	0xFEA
  6093                           fsr0l	equ	0xFE9
  6094                           wreg	equ	0xFE8
  6095                           indf1	equ	0xFE7
  6096                           postinc1	equ	0xFE6
  6097                           fsr1h	equ	0xFE2
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _HWtimerCallback *****************
  6107 ;; Defined at:
  6108 ;;		line 133 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6122 ;;      Params:         0       0       0       0       0       0       0
  6123 ;;      Locals:         0       0       0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0
  6125 ;;      Totals:         0       0       0       0       0       0       0
  6126 ;;Total ram usage:        0 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_APP_ISR3
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text39
  6136  001740                     __ptext39:
  6137                           	opt stack 0
  6138  001740                     _HWtimerCallback:
  6139                           	opt stack 22
  6140                           
  6141                           ;SpeedCalc.c: 135: if(HwTimerOVFLcount < 64)
  6142                           
  6143                           ;incstack = 0
  6144  001740  0E40               	movlw	64
  6145  001742  6050               	cpfslt	_HwTimerOVFLcount,c	;volatile
  6146  001744  0012               	return	
  6147                           
  6148                           ;SpeedCalc.c: 136: {
  6149                           ;SpeedCalc.c: 137: HwTimerOVFLcount++;
  6150  001746  2A50               	incf	_HwTimerOVFLcount,f,c	;volatile
  6151  001748  0012               	return	
  6152  00174A                     __end_of_HWtimerCallback:
  6153                           	opt stack 0
  6154                           tosu	equ	0xFFF
  6155                           tosh	equ	0xFFE
  6156                           tosl	equ	0xFFD
  6157                           pclatu	equ	0xFFB
  6158                           pclath	equ	0xFFA
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           intcon2	equ	0xFF1
  6167                           intcon3	equ	0xFF0
  6168                           postinc0	equ	0xFEE
  6169                           fsr0h	equ	0xFEA
  6170                           fsr0l	equ	0xFE9
  6171                           wreg	equ	0xFE8
  6172                           indf1	equ	0xFE7
  6173                           postinc1	equ	0xFE6
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183 ;; *************** function _APP_ISR2 *****************
  6184 ;; Defined at:
  6185 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;		None
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;		None
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6199 ;;      Params:         0       0       0       0       0       0       0
  6200 ;;      Locals:         0       0       0       0       0       0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0
  6202 ;;      Totals:         0       0       0       0       0       0       0
  6203 ;;Total ram usage:        0 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    2
  6206 ;; This function calls:
  6207 ;;		_SensorTwoNotify
  6208 ;; This function is called by:
  6209 ;;		_ISR
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text40
  6214  001772                     __ptext40:
  6215                           	opt stack 0
  6216  001772                     _APP_ISR2:
  6217                           	opt stack 21
  6218                           
  6219                           ;AppInterrupts.c: 15: SensorTwoNotify();
  6220                           
  6221                           ;incstack = 0
  6222  001772  ECEC  F00A         	call	_SensorTwoNotify	;wreg free
  6223  001776  0012               	return		;funcret
  6224  001778                     __end_of_APP_ISR2:
  6225                           	opt stack 0
  6226                           tosu	equ	0xFFF
  6227                           tosh	equ	0xFFE
  6228                           tosl	equ	0xFFD
  6229                           pclatu	equ	0xFFB
  6230                           pclath	equ	0xFFA
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           intcon3	equ	0xFF0
  6240                           postinc0	equ	0xFEE
  6241                           fsr0h	equ	0xFEA
  6242                           fsr0l	equ	0xFE9
  6243                           wreg	equ	0xFE8
  6244                           indf1	equ	0xFE7
  6245                           postinc1	equ	0xFE6
  6246                           fsr1h	equ	0xFE2
  6247                           fsr1l	equ	0xFE1
  6248                           indf2	equ	0xFDF
  6249                           postinc2	equ	0xFDE
  6250                           postdec2	equ	0xFDD
  6251                           fsr2h	equ	0xFDA
  6252                           fsr2l	equ	0xFD9
  6253                           status	equ	0xFD8
  6254                           
  6255 ;; *************** function _SensorTwoNotify *****************
  6256 ;; Defined at:
  6257 ;;		line 44 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6271 ;;      Params:         0       0       0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0
  6274 ;;      Totals:         0       0       0       0       0       0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    1
  6278 ;; This function calls:
  6279 ;;		_ReloadHWtimer
  6280 ;; This function is called by:
  6281 ;;		_APP_ISR2
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text41
  6286  0015D8                     __ptext41:
  6287                           	opt stack 0
  6288  0015D8                     _SensorTwoNotify:
  6289                           	opt stack 21
  6290                           
  6291                           ;SpeedCalc.c: 46: if( (unsigned char)0 == NotifyFlag )
  6292                           
  6293                           ;incstack = 0
  6294  0015D8  5053               	movf	_NotifyFlag,w,c	;volatile
  6295  0015DA  A4D8               	btfss	status,2,c
  6296  0015DC  D00F               	goto	i2l2344
  6297                           
  6298                           ;SpeedCalc.c: 47: {
  6299                           ;SpeedCalc.c: 48: NotifyFlag = (unsigned char)1;
  6300  0015DE  0E01               	movlw	1
  6301  0015E0  6E53               	movwf	_NotifyFlag,c	;volatile
  6302                           
  6303                           ;SpeedCalc.c: 49: LapCounter++;
  6304  0015E2  2A52               	incf	_LapCounter,f,c	;volatile
  6305                           
  6306                           ;SpeedCalc.c: 50: HWtimerCount = ReloadHWtimer((unsigned char)1);
  6307  0015E4  0E01               	movlw	1
  6308  0015E6  EC87  F00A         	call	_ReloadHWtimer
  6309  0015EA  C001  F043         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  6310  0015EE  C002  F044         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  6311                           
  6312                           ;SpeedCalc.c: 51: TimerOVFLcount = HwTimerOVFLcount;
  6313  0015F2  C050  F051         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  6314                           
  6315                           ;SpeedCalc.c: 52: HwTimerOVFLcount = (unsigned char)0;
  6316  0015F6  0E00               	movlw	0
  6317  0015F8  6E50               	movwf	_HwTimerOVFLcount,c	;volatile
  6318                           
  6319                           ;SpeedCalc.c: 53: }
  6320  0015FA  0012               	return	
  6321  0015FC                     i2l2344:
  6322                           
  6323                           ;SpeedCalc.c: 54: else
  6324                           ;SpeedCalc.c: 55: {
  6325                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  6326  0015FC  5052               	movf	_LapCounter,w,c	;volatile
  6327  0015FE  B4D8               	btfsc	status,2,c
  6328  001600  0012               	return	
  6329                           
  6330                           ;SpeedCalc.c: 57: {
  6331                           ;SpeedCalc.c: 58: LapCounter--;
  6332  001602  0652               	decf	_LapCounter,f,c	;volatile
  6333  001604  0012               	return	
  6334  001606                     __end_of_SensorTwoNotify:
  6335                           	opt stack 0
  6336                           tosu	equ	0xFFF
  6337                           tosh	equ	0xFFE
  6338                           tosl	equ	0xFFD
  6339                           pclatu	equ	0xFFB
  6340                           pclath	equ	0xFFA
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           intcon2	equ	0xFF1
  6349                           intcon3	equ	0xFF0
  6350                           postinc0	equ	0xFEE
  6351                           fsr0h	equ	0xFEA
  6352                           fsr0l	equ	0xFE9
  6353                           wreg	equ	0xFE8
  6354                           indf1	equ	0xFE7
  6355                           postinc1	equ	0xFE6
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365 ;; *************** function _ReloadHWtimer *****************
  6366 ;; Defined at:
  6367 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  TimerId         1    wreg     unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  TimerId         1    2[COMRAM] unsigned char 
  6372 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  2    0[COMRAM] unsigned short 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         2       0       0       0       0       0       0
  6383 ;;      Locals:         3       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0
  6385 ;;      Totals:         5       0       0       0       0       0       0
  6386 ;;Total ram usage:        5 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; This function calls:
  6389 ;;		Nothing
  6390 ;; This function is called by:
  6391 ;;		_SensorTwoNotify
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text42
  6396  00150E                     __ptext42:
  6397                           	opt stack 0
  6398  00150E                     _ReloadHWtimer:
  6399                           	opt stack 21
  6400                           
  6401                           ;incstack = 0
  6402                           ;ReloadHWtimer@TimerId stored from wreg
  6403  00150E  6E03               	movwf	ReloadHWtimer@TimerId,c
  6404                           
  6405                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  6406  001510  0E00               	movlw	0
  6407  001512  6E05               	movwf	ReloadHWtimer@ElapsedTime+1,c
  6408  001514  0E00               	movlw	0
  6409  001516  6E04               	movwf	ReloadHWtimer@ElapsedTime,c
  6410                           
  6411                           ;HWI_Interrupts.c: 95: switch(TimerId)
  6412  001518  D009               	goto	i2l2304
  6413  00151A                     i2l504:
  6414                           
  6415                           ;HWI_Interrupts.c: 98: case 1:
  6416                           ;HWI_Interrupts.c: 99: case 2:
  6417                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  6418  00151A  CFCE F004          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  6419  00151E  CFCF F005          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  6420                           
  6421                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  6422  001522  0E00               	movlw	0
  6423  001524  6ECF               	movwf	4047,c	;volatile
  6424  001526  0E00               	movlw	0
  6425  001528  6ECE               	movwf	4046,c	;volatile
  6426                           
  6427                           ;HWI_Interrupts.c: 105: }
  6428                           
  6429                           ;HWI_Interrupts.c: 104: break;
  6430                           
  6431                           ;HWI_Interrupts.c: 103: default:
  6432                           
  6433                           ;HWI_Interrupts.c: 102: break;
  6434  00152A  D00A               	goto	i2l505
  6435  00152C                     i2l2304:
  6436  00152C  5003               	movf	ReloadHWtimer@TimerId,w,c
  6437                           
  6438                           ; Switch size 1, requested type "space"
  6439                           ; Number of cases is 3, Range of values is 0 to 2
  6440                           ; switch strategies available:
  6441                           ; Name         Instructions Cycles
  6442                           ; simple_byte           10     6 (average)
  6443                           ;	Chosen strategy is simple_byte
  6444  00152E  0A00               	xorlw	0	; case 0
  6445  001530  B4D8               	btfsc	status,2,c
  6446  001532  D7F3               	goto	i2l504
  6447  001534  0A01               	xorlw	1	; case 1
  6448  001536  B4D8               	btfsc	status,2,c
  6449  001538  D7F0               	goto	i2l504
  6450  00153A  0A03               	xorlw	3	; case 2
  6451  00153C  B4D8               	btfsc	status,2,c
  6452  00153E  D7ED               	goto	i2l504
  6453  001540                     i2l505:
  6454                           
  6455                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  6456  001540  C004  F001         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  6457  001544  C005  F002         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  6458  001548  0012               	return		;funcret
  6459  00154A                     __end_of_ReloadHWtimer:
  6460                           	opt stack 0
  6461                           tosu	equ	0xFFF
  6462                           tosh	equ	0xFFE
  6463                           tosl	equ	0xFFD
  6464                           pclatu	equ	0xFFB
  6465                           pclath	equ	0xFFA
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           intcon2	equ	0xFF1
  6474                           intcon3	equ	0xFF0
  6475                           postinc0	equ	0xFEE
  6476                           fsr0h	equ	0xFEA
  6477                           fsr0l	equ	0xFE9
  6478                           wreg	equ	0xFE8
  6479                           indf1	equ	0xFE7
  6480                           postinc1	equ	0xFE6
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _APP_ISR1 *****************
  6491 ;; Defined at:
  6492 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    1
  6513 ;; This function calls:
  6514 ;;		_SensorOneNotify
  6515 ;; This function is called by:
  6516 ;;		_ISR
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text43
  6521  001778                     __ptext43:
  6522                           	opt stack 0
  6523  001778                     _APP_ISR1:
  6524                           	opt stack 22
  6525                           
  6526                           ;AppInterrupts.c: 10: SensorOneNotify();
  6527                           
  6528                           ;incstack = 0
  6529  001778  EC81  F00B         	call	_SensorOneNotify	;wreg free
  6530  00177C  0012               	return		;funcret
  6531  00177E                     __end_of_APP_ISR1:
  6532                           	opt stack 0
  6533                           tosu	equ	0xFFF
  6534                           tosh	equ	0xFFE
  6535                           tosl	equ	0xFFD
  6536                           pclatu	equ	0xFFB
  6537                           pclath	equ	0xFFA
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon	equ	0xFF2
  6545                           intcon2	equ	0xFF1
  6546                           intcon3	equ	0xFF0
  6547                           postinc0	equ	0xFEE
  6548                           fsr0h	equ	0xFEA
  6549                           fsr0l	equ	0xFE9
  6550                           wreg	equ	0xFE8
  6551                           indf1	equ	0xFE7
  6552                           postinc1	equ	0xFE6
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function _SensorOneNotify *****************
  6563 ;; Defined at:
  6564 ;;		line 29 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;		None
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;		None
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6578 ;;      Params:         0       0       0       0       0       0       0
  6579 ;;      Locals:         0       0       0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0
  6581 ;;      Totals:         0       0       0       0       0       0       0
  6582 ;;Total ram usage:        0 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_APP_ISR1
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text44
  6592  001702                     __ptext44:
  6593                           	opt stack 0
  6594  001702                     _SensorOneNotify:
  6595                           	opt stack 22
  6596                           
  6597                           ;SpeedCalc.c: 31: if( (unsigned char)1 == NotifyFlag )
  6598                           
  6599                           ;incstack = 0
  6600  001702  0453               	decf	_NotifyFlag,w,c	;volatile
  6601  001704  A4D8               	btfss	status,2,c
  6602  001706  D003               	goto	i2l1634
  6603                           
  6604                           ;SpeedCalc.c: 32: {
  6605                           ;SpeedCalc.c: 33: NotifyFlag = (unsigned char)0;
  6606  001708  0E00               	movlw	0
  6607  00170A  6E53               	movwf	_NotifyFlag,c	;volatile
  6608                           
  6609                           ;SpeedCalc.c: 34: }
  6610  00170C  0012               	return	
  6611  00170E                     i2l1634:
  6612                           
  6613                           ;SpeedCalc.c: 35: else
  6614                           ;SpeedCalc.c: 36: {
  6615                           ;SpeedCalc.c: 37: if(LapCounter != (unsigned char)0)
  6616  00170E  5052               	movf	_LapCounter,w,c	;volatile
  6617  001710  B4D8               	btfsc	status,2,c
  6618  001712  0012               	return	
  6619                           
  6620                           ;SpeedCalc.c: 38: {
  6621                           ;SpeedCalc.c: 39: LapCounter--;
  6622  001714  0652               	decf	_LapCounter,f,c	;volatile
  6623  001716  0012               	return	
  6624  001718                     __end_of_SensorOneNotify:
  6625                           	opt stack 0
  6626                           tosu	equ	0xFFF
  6627                           tosh	equ	0xFFE
  6628                           tosl	equ	0xFFD
  6629                           pclatu	equ	0xFFB
  6630                           pclath	equ	0xFFA
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           intcon	equ	0xFF2
  6638                           intcon2	equ	0xFF1
  6639                           intcon3	equ	0xFF0
  6640                           postinc0	equ	0xFEE
  6641                           fsr0h	equ	0xFEA
  6642                           fsr0l	equ	0xFE9
  6643                           wreg	equ	0xFE8
  6644                           indf1	equ	0xFE7
  6645                           postinc1	equ	0xFE6
  6646                           fsr1h	equ	0xFE2
  6647                           fsr1l	equ	0xFE1
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           tosu	equ	0xFFF
  6655                           tosh	equ	0xFFE
  6656                           tosl	equ	0xFFD
  6657                           pclatu	equ	0xFFB
  6658                           pclath	equ	0xFFA
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon2	equ	0xFF1
  6667                           intcon3	equ	0xFF0
  6668                           postinc0	equ	0xFEE
  6669                           fsr0h	equ	0xFEA
  6670                           fsr0l	equ	0xFE9
  6671                           wreg	equ	0xFE8
  6672                           indf1	equ	0xFE7
  6673                           postinc1	equ	0xFE6
  6674                           fsr1h	equ	0xFE2
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           postinc2	equ	0xFDE
  6678                           postdec2	equ	0xFDD
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683                           	psect	text45
  6684  000000                     __ptext45:
  6685                           	opt stack 0
  6686                           tosu	equ	0xFFF
  6687                           tosh	equ	0xFFE
  6688                           tosl	equ	0xFFD
  6689                           pclatu	equ	0xFFB
  6690                           pclath	equ	0xFFA
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon2	equ	0xFF1
  6699                           intcon3	equ	0xFF0
  6700                           postinc0	equ	0xFEE
  6701                           fsr0h	equ	0xFEA
  6702                           fsr0l	equ	0xFE9
  6703                           wreg	equ	0xFE8
  6704                           indf1	equ	0xFE7
  6705                           postinc1	equ	0xFE6
  6706                           fsr1h	equ	0xFE2
  6707                           fsr1l	equ	0xFE1
  6708                           indf2	equ	0xFDF
  6709                           postinc2	equ	0xFDE
  6710                           postdec2	equ	0xFDD
  6711                           fsr2h	equ	0xFDA
  6712                           fsr2l	equ	0xFD9
  6713                           status	equ	0xFD8
  6714                           
  6715                           	psect	rparam
  6716  0000                     tosu	equ	0xFFF
  6717                           tosh	equ	0xFFE
  6718                           tosl	equ	0xFFD
  6719                           pclatu	equ	0xFFB
  6720                           pclath	equ	0xFFA
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           intcon	equ	0xFF2
  6728                           intcon2	equ	0xFF1
  6729                           intcon3	equ	0xFF0
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           indf1	equ	0xFE7
  6735                           postinc1	equ	0xFE6
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745                           	psect	temp
  6746  00006C                     btemp:
  6747                           	opt stack 0
  6748  00006C                     	ds	1
  6749  0000                     int$flags	set	btemp
  6750                           tosu	equ	0xFFF
  6751                           tosh	equ	0xFFE
  6752                           tosl	equ	0xFFD
  6753                           pclatu	equ	0xFFB
  6754                           pclath	equ	0xFFA
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           intcon2	equ	0xFF1
  6763                           intcon3	equ	0xFF0
  6764                           postinc0	equ	0xFEE
  6765                           fsr0h	equ	0xFEA
  6766                           fsr0l	equ	0xFE9
  6767                           wreg	equ	0xFE8
  6768                           indf1	equ	0xFE7
  6769                           postinc1	equ	0xFE6
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    61
    Data        2
    BSS         117
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     54     107
    BANK0           128     10      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    HWIeeprom_Read@Data	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 

    S321$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 9
		 -> KeyInternalData(COMRAM[9]), 

    Eeprom_Read_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 

    Eeprom_Write_Block@ptrFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    WriteFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Eeprom_Write_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageDrivers->_MangeKeys
    _MangeKeys->_HWI_DIGI_READ
    _EepromManage->_HWIeeprom_Write
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed
    _IncrementDecrementSingleDigit->___lwdiv
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE
    _APP_INITIALIZE->_Eeprom_Read_Block
    _Eeprom_Read_Block->_HWIeeprom_Read

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    _Start_App->_RunScheduler
    _ManageApplication->_APP_MANAGE

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13737
                          _Start_App
 ---------------------------------------------------------------------------------
 (1) _Start_App                                            0     0      0   13737
                     _APP_INITIALIZE
                      _BCDInitialize
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (2) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunScheduler                                         2     2      0   12397
                                              8 BANK0      2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                      _ManageDrivers *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (3) _ManageSpeedCalc                                      0     0      0    2165
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (4) _SpeedCalcManage                                      4     4      0    2165
                                             44 COMRAM     4     4      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ManageDrivers                                        1     1      0    1131
                                             26 COMRAM     1     1      0
                       _EepromManage
                          _MangeKeys
 ---------------------------------------------------------------------------------
 (4) _MangeKeys                                            5     5      0     908
                                             21 COMRAM     5     5      0
                      _HWI_DIGI_READ
 ---------------------------------------------------------------------------------
 (5) _HWI_DIGI_READ                                        2     2      0      48
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _EepromManage                                         1     1      0     155
                                             22 COMRAM     1     1      0
                    _HWIeeprom_Write
 ---------------------------------------------------------------------------------
 (5) _HWIeeprom_Write                                      3     2      1     132
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ManageApplication                                    0     0      0    8703
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (4) _APP_MANAGE                                           9     9      0    8703
                                             53 COMRAM     1     1      0
                                              0 BANK0      8     8      0
                      _BCDsendNumber
                         _BlinkDigit
                 _Eeprom_Write_Block
                        _GetAvgSpeed
                        _GetDistance
                       _GetKeyStatus
      _IncrementDecrementSingleDigit
                   _SetCircumfirunce
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SetCircumfirunce                                     2     0      2     108
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _IncrementDecrementSingleDigit                       17    13      4    3120
                                             26 COMRAM    17    13      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _GetKeyStatus                                         2     2      0      96
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _GetAvgSpeed                                          9     7      2    1215
                                             44 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     558
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Write_Block                                   8     3      5     529
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _BlinkDigit                                           2     1      1     216
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _BCDsendNumber                                       13     9      4    2620
                                             26 COMRAM    13     9      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     848
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     703
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _DisplayAlphaNumeric                                  0     0      0     398
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (4) _BCDManage7segment                                    4     4      0     398
                                             21 COMRAM     4     4      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (5) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateTask                                           4     0      4     900
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _BCDInitialize                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_INITIALIZE                                       0     0      0     425
                  _Eeprom_Read_Block
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Read_Block                                    7     4      3     425
                                             23 COMRAM     7     4      3
                     _HWIeeprom_Read
 ---------------------------------------------------------------------------------
 (4) _HWIeeprom_Read                                       4     2      2     132
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     114
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (8) _SchedulerTick                                        1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (9) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (9) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (10) _ReloadHWtimer                                       5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (9) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Start_App
     _APP_INITIALIZE
       _Eeprom_Read_Block
         _HWIeeprom_Read
     _BCDInitialize
     _CreateTask
     _HWI_DIGITAL_INITIALIZE
     _HWI_INTERRUPTS_INTITALIZE
     _RunScheduler
       _DisplayAlphaNumeric *
         _BCDManage7segment
           _HWI_4Digit_WRITE
           _HWI_8Digit_WRITE
       _ManageApplication *
         _APP_MANAGE
           _BCDsendNumber
             ___lwdiv
             ___wmul
           _BlinkDigit
           _Eeprom_Write_Block
           _GetAvgSpeed
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _GetDistance
           _GetKeyStatus
           _IncrementDecrementSingleDigit
             ___lwdiv
             ___wmul
           _SetCircumfirunce
           ___lmul
       _ManageDrivers *
         _EepromManage
           _HWIeeprom_Write
         _MangeKeys
           _HWI_DIGI_READ
       _ManageSpeedCalc *
         _SpeedCalcManage
           ___lldiv
             ___lmul (ARG)
           ___lwdiv
           ___wmul
     _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      4C       5       59.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     36      6B       1       84.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B7      15        0.0%
DATA                 0      0      B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jul 04 01:28:23 2017

                                         l60 0D7C                                           l90 0DAA  
                        __end_of_GetAvgSpeed 1068                          ___wmul@multiplicand 0016  
                                __CFG_BORV$3 000000                            GetAvgSpeed@bIsKph 002F  
                               __CFG_CP0$OFF 000000                                 __CFG_CP1$OFF 000000  
                               __CFG_CP2$OFF 000000                                 __CFG_CP3$OFF 000000  
                        __end_of_GetDistance 172A                                  __CFG_OSC$XT 000000  
                                __CFG_LVP$ON 000000                                          l411 16AA  
                                        l413 16B0                                          l414 16B6  
                                        l430 14D6                                          l431 150A  
                                        l432 14DE                                          l433 14E6  
                                        l915 13CA                                          l862 11F4  
                               __CFG_CPB$OFF 000000                  Eeprom_Write_Block@LoopIndex 001B  
                               __CFG_CPD$OFF 000000                                          _ISR 0008  
                HWIeeprom_Write@WriteSuccess 0016                       BCDManage7segment@Index 0018  
                                        prod 000FF3                                          tosl 000FFD  
                                        wreg 000FE8                                         ?_ISR 0001  
                               __CFG_WDT$OFF 000000                                         l2042 154E  
                                       l2044 1558                                         l2046 1562  
                                       l2054 16BC                                         l2230 076A  
                                       l2048 156C                                         l2080 15A2  
                                       l2208 142E                                         l2242 087E  
                                       l2218 0674                                         l2314 16D0  
                                       l2172 0FB2                                         l2164 0F74  
                                       l2156 0F5C                                         l2092 14F4  
                                       l2260 0A42                                         l2252 098E  
                                       l2244 08BC                                         l2228 0748  
                                       l2324 16E2                                         l2158 0F60  
                                       l2318 16D8                                         l2168 0FA8  
                                       l2088 14EE                                         l2256 09EE  
                                       l2248 093A                                         l2264 0A58  
                                       l2194 1678                                         l2290 1402  
                                       l2514 104E                                         l2602 0C6E  
                                       l2284 13E2                                         l2532 0D9A  
                                       l2452 1350                                         l2508 0FEE  
                                       l2620 0CF8                                         l2294 1410  
                                       l2550 0E54                                         l2542 0E04  
                                       l2462 11A6                                         l2518 105E  
                                       l2630 0D1C                                         l2622 0D0A  
                                       l2614 0CB6                                         l2528 0D92  
                                       l2464 11B2                                         l2448 133C  
                                       l2624 0D0E                                         l2616 0CCA  
                                       l2608 0C86                                         l2712 10F8  
                                       l2546 0E12                                         l2554 0E58  
                                       l2474 11E6                                         l2466 11B6  
                                       l2634 0D3A                                         l2722 1164  
                                       l2714 10FC                                         l2484 1398  
                                       l2548 0E3C                                         l2628 0D16  
                                       l2724 1180                                         l2486 13A0  
                                       l2574 128A                                         l2590 0C1E  
                                       l2718 1104                                         l2496 13C0  
                                       l2488 13A4                                         l2584 12CE  
                                       l2664 0B24                                         l2578 12B0  
                                       l2594 0C26                                         l2692 0BE2  
                                       l2678 0B6E                                         l2688 0BBA  
                                       u2035 0AD4                                         u1431 06F4  
                                       _LATC 000F8B                                         _LATD 000F8C  
                                       u1354 0F8A                                         u1355 0F86  
                                       u1461 082A                                         u2158 1150  
                                       _TMR1 000FCE                                         _main 174A  
                       __end_of_GetKeyStatus 15D8                                         fsr0h 000FEA  
                                       fsr1h 000FE2                                         fsr2h 000FDA  
                                       fsr0l 000FE9                                         indf1 000FE7  
                                       indf2 000FDF                                         fsr1l 000FE1  
                                       fsr2l 000FD9                                         btemp 006C  
      __end_of_IncrementDecrementSingleDigit 0D86       __size_of_IncrementDecrementSingleDigit 017C  
              _IncrementDecrementSingleDigit 0C0A                                         prodh 000FF4  
                                       prodl 000FF3                            _BCDManage7segment 0F3E  
                                       start 000E                                __CFG_IESO$OFF 000000  
                                 _BlinkDigit 172A                                   _BlinkIndex 005B  
                         ?_BCDManage7segment 0001                     __size_of_SpeedCalcManage 0090  
                               ___param_bank 000000                             __end_of_APP_ISR1 177E  
                           __end_of_APP_ISR2 1778                             __end_of_APP_ISR3 1772  
                                      ??_ISR 0006                              ??_ManageDrivers 001B  
                        BCDsendNumber@Buffer 0025                    _SpeedCalcNotifyInitialize 1780  
                        BCDsendNumber@Number 001B                         APP_MANAGE@blinkIndex 004D  
                        __size_of_APP_MANAGE 019C                          ??_BCDManage7segment 0016  
                        BCDsendNumber@Output 0023                                        ?_main 0001  
                                 _CreateTask 12D4                                        _EEADR 000FA9  
                       HWI_DIGI_READ@HWIread 0015                              __end_of___lldiv 1206  
                                 _LapCounter 0052                                        _T0CON 000FD5  
                                      _T1CON 000FCD                                        _T3CON 000FB1  
                            __end_of___lwdiv 13D4                                        i2l504 151A  
                                      i2l505 1540                                        i2l498 0F02  
                                      _TMR0L 000FD6                                        _TMR3H 000FB3  
                                      _TMR3L 000FB2                            _ManageApplication 1760  
                                      _PORTC 000F82                                        _PORTD 000F83  
                                      _TRISC 000F94                                        _TRISD 000F95  
                              __CFG_PWRT$OFF 000000                                __CFG_WRT0$OFF 000000  
                              __CFG_WRT1$OFF 000000                                __CFG_WRT2$OFF 000000  
                        ___lmul@multiplicand 0018                                __CFG_WRT3$OFF 000000  
                             __CFG_EBTR0$OFF 000000                               __CFG_FCMEN$OFF 000000  
                             __CFG_EBTR1$OFF 000000                               __CFG_EBTR2$OFF 000000  
                             __CFG_EBTR3$OFF 000000                                 _WriteRequest 0057  
                         ?_ManageApplication 0001                                __CFG_WRTB$OFF 000000  
                              __CFG_WRTC$OFF 000000                                __CFG_WRTD$OFF 000000  
                             __CFG_EBTRB$OFF 000000                           _Eeprom_Write_Block 1272  
                    CreateTask@MangeFunction 0014                    BCDsendNumber@DecimalPlace 001D  
                                      pclath 000FFA                                        tablat 000FF5  
                        ??_ManageApplication 0037                            ?_HWI_8Digit_WRITE 0014  
                  __end_of_BCDManage7segment 0FD6                         __end_of_EepromManage 1456  
                                      status 000FD8          IncrementDecrementSingleDigit@Number 001B  
                      __end_of_BCDsendNumber 0E82                          ?_Eeprom_Write_Block 0014  
            __size_of_HWI_DIGITAL_INITIALIZE 001A          IncrementDecrementSingleDigit@Output 0027  
                         ??_HWI_8Digit_WRITE 0015                                  _GetAvgSpeed 0FD6  
                             __CFG_MCLRE$OFF 000000                              __initialization 1456  
                                _GetDistance 1718                                 __end_of_main 1752  
                    __size_of_HWIeeprom_Read 0028                    __end_of_ManageApplication 1766  
                                     ??_main 0037                         ??_Eeprom_Write_Block 0019  
                             MangeKeys@KeyID 001A                                __activetblptr 000002  
                 __end_of_Segment7ASCIItable 061B                                       _EEDATA 000FA8  
                                     _EECON2 000FA7                    HWIeeprom_Read@ReadSuccess 0017  
                         __size_of_MangeKeys 042E                                       _INT0IF 007F91  
                                     _INT1IF 007F80                         APP_MANAGE@keystatus2 00C4  
                                     i2l2304 152C                                       i2l2430 0EF8  
                                     i2l2422 0EEA                                       i2l2414 0ED8  
                                     i2l2344 15FC                                       i2l2408 0ECA  
                                     i2l1634 170E                                       i2l2390 160A  
                                     i2l2394 1612                  BCDManage7segment@DigitIndex 0069  
                                     _INTCON 000FF2                     __size_of_SensorOneNotify 0016  
                   __size_of_ManageSpeedCalc 0006                         HWI_8Digit_WRITE@port 0015  
                                     _TMR0IE 007F95                                       _TMR0IF 007F92  
                                     _TMR1IE 007CE8                                       _TMR1IF 007CF0  
                                     _TMR2IF 007CF1                                       _TMR3IE 007D01  
                                     _TMR3IF 007D09                       __size_of_BCDInitialize 0008  
                                     _Circum 0067                              BlinkDigit@Index 0015  
                        _DisplayAlphaNumeric 175A                                  ?_BlinkDigit 0014  
                             __CFG_XINST$OFF 000000                                   _NotifyFlag 0053  
                                     ___lmul 132C                                       ___wmul 1680  
                             __CFG_STVREN$ON 000000                                    ??___lldiv 0028  
                                  ??___lwdiv 0018                                 _HWtimerCount 0043  
                     EepromManage@WriteIndex 0054                                       clear_0 1474  
                                     clear_1 1480                            ??_SpeedCalcManage 002D  
                                ?_CreateTask 0014                       _HWI_DIGITAL_INITIALIZE 16E8  
                           CreateTask@Period 0017                             CreateTask@TaskId 0016  
                               __pdataCOMRAM 006A                       __size_of_HWI_DIGI_READ 003C  
                       ?_DisplayAlphaNumeric 0001                                 __mediumconst 0000  
                   __size_of_SensorTwoNotify 002E                                       tblptrh 000FF7  
                                     tblptrl 000FF6                                       tblptru 000FF8  
                         __size_of_Start_App 006C                        __size_of_GetKeyStatus 002E  
                               ??_APP_MANAGE 0036                                    ?_APP_ISR1 0001  
                                  ?_APP_ISR2 0001                                    ?_APP_ISR3 0001  
                     __size_of_SchedulerTick 002A                     ReloadHWtimer@ElapsedTime 0004  
                 __size_of_BCDManage7segment 0098                                   __accesstop 0080  
                    __end_of__initialization 1486                              __CFG_PBADEN$OFF 000000  
                          MangeKeys@KeyState 0018                            ?_SetCircumfirunce 0014  
                              ___rparam_used 000001                           ??_SetCircumfirunce 0016  
                             _TimerOVFLcount 0051                               __pcstackCOMRAM 0001  
                          BCDsendNumber@Link 0021                    GetAvgSpeed@AvgSpeedKphMph 0034  
                          __end_of_MangeKeys 0A6E                    __size_of_HWI_4Digit_WRITE 0032  
                 __size_of_ManageApplication 0006                           __end_of_APP_MANAGE 0C0A  
                               _GetKeyStatus 15AA                                _BCDInitialize 1752  
                      ??_DisplayAlphaNumeric 001A         SpeedCalcManage@HundredMeterReference 002F  
                   __size_of_HWtimerCallback 000A           __size_of_SpeedCalcNotifyInitialize 0002  
     IncrementDecrementSingleDigit@LoopIndex 002B                     __size_of_HWIeeprom_Write 002E  
                        __size_of_BlinkDigit 000C                        __size_of_EepromManage 0040  
                     __size_of_ReloadHWtimer 003C                                   ??_APP_ISR1 0001  
                                 ??_APP_ISR2 0006                                   ??_APP_ISR3 0001  
                                 __pbssBANK0 0080                BCDManage7segment@BlinkCounter 0058  
                               _CircumFactor 006A                          __size_of_CreateTask 0058  
                              _HWI_DIGI_READ 14D2                     BCDsendNumber@EnableTranc 001E  
                          ??_SensorOneNotify 0001                            ??_ManageSpeedCalc 0031  
                    __size_of_APP_INITIALIZE 0028                                      ?___lmul 0014  
                     SetCircumfirunce@Circum 0014                            __end_of_Start_App 1272  
                                    ?___wmul 0014                                _SchedulerTick 1606  
                             _HWIeeprom_Read 1658                               ___lmul@product 001C  
         __size_of_HWI_INTERRUPTS_INTITALIZE 003E                   ?_HWI_INTERRUPTS_INTITALIZE 0001  
                               _EepromManage 1416                               ?_BCDInitialize 0001  
                                    _INTCON3 000FF0                        HWI_8Digit_WRITE@value 0014  
             Eeprom_Write_Block@WriteGranted 0019                            ??_SensorTwoNotify 0006  
                           HWI_DIGI_READ@pin 0014                               ?_HWI_DIGI_READ 0001  
                                    __Hparam 0000                                 ?_GetAvgSpeed 002D  
                                    __Lparam 0000                                 ?_GetDistance 0014  
                     __end_of_HWIeeprom_Read 1680                              __size_of___lmul 0056  
                              _ReloadHWtimer 150E                               ?_SchedulerTick 0001  
                                    ___lldiv 1184                              __size_of___wmul 0026  
                                    ___lwdiv 1382                                 __psmallconst 0600  
                  __size_of_HWI_8Digit_WRITE 0026                        __end_of_ManageDrivers 16E8  
                                    __pcinit 1456                            _Eeprom_Read_Block 13D4  
                                    __ramtop 0600                                      __ptext0 174A  
                                    __ptext1 1206                                      __ptext2 1780  
                                    __ptext3 10F8                                      __ptext4 16CC  
                                    __ptext5 175A                                      __ptext6 1760  
                                    __ptext7 1766                                      __ptext8 1068  
                                    __ptext9 0640            __end_of_HWI_INTERRUPTS_INTITALIZE 14D2  
                               __size_of_ISR 0F36                           ?_Eeprom_Read_Block 0018  
                              ?_RunScheduler 0001                       SchedulerTick@TaskIndex 0001  
                        ??_Eeprom_Read_Block 001B                               __pintcode_body 0E82  
                       end_of_initialization 1486                            ??_HWtimerCallback 0001  
                         _Segment7ASCIItable 0601                                __Lmediumconst 0000  
                          ??_HWIeeprom_Write 0015                                      int_func 0E82  
                            _SevenSegmentMAP 0633                              ___lldiv@divisor 0024  
                            _SpeedCalcManage 1068                                 ??_BlinkDigit 0015  
                            ___lldiv@counter 002C                               ?_ReloadHWtimer 0001  
                                    postdec2 000FDD                              ?_HWIeeprom_Read 0014  
                                    postinc0 000FEE                                      postinc1 000FE6  
                                    postinc2 000FDE                    __end_of_Eeprom_Read_Block 1416  
                    ?_HWI_DIGITAL_INITIALIZE 0001                  APP_MANAGE@TravelledDistance 00C5  
                           _HWI_4Digit_WRITE 154A                              ??_BCDInitialize 0014  
                               ??_CreateTask 0018                                    _PORTBbits 000F81  
                __size_of_Eeprom_Write_Block 0062                       __size_of_BCDsendNumber 00FC  
                             ??_RunScheduler 00CA                                    _TRISBbits 000F93  
                       BCDManage7segment@BCD 0019                           __end_of_BlinkDigit 1736  
                            ??_HWI_DIGI_READ 0014                                    _DataArray 0080  
                          __size_of_APP_ISR1 0006                            __size_of_APP_ISR2 0006  
                          __size_of_APP_ISR3 0006                           __end_of_CreateTask 132C  
                BCDInitialize@bIsCommonAnode 0014                                    _BlinkFlag 0059  
                             _APP_INITIALIZE 1630                               _DistTravelCntr 003F  
                            ??_SchedulerTick 0001                                _BlinkDuration 005A  
                          _LapTimeTenthMilli 0045               __end_of_HWI_DIGITAL_INITIALIZE 1702  
                             __end_of___lmul 1382  IncrementDecrementSingleDigit@NumberReturned 0022  
                             __end_of___wmul 16A6                                __pidataCOMRAM 177E  
                                  _ArrayTask 00B2                    __size_of_SetCircumfirunce 000A  
                                  _MangeKeys 0640                          start_initialization 1456  
                                __end_of_ISR 0F3E                          HWIeeprom_Write@Data 0014  
                            _SensorOneNotify 1702                      __end_of_SevenSegmentMAP 063E  
                            _ManageSpeedCalc 1766                      __end_of_SpeedCalcManage 10F8  
          IncrementDecrementSingleDigit@Link 0020                          APP_MANAGE@keystatus 00C9  
                     __end_of_APP_INITIALIZE 1658                                _BCDsendNumber 0D86  
                            ??_ReloadHWtimer 0003                   Eeprom_Read_Block@BlockSize 001A  
                   Eeprom_Read_Block@DataPtr 0018                                     ??___lmul 001C  
                                   ??___wmul 0018                         __size_of_GetAvgSpeed 0092  
                 __size_of_Eeprom_Read_Block 0042                  __end_of_DisplayAlphaNumeric 1760  
                           __CFG_LPT1OSC$OFF 000000                         __size_of_GetDistance 0012  
                           _HWI_8Digit_WRITE 16A6               ?_IncrementDecrementSingleDigit 001B  
                     HWIeeprom_Write@address 0015                                    _Start_App 1206  
                         BlinkDigit@duration 0014                  ??_HWI_INTERRUPTS_INTITALIZE 0014  
                            _WriteFnCallback 0049                                   ?_MangeKeys 0001  
                            _SensorTwoNotify 15D8                                  __pbssCOMRAM 0037  
                     BCDsendNumber@LoopIndex 0027                                __pcstackBANK0 00C2  
                   Eeprom_Read_Block@address 001C                                    _WriteFlag 005D  
                      APP_MANAGE@AvgSpeedKph 00C2                   Eeprom_Read_Block@LoopIndex 001E  
                      RunScheduler@TaskIndex 004F                               ?_BCDsendNumber 001B  
      IncrementDecrementSingleDigit@PowIndex 0024                              ?_APP_INITIALIZE 0001  
                           ___lwdiv@dividend 0014                         __end_of_RunScheduler 1184  
                          __CFG_CCP2MX$PORTC 000000                       APP_MANAGE@bIsBlinkMode 004B  
                                  __pintcode 0008                                     ?___lldiv 0020  
                                   ?___lwdiv 0014                                   ?_Start_App 0001  
                           _HwTimerOVFLcount 0050                                 _bIsAnodeUsed 005C  
                            _HWtimerCallback 1740                                  __smallconst 0600  
                    __end_of_SensorOneNotify 1718                                     _BCDAlpha 0037  
                    __end_of_ManageSpeedCalc 176C                              _HWIeeprom_Write 157C  
                      HWI_4Digit_WRITE@value 0014                             ___lwdiv@quotient 0019  
                   __end_of_HWI_4Digit_WRITE 157C                                     _APP_ISR1 1778  
                                   _APP_ISR2 1772                                     _APP_ISR3 176C  
                 ?_SpeedCalcNotifyInitialize 0001                 Eeprom_Read_Block@ReadGranted 001B  
                         HWIeeprom_Read@Data 0014                             ?_SpeedCalcManage 0001  
                  _HWI_INTERRUPTS_INTITALIZE 1494                         ReloadHWtimer@TimerId 0003  
                             ___wmul@product 0018                             ??_HWIeeprom_Read 0016  
               Eeprom_Read_Block@ReadSuccess 001D                             __CFG_WDTPS$32768 000000  
                      HWIeeprom_Read@address 0016                      __end_of_SensorTwoNotify 1606  
                           _SetCircumfirunce 1736                            ___wmul@multiplier 0014  
                                ??_MangeKeys 0016                                     _DataSize 0055  
         IncrementDecrementSingleDigit@Index 001D    IncrementDecrementSingleDigit@bIsincrement 001E  
                          ___lmul@multiplier 0014                                  _INTCON2bits 000FF1  
                            ??_BCDsendNumber 001F            __end_of_SpeedCalcNotifyInitialize 1782  
                     __size_of_ManageDrivers 001C                                   _EECON1bits 000FA6  
                             _KeyArrayConfig 061B                                     __Hrparam 0000  
                                   __Lrparam 0000                           __CFG_BOREN$SBORDIS 000000  
                    __end_of_HWtimerCallback 174A                            GetKeyStatus@KeyID 0015  
                           __size_of___lldiv 0082                   __end_of_Eeprom_Write_Block 12D4  
                    __end_of_HWIeeprom_Write 15AA                             __size_of___lwdiv 0052  
                                ??_Start_App 0037                        __end_of_BCDInitialize 175A  
                              ?_GetKeyStatus 0001                             ?_SensorOneNotify 0001  
                                 _EEPROMaddr 0056                             ?_ManageSpeedCalc 0001  
                            ___lwdiv@divisor 0016                              ___lwdiv@counter 0018  
                                   __ptext10 14D2                                     __ptext11 1416  
                                   __ptext20 1184                                     __ptext12 157C  
                                   __ptext21 1272                                     __ptext13 0A6E  
                                   __ptext30 16E8                                     __ptext22 172A  
                                   __ptext14 1736                                     __ptext31 12D4  
                                   __ptext23 0D86                                     __ptext15 0C0A  
                                   __ptext40 1772                                     __ptext32 1752  
                                   __ptext24 1680                                     __ptext16 15AA  
                                   __ptext41 15D8                                     __ptext33 1630  
                                   __ptext25 1382                                     __ptext17 1718  
                                   __ptext42 150E                                     __ptext34 13D4  
                                   __ptext26 0F3E                                     __ptext18 0FD6  
                                   __ptext43 1778                                     __ptext35 1658  
                                   __ptext27 16A6                                     __ptext19 132C  
                                   __ptext44 1702                                     __ptext28 154A  
                                   __ptext45 0000                                     __ptext37 1606  
                                   __ptext29 1494                                     __ptext38 176C  
                                   __ptext39 1740                    Eeprom_Write_Block@DataPtr 0014  
                                 _APP_MANAGE 0A6E                              _KeyInternalData 005E  
                   __end_of_HWI_8Digit_WRITE 16CC                           _LapDistanceCounter 0047  
                      __size_of_RunScheduler 008C                         HWI_4Digit_WRITE@port 0015  
                              __size_of_main 0008                       __end_of_KeyArrayConfig 0633  
                        MangeKeys@HWIreading 0019                        __end_of_HWI_DIGI_READ 150E  
            Eeprom_Write_Block@ptrFnCallback 0017                     EepromManage@WriteSuccess 0017  
                                   int$flags 006C                    Eeprom_Write_Block@address 001A  
                      __end_of_SchedulerTick 1630                             ?_SensorTwoNotify 0001  
                    GetAvgSpeed@KphMphFactor 0030                               ??_GetKeyStatus 0014  
                              ?_EepromManage 0001                                _ManageDrivers 16CC  
                                 _INTCONbits 000FF2                                 _RunScheduler 10F8  
            ??_IncrementDecrementSingleDigit 001F                             ??_APP_INITIALIZE 001F  
                                   intlevel2 0000                             ___lldiv@dividend 0020  
                              ??_GetAvgSpeed 002F                                ??_GetDistance 0018  
                      __end_of_ReloadHWtimer 154A                             ?_HWtimerCallback 0001  
                             ??_EepromManage 0017                               ?_ManageDrivers 0001  
                           ?_HWIeeprom_Write 0014    IncrementDecrementSingleDigit@unitPosition 0025  
                           ___lldiv@quotient 0028                 __size_of_DisplayAlphaNumeric 0006  
                Eeprom_Write_Block@BlockSize 0016                                  ?_APP_MANAGE 0001  
                ??_SpeedCalcNotifyInitialize 0014                            ?_HWI_4Digit_WRITE 0014  
                   __end_of_SetCircumfirunce 1740                     ??_HWI_DIGITAL_INITIALIZE 0014  
                         ??_HWI_4Digit_WRITE 0015                       ManageDrivers@LoopIndex 001B  
                      GetKeyStatus@KeyStatus 0014  
