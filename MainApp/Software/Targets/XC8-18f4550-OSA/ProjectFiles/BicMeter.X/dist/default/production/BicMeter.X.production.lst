

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Jun 25 19:26:55 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.41
    64                           ; Generated 25/01/2017 GMT
    65                           ; 
    66                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4520 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataCOMRAM
    99  00158E                     __pidataCOMRAM:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _CircumFactor
   103  00158E  00C8               	dw	200
   104                           
   105                           	psect	smallconst
   106  000600                     __psmallconst:
   107                           	opt stack 0
   108  000600  00                 	db	0
   109  000601                     APP_INITIALIZE@F3085:
   110                           	opt stack 0
   111  000601  61                 	db	97
   112  000602  68                 	db	104
   113  000603  6D                 	db	109
   114  000604  65                 	db	101
   115  000605  64                 	db	100
   116  000606  20                 	db	32
   117  000607  69                 	db	105
   118  000608  6D                 	db	109
   119  000609  62                 	db	98
   120  00060A  61                 	db	97
   121  00060B  62                 	db	98
   122  00060C  79                 	db	121
   123  00060D  20                 	db	32
   124  00060E  53                 	db	83
   125  00060F  57                 	db	87
   126  000610  20                 	db	32
   127  000611  45                 	db	69
   128  000612  45                 	db	69
   129  000613  50                 	db	80
   130  000614  52                 	db	82
   131  000615  4F                 	db	79
   132  000616  4D                 	db	77
   133  000617  20                 	db	32
   134  000618  4F                 	db	79
   135  000619  4B                 	db	75
   136  00061A  20                 	db	32
   137  00061B  3A                 	db	58
   138  00061C  44                 	db	68
   139  00061D  00                 	db	0
   140  00061E                     __end_ofAPP_INITIALIZE@F3085:
   141                           	opt stack 0
   142  00061E                     _KeyArrayConfig:
   143                           	opt stack 0
   144  00061E  0F                 	db	15
   145  00061F  00                 	db	0
   146  000620  0004               	dw	4
   147  000622  0004               	dw	4
   148  000624  0064               	dw	100
   149  000626  10                 	db	16
   150  000627  00                 	db	0
   151  000628  0004               	dw	4
   152  00062A  0004               	dw	4
   153  00062C  0064               	dw	100
   154  00062E                     __end_of_KeyArrayConfig:
   155                           	opt stack 0
   156  00062E                     _SevenSegmentMAP:
   157                           	opt stack 0
   158  00062E  FC                 	db	252
   159  00062F  60                 	db	96
   160  000630  DA                 	db	218
   161  000631  F2                 	db	242
   162  000632  66                 	db	102
   163  000633  B6                 	db	182
   164  000634  BE                 	db	190
   165  000635  E0                 	db	224
   166  000636  FE                 	db	254
   167  000637  F6                 	db	246
   168  000638  01                 	db	1
   169  000639                     __end_of_SevenSegmentMAP:
   170                           	opt stack 0
   171  0000                     _TMR1	set	4046
   172  0000                     _TMR3H	set	4019
   173  0000                     _TMR3L	set	4018
   174  0000                     _TMR0L	set	4054
   175  0000                     _INTCON2bits	set	4081
   176  0000                     _T3CON	set	4017
   177  0000                     _T1CON	set	4045
   178  0000                     _T0CON	set	4053
   179  0000                     _INTCON3	set	4080
   180  0000                     _INTCON	set	4082
   181  0000                     _PORTBbits	set	3969
   182  0000                     _TRISBbits	set	3987
   183  0000                     _TRISC	set	3988
   184  0000                     _TRISD	set	3989
   185  0000                     _LATD	set	3980
   186  0000                     _PORTD	set	3971
   187  0000                     _LATC	set	3979
   188  0000                     _PORTC	set	3970
   189  0000                     _EECON2	set	4007
   190  0000                     _INTCONbits	set	4082
   191  0000                     _EEDATA	set	4008
   192  0000                     _EEADR	set	4009
   193  0000                     _EECON1bits	set	4006
   194  0000                     _INT1IF	set	32640
   195  0000                     _INT0IF	set	32657
   196  0000                     _TMR2IF	set	31985
   197  0000                     _TMR3IE	set	32001
   198  0000                     _TMR3IF	set	32009
   199  0000                     _TMR1IE	set	31976
   200  0000                     _TMR1IF	set	31984
   201  0000                     _TMR0IE	set	32661
   202  0000                     _TMR0IF	set	32658
   203                           
   204                           ; #config settings
   205  000639  00                 	db	0	; dummy byte at the end
   206  0000                     
   207                           	psect	cinit
   208  001270                     __pcinit:
   209                           	opt stack 0
   210  001270                     start_initialization:
   211                           	opt stack 0
   212  001270                     __initialization:
   213                           	opt stack 0
   214                           
   215                           ; Initialize objects allocated to COMRAM (2 bytes)
   216                           ; load TBLPTR registers with __pidataCOMRAM
   217  001270  0E8E               	movlw	low __pidataCOMRAM
   218  001272  6EF6               	movwf	tblptrl,c
   219  001274  0E15               	movlw	high __pidataCOMRAM
   220  001276  6EF7               	movwf	tblptrh,c
   221  001278  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   222  00127A  6EF8               	movwf	tblptru,c
   223  00127C  0009               	tblrd		*+	;fetch initializer
   224  00127E  CFF5 F06A          	movff	tablat,__pdataCOMRAM
   225  001282  0009               	tblrd		*+	;fetch initializer
   226  001284  CFF5 F06B          	movff	tablat,__pdataCOMRAM+1
   227                           
   228                           ; Clear objects allocated to BANK0 (50 bytes)
   229  001288  EE00  F080         	lfsr	0,__pbssBANK0
   230  00128C  0E32               	movlw	50
   231  00128E                     clear_0:
   232  00128E  6AEE               	clrf	postinc0,c
   233  001290  06E8               	decf	wreg,f,c
   234  001292  E1FD               	bnz	clear_0
   235                           
   236                           ; Clear objects allocated to COMRAM (59 bytes)
   237  001294  EE00  F001         	lfsr	0,__pbssCOMRAM
   238  001298  0E3B               	movlw	59
   239  00129A                     clear_1:
   240  00129A  6AEE               	clrf	postinc0,c
   241  00129C  06E8               	decf	wreg,f,c
   242  00129E  E1FD               	bnz	clear_1
   243  0012A0                     end_of_initialization:
   244                           	opt stack 0
   245  0012A0                     __end_of__initialization:
   246                           	opt stack 0
   247  0012A0  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   248  0012A2  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   249  0012A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  0012A6  6EF8               	movwf	tblptru,c
   251  0012A8  0100               	movlb	0
   252  0012AA  EFAD  F00A         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssCOMRAM
   261  000001                     __pbssCOMRAM:
   262                           	opt stack 0
   263  000001                     _ArrayTask:
   264                           	opt stack 0
   265  000001                     	ds	16
   266  000011                     _BCDNumber:
   267                           	opt stack 0
   268  000011                     	ds	8
   269  000019                     _DistTravelCntr:
   270                           	opt stack 0
   271  000019                     	ds	4
   272  00001D                     _HWtimerCount:
   273                           	opt stack 0
   274  00001D                     	ds	2
   275  00001F                     _LapTimeTenthMilli:
   276                           	opt stack 0
   277  00001F                     	ds	2
   278  000021                     _LapDistanceCounter:
   279                           	opt stack 0
   280  000021                     	ds	2
   281  000023                     APP_MANAGE@bIsBlinkMode:
   282                           	opt stack 0
   283  000023                     	ds	2
   284  000025                     APP_MANAGE@blinkIndex:
   285                           	opt stack 0
   286  000025                     	ds	2
   287  000027                     RunScheduler@TaskIndex:
   288                           	opt stack 0
   289  000027                     	ds	1
   290  000028                     _HwTimerOVFLcount:
   291                           	opt stack 0
   292  000028                     	ds	1
   293  000029                     _TimerOVFLcount:
   294                           	opt stack 0
   295  000029                     	ds	1
   296  00002A                     _LapCounter:
   297                           	opt stack 0
   298  00002A                     	ds	1
   299  00002B                     _NotifyFlag:
   300                           	opt stack 0
   301  00002B                     	ds	1
   302  00002C                     EepromManage@WriteIndex:
   303                           	opt stack 0
   304  00002C                     	ds	1
   305  00002D                     _DataSize:
   306                           	opt stack 0
   307  00002D                     	ds	1
   308  00002E                     _EEPROMaddr:
   309                           	opt stack 0
   310  00002E                     	ds	1
   311  00002F                     _WriteRequest:
   312                           	opt stack 0
   313  00002F                     	ds	1
   314  000030                     BCDManage7segment@BlinkCounter:
   315                           	opt stack 0
   316  000030                     	ds	1
   317  000031                     _BlinkFlag:
   318                           	opt stack 0
   319  000031                     	ds	1
   320  000032                     _BlinkDuration:
   321                           	opt stack 0
   322  000032                     	ds	1
   323  000033                     _BlinkIndex:
   324                           	opt stack 0
   325  000033                     	ds	1
   326  000034                     _bIsAnodeUsed:
   327                           	opt stack 0
   328  000034                     	ds	1
   329  000035                     _KeyInternalData:
   330                           	opt stack 0
   331  000035                     	ds	6
   332  00003B                     BCDManage7segment@DigitIndex:
   333                           	opt stack 0
   334  00003B                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	dataCOMRAM
   343  00006A                     __pdataCOMRAM:
   344                           	opt stack 0
   345  00006A                     _CircumFactor:
   346                           	opt stack 0
   347  00006A                     	ds	2
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	bssBANK0
   356  000080                     __pbssBANK0:
   357                           	opt stack 0
   358  000080                     _DataArray:
   359                           	opt stack 0
   360  000080                     	ds	50
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368                           	psect	cstackBANK0
   369  0000B2                     __pcstackBANK0:
   370                           	opt stack 0
   371  0000B2                     GetAvgSpeed@bIsKph:
   372                           	opt stack 0
   373  0000B2                     SpeedCalcManage@HundredMeterReference:
   374                           	opt stack 0
   375  0000B2                     APP_INITIALIZE@stringX:
   376                           	opt stack 0
   377                           
   378                           ; 29 bytes @ 0x0
   379  0000B2                     	ds	1
   380  0000B3                     GetAvgSpeed@KphMphFactor:
   381                           	opt stack 0
   382                           
   383                           ; 4 bytes @ 0x1
   384  0000B3                     	ds	4
   385  0000B7                     GetAvgSpeed@AvgSpeedKphMph:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x5
   389  0000B7                     	ds	2
   390  0000B9                     ??_APP_MANAGE:
   391                           
   392                           ; 1 bytes @ 0x7
   393  0000B9                     	ds	1
   394  0000BA                     APP_MANAGE@TravelledDistance:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x8
   398  0000BA                     	ds	4
   399  0000BE                     APP_MANAGE@keystatus:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0xC
   403  0000BE                     	ds	1
   404  0000BF                     APP_MANAGE@AvgSpeedKph:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0xD
   408  0000BF                     	ds	2
   409  0000C1                     
   410                           ; 1 bytes @ 0xF
   411  0000C1                     	ds	14
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           
   419                           	psect	cstackCOMRAM
   420  00003C                     __pcstackCOMRAM:
   421                           	opt stack 0
   422  00003C                     ?_ReloadHWtimer:
   423                           	opt stack 0
   424  00003C                     SchedulerTick@TaskIndex:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x0
   428  00003C                     	ds	2
   429  00003E                     ReloadHWtimer@TimerId:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x2
   433  00003E                     	ds	1
   434  00003F                     ReloadHWtimer@ElapsedTime:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x3
   438  00003F                     	ds	2
   439  000041                     ??_ISR:
   440                           
   441                           ; 1 bytes @ 0x5
   442  000041                     	ds	14
   443  00004F                     ?___wmul:
   444                           	opt stack 0
   445  00004F                     ?___lwdiv:
   446                           	opt stack 0
   447  00004F                     ?_GetDistance:
   448                           	opt stack 0
   449  00004F                     ?___lmul:
   450                           	opt stack 0
   451  00004F                     BCDInitialize@bIsCommonAnode:
   452                           	opt stack 0
   453  00004F                     BlinkDigit@duration:
   454                           	opt stack 0
   455  00004F                     GetKeyStatus@KeyStatus:
   456                           	opt stack 0
   457  00004F                     HWIeeprom_Write@Data:
   458                           	opt stack 0
   459  00004F                     HWI_4Digit_WRITE@value:
   460                           	opt stack 0
   461  00004F                     HWI_8Digit_WRITE@value:
   462                           	opt stack 0
   463  00004F                     HWI_DIGI_READ@pin:
   464                           	opt stack 0
   465  00004F                     Eeprom_Write_Block@DataPtr:
   466                           	opt stack 0
   467  00004F                     SetCircumfirunce@Circum:
   468                           	opt stack 0
   469  00004F                     CreateTask@MangeFunction:
   470                           	opt stack 0
   471  00004F                     HWIeeprom_Read@Data:
   472                           	opt stack 0
   473  00004F                     ___wmul@multiplier:
   474                           	opt stack 0
   475  00004F                     ___lwdiv@dividend:
   476                           	opt stack 0
   477  00004F                     ___lmul@multiplier:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x13
   481  00004F                     	ds	1
   482  000050                     BlinkDigit@Index:
   483                           	opt stack 0
   484  000050                     GetKeyStatus@KeyID:
   485                           	opt stack 0
   486  000050                     HWIeeprom_Write@address:
   487                           	opt stack 0
   488  000050                     HWI_4Digit_WRITE@port:
   489                           	opt stack 0
   490  000050                     HWI_8Digit_WRITE@port:
   491                           	opt stack 0
   492  000050                     HWI_DIGI_READ@HWIread:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x14
   496  000050                     	ds	1
   497  000051                     ??_BCDManage7segment:
   498  000051                     Eeprom_Write_Block@BlockSize:
   499                           	opt stack 0
   500  000051                     CreateTask@TaskId:
   501                           	opt stack 0
   502  000051                     HWIeeprom_Write@WriteSuccess:
   503                           	opt stack 0
   504  000051                     HWIeeprom_Read@address:
   505                           	opt stack 0
   506  000051                     ___wmul@multiplicand:
   507                           	opt stack 0
   508  000051                     ___lwdiv@divisor:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x15
   512  000051                     	ds	1
   513  000052                     Eeprom_Write_Block@WriteGranted:
   514                           	opt stack 0
   515  000052                     EepromManage@WriteSuccess:
   516                           	opt stack 0
   517  000052                     CreateTask@Period:
   518                           	opt stack 0
   519  000052                     HWIeeprom_Read@ReadSuccess:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x16
   523  000052                     	ds	1
   524  000053                     BCDManage7segment@Index:
   525                           	opt stack 0
   526  000053                     Eeprom_Write_Block@address:
   527                           	opt stack 0
   528  000053                     MangeKeys@KeyState:
   529                           	opt stack 0
   530  000053                     ___lwdiv@counter:
   531                           	opt stack 0
   532  000053                     Eeprom_Read_Block@DataPtr:
   533                           	opt stack 0
   534  000053                     ___wmul@product:
   535                           	opt stack 0
   536  000053                     ___lmul@multiplicand:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x17
   540  000053                     	ds	1
   541  000054                     BCDManage7segment@BCD:
   542                           	opt stack 0
   543  000054                     Eeprom_Write_Block@LoopIndex:
   544                           	opt stack 0
   545  000054                     MangeKeys@HWIreading:
   546                           	opt stack 0
   547  000054                     ___lwdiv@quotient:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x18
   551  000054                     	ds	1
   552  000055                     Eeprom_Read_Block@BlockSize:
   553                           	opt stack 0
   554  000055                     MangeKeys@KeyID:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x19
   558  000055                     	ds	1
   559  000056                     Eeprom_Read_Block@ReadGranted:
   560                           	opt stack 0
   561  000056                     ManageDrivers@LoopIndex:
   562                           	opt stack 0
   563  000056                     BCDsendNumber@Number:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1A
   567  000056                     	ds	1
   568  000057                     Eeprom_Read_Block@address:
   569                           	opt stack 0
   570  000057                     ___lmul@product:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x1B
   574  000057                     	ds	1
   575  000058                     BCDsendNumber@DecimalPlace:
   576                           	opt stack 0
   577  000058                     Eeprom_Read_Block@ReadSuccess:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x1C
   581  000058                     	ds	1
   582  000059                     ??_BCDsendNumber:
   583  000059                     Eeprom_Read_Block@LoopIndex:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x1D
   587  000059                     	ds	2
   588  00005B                     ?___lldiv:
   589                           	opt stack 0
   590  00005B                     BCDsendNumber@Link:
   591                           	opt stack 0
   592  00005B                     ___lldiv@dividend:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x1F
   596  00005B                     	ds	2
   597  00005D                     BCDsendNumber@Output:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x21
   601  00005D                     	ds	2
   602  00005F                     BCDsendNumber@Buffer:
   603                           	opt stack 0
   604  00005F                     ___lldiv@divisor:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x23
   608  00005F                     	ds	2
   609  000061                     BCDsendNumber@LoopIndex:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x25
   613  000061                     	ds	2
   614  000063                     ___lldiv@quotient:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x27
   618  000063                     	ds	4
   619  000067                     ___lldiv@counter:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x2B
   623  000067                     	ds	1
   624  000068                     ??_SpeedCalcManage:
   625  000068                     ?_GetAvgSpeed:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x2C
   629  000068                     	ds	2
   630  00006A                     tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           
   637                           ; 1 bytes @ 0x2E
   638 ;;
   639 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   640 ;;
   641 ;; *************** function _main *****************
   642 ;; Defined at:
   643 ;;		line 78 in file "main.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;		None
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   657 ;;      Params:         0       0       0       0       0       0       0
   658 ;;      Locals:         0       0       0       0       0       0       0
   659 ;;      Temps:          0       0       0       0       0       0       0
   660 ;;      Totals:         0       0       0       0       0       0       0
   661 ;;Total ram usage:        0 bytes
   662 ;; Hardware stack levels required when called:   10
   663 ;; This function calls:
   664 ;;		_Start_App
   665 ;; This function is called by:
   666 ;;		Startup code after reset
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text0
   671  00155A                     __ptext0:
   672                           	opt stack 0
   673  00155A                     _main:
   674                           	opt stack 21
   675                           
   676                           ;main.c: 80: Start_App();
   677                           
   678                           ;incstack = 0
   679  00155A  EC14  F008         	call	_Start_App	;wreg free
   680                           
   681                           ;main.c: 81: return;
   682  00155E  EF07  F000         	goto	start
   683  001562                     __end_of_main:
   684                           	opt stack 0
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           
   692 ;; *************** function _Start_App *****************
   693 ;; Defined at:
   694 ;;		line 21 in file "../../../../OS/OS_manage/OS_manage.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   708 ;;      Params:         0       0       0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0
   711 ;;      Totals:         0       0       0       0       0       0       0
   712 ;;Total ram usage:        0 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    9
   715 ;; This function calls:
   716 ;;		_APP_INITIALIZE
   717 ;;		_BCDInitialize
   718 ;;		_CreateTask
   719 ;;		_HWI_DIGITAL_INITIALIZE
   720 ;;		_HWI_INTERRUPTS_INTITALIZE
   721 ;;		_RunScheduler
   722 ;;		_SpeedCalcNotifyInitialize
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text1
   729  001028                     __ptext1:
   730                           	opt stack 0
   731  001028                     _Start_App:
   732                           	opt stack 21
   733                           
   734                           ;OS_manage.c: 23: HWI_INTERRUPTS_INTITALIZE();
   735                           
   736                           ;incstack = 0
   737  001028  EC57  F009         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   738                           
   739                           ;OS_manage.c: 24: HWI_DIGITAL_INITIALIZE();
   740  00102C  EC7C  F00A         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   741                           
   742                           ;OS_manage.c: 25: SpeedCalcNotifyInitialize();
   743  001030  ECC8  F00A         	call	_SpeedCalcNotifyInitialize	;wreg free
   744                           
   745                           ;OS_manage.c: 26: APP_INITIALIZE();
   746  001034  EC09  F00A         	call	_APP_INITIALIZE	;wreg free
   747                           
   748                           ;OS_manage.c: 27: BCDInitialize(1);
   749  001038  0E01               	movlw	1
   750  00103A  ECB1  F00A         	call	_BCDInitialize
   751                           
   752                           ;OS_manage.c: 29: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   753  00103E  0E76               	movlw	low _ManageSpeedCalc
   754  001040  6E4F               	movwf	CreateTask@MangeFunction,c
   755  001042  0E15               	movlw	high _ManageSpeedCalc
   756  001044  6E50               	movwf	CreateTask@MangeFunction+1,c
   757  001046  0E00               	movlw	0
   758  001048  6E51               	movwf	CreateTask@TaskId,c
   759  00104A  0E14               	movlw	20
   760  00104C  6E52               	movwf	CreateTask@Period,c
   761  00104E  EC77  F008         	call	_CreateTask	;wreg free
   762                           
   763                           ;OS_manage.c: 31: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100)
      +                          ;
   764  001052  0E70               	movlw	low _ManageApplication
   765  001054  6E4F               	movwf	CreateTask@MangeFunction,c
   766  001056  0E15               	movlw	high _ManageApplication
   767  001058  6E50               	movwf	CreateTask@MangeFunction+1,c
   768  00105A  0E02               	movlw	2
   769  00105C  6E51               	movwf	CreateTask@TaskId,c
   770  00105E  0E64               	movlw	100
   771  001060  6E52               	movwf	CreateTask@Period,c
   772  001062  EC77  F008         	call	_CreateTask	;wreg free
   773                           
   774                           ;OS_manage.c: 33: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 4)
      +                          ;
   775  001066  0E6A               	movlw	low _DisplayAlphaNumeric
   776  001068  6E4F               	movwf	CreateTask@MangeFunction,c
   777  00106A  0E15               	movlw	high _DisplayAlphaNumeric
   778  00106C  6E50               	movwf	CreateTask@MangeFunction+1,c
   779  00106E  0E01               	movlw	1
   780  001070  6E51               	movwf	CreateTask@TaskId,c
   781  001072  0E04               	movlw	4
   782  001074  6E52               	movwf	CreateTask@Period,c
   783  001076  EC77  F008         	call	_CreateTask	;wreg free
   784                           
   785                           ;OS_manage.c: 35: CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
   786  00107A  0EDC               	movlw	low _ManageDrivers
   787  00107C  6E4F               	movwf	CreateTask@MangeFunction,c
   788  00107E  0E14               	movlw	high _ManageDrivers
   789  001080  6E50               	movwf	CreateTask@MangeFunction+1,c
   790  001082  0E03               	movlw	3
   791  001084  6E51               	movwf	CreateTask@TaskId,c
   792  001086  0E0A               	movlw	10
   793  001088  6E52               	movwf	CreateTask@Period,c
   794  00108A  EC77  F008         	call	_CreateTask	;wreg free
   795                           
   796                           ;OS_manage.c: 37: RunScheduler();
   797  00108E  EC8D  F007         	call	_RunScheduler	;wreg free
   798  001092  0012               	return		;funcret
   799  001094                     __end_of_Start_App:
   800                           	opt stack 0
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808 ;; *************** function _SpeedCalcNotifyInitialize *****************
   809 ;; Defined at:
   810 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		None
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   824 ;;      Params:         0       0       0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0
   827 ;;      Totals:         0       0       0       0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    4
   831 ;; This function calls:
   832 ;;		Nothing
   833 ;; This function is called by:
   834 ;;		_Start_App
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           	psect	text2
   839  001590                     __ptext2:
   840                           	opt stack 0
   841  001590                     _SpeedCalcNotifyInitialize:
   842                           	opt stack 25
   843                           
   844                           ;incstack = 0
   845  001590  0012               	return		;funcret
   846  001592                     __end_of_SpeedCalcNotifyInitialize:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855 ;; *************** function _RunScheduler *****************
   856 ;; Defined at:
   857 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;		None
   860 ;; Auto vars:     Size  Location     Type
   861 ;;		None
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   871 ;;      Params:         0       0       0       0       0       0       0
   872 ;;      Locals:         0       0       0       0       0       0       0
   873 ;;      Temps:          0       2       0       0       0       0       0
   874 ;;      Totals:         0       2       0       0       0       0       0
   875 ;;Total ram usage:        2 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    8
   878 ;; This function calls:
   879 ;;		_DisplayAlphaNumeric
   880 ;;		_ManageApplication
   881 ;;		_ManageDrivers
   882 ;;		_ManageSpeedCalc
   883 ;; This function is called by:
   884 ;;		_Start_App
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text3
   889  000F1A                     __ptext3:
   890                           	opt stack 0
   891  000F1A                     _RunScheduler:
   892                           	opt stack 21
   893  000F1A                     
   894                           ;Scheduler.c: 29: {
   895                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 4 ; TaskIndex++)
   896  000F1A  0E00               	movlw	0
   897  000F1C  6E27               	movwf	RunScheduler@TaskIndex,c
   898  000F1E                     l2385:
   899  000F1E  0E03               	movlw	3
   900  000F20  6427               	cpfsgt	RunScheduler@TaskIndex,c
   901  000F22  D001               	goto	l2389
   902  000F24  D7FA               	goto	l2383
   903  000F26                     l2389:
   904                           
   905                           ;Scheduler.c: 31: {
   906                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   907  000F26  5027               	movf	RunScheduler@TaskIndex,w,c
   908  000F28  0D04               	mullw	4
   909  000F2A  0E02               	movlw	2
   910  000F2C  26F3               	addwf	prodl,f,c
   911  000F2E  0E00               	movlw	0
   912  000F30  22F4               	addwfc	prodh,f,c
   913  000F32  0E01               	movlw	low _ArrayTask
   914  000F34  24F3               	addwf	prodl,w,c
   915  000F36  6ED9               	movwf	fsr2l,c
   916  000F38  0E00               	movlw	high _ArrayTask
   917  000F3A  20F4               	addwfc	prodh,w,c
   918  000F3C  6EDA               	movwf	fsr2h,c
   919  000F3E  5027               	movf	RunScheduler@TaskIndex,w,c
   920  000F40  0D04               	mullw	4
   921  000F42  0E03               	movlw	3
   922  000F44  26F3               	addwf	prodl,f,c
   923  000F46  0E00               	movlw	0
   924  000F48  22F4               	addwfc	prodh,f,c
   925  000F4A  0E01               	movlw	low _ArrayTask
   926  000F4C  24F3               	addwf	prodl,w,c
   927  000F4E  6EE1               	movwf	fsr1l,c
   928  000F50  0E00               	movlw	high _ArrayTask
   929  000F52  20F4               	addwfc	prodh,w,c
   930  000F54  6EE2               	movwf	fsr1h,c
   931  000F56  50DE               	movf	postinc2,w,c
   932  000F58  5CE6               	subwf	postinc1,w,c
   933  000F5A  A0D8               	btfss	status,0,c
   934  000F5C  D022               	goto	l2395
   935                           
   936                           ;Scheduler.c: 33: {
   937                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   938  000F5E  5027               	movf	RunScheduler@TaskIndex,w,c
   939  000F60  0D04               	mullw	4
   940  000F62  0E01               	movlw	low _ArrayTask
   941  000F64  24F3               	addwf	prodl,w,c
   942  000F66  6ED9               	movwf	fsr2l,c
   943  000F68  0E00               	movlw	high _ArrayTask
   944  000F6A  20F4               	addwfc	prodh,w,c
   945  000F6C  6EDA               	movwf	fsr2h,c
   946  000F6E  D801               	call	u1658
   947  000F70  D00A               	goto	l2393
   948  000F72                     u1658:
   949  000F72  0005               	push	
   950  000F74  6EFA               	movwf	pclath,c
   951  000F76  50DE               	movf	postinc2,w,c
   952  000F78  6EFD               	movwf	tosl,c
   953  000F7A  50DE               	movf	postinc2,w,c
   954  000F7C  6EFE               	movwf	tosh,c
   955  000F7E  50F8               	movf	tblptru,w,c
   956  000F80  6EFF               	movwf	tosu,c
   957  000F82  50FA               	movf	pclath,w,c
   958  000F84  0012               	return		;indir
   959  000F86                     l2393:
   960                           
   961                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   962  000F86  5027               	movf	RunScheduler@TaskIndex,w,c
   963  000F88  0D04               	mullw	4
   964  000F8A  0E03               	movlw	3
   965  000F8C  26F3               	addwf	prodl,f,c
   966  000F8E  0E00               	movlw	0
   967  000F90  22F4               	addwfc	prodh,f,c
   968  000F92  0E01               	movlw	low _ArrayTask
   969  000F94  24F3               	addwf	prodl,w,c
   970  000F96  6ED9               	movwf	fsr2l,c
   971  000F98  0E00               	movlw	high _ArrayTask
   972  000F9A  20F4               	addwfc	prodh,w,c
   973  000F9C  6EDA               	movwf	fsr2h,c
   974  000F9E  0E00               	movlw	0
   975  000FA0  6EDF               	movwf	indf2,c
   976  000FA2                     l2395:
   977  000FA2  2A27               	incf	RunScheduler@TaskIndex,f,c
   978  000FA4  D7BC               	goto	l2385
   979  000FA6                     __end_of_RunScheduler:
   980                           	opt stack 0
   981                           tosu	equ	0xFFF
   982                           tosh	equ	0xFFE
   983                           tosl	equ	0xFFD
   984                           pclath	equ	0xFFA
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           prodh	equ	0xFF4
   990                           prodl	equ	0xFF3
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           postinc1	equ	0xFE6
   994                           fsr1h	equ	0xFE2
   995                           fsr1l	equ	0xFE1
   996                           indf2	equ	0xFDF
   997                           postinc2	equ	0xFDE
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           status	equ	0xFD8
  1001                           
  1002 ;; *************** function _ManageDrivers *****************
  1003 ;; Defined at:
  1004 ;;		line 54 in file "../../../../OS/OS_manage/OS_manage.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1018 ;;      Params:         0       0       0       0       0       0       0
  1019 ;;      Locals:         1       0       0       0       0       0       0
  1020 ;;      Temps:          0       0       0       0       0       0       0
  1021 ;;      Totals:         1       0       0       0       0       0       0
  1022 ;;Total ram usage:        1 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    6
  1025 ;; This function calls:
  1026 ;;		_EepromManage
  1027 ;;		_MangeKeys
  1028 ;; This function is called by:
  1029 ;;		_Start_App
  1030 ;;		_RunScheduler
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text4
  1035  0014DC                     __ptext4:
  1036                           	opt stack 0
  1037  0014DC                     _ManageDrivers:
  1038                           	opt stack 22
  1039                           
  1040                           ;OS_manage.c: 56: unsigned char LoopIndex;
  1041                           ;OS_manage.c: 57: for(LoopIndex = (unsigned char)0 ; LoopIndex < (unsigned char)2 ; Loop
      +                          Index++)
  1042                           
  1043                           ;incstack = 0
  1044  0014DC  0E00               	movlw	0
  1045  0014DE  6E56               	movwf	ManageDrivers@LoopIndex,c
  1046  0014E0                     l2023:
  1047  0014E0  0E01               	movlw	1
  1048  0014E2  6456               	cpfsgt	ManageDrivers@LoopIndex,c
  1049  0014E4  D001               	goto	l2027
  1050  0014E6  D005               	goto	l2033
  1051  0014E8                     l2027:
  1052                           
  1053                           ;OS_manage.c: 58: {
  1054                           ;OS_manage.c: 59: MangeKeys(LoopIndex);
  1055  0014E8  5056               	movf	ManageDrivers@LoopIndex,w,c
  1056  0014EA  EC1D  F003         	call	_MangeKeys
  1057  0014EE  2A56               	incf	ManageDrivers@LoopIndex,f,c
  1058  0014F0  D7F7               	goto	l2023
  1059  0014F2                     l2033:
  1060                           
  1061                           ;OS_manage.c: 60: }
  1062                           ;OS_manage.c: 61: EepromManage();
  1063  0014F2  EC18  F009         	call	_EepromManage	;wreg free
  1064  0014F6  0012               	return		;funcret
  1065  0014F8                     __end_of_ManageDrivers:
  1066                           	opt stack 0
  1067                           tosu	equ	0xFFF
  1068                           tosh	equ	0xFFE
  1069                           tosl	equ	0xFFD
  1070                           pclath	equ	0xFFA
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           prodh	equ	0xFF4
  1076                           prodl	equ	0xFF3
  1077                           postinc0	equ	0xFEE
  1078                           wreg	equ	0xFE8
  1079                           postinc1	equ	0xFE6
  1080                           fsr1h	equ	0xFE2
  1081                           fsr1l	equ	0xFE1
  1082                           indf2	equ	0xFDF
  1083                           postinc2	equ	0xFDE
  1084                           fsr2h	equ	0xFDA
  1085                           fsr2l	equ	0xFD9
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _DisplayAlphaNumeric *****************
  1089 ;; Defined at:
  1090 ;;		line 41 in file "../../../../OS/OS_manage/OS_manage.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1104 ;;      Params:         0       0       0       0       0       0       0
  1105 ;;      Locals:         0       0       0       0       0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0
  1107 ;;      Totals:         0       0       0       0       0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    6
  1111 ;; This function calls:
  1112 ;;		_BCDManage7segment
  1113 ;; This function is called by:
  1114 ;;		_Start_App
  1115 ;;		_RunScheduler
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text5
  1120  00156A                     __ptext5:
  1121                           	opt stack 0
  1122  00156A                     _DisplayAlphaNumeric:
  1123                           	opt stack 22
  1124                           
  1125                           ;OS_manage.c: 43: BCDManage7segment();
  1126                           
  1127                           ;incstack = 0
  1128  00156A  EC41  F007         	call	_BCDManage7segment	;wreg free
  1129  00156E  0012               	return		;funcret
  1130  001570                     __end_of_DisplayAlphaNumeric:
  1131                           	opt stack 0
  1132                           tosu	equ	0xFFF
  1133                           tosh	equ	0xFFE
  1134                           tosl	equ	0xFFD
  1135                           pclath	equ	0xFFA
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           prodh	equ	0xFF4
  1141                           prodl	equ	0xFF3
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           postinc1	equ	0xFE6
  1145                           fsr1h	equ	0xFE2
  1146                           fsr1l	equ	0xFE1
  1147                           indf2	equ	0xFDF
  1148                           postinc2	equ	0xFDE
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _ManageApplication *****************
  1154 ;; Defined at:
  1155 ;;		line 45 in file "../../../../OS/OS_manage/OS_manage.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1169 ;;      Params:         0       0       0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    7
  1176 ;; This function calls:
  1177 ;;		_APP_MANAGE
  1178 ;; This function is called by:
  1179 ;;		_Start_App
  1180 ;;		_RunScheduler
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text6
  1185  001570                     __ptext6:
  1186                           	opt stack 0
  1187  001570                     _ManageApplication:
  1188                           	opt stack 21
  1189                           
  1190                           ;OS_manage.c: 47: APP_MANAGE();
  1191                           
  1192                           ;incstack = 0
  1193  001570  EC34  F005         	call	_APP_MANAGE	;wreg free
  1194  001574  0012               	return		;funcret
  1195  001576                     __end_of_ManageApplication:
  1196                           	opt stack 0
  1197                           tosu	equ	0xFFF
  1198                           tosh	equ	0xFFE
  1199                           tosl	equ	0xFFD
  1200                           pclath	equ	0xFFA
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           prodh	equ	0xFF4
  1206                           prodl	equ	0xFF3
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postinc1	equ	0xFE6
  1210                           fsr1h	equ	0xFE2
  1211                           fsr1l	equ	0xFE1
  1212                           indf2	equ	0xFDF
  1213                           postinc2	equ	0xFDE
  1214                           fsr2h	equ	0xFDA
  1215                           fsr2l	equ	0xFD9
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _ManageSpeedCalc *****************
  1219 ;; Defined at:
  1220 ;;		line 49 in file "../../../../OS/OS_manage/OS_manage.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;		None
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1234 ;;      Params:         0       0       0       0       0       0       0
  1235 ;;      Locals:         0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0
  1237 ;;      Totals:         0       0       0       0       0       0       0
  1238 ;;Total ram usage:        0 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    6
  1241 ;; This function calls:
  1242 ;;		_SpeedCalcManage
  1243 ;; This function is called by:
  1244 ;;		_Start_App
  1245 ;;		_RunScheduler
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text7
  1250  001576                     __ptext7:
  1251                           	opt stack 0
  1252  001576                     _ManageSpeedCalc:
  1253                           	opt stack 22
  1254                           
  1255                           ;OS_manage.c: 51: SpeedCalcManage();
  1256                           
  1257                           ;incstack = 0
  1258  001576  ECF5  F006         	call	_SpeedCalcManage	;wreg free
  1259  00157A  0012               	return		;funcret
  1260  00157C                     __end_of_ManageSpeedCalc:
  1261                           	opt stack 0
  1262                           tosu	equ	0xFFF
  1263                           tosh	equ	0xFFE
  1264                           tosl	equ	0xFFD
  1265                           pclath	equ	0xFFA
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           prodh	equ	0xFF4
  1271                           prodl	equ	0xFF3
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postinc1	equ	0xFE6
  1275                           fsr1h	equ	0xFE2
  1276                           fsr1l	equ	0xFE1
  1277                           indf2	equ	0xFDF
  1278                           postinc2	equ	0xFDE
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283 ;; *************** function _SpeedCalcManage *****************
  1284 ;; Defined at:
  1285 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  HundredMeter    2    0[BANK0 ] unsigned short 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1299 ;;      Params:         0       0       0       0       0       0       0
  1300 ;;      Locals:         0       2       0       0       0       0       0
  1301 ;;      Temps:          2       0       0       0       0       0       0
  1302 ;;      Totals:         2       2       0       0       0       0       0
  1303 ;;Total ram usage:        4 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    5
  1306 ;; This function calls:
  1307 ;;		___lldiv
  1308 ;;		___lwdiv
  1309 ;;		___wmul
  1310 ;; This function is called by:
  1311 ;;		_ManageSpeedCalc
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text8
  1316  000DEA                     __ptext8:
  1317                           	opt stack 0
  1318  000DEA                     _SpeedCalcManage:
  1319                           	opt stack 22
  1320                           
  1321                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
  1322                           ;SpeedCalc.c: 67: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
  1323                           ;SpeedCalc.c: 68: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  1324                           
  1325                           ;incstack = 0
  1326  000DEA  C01D  F04F         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
  1327  000DEE  C01E  F050         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
  1328  000DF2  0E00               	movlw	0
  1329  000DF4  6E52               	movwf	___lwdiv@divisor+1,c
  1330  000DF6  0E64               	movlw	100
  1331  000DF8  6E51               	movwf	___lwdiv@divisor,c
  1332  000DFA  ECCE  F008         	call	___lwdiv	;wreg free
  1333  000DFE  C04F  F068         	movff	?___lwdiv,??_SpeedCalcManage
  1334  000E02  C050  F069         	movff	?___lwdiv+1,??_SpeedCalcManage+1
  1335  000E06  C029  F04F         	movff	_TimerOVFLcount,___wmul@multiplier
  1336  000E0A  6A50               	clrf	___wmul@multiplier+1,c
  1337  000E0C  0E02               	movlw	2
  1338  000E0E  6E52               	movwf	___wmul@multiplicand+1,c
  1339  000E10  0E8F               	movlw	143
  1340  000E12  6E51               	movwf	___wmul@multiplicand,c
  1341  000E14  EC48  F00A         	call	___wmul	;wreg free
  1342  000E18  504F               	movf	?___wmul,w,c
  1343  000E1A  2468               	addwf	??_SpeedCalcManage,w,c
  1344  000E1C  6E1F               	movwf	_LapTimeTenthMilli,c
  1345  000E1E  5050               	movf	?___wmul+1,w,c
  1346  000E20  2069               	addwfc	??_SpeedCalcManage+1,w,c
  1347  000E22  6E20               	movwf	_LapTimeTenthMilli+1,c
  1348                           
  1349                           ;SpeedCalc.c: 70: LapDistanceCounter += LapCounter;
  1350  000E24  502A               	movf	_LapCounter,w,c	;volatile
  1351  000E26  2621               	addwf	_LapDistanceCounter,f,c
  1352  000E28  0E00               	movlw	0
  1353  000E2A  2222               	addwfc	_LapDistanceCounter+1,f,c
  1354                           
  1355                           ;SpeedCalc.c: 72: LapCounter = (unsigned char)0;
  1356  000E2C  0E00               	movlw	0
  1357  000E2E  6E2A               	movwf	_LapCounter,c	;volatile
  1358                           
  1359                           ;SpeedCalc.c: 74: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1360                           ;SpeedCalc.c: 75: (unsigned long)CircumFactor);
  1361  000E30  0EA0               	movlw	160
  1362  000E32  6E5B               	movwf	___lldiv@dividend,c
  1363  000E34  0E86               	movlw	134
  1364  000E36  6E5C               	movwf	___lldiv@dividend+1,c
  1365  000E38  0E01               	movlw	1
  1366  000E3A  6E5D               	movwf	___lldiv@dividend+2,c
  1367  000E3C  0E00               	movlw	0
  1368  000E3E  6E5E               	movwf	___lldiv@dividend+3,c
  1369  000E40  C06A  F05F         	movff	_CircumFactor,___lldiv@divisor
  1370  000E44  C06B  F060         	movff	_CircumFactor+1,___lldiv@divisor+1
  1371  000E48  6A61               	clrf	___lldiv@divisor+2,c
  1372  000E4A  6A62               	clrf	___lldiv@divisor+3,c
  1373  000E4C  ECD3  F007         	call	___lldiv	;wreg free
  1374  000E50  C05B  F0B2         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1375  000E54  C05C  F0B3         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1376                           
  1377                           ;SpeedCalc.c: 77: if(LapDistanceCounter >= HundredMeterReference)
  1378  000E58  0100               	movlb	0	; () banked
  1379  000E5A  51B2               	movf	SpeedCalcManage@HundredMeterReference& (0+255),w,b
  1380  000E5C  5C21               	subwf	_LapDistanceCounter,w,c
  1381  000E5E  0100               	movlb	0	; () banked
  1382  000E60  51B3               	movf	(SpeedCalcManage@HundredMeterReference+1)& (0+255),w,b
  1383  000E62  5822               	subwfb	_LapDistanceCounter+1,w,c
  1384  000E64  A0D8               	btfss	status,0,c
  1385  000E66  0012               	return	
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;SpeedCalc.c: 78: {
  1389                           ;SpeedCalc.c: 79: DistTravelCntr ++;
  1390  000E68  0E01               	movlw	1
  1391  000E6A  2619               	addwf	_DistTravelCntr,f,c
  1392  000E6C  0E00               	movlw	0
  1393  000E6E  221A               	addwfc	_DistTravelCntr+1,f,c
  1394  000E70  221B               	addwfc	_DistTravelCntr+2,f,c
  1395  000E72  221C               	addwfc	_DistTravelCntr+3,f,c
  1396                           
  1397                           ;SpeedCalc.c: 80: LapDistanceCounter -= HundredMeterReference;
  1398  000E74  0100               	movlb	0	; () banked
  1399  000E76  51B2               	movf	SpeedCalcManage@HundredMeterReference& (0+255),w,b
  1400  000E78  5E21               	subwf	_LapDistanceCounter,f,c
  1401  000E7A  0100               	movlb	0	; () banked
  1402  000E7C  51B3               	movf	(SpeedCalcManage@HundredMeterReference+1)& (0+255),w,b
  1403  000E7E  5A22               	subwfb	_LapDistanceCounter+1,f,c
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ;SpeedCalc.c: 81: }
  1408  000E80  0012               	return	
  1409  000E82                     __end_of_SpeedCalcManage:
  1410                           	opt stack 0
  1411                           tosu	equ	0xFFF
  1412                           tosh	equ	0xFFE
  1413                           tosl	equ	0xFFD
  1414                           pclath	equ	0xFFA
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postinc1	equ	0xFE6
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           indf2	equ	0xFDF
  1427                           postinc2	equ	0xFDE
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _MangeKeys *****************
  1433 ;; Defined at:
  1434 ;;		line 29 in file "../../../../Common/Driver/Key/Key.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  KeyID           1    wreg     unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  KeyID           1   25[COMRAM] unsigned char 
  1439 ;;  HWIreading      1   24[COMRAM] unsigned char 
  1440 ;;  KeyState        1   23[COMRAM] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1450 ;;      Params:         0       0       0       0       0       0       0
  1451 ;;      Locals:         3       0       0       0       0       0       0
  1452 ;;      Temps:          2       0       0       0       0       0       0
  1453 ;;      Totals:         5       0       0       0       0       0       0
  1454 ;;Total ram usage:        5 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    5
  1457 ;; This function calls:
  1458 ;;		_HWI_DIGI_READ
  1459 ;; This function is called by:
  1460 ;;		_ManageDrivers
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text9
  1465  00063A                     __ptext9:
  1466                           	opt stack 0
  1467  00063A                     _MangeKeys:
  1468                           	opt stack 22
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;incstack = 0
  1472                           ;MangeKeys@KeyID stored from wreg
  1473  00063A  6E55               	movwf	MangeKeys@KeyID,c
  1474                           
  1475                           ;Key.c: 31: unsigned char HWIreading;
  1476                           ;Key.c: 32: unsigned char KeyState;
  1477                           ;Key.c: 34: KeyState = KeyInternalData[KeyID].KeyState & (unsigned char)0x7F;
  1478  00063C  5055               	movf	MangeKeys@KeyID,w,c
  1479  00063E  0D03               	mullw	3
  1480  000640  0E35               	movlw	low _KeyInternalData
  1481  000642  24F3               	addwf	prodl,w,c
  1482  000644  6ED9               	movwf	fsr2l,c
  1483  000646  0E00               	movlw	high _KeyInternalData
  1484  000648  20F4               	addwfc	prodh,w,c
  1485  00064A  6EDA               	movwf	fsr2h,c
  1486  00064C  50DF               	movf	indf2,w,c
  1487  00064E  0B7F               	andlw	127
  1488  000650  6E53               	movwf	MangeKeys@KeyState,c
  1489                           
  1490                           ;Key.c: 35: HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
  1491  000652  5055               	movf	MangeKeys@KeyID,w,c
  1492  000654  0D08               	mullw	8
  1493  000656  0E1E               	movlw	low _KeyArrayConfig
  1494  000658  24F3               	addwf	prodl,w,c
  1495  00065A  6EF6               	movwf	tblptrl,c
  1496  00065C  0E06               	movlw	high _KeyArrayConfig
  1497  00065E  20F4               	addwfc	prodh,w,c
  1498  000660  6EF7               	movwf	tblptrh,c
  1499  000662                     	if	0	;There are less than 3 active tblptr bytes
  1500  000662                     	endif
  1501  000662  0008               	tblrd		*
  1502  000664  50F5               	movf	tablat,w,c
  1503  000666  ECAD  F009         	call	_HWI_DIGI_READ
  1504  00066A  6E54               	movwf	MangeKeys@HWIreading,c
  1505                           
  1506                           ;Key.c: 37: switch(KeyState)
  1507  00066C  D1F2               	goto	l1455
  1508  00066E                     l1409:
  1509                           
  1510                           ;Key.c: 40: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1511  00066E  5055               	movf	MangeKeys@KeyID,w,c
  1512  000670  0D08               	mullw	8
  1513  000672  0E01               	movlw	1
  1514  000674  26F3               	addwf	prodl,f,c
  1515  000676  0E00               	movlw	0
  1516  000678  22F4               	addwfc	prodh,f,c
  1517  00067A  0E1E               	movlw	low _KeyArrayConfig
  1518  00067C  24F3               	addwf	prodl,w,c
  1519  00067E  6EF6               	movwf	tblptrl,c
  1520  000680  0E06               	movlw	high _KeyArrayConfig
  1521  000682  20F4               	addwfc	prodh,w,c
  1522  000684  6EF7               	movwf	tblptrh,c
  1523  000686                     	if	0	;There are less than 3 active tblptr bytes
  1524  000686                     	endif
  1525  000686  0008               	tblrd		*
  1526  000688  50F5               	movf	tablat,w,c
  1527  00068A  1854               	xorwf	MangeKeys@HWIreading,w,c
  1528  00068C  A4D8               	btfss	status,2,c
  1529  00068E  D059               	goto	l1419
  1530                           
  1531                           ;Key.c: 41: {
  1532                           ;Key.c: 42: KeyInternalData[KeyID].KeyCounter++;
  1533  000690  5055               	movf	MangeKeys@KeyID,w,c
  1534  000692  0D03               	mullw	3
  1535  000694  0E01               	movlw	1
  1536  000696  26F3               	addwf	prodl,f,c
  1537  000698  0E00               	movlw	0
  1538  00069A  22F4               	addwfc	prodh,f,c
  1539  00069C  0E35               	movlw	low _KeyInternalData
  1540  00069E  24F3               	addwf	prodl,w,c
  1541  0006A0  6ED9               	movwf	fsr2l,c
  1542  0006A2  0E00               	movlw	high _KeyInternalData
  1543  0006A4  20F4               	addwfc	prodh,w,c
  1544  0006A6  6EDA               	movwf	fsr2h,c
  1545  0006A8  2ADE               	incf	postinc2,f,c
  1546  0006AA  0E00               	movlw	0
  1547  0006AC  22DD               	addwfc	postdec2,f,c
  1548                           
  1549                           ;Key.c: 43: if(KeyArrayConfig[KeyID].ShortPress ==
  1550                           ;Key.c: 44: KeyInternalData[KeyID].KeyCounter)
  1551  0006AE  5055               	movf	MangeKeys@KeyID,w,c
  1552  0006B0  0D03               	mullw	3
  1553  0006B2  0E01               	movlw	1
  1554  0006B4  26F3               	addwf	prodl,f,c
  1555  0006B6  0E00               	movlw	0
  1556  0006B8  22F4               	addwfc	prodh,f,c
  1557  0006BA  0E35               	movlw	low _KeyInternalData
  1558  0006BC  24F3               	addwf	prodl,w,c
  1559  0006BE  6ED9               	movwf	fsr2l,c
  1560  0006C0  0E00               	movlw	high _KeyInternalData
  1561  0006C2  20F4               	addwfc	prodh,w,c
  1562  0006C4  6EDA               	movwf	fsr2h,c
  1563  0006C6  5055               	movf	MangeKeys@KeyID,w,c
  1564  0006C8  0D08               	mullw	8
  1565  0006CA  0E04               	movlw	4
  1566  0006CC  26F3               	addwf	prodl,f,c
  1567  0006CE  0E00               	movlw	0
  1568  0006D0  22F4               	addwfc	prodh,f,c
  1569  0006D2  0E1E               	movlw	low _KeyArrayConfig
  1570  0006D4  24F3               	addwf	prodl,w,c
  1571  0006D6  6EF6               	movwf	tblptrl,c
  1572  0006D8  0E06               	movlw	high _KeyArrayConfig
  1573  0006DA  20F4               	addwfc	prodh,w,c
  1574  0006DC  6EF7               	movwf	tblptrh,c
  1575  0006DE                     	if	0	;There are less than 3 active tblptr bytes
  1576  0006DE                     	endif
  1577  0006DE  50DE               	movf	postinc2,w,c
  1578  0006E0  0009               	tblrd		*+
  1579  0006E2  18F5               	xorwf	tablat,w,c
  1580  0006E4  E104               	bnz	u431
  1581  0006E6  50DE               	movf	postinc2,w,c
  1582  0006E8  0009               	tblrd		*+
  1583  0006EA  18F5               	xorwf	tablat,w,c
  1584  0006EC  A4D8               	btfss	status,2,c
  1585  0006EE                     u431:
  1586  0006EE  0012               	return	
  1587                           
  1588                           ;Key.c: 45: {
  1589                           ;Key.c: 46: KeyInternalData[KeyID].KeyState = (unsigned char)0x81;
  1590  0006F0  5055               	movf	MangeKeys@KeyID,w,c
  1591  0006F2  0D03               	mullw	3
  1592  0006F4  0E35               	movlw	low _KeyInternalData
  1593  0006F6  24F3               	addwf	prodl,w,c
  1594  0006F8  6ED9               	movwf	fsr2l,c
  1595  0006FA  0E00               	movlw	high _KeyInternalData
  1596  0006FC  20F4               	addwfc	prodh,w,c
  1597  0006FE  6EDA               	movwf	fsr2h,c
  1598  000700  0E81               	movlw	129
  1599  000702  6EDF               	movwf	indf2,c
  1600                           
  1601                           ;Key.c: 47: KeyInternalData[KeyID].KeyCounter =
  1602                           ;Key.c: 48: KeyArrayConfig[KeyID].ReleaseTicks;
  1603  000704  5055               	movf	MangeKeys@KeyID,w,c
  1604  000706  0D08               	mullw	8
  1605  000708  0E02               	movlw	2
  1606  00070A  26F3               	addwf	prodl,f,c
  1607  00070C  0E00               	movlw	0
  1608  00070E  22F4               	addwfc	prodh,f,c
  1609  000710  0E1E               	movlw	low _KeyArrayConfig
  1610  000712  24F3               	addwf	prodl,w,c
  1611  000714  6EF6               	movwf	tblptrl,c
  1612  000716  0E06               	movlw	high _KeyArrayConfig
  1613  000718  20F4               	addwfc	prodh,w,c
  1614  00071A  6EF7               	movwf	tblptrh,c
  1615  00071C                     	if	0	;There are less than 3 active tblptr bytes
  1616  00071C                     	endif
  1617  00071C  5055               	movf	MangeKeys@KeyID,w,c
  1618  00071E  0D03               	mullw	3
  1619  000720  0E01               	movlw	1
  1620  000722  26F3               	addwf	prodl,f,c
  1621  000724  0E00               	movlw	0
  1622  000726  22F4               	addwfc	prodh,f,c
  1623  000728  0E35               	movlw	low _KeyInternalData
  1624  00072A  24F3               	addwf	prodl,w,c
  1625  00072C  6ED9               	movwf	fsr2l,c
  1626  00072E  0E00               	movlw	high _KeyInternalData
  1627  000730  20F4               	addwfc	prodh,w,c
  1628  000732  6EDA               	movwf	fsr2h,c
  1629  000734  0009               	tblrd		*+
  1630  000736  CFF5 FFDE          	movff	tablat,postinc2
  1631  00073A  0008               	tblrd		*
  1632  00073C  CFF5 FFDD          	movff	tablat,postdec2
  1633                           
  1634                           ;Key.c: 49: }
  1635                           ;Key.c: 50: }
  1636  000740  0012               	return	
  1637  000742                     l1419:
  1638                           
  1639                           ;Key.c: 51: else
  1640                           ;Key.c: 52: {
  1641                           ;Key.c: 53: KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
  1642  000742  5055               	movf	MangeKeys@KeyID,w,c
  1643  000744  0D03               	mullw	3
  1644  000746  0E01               	movlw	1
  1645  000748  26F3               	addwf	prodl,f,c
  1646  00074A  0E00               	movlw	0
  1647  00074C  22F4               	addwfc	prodh,f,c
  1648  00074E  0E35               	movlw	low _KeyInternalData
  1649  000750  24F3               	addwf	prodl,w,c
  1650  000752  6ED9               	movwf	fsr2l,c
  1651  000754  0E00               	movlw	high _KeyInternalData
  1652  000756  20F4               	addwfc	prodh,w,c
  1653  000758  6EDA               	movwf	fsr2h,c
  1654  00075A  0E00               	movlw	0
  1655  00075C  6EDE               	movwf	postinc2,c
  1656  00075E  0E00               	movlw	0
  1657  000760  6EDD               	movwf	postdec2,c
  1658                           
  1659                           ;Key.c: 54: }
  1660                           ;Key.c: 55: break;
  1661  000762  0012               	return	
  1662  000764                     l1421:
  1663                           
  1664                           ;Key.c: 57: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1665  000764  5055               	movf	MangeKeys@KeyID,w,c
  1666  000766  0D08               	mullw	8
  1667  000768  0E01               	movlw	1
  1668  00076A  26F3               	addwf	prodl,f,c
  1669  00076C  0E00               	movlw	0
  1670  00076E  22F4               	addwfc	prodh,f,c
  1671  000770  0E1E               	movlw	low _KeyArrayConfig
  1672  000772  24F3               	addwf	prodl,w,c
  1673  000774  6EF6               	movwf	tblptrl,c
  1674  000776  0E06               	movlw	high _KeyArrayConfig
  1675  000778  20F4               	addwfc	prodh,w,c
  1676  00077A  6EF7               	movwf	tblptrh,c
  1677  00077C                     	if	0	;There are less than 3 active tblptr bytes
  1678  00077C                     	endif
  1679  00077C  0008               	tblrd		*
  1680  00077E  50F5               	movf	tablat,w,c
  1681  000780  1854               	xorwf	MangeKeys@HWIreading,w,c
  1682  000782  A4D8               	btfss	status,2,c
  1683  000784  D098               	goto	l1435
  1684                           
  1685                           ;Key.c: 58: {
  1686                           ;Key.c: 59: if ( KeyInternalData[KeyID].KeyCounter >=
  1687                           ;Key.c: 60: KeyArrayConfig[KeyID].ReleaseTicks)
  1688  000786  5055               	movf	MangeKeys@KeyID,w,c
  1689  000788  0D08               	mullw	8
  1690  00078A  0E02               	movlw	2
  1691  00078C  26F3               	addwf	prodl,f,c
  1692  00078E  0E00               	movlw	0
  1693  000790  22F4               	addwfc	prodh,f,c
  1694  000792  0E1E               	movlw	low _KeyArrayConfig
  1695  000794  24F3               	addwf	prodl,w,c
  1696  000796  6EF6               	movwf	tblptrl,c
  1697  000798  0E06               	movlw	high _KeyArrayConfig
  1698  00079A  20F4               	addwfc	prodh,w,c
  1699  00079C  6EF7               	movwf	tblptrh,c
  1700  00079E                     	if	0	;There are less than 3 active tblptr bytes
  1701  00079E                     	endif
  1702  00079E  5055               	movf	MangeKeys@KeyID,w,c
  1703  0007A0  0D03               	mullw	3
  1704  0007A2  0E01               	movlw	1
  1705  0007A4  26F3               	addwf	prodl,f,c
  1706  0007A6  0E00               	movlw	0
  1707  0007A8  22F4               	addwfc	prodh,f,c
  1708  0007AA  0E35               	movlw	low _KeyInternalData
  1709  0007AC  24F3               	addwf	prodl,w,c
  1710  0007AE  6ED9               	movwf	fsr2l,c
  1711  0007B0  0E00               	movlw	high _KeyInternalData
  1712  0007B2  20F4               	addwfc	prodh,w,c
  1713  0007B4  6EDA               	movwf	fsr2h,c
  1714  0007B6  0009               	tblrd		*+
  1715  0007B8  50F5               	movf	tablat,w,c
  1716  0007BA  5CDE               	subwf	postinc2,w,c
  1717  0007BC  0009               	tblrd		*+
  1718  0007BE  50F5               	movf	tablat,w,c
  1719  0007C0  58DE               	subwfb	postinc2,w,c
  1720  0007C2  A0D8               	btfss	status,0,c
  1721  0007C4  D059               	goto	l1433
  1722                           
  1723                           ;Key.c: 61: {
  1724                           ;Key.c: 62: KeyInternalData[KeyID].KeyCounter++;
  1725  0007C6  5055               	movf	MangeKeys@KeyID,w,c
  1726  0007C8  0D03               	mullw	3
  1727  0007CA  0E01               	movlw	1
  1728  0007CC  26F3               	addwf	prodl,f,c
  1729  0007CE  0E00               	movlw	0
  1730  0007D0  22F4               	addwfc	prodh,f,c
  1731  0007D2  0E35               	movlw	low _KeyInternalData
  1732  0007D4  24F3               	addwf	prodl,w,c
  1733  0007D6  6ED9               	movwf	fsr2l,c
  1734  0007D8  0E00               	movlw	high _KeyInternalData
  1735  0007DA  20F4               	addwfc	prodh,w,c
  1736  0007DC  6EDA               	movwf	fsr2h,c
  1737  0007DE  2ADE               	incf	postinc2,f,c
  1738  0007E0  0E00               	movlw	0
  1739  0007E2  22DD               	addwfc	postdec2,f,c
  1740                           
  1741                           ;Key.c: 63: if(KeyArrayConfig[KeyID].LongPress ==
  1742                           ;Key.c: 64: KeyInternalData[KeyID].KeyCounter)
  1743  0007E4  5055               	movf	MangeKeys@KeyID,w,c
  1744  0007E6  0D03               	mullw	3
  1745  0007E8  0E01               	movlw	1
  1746  0007EA  26F3               	addwf	prodl,f,c
  1747  0007EC  0E00               	movlw	0
  1748  0007EE  22F4               	addwfc	prodh,f,c
  1749  0007F0  0E35               	movlw	low _KeyInternalData
  1750  0007F2  24F3               	addwf	prodl,w,c
  1751  0007F4  6ED9               	movwf	fsr2l,c
  1752  0007F6  0E00               	movlw	high _KeyInternalData
  1753  0007F8  20F4               	addwfc	prodh,w,c
  1754  0007FA  6EDA               	movwf	fsr2h,c
  1755  0007FC  5055               	movf	MangeKeys@KeyID,w,c
  1756  0007FE  0D08               	mullw	8
  1757  000800  0E06               	movlw	6
  1758  000802  26F3               	addwf	prodl,f,c
  1759  000804  0E00               	movlw	0
  1760  000806  22F4               	addwfc	prodh,f,c
  1761  000808  0E1E               	movlw	low _KeyArrayConfig
  1762  00080A  24F3               	addwf	prodl,w,c
  1763  00080C  6EF6               	movwf	tblptrl,c
  1764  00080E  0E06               	movlw	high _KeyArrayConfig
  1765  000810  20F4               	addwfc	prodh,w,c
  1766  000812  6EF7               	movwf	tblptrh,c
  1767  000814                     	if	0	;There are less than 3 active tblptr bytes
  1768  000814                     	endif
  1769  000814  50DE               	movf	postinc2,w,c
  1770  000816  0009               	tblrd		*+
  1771  000818  18F5               	xorwf	tablat,w,c
  1772  00081A  E104               	bnz	u461
  1773  00081C  50DE               	movf	postinc2,w,c
  1774  00081E  0009               	tblrd		*+
  1775  000820  18F5               	xorwf	tablat,w,c
  1776  000822  A4D8               	btfss	status,2,c
  1777  000824                     u461:
  1778  000824  0012               	return	
  1779                           
  1780                           ;Key.c: 65: {
  1781                           ;Key.c: 66: KeyInternalData[KeyID].KeyState = (unsigned char)0x82;
  1782  000826  5055               	movf	MangeKeys@KeyID,w,c
  1783  000828  0D03               	mullw	3
  1784  00082A  0E35               	movlw	low _KeyInternalData
  1785  00082C  24F3               	addwf	prodl,w,c
  1786  00082E  6ED9               	movwf	fsr2l,c
  1787  000830  0E00               	movlw	high _KeyInternalData
  1788  000832  20F4               	addwfc	prodh,w,c
  1789  000834  6EDA               	movwf	fsr2h,c
  1790  000836  0E82               	movlw	130
  1791  000838  6EDF               	movwf	indf2,c
  1792                           
  1793                           ;Key.c: 67: KeyInternalData[KeyID].KeyCounter =
  1794                           ;Key.c: 68: KeyArrayConfig[KeyID].ReleaseTicks;
  1795  00083A  5055               	movf	MangeKeys@KeyID,w,c
  1796  00083C  0D08               	mullw	8
  1797  00083E  0E02               	movlw	2
  1798  000840  26F3               	addwf	prodl,f,c
  1799  000842  0E00               	movlw	0
  1800  000844  22F4               	addwfc	prodh,f,c
  1801  000846  0E1E               	movlw	low _KeyArrayConfig
  1802  000848  24F3               	addwf	prodl,w,c
  1803  00084A  6EF6               	movwf	tblptrl,c
  1804  00084C  0E06               	movlw	high _KeyArrayConfig
  1805  00084E  20F4               	addwfc	prodh,w,c
  1806  000850  6EF7               	movwf	tblptrh,c
  1807  000852                     	if	0	;There are less than 3 active tblptr bytes
  1808  000852                     	endif
  1809  000852  5055               	movf	MangeKeys@KeyID,w,c
  1810  000854  0D03               	mullw	3
  1811  000856  0E01               	movlw	1
  1812  000858  26F3               	addwf	prodl,f,c
  1813  00085A  0E00               	movlw	0
  1814  00085C  22F4               	addwfc	prodh,f,c
  1815  00085E  0E35               	movlw	low _KeyInternalData
  1816  000860  24F3               	addwf	prodl,w,c
  1817  000862  6ED9               	movwf	fsr2l,c
  1818  000864  0E00               	movlw	high _KeyInternalData
  1819  000866  20F4               	addwfc	prodh,w,c
  1820  000868  6EDA               	movwf	fsr2h,c
  1821  00086A  0009               	tblrd		*+
  1822  00086C  CFF5 FFDE          	movff	tablat,postinc2
  1823  000870  0008               	tblrd		*
  1824  000872  CFF5 FFDD          	movff	tablat,postdec2
  1825                           
  1826                           ;Key.c: 69: }
  1827                           ;Key.c: 70: }
  1828  000876  0012               	return	
  1829  000878                     l1433:
  1830                           
  1831                           ;Key.c: 71: else
  1832                           ;Key.c: 72: {
  1833                           ;Key.c: 73: KeyInternalData[KeyID].KeyCounter =
  1834                           ;Key.c: 74: KeyArrayConfig[KeyID].ReleaseTicks;
  1835  000878  5055               	movf	MangeKeys@KeyID,w,c
  1836  00087A  0D08               	mullw	8
  1837  00087C  0E02               	movlw	2
  1838  00087E  26F3               	addwf	prodl,f,c
  1839  000880  0E00               	movlw	0
  1840  000882  22F4               	addwfc	prodh,f,c
  1841  000884  0E1E               	movlw	low _KeyArrayConfig
  1842  000886  24F3               	addwf	prodl,w,c
  1843  000888  6EF6               	movwf	tblptrl,c
  1844  00088A  0E06               	movlw	high _KeyArrayConfig
  1845  00088C  20F4               	addwfc	prodh,w,c
  1846  00088E  6EF7               	movwf	tblptrh,c
  1847  000890                     	if	0	;There are less than 3 active tblptr bytes
  1848  000890                     	endif
  1849  000890  5055               	movf	MangeKeys@KeyID,w,c
  1850  000892  0D03               	mullw	3
  1851  000894  0E01               	movlw	1
  1852  000896  26F3               	addwf	prodl,f,c
  1853  000898  0E00               	movlw	0
  1854  00089A  22F4               	addwfc	prodh,f,c
  1855  00089C  0E35               	movlw	low _KeyInternalData
  1856  00089E  24F3               	addwf	prodl,w,c
  1857  0008A0  6ED9               	movwf	fsr2l,c
  1858  0008A2  0E00               	movlw	high _KeyInternalData
  1859  0008A4  20F4               	addwfc	prodh,w,c
  1860  0008A6  6EDA               	movwf	fsr2h,c
  1861  0008A8  0009               	tblrd		*+
  1862  0008AA  CFF5 FFDE          	movff	tablat,postinc2
  1863  0008AE  0008               	tblrd		*
  1864  0008B0  CFF5 FFDD          	movff	tablat,postdec2
  1865                           
  1866                           ;Key.c: 75: }
  1867                           ;Key.c: 76: }
  1868  0008B4  0012               	return	
  1869  0008B6                     l1435:
  1870                           
  1871                           ;Key.c: 77: else
  1872                           ;Key.c: 78: {
  1873                           ;Key.c: 79: if ( KeyInternalData[KeyID].KeyCounter >
  1874                           ;Key.c: 80: KeyArrayConfig[KeyID].ReleaseTicks)
  1875  0008B6  5055               	movf	MangeKeys@KeyID,w,c
  1876  0008B8  0D03               	mullw	3
  1877  0008BA  0E01               	movlw	1
  1878  0008BC  26F3               	addwf	prodl,f,c
  1879  0008BE  0E00               	movlw	0
  1880  0008C0  22F4               	addwfc	prodh,f,c
  1881  0008C2  0E35               	movlw	low _KeyInternalData
  1882  0008C4  24F3               	addwf	prodl,w,c
  1883  0008C6  6ED9               	movwf	fsr2l,c
  1884  0008C8  0E00               	movlw	high _KeyInternalData
  1885  0008CA  20F4               	addwfc	prodh,w,c
  1886  0008CC  6EDA               	movwf	fsr2h,c
  1887  0008CE  5055               	movf	MangeKeys@KeyID,w,c
  1888  0008D0  0D08               	mullw	8
  1889  0008D2  0E02               	movlw	2
  1890  0008D4  26F3               	addwf	prodl,f,c
  1891  0008D6  0E00               	movlw	0
  1892  0008D8  22F4               	addwfc	prodh,f,c
  1893  0008DA  0E1E               	movlw	low _KeyArrayConfig
  1894  0008DC  24F3               	addwf	prodl,w,c
  1895  0008DE  6EF6               	movwf	tblptrl,c
  1896  0008E0  0E06               	movlw	high _KeyArrayConfig
  1897  0008E2  20F4               	addwfc	prodh,w,c
  1898  0008E4  6EF7               	movwf	tblptrh,c
  1899  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  1900  0008E6                     	endif
  1901  0008E6  50DE               	movf	postinc2,w,c
  1902  0008E8  0009               	tblrd		*+
  1903  0008EA  5CF5               	subwf	tablat,w,c
  1904  0008EC  50DE               	movf	postinc2,w,c
  1905  0008EE  0009               	tblrd		*+
  1906  0008F0  58F5               	subwfb	tablat,w,c
  1907  0008F2  B0D8               	btfsc	status,0,c
  1908  0008F4  D01F               	goto	l1439
  1909                           
  1910                           ;Key.c: 81: {
  1911                           ;Key.c: 82: KeyInternalData[KeyID].KeyCounter =
  1912                           ;Key.c: 83: KeyArrayConfig[KeyID].ReleaseTicks;
  1913  0008F6  5055               	movf	MangeKeys@KeyID,w,c
  1914  0008F8  0D08               	mullw	8
  1915  0008FA  0E02               	movlw	2
  1916  0008FC  26F3               	addwf	prodl,f,c
  1917  0008FE  0E00               	movlw	0
  1918  000900  22F4               	addwfc	prodh,f,c
  1919  000902  0E1E               	movlw	low _KeyArrayConfig
  1920  000904  24F3               	addwf	prodl,w,c
  1921  000906  6EF6               	movwf	tblptrl,c
  1922  000908  0E06               	movlw	high _KeyArrayConfig
  1923  00090A  20F4               	addwfc	prodh,w,c
  1924  00090C  6EF7               	movwf	tblptrh,c
  1925  00090E                     	if	0	;There are less than 3 active tblptr bytes
  1926  00090E                     	endif
  1927  00090E  5055               	movf	MangeKeys@KeyID,w,c
  1928  000910  0D03               	mullw	3
  1929  000912  0E01               	movlw	1
  1930  000914  26F3               	addwf	prodl,f,c
  1931  000916  0E00               	movlw	0
  1932  000918  22F4               	addwfc	prodh,f,c
  1933  00091A  0E35               	movlw	low _KeyInternalData
  1934  00091C  24F3               	addwf	prodl,w,c
  1935  00091E  6ED9               	movwf	fsr2l,c
  1936  000920  0E00               	movlw	high _KeyInternalData
  1937  000922  20F4               	addwfc	prodh,w,c
  1938  000924  6EDA               	movwf	fsr2h,c
  1939  000926  0009               	tblrd		*+
  1940  000928  CFF5 FFDE          	movff	tablat,postinc2
  1941  00092C  0008               	tblrd		*
  1942  00092E  CFF5 FFDD          	movff	tablat,postdec2
  1943                           
  1944                           ;Key.c: 84: }
  1945  000932  0012               	return	
  1946  000934                     l1439:
  1947                           
  1948                           ;Key.c: 85: else
  1949                           ;Key.c: 86: {
  1950                           ;Key.c: 87: KeyInternalData[KeyID].KeyCounter--;
  1951  000934  5055               	movf	MangeKeys@KeyID,w,c
  1952  000936  0D03               	mullw	3
  1953  000938  0E01               	movlw	1
  1954  00093A  26F3               	addwf	prodl,f,c
  1955  00093C  0E00               	movlw	0
  1956  00093E  22F4               	addwfc	prodh,f,c
  1957  000940  0E35               	movlw	low _KeyInternalData
  1958  000942  24F3               	addwf	prodl,w,c
  1959  000944  6ED9               	movwf	fsr2l,c
  1960  000946  0E00               	movlw	high _KeyInternalData
  1961  000948  20F4               	addwfc	prodh,w,c
  1962  00094A  6EDA               	movwf	fsr2h,c
  1963  00094C  06DE               	decf	postinc2,f,c
  1964  00094E  0E00               	movlw	0
  1965  000950  5ADD               	subwfb	postdec2,f,c
  1966                           
  1967                           ;Key.c: 88: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  1968  000952  5055               	movf	MangeKeys@KeyID,w,c
  1969  000954  0D03               	mullw	3
  1970  000956  0E01               	movlw	1
  1971  000958  26F3               	addwf	prodl,f,c
  1972  00095A  0E00               	movlw	0
  1973  00095C  22F4               	addwfc	prodh,f,c
  1974  00095E  0E35               	movlw	low _KeyInternalData
  1975  000960  24F3               	addwf	prodl,w,c
  1976  000962  6ED9               	movwf	fsr2l,c
  1977  000964  0E00               	movlw	high _KeyInternalData
  1978  000966  20F4               	addwfc	prodh,w,c
  1979  000968  6EDA               	movwf	fsr2h,c
  1980  00096A  50DE               	movf	postinc2,w,c
  1981  00096C  10DE               	iorwf	postinc2,w,c
  1982  00096E  A4D8               	btfss	status,2,c
  1983  000970  0012               	return	
  1984                           
  1985                           ;Key.c: 89: {
  1986                           ;Key.c: 90: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  1987  000972  5055               	movf	MangeKeys@KeyID,w,c
  1988  000974  0D03               	mullw	3
  1989  000976  0E35               	movlw	low _KeyInternalData
  1990  000978  24F3               	addwf	prodl,w,c
  1991  00097A  6ED9               	movwf	fsr2l,c
  1992  00097C  0E00               	movlw	high _KeyInternalData
  1993  00097E  20F4               	addwfc	prodh,w,c
  1994  000980  6EDA               	movwf	fsr2h,c
  1995  000982  0E80               	movlw	128
  1996  000984  6EDF               	movwf	indf2,c
  1997                           
  1998                           ;Key.c: 91: }
  1999                           ;Key.c: 92: }
  2000                           ;Key.c: 93: }
  2001                           ;Key.c: 94: break;
  2002  000986  0012               	return	
  2003  000988                     l1443:
  2004                           
  2005                           ;Key.c: 96: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  2006  000988  5055               	movf	MangeKeys@KeyID,w,c
  2007  00098A  0D08               	mullw	8
  2008  00098C  0E01               	movlw	1
  2009  00098E  26F3               	addwf	prodl,f,c
  2010  000990  0E00               	movlw	0
  2011  000992  22F4               	addwfc	prodh,f,c
  2012  000994  0E1E               	movlw	low _KeyArrayConfig
  2013  000996  24F3               	addwf	prodl,w,c
  2014  000998  6EF6               	movwf	tblptrl,c
  2015  00099A  0E06               	movlw	high _KeyArrayConfig
  2016  00099C  20F4               	addwfc	prodh,w,c
  2017  00099E  6EF7               	movwf	tblptrh,c
  2018  0009A0                     	if	0	;There are less than 3 active tblptr bytes
  2019  0009A0                     	endif
  2020  0009A0  0008               	tblrd		*
  2021  0009A2  50F5               	movf	tablat,w,c
  2022  0009A4  1854               	xorwf	MangeKeys@HWIreading,w,c
  2023  0009A6  A4D8               	btfss	status,2,c
  2024  0009A8  D01F               	goto	l1447
  2025                           
  2026                           ;Key.c: 97: {
  2027                           ;Key.c: 98: KeyInternalData[KeyID].KeyCounter =
  2028                           ;Key.c: 99: KeyArrayConfig[KeyID].ReleaseTicks;
  2029  0009AA  5055               	movf	MangeKeys@KeyID,w,c
  2030  0009AC  0D08               	mullw	8
  2031  0009AE  0E02               	movlw	2
  2032  0009B0  26F3               	addwf	prodl,f,c
  2033  0009B2  0E00               	movlw	0
  2034  0009B4  22F4               	addwfc	prodh,f,c
  2035  0009B6  0E1E               	movlw	low _KeyArrayConfig
  2036  0009B8  24F3               	addwf	prodl,w,c
  2037  0009BA  6EF6               	movwf	tblptrl,c
  2038  0009BC  0E06               	movlw	high _KeyArrayConfig
  2039  0009BE  20F4               	addwfc	prodh,w,c
  2040  0009C0  6EF7               	movwf	tblptrh,c
  2041  0009C2                     	if	0	;There are less than 3 active tblptr bytes
  2042  0009C2                     	endif
  2043  0009C2  5055               	movf	MangeKeys@KeyID,w,c
  2044  0009C4  0D03               	mullw	3
  2045  0009C6  0E01               	movlw	1
  2046  0009C8  26F3               	addwf	prodl,f,c
  2047  0009CA  0E00               	movlw	0
  2048  0009CC  22F4               	addwfc	prodh,f,c
  2049  0009CE  0E35               	movlw	low _KeyInternalData
  2050  0009D0  24F3               	addwf	prodl,w,c
  2051  0009D2  6ED9               	movwf	fsr2l,c
  2052  0009D4  0E00               	movlw	high _KeyInternalData
  2053  0009D6  20F4               	addwfc	prodh,w,c
  2054  0009D8  6EDA               	movwf	fsr2h,c
  2055  0009DA  0009               	tblrd		*+
  2056  0009DC  CFF5 FFDE          	movff	tablat,postinc2
  2057  0009E0  0008               	tblrd		*
  2058  0009E2  CFF5 FFDD          	movff	tablat,postdec2
  2059                           
  2060                           ;Key.c: 100: }
  2061  0009E6  0012               	return	
  2062  0009E8                     l1447:
  2063                           
  2064                           ;Key.c: 101: else
  2065                           ;Key.c: 102: {
  2066                           ;Key.c: 103: KeyInternalData[KeyID].KeyCounter--;
  2067  0009E8  5055               	movf	MangeKeys@KeyID,w,c
  2068  0009EA  0D03               	mullw	3
  2069  0009EC  0E01               	movlw	1
  2070  0009EE  26F3               	addwf	prodl,f,c
  2071  0009F0  0E00               	movlw	0
  2072  0009F2  22F4               	addwfc	prodh,f,c
  2073  0009F4  0E35               	movlw	low _KeyInternalData
  2074  0009F6  24F3               	addwf	prodl,w,c
  2075  0009F8  6ED9               	movwf	fsr2l,c
  2076  0009FA  0E00               	movlw	high _KeyInternalData
  2077  0009FC  20F4               	addwfc	prodh,w,c
  2078  0009FE  6EDA               	movwf	fsr2h,c
  2079  000A00  06DE               	decf	postinc2,f,c
  2080  000A02  0E00               	movlw	0
  2081  000A04  5ADD               	subwfb	postdec2,f,c
  2082                           
  2083                           ;Key.c: 104: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2084  000A06  5055               	movf	MangeKeys@KeyID,w,c
  2085  000A08  0D03               	mullw	3
  2086  000A0A  0E01               	movlw	1
  2087  000A0C  26F3               	addwf	prodl,f,c
  2088  000A0E  0E00               	movlw	0
  2089  000A10  22F4               	addwfc	prodh,f,c
  2090  000A12  0E35               	movlw	low _KeyInternalData
  2091  000A14  24F3               	addwf	prodl,w,c
  2092  000A16  6ED9               	movwf	fsr2l,c
  2093  000A18  0E00               	movlw	high _KeyInternalData
  2094  000A1A  20F4               	addwfc	prodh,w,c
  2095  000A1C  6EDA               	movwf	fsr2h,c
  2096  000A1E  50DE               	movf	postinc2,w,c
  2097  000A20  10DE               	iorwf	postinc2,w,c
  2098  000A22  A4D8               	btfss	status,2,c
  2099  000A24  0012               	return	
  2100                           
  2101                           ;Key.c: 105: {
  2102                           ;Key.c: 106: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  2103  000A26  5055               	movf	MangeKeys@KeyID,w,c
  2104  000A28  0D03               	mullw	3
  2105  000A2A  0E35               	movlw	low _KeyInternalData
  2106  000A2C  24F3               	addwf	prodl,w,c
  2107  000A2E  6ED9               	movwf	fsr2l,c
  2108  000A30  0E00               	movlw	high _KeyInternalData
  2109  000A32  20F4               	addwfc	prodh,w,c
  2110  000A34  6EDA               	movwf	fsr2h,c
  2111  000A36  0E80               	movlw	128
  2112  000A38  6EDF               	movwf	indf2,c
  2113                           
  2114                           ;Key.c: 107: }
  2115                           ;Key.c: 108: }
  2116                           ;Key.c: 109: break;
  2117  000A3A  0012               	return	
  2118  000A3C                     l1451:
  2119                           
  2120                           ;Key.c: 111: KeyInternalData[KeyID].KeyState = (unsigned char)0x00;
  2121  000A3C  5055               	movf	MangeKeys@KeyID,w,c
  2122  000A3E  0D03               	mullw	3
  2123  000A40  0E35               	movlw	low _KeyInternalData
  2124  000A42  24F3               	addwf	prodl,w,c
  2125  000A44  6ED9               	movwf	fsr2l,c
  2126  000A46  0E00               	movlw	high _KeyInternalData
  2127  000A48  20F4               	addwfc	prodh,w,c
  2128  000A4A  6EDA               	movwf	fsr2h,c
  2129  000A4C  0E00               	movlw	0
  2130  000A4E  6EDF               	movwf	indf2,c
  2131                           
  2132                           ;Key.c: 113: }
  2133                           
  2134                           ;Key.c: 112: break;
  2135  000A50  0012               	return	
  2136  000A52                     l1455:
  2137  000A52  5053               	movf	MangeKeys@KeyState,w,c
  2138                           
  2139                           ; Switch size 1, requested type "space"
  2140                           ; Number of cases is 3, Range of values is 0 to 2
  2141                           ; switch strategies available:
  2142                           ; Name         Instructions Cycles
  2143                           ; simple_byte           10     6 (average)
  2144                           ;	Chosen strategy is simple_byte
  2145  000A54  0A00               	xorlw	0	; case 0
  2146  000A56  B4D8               	btfsc	status,2,c
  2147  000A58  D60A               	goto	l1409
  2148  000A5A  0A01               	xorlw	1	; case 1
  2149  000A5C  B4D8               	btfsc	status,2,c
  2150  000A5E  D682               	goto	l1421
  2151  000A60  0A03               	xorlw	3	; case 2
  2152  000A62  B4D8               	btfsc	status,2,c
  2153  000A64  D791               	goto	l1443
  2154  000A66  D7EA               	goto	l1451
  2155  000A68                     __end_of_MangeKeys:
  2156                           	opt stack 0
  2157                           tosu	equ	0xFFF
  2158                           tosh	equ	0xFFE
  2159                           tosl	equ	0xFFD
  2160                           pclath	equ	0xFFA
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postinc1	equ	0xFE6
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _HWI_DIGI_READ *****************
  2180 ;; Defined at:
  2181 ;;		line 91 in file "../../HWIsource/HWI_DIGITAL.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  pin             1    wreg     unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  pin             1   19[COMRAM] unsigned char 
  2186 ;;  HWIread         1   20[COMRAM] unsigned char 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      unsigned char 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2196 ;;      Params:         0       0       0       0       0       0       0
  2197 ;;      Locals:         2       0       0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0
  2199 ;;      Totals:         2       0       0       0       0       0       0
  2200 ;;Total ram usage:        2 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    4
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_MangeKeys
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text10
  2211  00135A                     __ptext10:
  2212                           	opt stack 0
  2213  00135A                     _HWI_DIGI_READ:
  2214                           	opt stack 22
  2215                           
  2216                           ;incstack = 0
  2217                           ;HWI_DIGI_READ@pin stored from wreg
  2218  00135A  6E4F               	movwf	HWI_DIGI_READ@pin,c
  2219                           
  2220                           ;HWI_DIGITAL.c: 93: unsigned char HWIread;
  2221                           ;HWI_DIGITAL.c: 95: switch (pin)
  2222  00135C  D00B               	goto	l1313
  2223  00135E                     l378:
  2224                           
  2225                           ;HWI_DIGITAL.c: 98: HWIread = PORTBbits.RB2;
  2226  00135E  0E00               	movlw	0
  2227  001360  B481               	btfsc	3969,2,c	;volatile
  2228  001362  0E01               	movlw	1
  2229  001364  D005               	goto	L1
  2230  001366                     l380:
  2231                           
  2232                           ;HWI_DIGITAL.c: 101: HWIread = PORTBbits.RB3;
  2233  001366  0E00               	movlw	0
  2234  001368  B681               	btfsc	3969,3,c	;volatile
  2235  00136A  0E01               	movlw	1
  2236  00136C  D001               	goto	L1
  2237  00136E                     l1309:
  2238                           
  2239                           ;HWI_DIGITAL.c: 104: HWIread = (unsigned char)0;
  2240  00136E  0E00               	movlw	0
  2241  001370                     L1:
  2242  001370  6E50               	movwf	HWI_DIGI_READ@HWIread,c
  2243                           
  2244                           ;HWI_DIGITAL.c: 106: }
  2245                           
  2246                           ;HWI_DIGITAL.c: 105: break;
  2247  001372  D008               	goto	l379
  2248  001374                     l1313:
  2249  001374  504F               	movf	HWI_DIGI_READ@pin,w,c
  2250                           
  2251                           ; Switch size 1, requested type "space"
  2252                           ; Number of cases is 2, Range of values is 15 to 16
  2253                           ; switch strategies available:
  2254                           ; Name         Instructions Cycles
  2255                           ; simple_byte            7     4 (average)
  2256                           ;	Chosen strategy is simple_byte
  2257  001376  0A0F               	xorlw	15	; case 15
  2258  001378  B4D8               	btfsc	status,2,c
  2259  00137A  D7F1               	goto	l378
  2260  00137C  0A1F               	xorlw	31	; case 16
  2261  00137E  B4D8               	btfsc	status,2,c
  2262  001380  D7F2               	goto	l380
  2263  001382  D7F5               	goto	l1309
  2264  001384                     l379:
  2265                           
  2266                           ;HWI_DIGITAL.c: 107: return HWIread;
  2267  001384  5050               	movf	HWI_DIGI_READ@HWIread,w,c
  2268  001386  0012               	return		;funcret
  2269  001388                     __end_of_HWI_DIGI_READ:
  2270                           	opt stack 0
  2271                           tosu	equ	0xFFF
  2272                           tosh	equ	0xFFE
  2273                           tosl	equ	0xFFD
  2274                           pclath	equ	0xFFA
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postinc1	equ	0xFE6
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           indf2	equ	0xFDF
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _EepromManage *****************
  2294 ;; Defined at:
  2295 ;;		line 71 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  WriteSuccess    1   22[COMRAM] unsigned char 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         0       0       0       0       0       0       0
  2310 ;;      Locals:         1       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0
  2312 ;;      Totals:         1       0       0       0       0       0       0
  2313 ;;Total ram usage:        1 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_HWIeeprom_Write
  2318 ;; This function is called by:
  2319 ;;		_ManageDrivers
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text11
  2324  001230                     __ptext11:
  2325                           	opt stack 0
  2326  001230                     _EepromManage:
  2327                           	opt stack 22
  2328                           
  2329                           ;Eeprom.c: 73: static unsigned char WriteIndex = ((unsigned char)0);
  2330                           ;Eeprom.c: 74: unsigned char WriteSuccess;
  2331                           ;Eeprom.c: 76: if((unsigned char)1 == WriteRequest )
  2332                           
  2333                           ;incstack = 0
  2334  001230  042F               	decf	_WriteRequest,w,c
  2335  001232  A4D8               	btfss	status,2,c
  2336  001234  0012               	return	
  2337                           
  2338                           ;Eeprom.c: 77: {
  2339                           ;Eeprom.c: 78: if(WriteIndex == DataSize)
  2340  001236  502D               	movf	_DataSize,w,c
  2341  001238  182C               	xorwf	EepromManage@WriteIndex,w,c
  2342  00123A  A4D8               	btfss	status,2,c
  2343  00123C  D005               	goto	l1989
  2344                           
  2345                           ;Eeprom.c: 79: {
  2346                           ;Eeprom.c: 80: WriteIndex = (unsigned char)0;
  2347  00123E  0E00               	movlw	0
  2348  001240  6E2C               	movwf	EepromManage@WriteIndex,c
  2349                           
  2350                           ;Eeprom.c: 81: WriteRequest = (unsigned char)0;
  2351  001242  0E00               	movlw	0
  2352  001244  6E2F               	movwf	_WriteRequest,c
  2353                           
  2354                           ;Eeprom.c: 82: }
  2355  001246  0012               	return	
  2356  001248                     l1989:
  2357                           
  2358                           ;Eeprom.c: 83: else
  2359                           ;Eeprom.c: 84: {
  2360                           ;Eeprom.c: 85: WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[Writ
      +                          eIndex]);
  2361  001248  502C               	movf	EepromManage@WriteIndex,w,c
  2362  00124A  0D01               	mullw	1
  2363  00124C  0E80               	movlw	low _DataArray
  2364  00124E  24F3               	addwf	prodl,w,c
  2365  001250  6ED9               	movwf	fsr2l,c
  2366  001252  0E00               	movlw	high _DataArray
  2367  001254  20F4               	addwfc	prodh,w,c
  2368  001256  6EDA               	movwf	fsr2h,c
  2369  001258  50DF               	movf	indf2,w,c
  2370  00125A  6E4F               	movwf	HWIeeprom_Write@Data,c
  2371  00125C  502E               	movf	_EEPROMaddr,w,c
  2372  00125E  242C               	addwf	EepromManage@WriteIndex,w,c
  2373  001260  ECC4  F009         	call	_HWIeeprom_Write
  2374  001264  6E52               	movwf	EepromManage@WriteSuccess,c
  2375                           
  2376                           ;Eeprom.c: 86: if( (unsigned char)1 == WriteSuccess )
  2377  001266  0452               	decf	EepromManage@WriteSuccess,w,c
  2378  001268  A4D8               	btfss	status,2,c
  2379  00126A  0012               	return	
  2380                           
  2381                           ;Eeprom.c: 87: {
  2382                           ;Eeprom.c: 88: WriteIndex++;
  2383  00126C  2A2C               	incf	EepromManage@WriteIndex,f,c
  2384  00126E  0012               	return	
  2385  001270                     __end_of_EepromManage:
  2386                           	opt stack 0
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           postinc0	equ	0xFEE
  2398                           wreg	equ	0xFE8
  2399                           postinc1	equ	0xFE6
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           indf2	equ	0xFDF
  2403                           postinc2	equ	0xFDE
  2404                           postdec2	equ	0xFDD
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _HWIeeprom_Write *****************
  2410 ;; Defined at:
  2411 ;;		line 6 in file "../../HWIeeprom/HWIeeprom.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  address         1    wreg     unsigned char 
  2414 ;;  Data            1   19[COMRAM] unsigned char 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  address         1   20[COMRAM] unsigned char 
  2417 ;;  WriteSuccess    1   21[COMRAM] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      unsigned char 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2427 ;;      Params:         1       0       0       0       0       0       0
  2428 ;;      Locals:         2       0       0       0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0
  2430 ;;      Totals:         3       0       0       0       0       0       0
  2431 ;;Total ram usage:        3 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    4
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_EepromManage
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text12
  2442  001388                     __ptext12:
  2443                           	opt stack 0
  2444  001388                     _HWIeeprom_Write:
  2445                           	opt stack 22
  2446                           
  2447                           ;incstack = 0
  2448                           ;HWIeeprom_Write@address stored from wreg
  2449  001388  6E50               	movwf	HWIeeprom_Write@address,c
  2450                           
  2451                           ;HWIeeprom.c: 8: unsigned char WriteSuccess;
  2452                           ;HWIeeprom.c: 9: if((unsigned char)0 == EECON1bits.WR )
  2453  00138A  B2A6               	btfsc	4006,1,c	;volatile
  2454  00138C  D010               	goto	l1899
  2455                           
  2456                           ;HWIeeprom.c: 10: {
  2457                           ;HWIeeprom.c: 11: EEADR = address;
  2458  00138E  C050  FFA9         	movff	HWIeeprom_Write@address,4009	;volatile
  2459                           
  2460                           ;HWIeeprom.c: 12: EEDATA = Data;
  2461  001392  C04F  FFA8         	movff	HWIeeprom_Write@Data,4008	;volatile
  2462                           
  2463                           ;HWIeeprom.c: 13: EECON1bits.EEPGD = (unsigned char)0;
  2464  001396  9EA6               	bcf	4006,7,c	;volatile
  2465                           
  2466                           ;HWIeeprom.c: 14: EECON1bits.CFGS = (unsigned char)0;
  2467  001398  9CA6               	bcf	4006,6,c	;volatile
  2468                           
  2469                           ;HWIeeprom.c: 15: EECON1bits.WREN = (unsigned char)1;
  2470  00139A  84A6               	bsf	4006,2,c	;volatile
  2471                           
  2472                           ;HWIeeprom.c: 17: INTCONbits.GIE = (unsigned char)0;
  2473  00139C  9EF2               	bcf	intcon,7,c	;volatile
  2474                           
  2475                           ;HWIeeprom.c: 18: EECON2 = (unsigned char)0x55;
  2476  00139E  0E55               	movlw	85
  2477  0013A0  6EA7               	movwf	4007,c	;volatile
  2478                           
  2479                           ;HWIeeprom.c: 19: EECON2 = (unsigned char)0xAA;
  2480  0013A2  0EAA               	movlw	170
  2481  0013A4  6EA7               	movwf	4007,c	;volatile
  2482                           
  2483                           ;HWIeeprom.c: 20: EECON1bits.WR = (unsigned char)1;
  2484  0013A6  82A6               	bsf	4006,1,c	;volatile
  2485                           
  2486                           ;HWIeeprom.c: 21: INTCONbits.GIE = (unsigned char)1;
  2487  0013A8  8EF2               	bsf	intcon,7,c	;volatile
  2488                           
  2489                           ;HWIeeprom.c: 22: WriteSuccess = (unsigned char)1;
  2490  0013AA  0E01               	movlw	1
  2491  0013AC  D001               	goto	L2
  2492  0013AE                     l1899:
  2493                           
  2494                           ;HWIeeprom.c: 24: else
  2495                           ;HWIeeprom.c: 25: {
  2496                           ;HWIeeprom.c: 26: WriteSuccess = (unsigned char)0;
  2497  0013AE  0E00               	movlw	0
  2498  0013B0                     L2:
  2499  0013B0  6E51               	movwf	HWIeeprom_Write@WriteSuccess,c
  2500                           
  2501                           ;HWIeeprom.c: 27: }
  2502                           ;HWIeeprom.c: 29: return WriteSuccess;
  2503  0013B2  5051               	movf	HWIeeprom_Write@WriteSuccess,w,c
  2504  0013B4  0012               	return	
  2505  0013B6                     __end_of_HWIeeprom_Write:
  2506                           	opt stack 0
  2507                           tosu	equ	0xFFF
  2508                           tosh	equ	0xFFE
  2509                           tosl	equ	0xFFD
  2510                           pclath	equ	0xFFA
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           postinc1	equ	0xFE6
  2521                           fsr1h	equ	0xFE2
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _APP_MANAGE *****************
  2531 ;; Defined at:
  2532 ;;		line 19 in file "../../../../Common/App/APP.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  TravelledDis    4    8[BANK0 ] unsigned long 
  2537 ;;  AvgSpeedKph     2   13[BANK0 ] unsigned short 
  2538 ;;  keystatus       1   12[BANK0 ] unsigned char 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2548 ;;      Params:         0       0       0       0       0       0       0
  2549 ;;      Locals:         0       7       0       0       0       0       0
  2550 ;;      Temps:          0       1       0       0       0       0       0
  2551 ;;      Totals:         0       8       0       0       0       0       0
  2552 ;;Total ram usage:        8 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    6
  2555 ;; This function calls:
  2556 ;;		_BCDsendNumber
  2557 ;;		_BlinkDigit
  2558 ;;		_Eeprom_Read_Block
  2559 ;;		_Eeprom_Write_Block
  2560 ;;		_GetAvgSpeed
  2561 ;;		_GetDistance
  2562 ;;		_GetKeyStatus
  2563 ;;		_SetCircumfirunce
  2564 ;;		___lmul
  2565 ;; This function is called by:
  2566 ;;		_ManageApplication
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text13
  2571  000A68                     __ptext13:
  2572                           	opt stack 0
  2573  000A68                     _APP_MANAGE:
  2574                           	opt stack 21
  2575                           
  2576                           ;APP.c: 21: static unsigned blinkIndex = (unsigned char)0;
  2577                           ;APP.c: 22: static unsigned bIsBlinkMode = (unsigned char)0;
  2578                           ;APP.c: 23: unsigned short AvgSpeedKph;
  2579                           ;APP.c: 24: unsigned long TravelledDistance;
  2580                           ;APP.c: 25: unsigned char keystatus;
  2581                           ;APP.c: 27: SetCircumfirunce(2056);
  2582                           
  2583                           ;incstack = 0
  2584  000A68  0E08               	movlw	8
  2585  000A6A  6E50               	movwf	SetCircumfirunce@Circum+1,c
  2586  000A6C  0E08               	movlw	8
  2587  000A6E  6E4F               	movwf	SetCircumfirunce@Circum,c
  2588  000A70  ECA3  F00A         	call	_SetCircumfirunce	;wreg free
  2589                           
  2590                           ;APP.c: 29: AvgSpeedKph = GetAvgSpeed(1);
  2591  000A74  0E01               	movlw	1
  2592  000A76  ECA6  F006         	call	_GetAvgSpeed
  2593  000A7A  C068  F0BF         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  2594  000A7E  C069  F0C0         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  2595                           
  2596                           ;APP.c: 30: TravelledDistance = GetDistance();
  2597  000A82  EC94  F00A         	call	_GetDistance	;wreg free
  2598  000A86  C04F  F0BA         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  2599  000A8A  C050  F0BB         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  2600  000A8E  C051  F0BC         	movff	?_GetDistance+2,APP_MANAGE@TravelledDistance+2
  2601  000A92  C052  F0BD         	movff	?_GetDistance+3,APP_MANAGE@TravelledDistance+3
  2602                           
  2603                           ;APP.c: 31: TravelledDistance *= (unsigned long)10;
  2604  000A96  C0BA  F04F         	movff	APP_MANAGE@TravelledDistance,___lmul@multiplier
  2605  000A9A  C0BB  F050         	movff	APP_MANAGE@TravelledDistance+1,___lmul@multiplier+1
  2606  000A9E  C0BC  F051         	movff	APP_MANAGE@TravelledDistance+2,___lmul@multiplier+2
  2607  000AA2  C0BD  F052         	movff	APP_MANAGE@TravelledDistance+3,___lmul@multiplier+3
  2608  000AA6  0E0A               	movlw	10
  2609  000AA8  6E53               	movwf	___lmul@multiplicand,c
  2610  000AAA  0E00               	movlw	0
  2611  000AAC  6E54               	movwf	___lmul@multiplicand+1,c
  2612  000AAE  0E00               	movlw	0
  2613  000AB0  6E55               	movwf	___lmul@multiplicand+2,c
  2614  000AB2  0E00               	movlw	0
  2615  000AB4  6E56               	movwf	___lmul@multiplicand+3,c
  2616  000AB6  ECA3  F008         	call	___lmul	;wreg free
  2617  000ABA  C04F  F0BA         	movff	?___lmul,APP_MANAGE@TravelledDistance
  2618  000ABE  C050  F0BB         	movff	?___lmul+1,APP_MANAGE@TravelledDistance+1
  2619  000AC2  C051  F0BC         	movff	?___lmul+2,APP_MANAGE@TravelledDistance+2
  2620  000AC6  C052  F0BD         	movff	?___lmul+3,APP_MANAGE@TravelledDistance+3
  2621                           
  2622                           ;APP.c: 32: TravelledDistance /= (unsigned long)16;
  2623  000ACA  0E04               	movlw	4
  2624  000ACC  0100               	movlb	0	; () banked
  2625  000ACE  6FB9               	movwf	??_APP_MANAGE& (0+255),b
  2626  000AD0                     u1555:
  2627  000AD0  90D8               	bcf	status,0,c
  2628  000AD2  0100               	movlb	0	; () banked
  2629  000AD4  33BD               	rrcf	(APP_MANAGE@TravelledDistance+3)& (0+255),f,b
  2630  000AD6  33BC               	rrcf	(APP_MANAGE@TravelledDistance+2)& (0+255),f,b
  2631  000AD8  33BB               	rrcf	(APP_MANAGE@TravelledDistance+1)& (0+255),f,b
  2632  000ADA  33BA               	rrcf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2633  000ADC  0100               	movlb	0	; () banked
  2634  000ADE  2FB9               	decfsz	??_APP_MANAGE& (0+255),f,b
  2635  000AE0  D7F7               	goto	u1555
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;APP.c: 34: Eeprom_Write_Block(1,(unsigned char*)&AvgSpeedKph , (unsigned char)sizeof(Av
      +                          gSpeedKph));
  2639  000AE2  0EBF               	movlw	low APP_MANAGE@AvgSpeedKph
  2640  000AE4  6E4F               	movwf	Eeprom_Write_Block@DataPtr,c
  2641  000AE6  0E00               	movlw	high APP_MANAGE@AvgSpeedKph
  2642  000AE8  6E50               	movwf	Eeprom_Write_Block@DataPtr+1,c
  2643  000AEA  0E02               	movlw	2
  2644  000AEC  6E51               	movwf	Eeprom_Write_Block@BlockSize,c
  2645  000AEE  0E01               	movlw	1
  2646  000AF0  EC4A  F008         	call	_Eeprom_Write_Block
  2647                           
  2648                           ;APP.c: 36: Eeprom_Read_Block(1 , (unsigned char*)&AvgSpeedKph , (unsigned char)sizeof(A
      +                          vgSpeedKph));
  2649  000AF4  0EBF               	movlw	low APP_MANAGE@AvgSpeedKph
  2650  000AF6  6E53               	movwf	Eeprom_Read_Block@DataPtr,c
  2651  000AF8  0E00               	movlw	high APP_MANAGE@AvgSpeedKph
  2652  000AFA  6E54               	movwf	Eeprom_Read_Block@DataPtr+1,c
  2653  000AFC  0E02               	movlw	2
  2654  000AFE  6E55               	movwf	Eeprom_Read_Block@BlockSize,c
  2655  000B00  0E01               	movlw	1
  2656  000B02  ECF7  F008         	call	_Eeprom_Read_Block
  2657                           
  2658                           ;APP.c: 37: BCDsendNumber(AvgSpeedKph,1 );
  2659  000B06  C0BF  F056         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  2660  000B0A  C0C0  F057         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  2661  000B0E  0E01               	movlw	1
  2662  000B10  6E58               	movwf	BCDsendNumber@DecimalPlace,c
  2663  000B12  ECCD  F005         	call	_BCDsendNumber	;wreg free
  2664                           
  2665                           ;APP.c: 39: if(bIsBlinkMode == (unsigned char)0)
  2666  000B16  5023               	movf	APP_MANAGE@bIsBlinkMode,w,c
  2667  000B18  1024               	iorwf	APP_MANAGE@bIsBlinkMode+1,w,c
  2668  000B1A  A4D8               	btfss	status,2,c
  2669  000B1C  D00F               	goto	l2343
  2670                           
  2671                           ;APP.c: 40: {
  2672                           ;APP.c: 41: keystatus = GetKeyStatus(0);
  2673  000B1E  0E00               	movlw	0
  2674  000B20  ECDB  F009         	call	_GetKeyStatus
  2675  000B24  0100               	movlb	0	; () banked
  2676  000B26  6FBE               	movwf	APP_MANAGE@keystatus& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;APP.c: 42: if( keystatus == (unsigned char)0x82)
  2680  000B28  0E82               	movlw	130
  2681  000B2A  0100               	movlb	0	; () banked
  2682  000B2C  19BE               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2683  000B2E  A4D8               	btfss	status,2,c
  2684  000B30  0012               	return	
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;APP.c: 43: {
  2688                           ;APP.c: 44: bIsBlinkMode = (unsigned char)1;
  2689  000B32  0E00               	movlw	0
  2690  000B34  6E24               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2691  000B36  0E01               	movlw	1
  2692  000B38  6E23               	movwf	APP_MANAGE@bIsBlinkMode,c
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;APP.c: 45: }
  2696                           ;APP.c: 46: }
  2697  000B3A  0012               	return	
  2698  000B3C                     l2343:
  2699                           
  2700                           ;APP.c: 47: else
  2701                           ;APP.c: 48: {
  2702                           ;APP.c: 49: BlinkDigit(blinkIndex,100);
  2703  000B3C  0E64               	movlw	100
  2704  000B3E  6E4F               	movwf	BlinkDigit@duration,c
  2705  000B40  5025               	movf	APP_MANAGE@blinkIndex,w,c
  2706  000B42  EC9D  F00A         	call	_BlinkDigit
  2707                           
  2708                           ;APP.c: 50: keystatus = GetKeyStatus(0);
  2709  000B46  0E00               	movlw	0
  2710  000B48  ECDB  F009         	call	_GetKeyStatus
  2711  000B4C  0100               	movlb	0	; () banked
  2712  000B4E  6FBE               	movwf	APP_MANAGE@keystatus& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;APP.c: 51: if( keystatus == (unsigned char)0x81)
  2716  000B50  0E81               	movlw	129
  2717  000B52  0100               	movlb	0	; () banked
  2718  000B54  19BE               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2719  000B56  A4D8               	btfss	status,2,c
  2720  000B58  D00C               	goto	l2355
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;APP.c: 52: {
  2724                           ;APP.c: 53: blinkIndex++;
  2725  000B5A  4A25               	infsnz	APP_MANAGE@blinkIndex,f,c
  2726  000B5C  2A26               	incf	APP_MANAGE@blinkIndex+1,f,c
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;APP.c: 54: if(blinkIndex == 4)
  2730  000B5E  0E04               	movlw	4
  2731  000B60  1825               	xorwf	APP_MANAGE@blinkIndex,w,c
  2732  000B62  1026               	iorwf	APP_MANAGE@blinkIndex+1,w,c
  2733  000B64  A4D8               	btfss	status,2,c
  2734  000B66  0012               	return	
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;APP.c: 55: {
  2738                           ;APP.c: 56: blinkIndex=0;
  2739  000B68  0E00               	movlw	0
  2740  000B6A  6E26               	movwf	APP_MANAGE@blinkIndex+1,c
  2741  000B6C  0E00               	movlw	0
  2742  000B6E  6E25               	movwf	APP_MANAGE@blinkIndex,c
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;APP.c: 57: }
  2746                           ;APP.c: 58: }
  2747  000B70  0012               	return	
  2748  000B72                     l2355:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;APP.c: 59: else
  2752                           ;APP.c: 60: {
  2753                           ;APP.c: 61: keystatus = GetKeyStatus(1);
  2754  000B72  0E01               	movlw	1
  2755  000B74  ECDB  F009         	call	_GetKeyStatus
  2756  000B78  0100               	movlb	0	; () banked
  2757  000B7A  6FBE               	movwf	APP_MANAGE@keystatus& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;APP.c: 62: if(keystatus == (unsigned char)0x82 )
  2761  000B7C  0E82               	movlw	130
  2762  000B7E  0100               	movlb	0	; () banked
  2763  000B80  19BE               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2764  000B82  A4D8               	btfss	status,2,c
  2765  000B84  0012               	return	
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;APP.c: 63: {
  2769                           ;APP.c: 64: BlinkDigit(1,0);
  2770  000B86  0E00               	movlw	0
  2771  000B88  6E4F               	movwf	BlinkDigit@duration,c
  2772  000B8A  0E01               	movlw	1
  2773  000B8C  EC9D  F00A         	call	_BlinkDigit
  2774                           
  2775                           ;APP.c: 65: bIsBlinkMode = (unsigned char)0;
  2776  000B90  0E00               	movlw	0
  2777  000B92  6E24               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2778  000B94  0E00               	movlw	0
  2779  000B96  6E23               	movwf	APP_MANAGE@bIsBlinkMode,c
  2780  000B98  0012               	return	
  2781  000B9A                     __end_of_APP_MANAGE:
  2782                           	opt stack 0
  2783                           tosu	equ	0xFFF
  2784                           tosh	equ	0xFFE
  2785                           tosl	equ	0xFFD
  2786                           pclath	equ	0xFFA
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postinc1	equ	0xFE6
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _SetCircumfirunce *****************
  2807 ;; Defined at:
  2808 ;;		line 99 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  Circum          2   19[COMRAM] unsigned short 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		None
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2822 ;;      Params:         2       0       0       0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0
  2825 ;;      Totals:         2       0       0       0       0       0       0
  2826 ;;Total ram usage:        2 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    4
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_APP_MANAGE
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text14
  2837  001546                     __ptext14:
  2838                           	opt stack 0
  2839  001546                     _SetCircumfirunce:
  2840                           	opt stack 22
  2841                           
  2842                           ;SpeedCalc.c: 101: CircumFactor = (unsigned short)Circum;
  2843                           
  2844                           ;incstack = 0
  2845  001546  C04F  F06A         	movff	SetCircumfirunce@Circum,_CircumFactor
  2846  00154A  C050  F06B         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  2847  00154E  0012               	return		;funcret
  2848  001550                     __end_of_SetCircumfirunce:
  2849                           	opt stack 0
  2850                           tosu	equ	0xFFF
  2851                           tosh	equ	0xFFE
  2852                           tosl	equ	0xFFD
  2853                           pclath	equ	0xFFA
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodh	equ	0xFF4
  2859                           prodl	equ	0xFF3
  2860                           intcon	equ	0xFF2
  2861                           postinc0	equ	0xFEE
  2862                           wreg	equ	0xFE8
  2863                           postinc1	equ	0xFE6
  2864                           fsr1h	equ	0xFE2
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _GetKeyStatus *****************
  2874 ;; Defined at:
  2875 ;;		line 19 in file "../../../../Common/Driver/Key/Key.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  KeyID           1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  KeyID           1   20[COMRAM] unsigned char 
  2880 ;;  KeyStatus       1   19[COMRAM] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      unsigned char 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2890 ;;      Params:         0       0       0       0       0       0       0
  2891 ;;      Locals:         2       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0
  2893 ;;      Totals:         2       0       0       0       0       0       0
  2894 ;;Total ram usage:        2 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    4
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_APP_MANAGE
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text15
  2905  0013B6                     __ptext15:
  2906                           	opt stack 0
  2907  0013B6                     _GetKeyStatus:
  2908                           	opt stack 22
  2909                           
  2910                           ;incstack = 0
  2911                           ;GetKeyStatus@KeyID stored from wreg
  2912  0013B6  6E50               	movwf	GetKeyStatus@KeyID,c
  2913                           
  2914                           ;Key.c: 21: unsigned char KeyStatus;
  2915                           ;Key.c: 23: KeyStatus = KeyInternalData[KeyID].KeyState;
  2916  0013B8  5050               	movf	GetKeyStatus@KeyID,w,c
  2917  0013BA  0D03               	mullw	3
  2918  0013BC  0E35               	movlw	low _KeyInternalData
  2919  0013BE  24F3               	addwf	prodl,w,c
  2920  0013C0  6ED9               	movwf	fsr2l,c
  2921  0013C2  0E00               	movlw	high _KeyInternalData
  2922  0013C4  20F4               	addwfc	prodh,w,c
  2923  0013C6  6EDA               	movwf	fsr2h,c
  2924  0013C8  50DF               	movf	indf2,w,c
  2925  0013CA  6E4F               	movwf	GetKeyStatus@KeyStatus,c
  2926                           
  2927                           ;Key.c: 24: KeyInternalData[KeyID].KeyState &= (unsigned char)0x7F;
  2928  0013CC  5050               	movf	GetKeyStatus@KeyID,w,c
  2929  0013CE  0D03               	mullw	3
  2930  0013D0  0E35               	movlw	low _KeyInternalData
  2931  0013D2  24F3               	addwf	prodl,w,c
  2932  0013D4  6ED9               	movwf	fsr2l,c
  2933  0013D6  0E00               	movlw	high _KeyInternalData
  2934  0013D8  20F4               	addwfc	prodh,w,c
  2935  0013DA  6EDA               	movwf	fsr2h,c
  2936  0013DC  0E7F               	movlw	127
  2937  0013DE  16DF               	andwf	indf2,f,c
  2938                           
  2939                           ;Key.c: 26: return KeyStatus;
  2940  0013E0  504F               	movf	GetKeyStatus@KeyStatus,w,c
  2941  0013E2  0012               	return	
  2942  0013E4                     __end_of_GetKeyStatus:
  2943                           	opt stack 0
  2944                           tosu	equ	0xFFF
  2945                           tosh	equ	0xFFE
  2946                           tosl	equ	0xFFD
  2947                           pclath	equ	0xFFA
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postinc1	equ	0xFE6
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _GetDistance *****************
  2968 ;; Defined at:
  2969 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  4   19[COMRAM] unsigned long 
  2976 ;; Registers used:
  2977 ;;		None
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2983 ;;      Params:         4       0       0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0
  2986 ;;      Totals:         4       0       0       0       0       0       0
  2987 ;;Total ram usage:        4 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    4
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_APP_MANAGE
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text16
  2998  001528                     __ptext16:
  2999                           	opt stack 0
  3000  001528                     _GetDistance:
  3001                           	opt stack 22
  3002                           
  3003                           ;SpeedCalc.c: 95: return DistTravelCntr;
  3004                           
  3005                           ;incstack = 0
  3006  001528  C019  F04F         	movff	_DistTravelCntr,?_GetDistance
  3007  00152C  C01A  F050         	movff	_DistTravelCntr+1,?_GetDistance+1
  3008  001530  C01B  F051         	movff	_DistTravelCntr+2,?_GetDistance+2
  3009  001534  C01C  F052         	movff	_DistTravelCntr+3,?_GetDistance+3
  3010  001538  0012               	return		;funcret
  3011  00153A                     __end_of_GetDistance:
  3012                           	opt stack 0
  3013                           tosu	equ	0xFFF
  3014                           tosh	equ	0xFFE
  3015                           tosl	equ	0xFFD
  3016                           pclath	equ	0xFFA
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           intcon	equ	0xFF2
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postinc1	equ	0xFE6
  3027                           fsr1h	equ	0xFE2
  3028                           fsr1l	equ	0xFE1
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _GetAvgSpeed *****************
  3037 ;; Defined at:
  3038 ;;		line 105 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  bIsKph          1    wreg     unsigned char 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  bIsKph          1    0[BANK0 ] unsigned char 
  3043 ;;  KphMphFactor    4    1[BANK0 ] unsigned long 
  3044 ;;  AvgSpeedKphM    2    5[BANK0 ] unsigned short 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  2   44[COMRAM] unsigned short 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3054 ;;      Params:         2       0       0       0       0       0       0
  3055 ;;      Locals:         0       7       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0
  3057 ;;      Totals:         2       7       0       0       0       0       0
  3058 ;;Total ram usage:        9 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    5
  3061 ;; This function calls:
  3062 ;;		___lldiv
  3063 ;;		___lmul
  3064 ;; This function is called by:
  3065 ;;		_APP_MANAGE
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text17
  3070  000D4C                     __ptext17:
  3071                           	opt stack 0
  3072  000D4C                     _GetAvgSpeed:
  3073                           	opt stack 21
  3074                           
  3075                           ;incstack = 0
  3076                           ;GetAvgSpeed@bIsKph stored from wreg
  3077  000D4C  0100               	movlb	0	; () banked
  3078  000D4E  6FB2               	movwf	GetAvgSpeed@bIsKph& (0+255),b
  3079                           
  3080                           ;SpeedCalc.c: 107: unsigned short AvgSpeedKphMph = (unsigned short)0;
  3081  000D50  0E00               	movlw	0
  3082  000D52  0100               	movlb	0	; () banked
  3083  000D54  6FB8               	movwf	(GetAvgSpeed@AvgSpeedKphMph+1)& (0+255),b
  3084  000D56  0E00               	movlw	0
  3085  000D58  6FB7               	movwf	GetAvgSpeed@AvgSpeedKphMph& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;SpeedCalc.c: 108: unsigned long KphMphFactor;
  3089                           ;SpeedCalc.c: 110: if( (unsigned char)1 == bIsKph )
  3090  000D5A  0100               	movlb	0	; () banked
  3091  000D5C  05B2               	decf	GetAvgSpeed@bIsKph& (0+255),w,b
  3092  000D5E  A4D8               	btfss	status,2,c
  3093  000D60  D005               	goto	l2241
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;SpeedCalc.c: 111: {
  3097                           ;SpeedCalc.c: 112: KphMphFactor = (unsigned long)360;
  3098  000D62  0E68               	movlw	104
  3099  000D64  0100               	movlb	0	; () banked
  3100  000D66  6FB3               	movwf	GetAvgSpeed@KphMphFactor& (0+255),b
  3101  000D68  0E01               	movlw	1
  3102  000D6A  D004               	goto	L3
  3103  000D6C                     l2241:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;SpeedCalc.c: 114: else
  3107                           ;SpeedCalc.c: 115: {
  3108                           ;SpeedCalc.c: 116: KphMphFactor = (unsigned long)225;
  3109  000D6C  0EE1               	movlw	225
  3110  000D6E  0100               	movlb	0	; () banked
  3111  000D70  6FB3               	movwf	GetAvgSpeed@KphMphFactor& (0+255),b
  3112  000D72  0E00               	movlw	0
  3113  000D74                     L3:
  3114  000D74  6FB4               	movwf	(GetAvgSpeed@KphMphFactor+1)& (0+255),b
  3115  000D76  0E00               	movlw	0
  3116  000D78  6FB5               	movwf	(GetAvgSpeed@KphMphFactor+2)& (0+255),b
  3117  000D7A  0E00               	movlw	0
  3118  000D7C  6FB6               	movwf	(GetAvgSpeed@KphMphFactor+3)& (0+255),b
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;SpeedCalc.c: 117: }
  3122                           ;SpeedCalc.c: 119: if(LapTimeTenthMilli != (unsigned short)0)
  3123                           
  3124                           ; BSR set to: 0
  3125  000D7E  501F               	movf	_LapTimeTenthMilli,w,c
  3126  000D80  1020               	iorwf	_LapTimeTenthMilli+1,w,c
  3127  000D82  B4D8               	btfsc	status,2,c
  3128  000D84  D024               	goto	l2247
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;SpeedCalc.c: 120: {
  3132                           ;SpeedCalc.c: 121: AvgSpeedKphMph = (unsigned short)
  3133                           ;SpeedCalc.c: 122: ((KphMphFactor * (unsigned long)CircumFactor )
  3134                           ;SpeedCalc.c: 123: / (unsigned long)LapTimeTenthMilli);
  3135  000D86  C06A  F04F         	movff	_CircumFactor,___lmul@multiplier
  3136  000D8A  C06B  F050         	movff	_CircumFactor+1,___lmul@multiplier+1
  3137  000D8E  6A51               	clrf	___lmul@multiplier+2,c
  3138  000D90  6A52               	clrf	___lmul@multiplier+3,c
  3139  000D92  C0B3  F053         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  3140  000D96  C0B4  F054         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  3141  000D9A  C0B5  F055         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  3142  000D9E  C0B6  F056         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  3143  000DA2  ECA3  F008         	call	___lmul	;wreg free
  3144  000DA6  C04F  F05B         	movff	?___lmul,___lldiv@dividend
  3145  000DAA  C050  F05C         	movff	?___lmul+1,___lldiv@dividend+1
  3146  000DAE  C051  F05D         	movff	?___lmul+2,___lldiv@dividend+2
  3147  000DB2  C052  F05E         	movff	?___lmul+3,___lldiv@dividend+3
  3148  000DB6  C01F  F05F         	movff	_LapTimeTenthMilli,___lldiv@divisor
  3149  000DBA  C020  F060         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  3150  000DBE  6A61               	clrf	___lldiv@divisor+2,c
  3151  000DC0  6A62               	clrf	___lldiv@divisor+3,c
  3152  000DC2  ECD3  F007         	call	___lldiv	;wreg free
  3153  000DC6  C05B  F0B7         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  3154  000DCA  C05C  F0B8         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  3155  000DCE                     l2247:
  3156                           
  3157                           ;SpeedCalc.c: 124: }
  3158                           ;SpeedCalc.c: 126: if( (unsigned char)64 == HwTimerOVFLcount)
  3159  000DCE  0E40               	movlw	64
  3160  000DD0  1828               	xorwf	_HwTimerOVFLcount,w,c	;volatile
  3161  000DD2  A4D8               	btfss	status,2,c
  3162  000DD4  D005               	goto	l2251
  3163                           
  3164                           ;SpeedCalc.c: 127: {
  3165                           ;SpeedCalc.c: 128: AvgSpeedKphMph = (unsigned short)0;
  3166  000DD6  0E00               	movlw	0
  3167  000DD8  0100               	movlb	0	; () banked
  3168  000DDA  6FB8               	movwf	(GetAvgSpeed@AvgSpeedKphMph+1)& (0+255),b
  3169  000DDC  0E00               	movlw	0
  3170  000DDE  6FB7               	movwf	GetAvgSpeed@AvgSpeedKphMph& (0+255),b
  3171  000DE0                     l2251:
  3172                           
  3173                           ;SpeedCalc.c: 129: }
  3174                           ;SpeedCalc.c: 130: return AvgSpeedKphMph;
  3175  000DE0  C0B7  F068         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  3176  000DE4  C0B8  F069         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  3177  000DE8  0012               	return	
  3178  000DEA                     __end_of_GetAvgSpeed:
  3179                           	opt stack 0
  3180                           tosu	equ	0xFFF
  3181                           tosh	equ	0xFFE
  3182                           tosl	equ	0xFFD
  3183                           pclath	equ	0xFFA
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postinc1	equ	0xFE6
  3194                           fsr1h	equ	0xFE2
  3195                           fsr1l	equ	0xFE1
  3196                           indf2	equ	0xFDF
  3197                           postinc2	equ	0xFDE
  3198                           postdec2	equ	0xFDD
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function ___lmul *****************
  3204 ;; Defined at:
  3205 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  multiplier      4   19[COMRAM] unsigned long 
  3208 ;;  multiplicand    4   23[COMRAM] unsigned long 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  product         4   27[COMRAM] unsigned long 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  4   19[COMRAM] unsigned long 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3220 ;;      Params:         8       0       0       0       0       0       0
  3221 ;;      Locals:         4       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0
  3223 ;;      Totals:        12       0       0       0       0       0       0
  3224 ;;Total ram usage:       12 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    4
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_APP_MANAGE
  3231 ;;		_GetAvgSpeed
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text18
  3236  001146                     __ptext18:
  3237                           	opt stack 0
  3238  001146                     ___lmul:
  3239                           	opt stack 22
  3240                           
  3241                           ;incstack = 0
  3242  001146  0E00               	movlw	0
  3243  001148  6E57               	movwf	___lmul@product,c
  3244  00114A  0E00               	movlw	0
  3245  00114C  6E58               	movwf	___lmul@product+1,c
  3246  00114E  0E00               	movlw	0
  3247  001150  6E59               	movwf	___lmul@product+2,c
  3248  001152  0E00               	movlw	0
  3249  001154  6E5A               	movwf	___lmul@product+3,c
  3250  001156                     l2163:
  3251  001156  A04F               	btfss	___lmul@multiplier,0,c
  3252  001158  D008               	goto	l2167
  3253  00115A  5053               	movf	___lmul@multiplicand,w,c
  3254  00115C  2657               	addwf	___lmul@product,f,c
  3255  00115E  5054               	movf	___lmul@multiplicand+1,w,c
  3256  001160  2258               	addwfc	___lmul@product+1,f,c
  3257  001162  5055               	movf	___lmul@multiplicand+2,w,c
  3258  001164  2259               	addwfc	___lmul@product+2,f,c
  3259  001166  5056               	movf	___lmul@multiplicand+3,w,c
  3260  001168  225A               	addwfc	___lmul@product+3,f,c
  3261  00116A                     l2167:
  3262  00116A  90D8               	bcf	status,0,c
  3263  00116C  3653               	rlcf	___lmul@multiplicand,f,c
  3264  00116E  3654               	rlcf	___lmul@multiplicand+1,f,c
  3265  001170  3655               	rlcf	___lmul@multiplicand+2,f,c
  3266  001172  3656               	rlcf	___lmul@multiplicand+3,f,c
  3267  001174  90D8               	bcf	status,0,c
  3268  001176  3252               	rrcf	___lmul@multiplier+3,f,c
  3269  001178  3251               	rrcf	___lmul@multiplier+2,f,c
  3270  00117A  3250               	rrcf	___lmul@multiplier+1,f,c
  3271  00117C  324F               	rrcf	___lmul@multiplier,f,c
  3272  00117E  504F               	movf	___lmul@multiplier,w,c
  3273  001180  1050               	iorwf	___lmul@multiplier+1,w,c
  3274  001182  1051               	iorwf	___lmul@multiplier+2,w,c
  3275  001184  1052               	iorwf	___lmul@multiplier+3,w,c
  3276  001186  A4D8               	btfss	status,2,c
  3277  001188  D7E6               	goto	l2163
  3278  00118A  C057  F04F         	movff	___lmul@product,?___lmul
  3279  00118E  C058  F050         	movff	___lmul@product+1,?___lmul+1
  3280  001192  C059  F051         	movff	___lmul@product+2,?___lmul+2
  3281  001196  C05A  F052         	movff	___lmul@product+3,?___lmul+3
  3282  00119A  0012               	return		;funcret
  3283  00119C                     __end_of___lmul:
  3284                           	opt stack 0
  3285                           tosu	equ	0xFFF
  3286                           tosh	equ	0xFFE
  3287                           tosl	equ	0xFFD
  3288                           pclath	equ	0xFFA
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           postinc0	equ	0xFEE
  3297                           wreg	equ	0xFE8
  3298                           postinc1	equ	0xFE6
  3299                           fsr1h	equ	0xFE2
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function ___lldiv *****************
  3309 ;; Defined at:
  3310 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  dividend        4   31[COMRAM] unsigned long 
  3313 ;;  divisor         4   35[COMRAM] unsigned long 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  quotient        4   39[COMRAM] unsigned long 
  3316 ;;  counter         1   43[COMRAM] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  4   31[COMRAM] unsigned long 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3326 ;;      Params:         8       0       0       0       0       0       0
  3327 ;;      Locals:         5       0       0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0
  3329 ;;      Totals:        13       0       0       0       0       0       0
  3330 ;;Total ram usage:       13 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    4
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_SpeedCalcManage
  3337 ;;		_GetAvgSpeed
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text19
  3342  000FA6                     __ptext19:
  3343                           	opt stack 0
  3344  000FA6                     ___lldiv:
  3345                           	opt stack 22
  3346                           
  3347                           ;incstack = 0
  3348  000FA6  0E00               	movlw	0
  3349  000FA8  6E63               	movwf	___lldiv@quotient,c
  3350  000FAA  0E00               	movlw	0
  3351  000FAC  6E64               	movwf	___lldiv@quotient+1,c
  3352  000FAE  0E00               	movlw	0
  3353  000FB0  6E65               	movwf	___lldiv@quotient+2,c
  3354  000FB2  0E00               	movlw	0
  3355  000FB4  6E66               	movwf	___lldiv@quotient+3,c
  3356  000FB6  505F               	movf	___lldiv@divisor,w,c
  3357  000FB8  1060               	iorwf	___lldiv@divisor+1,w,c
  3358  000FBA  1061               	iorwf	___lldiv@divisor+2,w,c
  3359  000FBC  1062               	iorwf	___lldiv@divisor+3,w,c
  3360  000FBE  B4D8               	btfsc	status,2,c
  3361  000FC0  D02A               	goto	l809
  3362  000FC2  0E01               	movlw	1
  3363  000FC4  6E67               	movwf	___lldiv@counter,c
  3364  000FC6  D006               	goto	l2179
  3365  000FC8                     l2177:
  3366  000FC8  90D8               	bcf	status,0,c
  3367  000FCA  365F               	rlcf	___lldiv@divisor,f,c
  3368  000FCC  3660               	rlcf	___lldiv@divisor+1,f,c
  3369  000FCE  3661               	rlcf	___lldiv@divisor+2,f,c
  3370  000FD0  3662               	rlcf	___lldiv@divisor+3,f,c
  3371  000FD2  2A67               	incf	___lldiv@counter,f,c
  3372  000FD4                     l2179:
  3373  000FD4  AE62               	btfss	___lldiv@divisor+3,7,c
  3374  000FD6  D7F8               	goto	l2177
  3375  000FD8                     l2181:
  3376  000FD8  90D8               	bcf	status,0,c
  3377  000FDA  3663               	rlcf	___lldiv@quotient,f,c
  3378  000FDC  3664               	rlcf	___lldiv@quotient+1,f,c
  3379  000FDE  3665               	rlcf	___lldiv@quotient+2,f,c
  3380  000FE0  3666               	rlcf	___lldiv@quotient+3,f,c
  3381  000FE2  505F               	movf	___lldiv@divisor,w,c
  3382  000FE4  5C5B               	subwf	___lldiv@dividend,w,c
  3383  000FE6  5060               	movf	___lldiv@divisor+1,w,c
  3384  000FE8  585C               	subwfb	___lldiv@dividend+1,w,c
  3385  000FEA  5061               	movf	___lldiv@divisor+2,w,c
  3386  000FEC  585D               	subwfb	___lldiv@dividend+2,w,c
  3387  000FEE  5062               	movf	___lldiv@divisor+3,w,c
  3388  000FF0  585E               	subwfb	___lldiv@dividend+3,w,c
  3389  000FF2  A0D8               	btfss	status,0,c
  3390  000FF4  D009               	goto	l2189
  3391  000FF6  505F               	movf	___lldiv@divisor,w,c
  3392  000FF8  5E5B               	subwf	___lldiv@dividend,f,c
  3393  000FFA  5060               	movf	___lldiv@divisor+1,w,c
  3394  000FFC  5A5C               	subwfb	___lldiv@dividend+1,f,c
  3395  000FFE  5061               	movf	___lldiv@divisor+2,w,c
  3396  001000  5A5D               	subwfb	___lldiv@dividend+2,f,c
  3397  001002  5062               	movf	___lldiv@divisor+3,w,c
  3398  001004  5A5E               	subwfb	___lldiv@dividend+3,f,c
  3399  001006  8063               	bsf	___lldiv@quotient,0,c
  3400  001008                     l2189:
  3401  001008  90D8               	bcf	status,0,c
  3402  00100A  3262               	rrcf	___lldiv@divisor+3,f,c
  3403  00100C  3261               	rrcf	___lldiv@divisor+2,f,c
  3404  00100E  3260               	rrcf	___lldiv@divisor+1,f,c
  3405  001010  325F               	rrcf	___lldiv@divisor,f,c
  3406  001012  2E67               	decfsz	___lldiv@counter,f,c
  3407  001014  D7E1               	goto	l2181
  3408  001016                     l809:
  3409  001016  C063  F05B         	movff	___lldiv@quotient,?___lldiv
  3410  00101A  C064  F05C         	movff	___lldiv@quotient+1,?___lldiv+1
  3411  00101E  C065  F05D         	movff	___lldiv@quotient+2,?___lldiv+2
  3412  001022  C066  F05E         	movff	___lldiv@quotient+3,?___lldiv+3
  3413  001026  0012               	return		;funcret
  3414  001028                     __end_of___lldiv:
  3415                           	opt stack 0
  3416                           tosu	equ	0xFFF
  3417                           tosh	equ	0xFFE
  3418                           tosl	equ	0xFFD
  3419                           pclath	equ	0xFFA
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postinc1	equ	0xFE6
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _Eeprom_Read_Block *****************
  3440 ;; Defined at:
  3441 ;;		line 39 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  address         1    wreg     unsigned char 
  3444 ;;  DataPtr         2   23[COMRAM] PTR unsigned char 
  3445 ;;		 -> APP_MANAGE@AvgSpeedKph(2), 
  3446 ;;  BlockSize       1   25[COMRAM] unsigned char 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  address         1   27[COMRAM] unsigned char 
  3449 ;;  LoopIndex       1   29[COMRAM] unsigned char 
  3450 ;;  ReadSuccess     1   28[COMRAM] unsigned char 
  3451 ;;  ReadGranted     1   26[COMRAM] unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      unsigned char 
  3454 ;; Registers used:
  3455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3461 ;;      Params:         3       0       0       0       0       0       0
  3462 ;;      Locals:         4       0       0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0
  3464 ;;      Totals:         7       0       0       0       0       0       0
  3465 ;;Total ram usage:        7 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    5
  3468 ;; This function calls:
  3469 ;;		_HWIeeprom_Read
  3470 ;; This function is called by:
  3471 ;;		_APP_MANAGE
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text20
  3476  0011EE                     __ptext20:
  3477                           	opt stack 0
  3478  0011EE                     _Eeprom_Read_Block:
  3479                           	opt stack 21
  3480                           
  3481                           ;incstack = 0
  3482                           ;Eeprom_Read_Block@address stored from wreg
  3483  0011EE  6E57               	movwf	Eeprom_Read_Block@address,c
  3484                           
  3485                           ;Eeprom.c: 46: unsigned char LoopIndex = (unsigned char)0 ;
  3486  0011F0  0E00               	movlw	0
  3487  0011F2  6E59               	movwf	Eeprom_Read_Block@LoopIndex,c
  3488                           
  3489                           ;Eeprom.c: 47: unsigned char ReadSuccess;
  3490                           ;Eeprom.c: 48: unsigned char ReadGranted;
  3491                           ;Eeprom.c: 50: if( (unsigned char)0 == WriteRequest)
  3492  0011F4  502F               	movf	_WriteRequest,w,c
  3493  0011F6  B4D8               	btfsc	status,2,c
  3494  0011F8  D011               	goto	l2269
  3495  0011FA  D017               	goto	l2273
  3496  0011FC                     l2263:
  3497                           
  3498                           ;Eeprom.c: 53: {
  3499                           ;Eeprom.c: 54: ReadSuccess = HWIeeprom_Read(address + LoopIndex , &DataPtr[LoopIndex]);
  3500  0011FC  5059               	movf	Eeprom_Read_Block@LoopIndex,w,c
  3501  0011FE  0D01               	mullw	1
  3502  001200  50F3               	movf	prodl,w,c
  3503  001202  2453               	addwf	Eeprom_Read_Block@DataPtr,w,c
  3504  001204  6E4F               	movwf	HWIeeprom_Read@Data,c
  3505  001206  50F4               	movf	prodh,w,c
  3506  001208  2054               	addwfc	Eeprom_Read_Block@DataPtr+1,w,c
  3507  00120A  6E50               	movwf	HWIeeprom_Read@Data+1,c
  3508  00120C  5057               	movf	Eeprom_Read_Block@address,w,c
  3509  00120E  2459               	addwf	Eeprom_Read_Block@LoopIndex,w,c
  3510  001210  EC34  F00A         	call	_HWIeeprom_Read
  3511  001214  6E58               	movwf	Eeprom_Read_Block@ReadSuccess,c
  3512                           
  3513                           ;Eeprom.c: 55: if((unsigned char)1 == ReadSuccess)
  3514  001216  0458               	decf	Eeprom_Read_Block@ReadSuccess,w,c
  3515  001218  B4D8               	btfsc	status,2,c
  3516                           
  3517                           ;Eeprom.c: 56: {
  3518                           ;Eeprom.c: 57: LoopIndex++;
  3519  00121A  2A59               	incf	Eeprom_Read_Block@LoopIndex,f,c
  3520  00121C                     l2269:
  3521  00121C  5055               	movf	Eeprom_Read_Block@BlockSize,w,c
  3522  00121E  5C59               	subwf	Eeprom_Read_Block@LoopIndex,w,c
  3523  001220  A0D8               	btfss	status,0,c
  3524  001222  D7EC               	goto	l2263
  3525                           
  3526                           ;Eeprom.c: 58: }
  3527                           ;Eeprom.c: 59: }
  3528                           ;Eeprom.c: 60: ReadGranted = (unsigned char)1;
  3529  001224  0E01               	movlw	1
  3530  001226  6E56               	movwf	Eeprom_Read_Block@ReadGranted,c
  3531                           
  3532                           ;Eeprom.c: 61: }
  3533  001228  0012               	return	
  3534  00122A                     l2273:
  3535                           
  3536                           ;Eeprom.c: 62: else
  3537                           ;Eeprom.c: 63: {
  3538                           ;Eeprom.c: 64: ReadGranted = (unsigned char)0;
  3539  00122A  0E00               	movlw	0
  3540  00122C  6E56               	movwf	Eeprom_Read_Block@ReadGranted,c
  3541  00122E  0012               	return	
  3542  001230                     __end_of_Eeprom_Read_Block:
  3543                           	opt stack 0
  3544                           tosu	equ	0xFFF
  3545                           tosh	equ	0xFFE
  3546                           tosl	equ	0xFFD
  3547                           pclath	equ	0xFFA
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           intcon	equ	0xFF2
  3555                           postinc0	equ	0xFEE
  3556                           wreg	equ	0xFE8
  3557                           postinc1	equ	0xFE6
  3558                           fsr1h	equ	0xFE2
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function _HWIeeprom_Read *****************
  3568 ;; Defined at:
  3569 ;;		line 31 in file "../../HWIeeprom/HWIeeprom.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  address         1    wreg     unsigned char 
  3572 ;;  Data            2   19[COMRAM] PTR unsigned char 
  3573 ;;		 -> APP_MANAGE@AvgSpeedKph(2), 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  address         1   21[COMRAM] unsigned char 
  3576 ;;  ReadSuccess     1   22[COMRAM] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      unsigned char 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr2l, fsr2h, status,2
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3586 ;;      Params:         2       0       0       0       0       0       0
  3587 ;;      Locals:         2       0       0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0
  3589 ;;      Totals:         4       0       0       0       0       0       0
  3590 ;;Total ram usage:        4 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    4
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_Eeprom_Read_Block
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text21
  3601  001468                     __ptext21:
  3602                           	opt stack 0
  3603  001468                     _HWIeeprom_Read:
  3604                           	opt stack 21
  3605                           
  3606                           ;incstack = 0
  3607                           ;HWIeeprom_Read@address stored from wreg
  3608  001468  6E51               	movwf	HWIeeprom_Read@address,c
  3609                           
  3610                           ;HWIeeprom.c: 33: unsigned char ReadSuccess;
  3611                           ;HWIeeprom.c: 34: if((unsigned char)0 == EECON1bits.WR )
  3612  00146A  B2A6               	btfsc	4006,1,c	;volatile
  3613  00146C  D00D               	goto	l2149
  3614                           
  3615                           ;HWIeeprom.c: 35: {
  3616                           ;HWIeeprom.c: 36: EEADR = address;
  3617  00146E  C051  FFA9         	movff	HWIeeprom_Read@address,4009	;volatile
  3618                           
  3619                           ;HWIeeprom.c: 37: EECON1bits.EEPGD = (unsigned char)0;
  3620  001472  9EA6               	bcf	4006,7,c	;volatile
  3621                           
  3622                           ;HWIeeprom.c: 38: EECON1bits.CFGS = (unsigned char)0;
  3623  001474  9CA6               	bcf	4006,6,c	;volatile
  3624                           
  3625                           ;HWIeeprom.c: 39: EECON1bits.RD = (unsigned char)1;
  3626  001476  80A6               	bsf	4006,0,c	;volatile
  3627                           
  3628                           ;HWIeeprom.c: 40: *Data = EEDATA;
  3629  001478  C04F  FFD9         	movff	HWIeeprom_Read@Data,fsr2l
  3630  00147C  C050  FFDA         	movff	HWIeeprom_Read@Data+1,fsr2h
  3631  001480  CFA8 FFDF          	movff	4008,indf2	;volatile
  3632                           
  3633                           ;HWIeeprom.c: 41: ReadSuccess = (unsigned char)1;
  3634  001484  0E01               	movlw	1
  3635  001486  D001               	goto	L4
  3636  001488                     l2149:
  3637                           
  3638                           ;HWIeeprom.c: 43: else
  3639                           ;HWIeeprom.c: 44: {
  3640                           ;HWIeeprom.c: 45: ReadSuccess = (unsigned char)0;
  3641  001488  0E00               	movlw	0
  3642  00148A                     L4:
  3643  00148A  6E52               	movwf	HWIeeprom_Read@ReadSuccess,c
  3644                           
  3645                           ;HWIeeprom.c: 46: }
  3646                           ;HWIeeprom.c: 48: return ReadSuccess;
  3647  00148C  5052               	movf	HWIeeprom_Read@ReadSuccess,w,c
  3648  00148E  0012               	return	
  3649  001490                     __end_of_HWIeeprom_Read:
  3650                           	opt stack 0
  3651                           tosu	equ	0xFFF
  3652                           tosh	equ	0xFFE
  3653                           tosl	equ	0xFFD
  3654                           pclath	equ	0xFFA
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postinc1	equ	0xFE6
  3665                           fsr1h	equ	0xFE2
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           postdec2	equ	0xFDD
  3670                           fsr2h	equ	0xFDA
  3671                           fsr2l	equ	0xFD9
  3672                           status	equ	0xFD8
  3673                           
  3674 ;; *************** function _BlinkDigit *****************
  3675 ;; Defined at:
  3676 ;;		line 121 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  Index           1    wreg     unsigned char 
  3679 ;;  duration        1   19[COMRAM] unsigned char 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  Index           1   20[COMRAM] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3691 ;;      Params:         1       0       0       0       0       0       0
  3692 ;;      Locals:         1       0       0       0       0       0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0
  3694 ;;      Totals:         2       0       0       0       0       0       0
  3695 ;;Total ram usage:        2 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    4
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_APP_MANAGE
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text22
  3706  00153A                     __ptext22:
  3707                           	opt stack 0
  3708  00153A                     _BlinkDigit:
  3709                           	opt stack 22
  3710                           
  3711                           ;incstack = 0
  3712                           ;BlinkDigit@Index stored from wreg
  3713  00153A  6E50               	movwf	BlinkDigit@Index,c
  3714                           
  3715                           ;BCDdisplay.c: 123: BlinkIndex = Index;
  3716  00153C  C050  F033         	movff	BlinkDigit@Index,_BlinkIndex
  3717                           
  3718                           ;BCDdisplay.c: 124: BlinkDuration = duration;
  3719  001540  C04F  F032         	movff	BlinkDigit@duration,_BlinkDuration
  3720  001544  0012               	return		;funcret
  3721  001546                     __end_of_BlinkDigit:
  3722                           	opt stack 0
  3723                           tosu	equ	0xFFF
  3724                           tosh	equ	0xFFE
  3725                           tosl	equ	0xFFD
  3726                           pclath	equ	0xFFA
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           postinc1	equ	0xFE6
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _BCDsendNumber *****************
  3747 ;; Defined at:
  3748 ;;		line 34 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  Number          2   26[COMRAM] unsigned short 
  3751 ;;  DecimalPlace    1   28[COMRAM] unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  Buffer          2   35[COMRAM] unsigned short 
  3754 ;;  Output          2   33[COMRAM] unsigned short 
  3755 ;;  Link            2   31[COMRAM] unsigned short 
  3756 ;;  LoopIndex       1   37[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3766 ;;      Params:         3       0       0       0       0       0       0
  3767 ;;      Locals:         7       0       0       0       0       0       0
  3768 ;;      Temps:          2       0       0       0       0       0       0
  3769 ;;      Totals:        12       0       0       0       0       0       0
  3770 ;;Total ram usage:       12 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    5
  3773 ;; This function calls:
  3774 ;;		___lwdiv
  3775 ;;		___wmul
  3776 ;; This function is called by:
  3777 ;;		_APP_MANAGE
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text23
  3782  000B9A                     __ptext23:
  3783                           	opt stack 0
  3784  000B9A                     _BCDsendNumber:
  3785                           	opt stack 21
  3786                           
  3787                           ;BCDdisplay.c: 36: unsigned short Link,Output,Buffer;
  3788                           ;BCDdisplay.c: 37: unsigned char LoopIndex;
  3789                           ;BCDdisplay.c: 39: Buffer = Number;
  3790                           
  3791                           ;incstack = 0
  3792  000B9A  C056  F05F         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  3793  000B9E  C057  F060         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  3794                           
  3795                           ;BCDdisplay.c: 40: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  3796  000BA2  0E00               	movlw	0
  3797  000BA4  6E61               	movwf	BCDsendNumber@LoopIndex,c
  3798  000BA6                     l2281:
  3799  000BA6  0E03               	movlw	3
  3800  000BA8  6461               	cpfsgt	BCDsendNumber@LoopIndex,c
  3801  000BAA  D001               	goto	l2285
  3802  000BAC  D05C               	goto	l2305
  3803  000BAE                     l2285:
  3804                           
  3805                           ;BCDdisplay.c: 41: {
  3806                           ;BCDdisplay.c: 42: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  3807  000BAE  505F               	movf	BCDsendNumber@Buffer,w,c
  3808  000BB0  1060               	iorwf	BCDsendNumber@Buffer+1,w,c
  3809  000BB2  A4D8               	btfss	status,2,c
  3810  000BB4  D004               	goto	l61
  3811  000BB6  5061               	movf	BCDsendNumber@LoopIndex,w,c
  3812  000BB8  5C58               	subwf	BCDsendNumber@DecimalPlace,w,c
  3813  000BBA  A0D8               	btfss	status,0,c
  3814  000BBC  D02D               	goto	l2295
  3815  000BBE                     l61:
  3816                           
  3817                           ;BCDdisplay.c: 43: {
  3818                           ;BCDdisplay.c: 44: Link = Buffer;
  3819  000BBE  C05F  F05B         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  3820  000BC2  C060  F05C         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  3821                           
  3822                           ;BCDdisplay.c: 45: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  3823  000BC6  C05F  F04F         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  3824  000BCA  C060  F050         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  3825  000BCE  0E00               	movlw	0
  3826  000BD0  6E52               	movwf	___lwdiv@divisor+1,c
  3827  000BD2  0E0A               	movlw	10
  3828  000BD4  6E51               	movwf	___lwdiv@divisor,c
  3829  000BD6  ECCE  F008         	call	___lwdiv	;wreg free
  3830  000BDA  C04F  F05F         	movff	?___lwdiv,BCDsendNumber@Buffer
  3831  000BDE  C050  F060         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  3832                           
  3833                           ;BCDdisplay.c: 46: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  3834  000BE2  C05F  F04F         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  3835  000BE6  C060  F050         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  3836  000BEA  0E00               	movlw	0
  3837  000BEC  6E52               	movwf	___wmul@multiplicand+1,c
  3838  000BEE  0E0A               	movlw	10
  3839  000BF0  6E51               	movwf	___wmul@multiplicand,c
  3840  000BF2  EC48  F00A         	call	___wmul	;wreg free
  3841  000BF6  1E4F               	comf	?___wmul,f,c
  3842  000BF8  1E50               	comf	?___wmul+1,f,c
  3843  000BFA  4A4F               	infsnz	?___wmul,f,c
  3844  000BFC  2A50               	incf	?___wmul+1,f,c
  3845  000BFE  505B               	movf	BCDsendNumber@Link,w,c
  3846  000C00  244F               	addwf	?___wmul,w,c
  3847  000C02  6E5D               	movwf	BCDsendNumber@Output,c
  3848  000C04  505C               	movf	BCDsendNumber@Link+1,w,c
  3849  000C06  2050               	addwfc	?___wmul+1,w,c
  3850  000C08  6E5E               	movwf	BCDsendNumber@Output+1,c
  3851                           
  3852                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  3853  000C0A  0E2E               	movlw	low _SevenSegmentMAP
  3854  000C0C  245D               	addwf	BCDsendNumber@Output,w,c
  3855  000C0E  6EF6               	movwf	tblptrl,c
  3856  000C10  0E06               	movlw	high _SevenSegmentMAP
  3857  000C12  205E               	addwfc	BCDsendNumber@Output+1,w,c
  3858  000C14  6EF7               	movwf	tblptrh,c
  3859  000C16                     	if	0	;There are less than 3 active tblptr bytes
  3860  000C16  D008               	goto	L5
  3861  000C18                     l2295:
  3862                           
  3863                           ;BCDdisplay.c: 50: else if (LoopIndex <= DecimalPlace)
  3864  000C18  5061               	movf	BCDsendNumber@LoopIndex,w,c
  3865  000C1A  5C58               	subwf	BCDsendNumber@DecimalPlace,w,c
  3866  000C1C  A0D8               	btfss	status,0,c
  3867  000C1E  D015               	goto	l2299
  3868                           
  3869                           ;BCDdisplay.c: 51: {
  3870                           ;BCDdisplay.c: 52: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  3871  000C20  0E2E               	movlw	low _SevenSegmentMAP
  3872  000C22  6EF6               	movwf	tblptrl,c
  3873  000C24                     	if	1	;There is more than 1 active tblptr byte
  3874  000C24  0E06               	movlw	high _SevenSegmentMAP
  3875  000C26  6EF7               	movwf	tblptrh,c
  3876  000C28                     	endif
  3877  000C28                     	if	0	;There are less than 3 active tblptr bytes
  3878  000C28                     L5:
  3879  000C28                     	endif
  3880  000C28  0008               	tblrd		*
  3881  000C2A  50F5               	movf	tablat,w,c
  3882  000C2C  6E59               	movwf	??_BCDsendNumber& (0+255),c
  3883  000C2E  6A5A               	clrf	(??_BCDsendNumber+1)& (0+255),c
  3884  000C30  5061               	movf	BCDsendNumber@LoopIndex,w,c
  3885  000C32  0D02               	mullw	2
  3886  000C34  0E11               	movlw	low _BCDNumber
  3887  000C36  24F3               	addwf	prodl,w,c
  3888  000C38  6ED9               	movwf	fsr2l,c
  3889  000C3A  0E00               	movlw	high _BCDNumber
  3890  000C3C  20F4               	addwfc	prodh,w,c
  3891  000C3E  6EDA               	movwf	fsr2h,c
  3892  000C40  C059  FFDE         	movff	??_BCDsendNumber,postinc2
  3893  000C44  C05A  FFDD         	movff	??_BCDsendNumber+1,postdec2
  3894                           
  3895                           ;BCDdisplay.c: 53: }
  3896  000C48  D00C               	goto	l2301
  3897  000C4A                     l2299:
  3898                           
  3899                           ;BCDdisplay.c: 54: else
  3900                           ;BCDdisplay.c: 55: {
  3901                           ;BCDdisplay.c: 56: BCDNumber[LoopIndex] = 0x0;
  3902  000C4A  5061               	movf	BCDsendNumber@LoopIndex,w,c
  3903  000C4C  0D02               	mullw	2
  3904  000C4E  0E11               	movlw	low _BCDNumber
  3905  000C50  24F3               	addwf	prodl,w,c
  3906  000C52  6ED9               	movwf	fsr2l,c
  3907  000C54  0E00               	movlw	high _BCDNumber
  3908  000C56  20F4               	addwfc	prodh,w,c
  3909  000C58  6EDA               	movwf	fsr2h,c
  3910  000C5A  0E00               	movlw	0
  3911  000C5C  6EDE               	movwf	postinc2,c
  3912  000C5E  0E00               	movlw	0
  3913  000C60  6EDD               	movwf	postdec2,c
  3914  000C62                     l2301:
  3915  000C62  2A61               	incf	BCDsendNumber@LoopIndex,f,c
  3916  000C64  D7A0               	goto	l2281
  3917  000C66                     l2305:
  3918                           
  3919                           ;BCDdisplay.c: 57: }
  3920                           ;BCDdisplay.c: 58: }
  3921                           ;BCDdisplay.c: 59: if(DecimalPlace != (unsigned char)0)
  3922  000C66  5058               	movf	BCDsendNumber@DecimalPlace,w,c
  3923  000C68  B4D8               	btfsc	status,2,c
  3924  000C6A  0012               	return	
  3925                           
  3926                           ;BCDdisplay.c: 60: {
  3927                           ;BCDdisplay.c: 61: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  3928  000C6C  5058               	movf	BCDsendNumber@DecimalPlace,w,c
  3929  000C6E  0D02               	mullw	2
  3930  000C70  0E11               	movlw	low _BCDNumber
  3931  000C72  24F3               	addwf	prodl,w,c
  3932  000C74  6ED9               	movwf	fsr2l,c
  3933  000C76  0E00               	movlw	high _BCDNumber
  3934  000C78  20F4               	addwfc	prodh,w,c
  3935  000C7A  6EDA               	movwf	fsr2h,c
  3936  000C7C  0E38               	movlw	low (_SevenSegmentMAP+10)
  3937  000C7E  6EF6               	movwf	tblptrl,c
  3938  000C80  0E06               	movlw	high (_SevenSegmentMAP+10)
  3939  000C82  6EF7               	movwf	tblptrh,c
  3940  000C84                     	if	0	;tblptru may be non-zero
  3941  000C84                     	endif
  3942  000C84                     	if	0	;tblptru may be non-zero
  3943  000C84                     	endif
  3944  000C84  0008               	tblrd		*
  3945  000C86  50F5               	movf	tablat,w,c
  3946  000C88  12DE               	iorwf	postinc2,f,c
  3947  000C8A  0E00               	movlw	0
  3948  000C8C  12DD               	iorwf	postdec2,f,c
  3949  000C8E  0012               	return	
  3950  000C90                     __end_of_BCDsendNumber:
  3951                           	opt stack 0
  3952                           tosu	equ	0xFFF
  3953                           tosh	equ	0xFFE
  3954                           tosl	equ	0xFFD
  3955                           pclath	equ	0xFFA
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postinc1	equ	0xFE6
  3966                           fsr1h	equ	0xFE2
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function ___wmul *****************
  3976 ;; Defined at:
  3977 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  multiplier      2   19[COMRAM] unsigned int 
  3980 ;;  multiplicand    2   21[COMRAM] unsigned int 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  product         2   23[COMRAM] unsigned int 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  2   19[COMRAM] unsigned int 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0, prodl, prodh
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         4       0       0       0       0       0       0
  3993 ;;      Locals:         2       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         6       0       0       0       0       0       0
  3996 ;;Total ram usage:        6 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    4
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_BCDsendNumber
  4003 ;;		_SpeedCalcManage
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text24
  4008  001490                     __ptext24:
  4009                           	opt stack 0
  4010  001490                     ___wmul:
  4011                           	opt stack 22
  4012                           
  4013                           ;incstack = 0
  4014  001490  504F               	movf	___wmul@multiplier,w,c
  4015  001492  0251               	mulwf	___wmul@multiplicand,c
  4016  001494  CFF3 F053          	movff	prodl,___wmul@product
  4017  001498  CFF4 F054          	movff	prodh,___wmul@product+1
  4018  00149C  504F               	movf	___wmul@multiplier,w,c
  4019  00149E  0252               	mulwf	___wmul@multiplicand+1,c
  4020  0014A0  50F3               	movf	prodl,w,c
  4021  0014A2  2654               	addwf	___wmul@product+1,f,c
  4022  0014A4  5050               	movf	___wmul@multiplier+1,w,c
  4023  0014A6  0251               	mulwf	___wmul@multiplicand,c
  4024  0014A8  50F3               	movf	prodl,w,c
  4025  0014AA  2654               	addwf	___wmul@product+1,f,c
  4026  0014AC  C053  F04F         	movff	___wmul@product,?___wmul
  4027  0014B0  C054  F050         	movff	___wmul@product+1,?___wmul+1
  4028  0014B4  0012               	return	
  4029  0014B6                     __end_of___wmul:
  4030                           	opt stack 0
  4031                           tosu	equ	0xFFF
  4032                           tosh	equ	0xFFE
  4033                           tosl	equ	0xFFD
  4034                           pclath	equ	0xFFA
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postinc1	equ	0xFE6
  4045                           fsr1h	equ	0xFE2
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function ___lwdiv *****************
  4055 ;; Defined at:
  4056 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  dividend        2   19[COMRAM] unsigned int 
  4059 ;;  divisor         2   21[COMRAM] unsigned int 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  quotient        2   24[COMRAM] unsigned int 
  4062 ;;  counter         1   23[COMRAM] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  2   19[COMRAM] unsigned int 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4072 ;;      Params:         4       0       0       0       0       0       0
  4073 ;;      Locals:         3       0       0       0       0       0       0
  4074 ;;      Temps:          0       0       0       0       0       0       0
  4075 ;;      Totals:         7       0       0       0       0       0       0
  4076 ;;Total ram usage:        7 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    4
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_BCDsendNumber
  4083 ;;		_SpeedCalcManage
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text25
  4088  00119C                     __ptext25:
  4089                           	opt stack 0
  4090  00119C                     ___lwdiv:
  4091                           	opt stack 22
  4092                           
  4093                           ;incstack = 0
  4094  00119C  0E00               	movlw	0
  4095  00119E  6E55               	movwf	___lwdiv@quotient+1,c
  4096  0011A0  0E00               	movlw	0
  4097  0011A2  6E54               	movwf	___lwdiv@quotient,c
  4098  0011A4  5051               	movf	___lwdiv@divisor,w,c
  4099  0011A6  1052               	iorwf	___lwdiv@divisor+1,w,c
  4100  0011A8  B4D8               	btfsc	status,2,c
  4101  0011AA  D01C               	goto	l862
  4102  0011AC  0E01               	movlw	1
  4103  0011AE  6E53               	movwf	___lwdiv@counter,c
  4104  0011B0  D004               	goto	l2201
  4105  0011B2                     l2199:
  4106  0011B2  90D8               	bcf	status,0,c
  4107  0011B4  3651               	rlcf	___lwdiv@divisor,f,c
  4108  0011B6  3652               	rlcf	___lwdiv@divisor+1,f,c
  4109  0011B8  2A53               	incf	___lwdiv@counter,f,c
  4110  0011BA                     l2201:
  4111  0011BA  AE52               	btfss	___lwdiv@divisor+1,7,c
  4112  0011BC  D7FA               	goto	l2199
  4113  0011BE                     l2203:
  4114  0011BE  90D8               	bcf	status,0,c
  4115  0011C0  3654               	rlcf	___lwdiv@quotient,f,c
  4116  0011C2  3655               	rlcf	___lwdiv@quotient+1,f,c
  4117  0011C4  5051               	movf	___lwdiv@divisor,w,c
  4118  0011C6  5C4F               	subwf	___lwdiv@dividend,w,c
  4119  0011C8  5052               	movf	___lwdiv@divisor+1,w,c
  4120  0011CA  5850               	subwfb	___lwdiv@dividend+1,w,c
  4121  0011CC  A0D8               	btfss	status,0,c
  4122  0011CE  D005               	goto	l2211
  4123  0011D0  5051               	movf	___lwdiv@divisor,w,c
  4124  0011D2  5E4F               	subwf	___lwdiv@dividend,f,c
  4125  0011D4  5052               	movf	___lwdiv@divisor+1,w,c
  4126  0011D6  5A50               	subwfb	___lwdiv@dividend+1,f,c
  4127  0011D8  8054               	bsf	___lwdiv@quotient,0,c
  4128  0011DA                     l2211:
  4129  0011DA  90D8               	bcf	status,0,c
  4130  0011DC  3252               	rrcf	___lwdiv@divisor+1,f,c
  4131  0011DE  3251               	rrcf	___lwdiv@divisor,f,c
  4132  0011E0  2E53               	decfsz	___lwdiv@counter,f,c
  4133  0011E2  D7ED               	goto	l2203
  4134  0011E4                     l862:
  4135  0011E4  C054  F04F         	movff	___lwdiv@quotient,?___lwdiv
  4136  0011E8  C055  F050         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4137  0011EC  0012               	return		;funcret
  4138  0011EE                     __end_of___lwdiv:
  4139                           	opt stack 0
  4140                           tosu	equ	0xFFF
  4141                           tosh	equ	0xFFE
  4142                           tosl	equ	0xFFD
  4143                           pclath	equ	0xFFA
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           postinc1	equ	0xFE6
  4154                           fsr1h	equ	0xFE2
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _BCDManage7segment *****************
  4164 ;; Defined at:
  4165 ;;		line 65 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  BCD             1   24[COMRAM] unsigned char 
  4170 ;;  Index           1   23[COMRAM] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4180 ;;      Params:         0       0       0       0       0       0       0
  4181 ;;      Locals:         2       0       0       0       0       0       0
  4182 ;;      Temps:          2       0       0       0       0       0       0
  4183 ;;      Totals:         4       0       0       0       0       0       0
  4184 ;;Total ram usage:        4 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    5
  4187 ;; This function calls:
  4188 ;;		_HWI_4Digit_WRITE
  4189 ;;		_HWI_8Digit_WRITE
  4190 ;; This function is called by:
  4191 ;;		_DisplayAlphaNumeric
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text26
  4196  000E82                     __ptext26:
  4197                           	opt stack 0
  4198  000E82                     _BCDManage7segment:
  4199                           	opt stack 22
  4200                           
  4201                           ;BCDdisplay.c: 67: static unsigned char DigitIndex = (unsigned char)0;
  4202                           ;BCDdisplay.c: 68: static unsigned char BlinkCounter = (unsigned char)0;
  4203                           ;BCDdisplay.c: 69: unsigned char Index;
  4204                           ;BCDdisplay.c: 70: unsigned char BCD = (unsigned char)0;
  4205                           
  4206                           ;incstack = 0
  4207  000E82  0E00               	movlw	0
  4208  000E84  6E54               	movwf	BCDManage7segment@BCD,c
  4209                           
  4210                           ;BCDdisplay.c: 73: if( BlinkDuration != (unsigned char)0)
  4211  000E86  5032               	movf	_BlinkDuration,w,c
  4212  000E88  B4D8               	btfsc	status,2,c
  4213  000E8A  D00A               	goto	l1959
  4214                           
  4215                           ;BCDdisplay.c: 74: {
  4216                           ;BCDdisplay.c: 75: BlinkCounter++;
  4217  000E8C  2A30               	incf	BCDManage7segment@BlinkCounter,f,c
  4218                           
  4219                           ;BCDdisplay.c: 76: if(BlinkCounter == BlinkDuration)
  4220  000E8E  5032               	movf	_BlinkDuration,w,c
  4221  000E90  1830               	xorwf	BCDManage7segment@BlinkCounter,w,c
  4222  000E92  A4D8               	btfss	status,2,c
  4223  000E94  D007               	goto	l1961
  4224                           
  4225                           ;BCDdisplay.c: 77: {
  4226                           ;BCDdisplay.c: 78: BlinkFlag ^= (unsigned char)1;
  4227  000E96  0E01               	movlw	1
  4228  000E98  1A31               	xorwf	_BlinkFlag,f,c
  4229                           
  4230                           ;BCDdisplay.c: 79: BlinkCounter = (unsigned char)0;
  4231  000E9A  0E00               	movlw	0
  4232  000E9C  6E30               	movwf	BCDManage7segment@BlinkCounter,c
  4233                           
  4234                           ;BCDdisplay.c: 80: }
  4235                           ;BCDdisplay.c: 81: }
  4236  000E9E  D002               	goto	l1961
  4237  000EA0                     l1959:
  4238                           
  4239                           ;BCDdisplay.c: 82: else
  4240                           ;BCDdisplay.c: 83: {
  4241                           ;BCDdisplay.c: 84: BlinkFlag = (unsigned char)0;
  4242  000EA0  0E00               	movlw	0
  4243  000EA2  6E31               	movwf	_BlinkFlag,c
  4244  000EA4                     l1961:
  4245                           
  4246                           ;BCDdisplay.c: 85: }
  4247                           ;BCDdisplay.c: 87: if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex))
  4248  000EA4  0431               	decf	_BlinkFlag,w,c
  4249  000EA6  A4D8               	btfss	status,2,c
  4250  000EA8  D007               	goto	l1967
  4251  000EAA  5033               	movf	_BlinkIndex,w,c
  4252  000EAC  183B               	xorwf	BCDManage7segment@DigitIndex,w,c
  4253  000EAE  A4D8               	btfss	status,2,c
  4254  000EB0  D003               	goto	l1967
  4255                           
  4256                           ;BCDdisplay.c: 88: {
  4257                           ;BCDdisplay.c: 89: Index = (unsigned char)0xF;
  4258  000EB2  0E0F               	movlw	15
  4259  000EB4  6E53               	movwf	BCDManage7segment@Index,c
  4260                           
  4261                           ;BCDdisplay.c: 90: }
  4262  000EB6  D01A               	goto	l1971
  4263  000EB8                     l1967:
  4264                           
  4265                           ;BCDdisplay.c: 91: else
  4266                           ;BCDdisplay.c: 92: {
  4267                           ;BCDdisplay.c: 93: Index = (~(((unsigned char) 0x1 << ((4 - DigitIndex)
  4268                           ;BCDdisplay.c: 94: - (unsigned char)1))));
  4269  000EB8  283B               	incf	BCDManage7segment@DigitIndex,w,c
  4270  000EBA  0800               	sublw	0
  4271  000EBC  6E51               	movwf	??_BCDManage7segment& (0+255),c
  4272  000EBE  0E04               	movlw	4
  4273  000EC0  2651               	addwf	??_BCDManage7segment,f,c
  4274  000EC2  0E01               	movlw	1
  4275  000EC4  6E52               	movwf	(??_BCDManage7segment+1)& (0+255),c
  4276  000EC6  2A51               	incf	??_BCDManage7segment,f,c
  4277  000EC8  D002               	goto	u1084
  4278  000ECA                     u1085:
  4279  000ECA  90D8               	bcf	status,0,c
  4280  000ECC  3652               	rlcf	??_BCDManage7segment+1,f,c
  4281  000ECE                     u1084:
  4282  000ECE  2E51               	decfsz	??_BCDManage7segment,f,c
  4283  000ED0  D7FC               	goto	u1085
  4284  000ED2  5052               	movf	??_BCDManage7segment+1,w,c
  4285  000ED4  0AFF               	xorlw	255
  4286  000ED6  6E53               	movwf	BCDManage7segment@Index,c
  4287                           
  4288                           ;BCDdisplay.c: 95: BCD = BCDNumber[DigitIndex];
  4289  000ED8  503B               	movf	BCDManage7segment@DigitIndex,w,c
  4290  000EDA  0D02               	mullw	2
  4291  000EDC  0E11               	movlw	low _BCDNumber
  4292  000EDE  24F3               	addwf	prodl,w,c
  4293  000EE0  6ED9               	movwf	fsr2l,c
  4294  000EE2  0E00               	movlw	high _BCDNumber
  4295  000EE4  20F4               	addwfc	prodh,w,c
  4296  000EE6  6EDA               	movwf	fsr2h,c
  4297  000EE8  50DF               	movf	indf2,w,c
  4298  000EEA  6E54               	movwf	BCDManage7segment@BCD,c
  4299  000EEC                     l1971:
  4300                           
  4301                           ;BCDdisplay.c: 96: }
  4302                           ;BCDdisplay.c: 98: if( (unsigned char)1 == bIsAnodeUsed)
  4303  000EEC  0434               	decf	_bIsAnodeUsed,w,c
  4304  000EEE  A4D8               	btfss	status,2,c
  4305  000EF0  D002               	goto	l1975
  4306                           
  4307                           ;BCDdisplay.c: 99: {
  4308                           ;BCDdisplay.c: 100: Index = (unsigned char)~Index;
  4309  000EF2  1E53               	comf	BCDManage7segment@Index,f,c
  4310                           
  4311                           ;BCDdisplay.c: 101: BCD = (unsigned char)~BCD;
  4312  000EF4  1E54               	comf	BCDManage7segment@BCD,f,c
  4313  000EF6                     l1975:
  4314                           
  4315                           ;BCDdisplay.c: 102: }
  4316                           ;BCDdisplay.c: 104: HWI_4Digit_WRITE(0,Index);
  4317  000EF6  C053  F04F         	movff	BCDManage7segment@Index,HWI_4Digit_WRITE@value
  4318  000EFA  0E00               	movlw	0
  4319  000EFC  EC94  F009         	call	_HWI_4Digit_WRITE
  4320                           
  4321                           ;BCDdisplay.c: 105: HWI_8Digit_WRITE(1,BCD);
  4322  000F00  C054  F04F         	movff	BCDManage7segment@BCD,HWI_8Digit_WRITE@value
  4323  000F04  0E01               	movlw	1
  4324  000F06  EC5B  F00A         	call	_HWI_8Digit_WRITE
  4325                           
  4326                           ;BCDdisplay.c: 112: DigitIndex ++;
  4327  000F0A  2A3B               	incf	BCDManage7segment@DigitIndex,f,c
  4328                           
  4329                           ;BCDdisplay.c: 113: if(DigitIndex == 4)
  4330  000F0C  0E04               	movlw	4
  4331  000F0E  183B               	xorwf	BCDManage7segment@DigitIndex,w,c
  4332  000F10  A4D8               	btfss	status,2,c
  4333  000F12  0012               	return	
  4334                           
  4335                           ;BCDdisplay.c: 114: {
  4336                           ;BCDdisplay.c: 115: DigitIndex = (unsigned char)0;
  4337  000F14  0E00               	movlw	0
  4338  000F16  6E3B               	movwf	BCDManage7segment@DigitIndex,c
  4339  000F18  0012               	return	
  4340  000F1A                     __end_of_BCDManage7segment:
  4341                           	opt stack 0
  4342                           tosu	equ	0xFFF
  4343                           tosh	equ	0xFFE
  4344                           tosl	equ	0xFFD
  4345                           pclath	equ	0xFFA
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postinc1	equ	0xFE6
  4356                           fsr1h	equ	0xFE2
  4357                           fsr1l	equ	0xFE1
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _HWI_8Digit_WRITE *****************
  4366 ;; Defined at:
  4367 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  port            1    wreg     unsigned char 
  4370 ;;  value           1   19[COMRAM] unsigned char 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  port            1   20[COMRAM] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4382 ;;      Params:         1       0       0       0       0       0       0
  4383 ;;      Locals:         1       0       0       0       0       0       0
  4384 ;;      Temps:          0       0       0       0       0       0       0
  4385 ;;      Totals:         2       0       0       0       0       0       0
  4386 ;;Total ram usage:        2 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    4
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_BCDManage7segment
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text27
  4397  0014B6                     __ptext27:
  4398                           	opt stack 0
  4399  0014B6                     _HWI_8Digit_WRITE:
  4400                           	opt stack 22
  4401                           
  4402                           ;incstack = 0
  4403                           ;HWI_8Digit_WRITE@port stored from wreg
  4404  0014B6  6E50               	movwf	HWI_8Digit_WRITE@port,c
  4405                           
  4406                           ;HWI_DIGITAL.c: 43: switch (port)
  4407  0014B8  D009               	goto	l1873
  4408  0014BA                     l359:
  4409                           
  4410                           ;HWI_DIGITAL.c: 46: PORTC = value;
  4411  0014BA  C04F  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  4412                           
  4413                           ;HWI_DIGITAL.c: 47: break;
  4414  0014BE  0012               	return	
  4415  0014C0                     l361:
  4416                           
  4417                           ;HWI_DIGITAL.c: 49: PORTD = value;
  4418  0014C0  C04F  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4419                           
  4420                           ;HWI_DIGITAL.c: 50: break;
  4421  0014C4  0012               	return	
  4422  0014C6                     l362:
  4423                           
  4424                           ;HWI_DIGITAL.c: 52: PORTD = value;
  4425  0014C6  C04F  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4426                           
  4427                           ;HWI_DIGITAL.c: 53: }
  4428  0014CA  0012               	return	
  4429  0014CC                     l1873:
  4430  0014CC  5050               	movf	HWI_8Digit_WRITE@port,w,c
  4431                           
  4432                           ; Switch size 1, requested type "space"
  4433                           ; Number of cases is 2, Range of values is 0 to 1
  4434                           ; switch strategies available:
  4435                           ; Name         Instructions Cycles
  4436                           ; simple_byte            7     4 (average)
  4437                           ;	Chosen strategy is simple_byte
  4438  0014CE  0A00               	xorlw	0	; case 0
  4439  0014D0  B4D8               	btfsc	status,2,c
  4440  0014D2  D7F3               	goto	l359
  4441  0014D4  0A01               	xorlw	1	; case 1
  4442  0014D6  B4D8               	btfsc	status,2,c
  4443  0014D8  D7F3               	goto	l361
  4444  0014DA  D7F5               	goto	l362
  4445  0014DC                     __end_of_HWI_8Digit_WRITE:
  4446                           	opt stack 0
  4447                           tosu	equ	0xFFF
  4448                           tosh	equ	0xFFE
  4449                           tosl	equ	0xFFD
  4450                           pclath	equ	0xFFA
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           intcon	equ	0xFF2
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postinc1	equ	0xFE6
  4461                           fsr1h	equ	0xFE2
  4462                           fsr1l	equ	0xFE1
  4463                           indf2	equ	0xFDF
  4464                           postinc2	equ	0xFDE
  4465                           postdec2	equ	0xFDD
  4466                           fsr2h	equ	0xFDA
  4467                           fsr2l	equ	0xFD9
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _HWI_4Digit_WRITE *****************
  4471 ;; Defined at:
  4472 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  port            1    wreg     unsigned char 
  4475 ;;  value           1   19[COMRAM] unsigned char 
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  port            1   20[COMRAM] unsigned char 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      void 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2, status,0
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4487 ;;      Params:         1       0       0       0       0       0       0
  4488 ;;      Locals:         1       0       0       0       0       0       0
  4489 ;;      Temps:          0       0       0       0       0       0       0
  4490 ;;      Totals:         2       0       0       0       0       0       0
  4491 ;;Total ram usage:        2 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    4
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_BCDManage7segment
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text28
  4502  001328                     __ptext28:
  4503                           	opt stack 0
  4504  001328                     _HWI_4Digit_WRITE:
  4505                           	opt stack 22
  4506                           
  4507                           ;incstack = 0
  4508                           ;HWI_4Digit_WRITE@port stored from wreg
  4509  001328  6E50               	movwf	HWI_4Digit_WRITE@port,c
  4510                           
  4511                           ;HWI_DIGITAL.c: 10: switch (port)
  4512  00132A  D00F               	goto	l1869
  4513  00132C                     l1863:
  4514                           
  4515                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  4516  00132C  508B               	movf	3979,w,c	;volatile
  4517  00132E  0BF0               	andlw	240
  4518  001330  104F               	iorwf	HWI_4Digit_WRITE@value,w,c
  4519  001332  6E82               	movwf	3970,c	;volatile
  4520                           
  4521                           ;HWI_DIGITAL.c: 14: break;
  4522  001334  0012               	return	
  4523  001336                     l1865:
  4524                           
  4525                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  4526  001336  508C               	movf	3980,w,c	;volatile
  4527  001338  0BF0               	andlw	240
  4528  00133A  104F               	iorwf	HWI_4Digit_WRITE@value,w,c
  4529  00133C  6E83               	movwf	3971,c	;volatile
  4530                           
  4531                           ;HWI_DIGITAL.c: 17: break;
  4532  00133E  0012               	return	
  4533  001340                     l1867:
  4534                           
  4535                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  4536  001340  508C               	movf	3980,w,c	;volatile
  4537  001342  0BF0               	andlw	240
  4538  001344  104F               	iorwf	HWI_4Digit_WRITE@value,w,c
  4539  001346  6E83               	movwf	3971,c	;volatile
  4540                           
  4541                           ;HWI_DIGITAL.c: 20: }
  4542  001348  0012               	return	
  4543  00134A                     l1869:
  4544  00134A  5050               	movf	HWI_4Digit_WRITE@port,w,c
  4545                           
  4546                           ; Switch size 1, requested type "space"
  4547                           ; Number of cases is 2, Range of values is 0 to 1
  4548                           ; switch strategies available:
  4549                           ; Name         Instructions Cycles
  4550                           ; simple_byte            7     4 (average)
  4551                           ;	Chosen strategy is simple_byte
  4552  00134C  0A00               	xorlw	0	; case 0
  4553  00134E  B4D8               	btfsc	status,2,c
  4554  001350  D7ED               	goto	l1863
  4555  001352  0A01               	xorlw	1	; case 1
  4556  001354  B4D8               	btfsc	status,2,c
  4557  001356  D7EF               	goto	l1865
  4558  001358  D7F3               	goto	l1867
  4559  00135A                     __end_of_HWI_4Digit_WRITE:
  4560                           	opt stack 0
  4561                           tosu	equ	0xFFF
  4562                           tosh	equ	0xFFE
  4563                           tosl	equ	0xFFD
  4564                           pclath	equ	0xFFA
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           postinc1	equ	0xFE6
  4575                           fsr1h	equ	0xFE2
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  4585 ;; Defined at:
  4586 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;		None
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      void 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4600 ;;      Params:         0       0       0       0       0       0       0
  4601 ;;      Locals:         0       0       0       0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0
  4603 ;;      Totals:         0       0       0       0       0       0       0
  4604 ;;Total ram usage:        0 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    4
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_Start_App
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text29
  4615  0012AE                     __ptext29:
  4616                           	opt stack 0
  4617  0012AE                     _HWI_INTERRUPTS_INTITALIZE:
  4618                           	opt stack 25
  4619                           
  4620                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  4621                           
  4622                           ;incstack = 0
  4623  0012AE  8093               	bsf	3987,0,c	;volatile
  4624                           
  4625                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  4626  0012B0  8293               	bsf	3987,1,c	;volatile
  4627                           
  4628                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  4629  0012B2  0EF0               	movlw	240
  4630  0012B4  6EF2               	movwf	intcon,c	;volatile
  4631                           
  4632                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  4633  0012B6  0E08               	movlw	8
  4634  0012B8  6EF0               	movwf	intcon3,c	;volatile
  4635                           
  4636                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  4637  0012BA  0ED1               	movlw	209
  4638  0012BC  6ED5               	movwf	4053,c	;volatile
  4639                           
  4640                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  4641  0012BE  0E85               	movlw	133
  4642  0012C0  6ECD               	movwf	4045,c	;volatile
  4643                           
  4644                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  4645  0012C2  0E9D               	movlw	157
  4646  0012C4  6EB1               	movwf	4017,c	;volatile
  4647                           
  4648                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  4649  0012C6  8CF1               	bsf	intcon2,6,c	;volatile
  4650                           
  4651                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  4652  0012C8  8AF1               	bsf	intcon2,5,c	;volatile
  4653                           
  4654                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  4655  0012CA  94F2               	bcf	intcon,2,c	;volatile
  4656                           
  4657                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  4658  0012CC  8AF2               	bsf	intcon,5,c	;volatile
  4659                           
  4660                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  4661  0012CE  909E               	bcf	3998,0,c	;volatile
  4662                           
  4663                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  4664  0012D0  809D               	bsf	3997,0,c	;volatile
  4665                           
  4666                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  4667  0012D2  92A1               	bcf	4001,1,c	;volatile
  4668                           
  4669                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  4670  0012D4  82A0               	bsf	4000,1,c	;volatile
  4671                           
  4672                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  4673  0012D6  0E13               	movlw	19
  4674  0012D8  6ED6               	movwf	4054,c	;volatile
  4675                           
  4676                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  4677  0012DA  0E00               	movlw	0
  4678  0012DC  6ECF               	movwf	4047,c	;volatile
  4679  0012DE  0E00               	movlw	0
  4680  0012E0  6ECE               	movwf	4046,c	;volatile
  4681                           
  4682                           ;HWI_Interrupts.c: 47: TMR3L=0;
  4683  0012E2  0E00               	movlw	0
  4684  0012E4  6EB2               	movwf	4018,c	;volatile
  4685                           
  4686                           ;HWI_Interrupts.c: 48: TMR3H=0;
  4687  0012E6  0E00               	movlw	0
  4688  0012E8  6EB3               	movwf	4019,c	;volatile
  4689  0012EA  0012               	return		;funcret
  4690  0012EC                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  4691                           	opt stack 0
  4692                           tosu	equ	0xFFF
  4693                           tosh	equ	0xFFE
  4694                           tosl	equ	0xFFD
  4695                           pclath	equ	0xFFA
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           intcon2	equ	0xFF1
  4704                           intcon3	equ	0xFF0
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           postinc1	equ	0xFE6
  4708                           fsr1h	equ	0xFE2
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           postdec2	equ	0xFDD
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  4718 ;; Defined at:
  4719 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4733 ;;      Params:         0       0       0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0
  4736 ;;      Totals:         0       0       0       0       0       0       0
  4737 ;;Total ram usage:        0 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    4
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_Start_App
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text30
  4748  0014F8                     __ptext30:
  4749                           	opt stack 0
  4750  0014F8                     _HWI_DIGITAL_INITIALIZE:
  4751                           	opt stack 25
  4752                           
  4753                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  4754                           
  4755                           ;incstack = 0
  4756  0014F8  0E00               	movlw	0
  4757  0014FA  6E95               	movwf	3989,c	;volatile
  4758                           
  4759                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  4760  0014FC  0E00               	movlw	0
  4761  0014FE  6E83               	movwf	3971,c	;volatile
  4762                           
  4763                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  4764  001500  0E00               	movlw	0
  4765  001502  6E94               	movwf	3988,c	;volatile
  4766                           
  4767                           ;HWI_DIGITAL.c: 81: TRISBbits.RB2 = 1;
  4768  001504  8493               	bsf	3987,2,c	;volatile
  4769                           
  4770                           ;HWI_DIGITAL.c: 82: TRISBbits.RB3 = 1;
  4771  001506  8693               	bsf	3987,3,c	;volatile
  4772                           
  4773                           ;HWI_DIGITAL.c: 85: TRISBbits.RB4 =0;
  4774  001508  9893               	bcf	3987,4,c	;volatile
  4775                           
  4776                           ;HWI_DIGITAL.c: 86: TRISBbits.RB5 =0;
  4777  00150A  9A93               	bcf	3987,5,c	;volatile
  4778                           
  4779                           ;HWI_DIGITAL.c: 87: TRISBbits.RB6 =0;
  4780  00150C  9C93               	bcf	3987,6,c	;volatile
  4781                           
  4782                           ;HWI_DIGITAL.c: 88: TRISBbits.RB7 =0;
  4783  00150E  9E93               	bcf	3987,7,c	;volatile
  4784  001510  0012               	return		;funcret
  4785  001512                     __end_of_HWI_DIGITAL_INITIALIZE:
  4786                           	opt stack 0
  4787                           tosu	equ	0xFFF
  4788                           tosh	equ	0xFFE
  4789                           tosl	equ	0xFFD
  4790                           pclath	equ	0xFFA
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           intcon2	equ	0xFF1
  4799                           intcon3	equ	0xFF0
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postinc1	equ	0xFE6
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _CreateTask *****************
  4813 ;; Defined at:
  4814 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  4817 ;;		 -> ManageDrivers(1), DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  4818 ;;  TaskId          1   21[COMRAM] unsigned char 
  4819 ;;  Period          1   22[COMRAM] unsigned char 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;		None
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      void 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4831 ;;      Params:         4       0       0       0       0       0       0
  4832 ;;      Locals:         0       0       0       0       0       0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0
  4834 ;;      Totals:         4       0       0       0       0       0       0
  4835 ;;Total ram usage:        4 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    4
  4838 ;; This function calls:
  4839 ;;		Nothing
  4840 ;; This function is called by:
  4841 ;;		_Start_App
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text31
  4846  0010EE                     __ptext31:
  4847                           	opt stack 0
  4848  0010EE                     _CreateTask:
  4849                           	opt stack 25
  4850                           
  4851                           ;Scheduler.c: 8: if(TaskId < 4)
  4852                           
  4853                           ;incstack = 0
  4854  0010EE  0E04               	movlw	4
  4855  0010F0  6051               	cpfslt	CreateTask@TaskId,c
  4856  0010F2  0012               	return	
  4857                           
  4858                           ;Scheduler.c: 9: {
  4859                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  4860  0010F4  5051               	movf	CreateTask@TaskId,w,c
  4861  0010F6  0D04               	mullw	4
  4862  0010F8  0E01               	movlw	low _ArrayTask
  4863  0010FA  24F3               	addwf	prodl,w,c
  4864  0010FC  6ED9               	movwf	fsr2l,c
  4865  0010FE  0E00               	movlw	high _ArrayTask
  4866  001100  20F4               	addwfc	prodh,w,c
  4867  001102  6EDA               	movwf	fsr2h,c
  4868  001104  C04F  FFDE         	movff	CreateTask@MangeFunction,postinc2
  4869  001108  C050  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  4870                           
  4871                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  4872  00110C  5051               	movf	CreateTask@TaskId,w,c
  4873  00110E  0D04               	mullw	4
  4874  001110  0E02               	movlw	2
  4875  001112  26F3               	addwf	prodl,f,c
  4876  001114  0E00               	movlw	0
  4877  001116  22F4               	addwfc	prodh,f,c
  4878  001118  0E01               	movlw	low _ArrayTask
  4879  00111A  24F3               	addwf	prodl,w,c
  4880  00111C  6ED9               	movwf	fsr2l,c
  4881  00111E  0E00               	movlw	high _ArrayTask
  4882  001120  20F4               	addwfc	prodh,w,c
  4883  001122  6EDA               	movwf	fsr2h,c
  4884  001124  C052  FFDF         	movff	CreateTask@Period,indf2
  4885                           
  4886                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  4887  001128  5051               	movf	CreateTask@TaskId,w,c
  4888  00112A  0D04               	mullw	4
  4889  00112C  0E03               	movlw	3
  4890  00112E  26F3               	addwf	prodl,f,c
  4891  001130  0E00               	movlw	0
  4892  001132  22F4               	addwfc	prodh,f,c
  4893  001134  0E01               	movlw	low _ArrayTask
  4894  001136  24F3               	addwf	prodl,w,c
  4895  001138  6ED9               	movwf	fsr2l,c
  4896  00113A  0E00               	movlw	high _ArrayTask
  4897  00113C  20F4               	addwfc	prodh,w,c
  4898  00113E  6EDA               	movwf	fsr2h,c
  4899  001140  0E00               	movlw	0
  4900  001142  6EDF               	movwf	indf2,c
  4901  001144  0012               	return	
  4902  001146                     __end_of_CreateTask:
  4903                           	opt stack 0
  4904                           tosu	equ	0xFFF
  4905                           tosh	equ	0xFFE
  4906                           tosl	equ	0xFFD
  4907                           pclath	equ	0xFFA
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           prodh	equ	0xFF4
  4913                           prodl	equ	0xFF3
  4914                           intcon	equ	0xFF2
  4915                           intcon2	equ	0xFF1
  4916                           intcon3	equ	0xFF0
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postinc1	equ	0xFE6
  4920                           fsr1h	equ	0xFE2
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _BCDInitialize *****************
  4930 ;; Defined at:
  4931 ;;		line 29 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  bIsCommonAno    1    wreg     unsigned char 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  bIsCommonAno    1   19[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		wreg
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4945 ;;      Params:         0       0       0       0       0       0       0
  4946 ;;      Locals:         1       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0
  4948 ;;      Totals:         1       0       0       0       0       0       0
  4949 ;;Total ram usage:        1 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    4
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_Start_App
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text32
  4960  001562                     __ptext32:
  4961                           	opt stack 0
  4962  001562                     _BCDInitialize:
  4963                           	opt stack 25
  4964                           
  4965                           ;incstack = 0
  4966                           ;BCDInitialize@bIsCommonAnode stored from wreg
  4967  001562  6E4F               	movwf	BCDInitialize@bIsCommonAnode,c
  4968                           
  4969                           ;BCDdisplay.c: 31: bIsAnodeUsed = bIsCommonAnode;
  4970  001564  C04F  F034         	movff	BCDInitialize@bIsCommonAnode,_bIsAnodeUsed
  4971  001568  0012               	return		;funcret
  4972  00156A                     __end_of_BCDInitialize:
  4973                           	opt stack 0
  4974                           tosu	equ	0xFFF
  4975                           tosh	equ	0xFFE
  4976                           tosl	equ	0xFFD
  4977                           pclath	equ	0xFFA
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           intcon3	equ	0xFF0
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           postinc1	equ	0xFE6
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _APP_INITIALIZE *****************
  5000 ;; Defined at:
  5001 ;;		line 13 in file "../../../../Common/App/APP.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  stringX        29    0[BANK0 ] const unsigned char [29]
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5015 ;;      Params:         0       0       0       0       0       0       0
  5016 ;;      Locals:         0      29       0       0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0
  5018 ;;      Totals:         0      29       0       0       0       0       0
  5019 ;;Total ram usage:       29 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    5
  5022 ;; This function calls:
  5023 ;;		_Eeprom_Write_Block
  5024 ;; This function is called by:
  5025 ;;		_Start_App
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text33
  5030  001412                     __ptext33:
  5031                           	opt stack 0
  5032  001412                     _APP_INITIALIZE:
  5033                           	opt stack 24
  5034                           
  5035                           ;APP.c: 15: unsigned char const stringX[] = "ahmed imbaby SW EEPROM OK :D";
  5036                           
  5037                           ;incstack = 0
  5038  001412  0E01               	movlw	low APP_INITIALIZE@F3085
  5039  001414  6EF6               	movwf	tblptrl,c
  5040  001416                     	if	1	;There is more than 1 active tblptr byte
  5041  001416  0E06               	movlw	high APP_INITIALIZE@F3085
  5042  001418  6EF7               	movwf	tblptrh,c
  5043  00141A                     	endif
  5044  00141A                     	if	0	;There are less than 3 active tblptr bytes
  5045  00141A                     	endif
  5046  00141A  EE20  F0B2         	lfsr	2,APP_INITIALIZE@stringX
  5047  00141E  0E1C               	movlw	28
  5048  001420                     u1620:
  5049  001420  0009               	tblrd		*+
  5050  001422  CFF5 FFDE          	movff	tablat,postinc2
  5051  001426  06E8               	decf	wreg,f,c
  5052  001428  E2FB               	bc	u1620
  5053                           
  5054                           ;APP.c: 16: Eeprom_Write_Block(8,(unsigned char*)&stringX , (unsigned char)sizeof(string
      +                          X));
  5055  00142A  0EB2               	movlw	low APP_INITIALIZE@stringX
  5056  00142C  6E4F               	movwf	Eeprom_Write_Block@DataPtr,c
  5057  00142E  0E00               	movlw	high APP_INITIALIZE@stringX
  5058  001430  6E50               	movwf	Eeprom_Write_Block@DataPtr+1,c
  5059  001432  0E1D               	movlw	29
  5060  001434  6E51               	movwf	Eeprom_Write_Block@BlockSize,c
  5061  001436  0E08               	movlw	8
  5062  001438  EC4A  F008         	call	_Eeprom_Write_Block
  5063  00143C  0012               	return		;funcret
  5064  00143E                     __end_of_APP_INITIALIZE:
  5065                           	opt stack 0
  5066                           tosu	equ	0xFFF
  5067                           tosh	equ	0xFFE
  5068                           tosl	equ	0xFFD
  5069                           pclath	equ	0xFFA
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           intcon2	equ	0xFF1
  5078                           intcon3	equ	0xFF0
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postinc1	equ	0xFE6
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _Eeprom_Write_Block *****************
  5092 ;; Defined at:
  5093 ;;		line 12 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  address         1    wreg     unsigned char 
  5096 ;;  DataPtr         2   19[COMRAM] PTR unsigned char 
  5097 ;;		 -> APP_MANAGE@AvgSpeedKph(2), APP_INITIALIZE@stringX(29), 
  5098 ;;  BlockSize       1   21[COMRAM] unsigned char 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  address         1   23[COMRAM] unsigned char 
  5101 ;;  LoopIndex       1   24[COMRAM] unsigned char 
  5102 ;;  WriteGranted    1   22[COMRAM] unsigned char 
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      unsigned char 
  5105 ;; Registers used:
  5106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5112 ;;      Params:         3       0       0       0       0       0       0
  5113 ;;      Locals:         3       0       0       0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0
  5115 ;;      Totals:         6       0       0       0       0       0       0
  5116 ;;Total ram usage:        6 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    4
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		_APP_INITIALIZE
  5123 ;;		_APP_MANAGE
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           	psect	text34
  5128  001094                     __ptext34:
  5129                           	opt stack 0
  5130  001094                     _Eeprom_Write_Block:
  5131                           	opt stack 22
  5132                           
  5133                           ;incstack = 0
  5134                           ;Eeprom_Write_Block@address stored from wreg
  5135  001094  6E53               	movwf	Eeprom_Write_Block@address,c
  5136                           
  5137                           ;Eeprom.c: 19: unsigned char WriteGranted;
  5138                           ;Eeprom.c: 20: unsigned char LoopIndex;
  5139                           ;Eeprom.c: 21: if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= 50))
  5140  001096  502F               	movf	_WriteRequest,w,c
  5141  001098  A4D8               	btfss	status,2,c
  5142  00109A  D026               	goto	l2229
  5143  00109C  0E33               	movlw	51
  5144  00109E  6051               	cpfslt	Eeprom_Write_Block@BlockSize,c
  5145  0010A0  D023               	goto	l2229
  5146                           
  5147                           ;Eeprom.c: 22: {
  5148                           ;Eeprom.c: 23: WriteRequest = (unsigned char)1;
  5149  0010A2  0E01               	movlw	1
  5150  0010A4  6E2F               	movwf	_WriteRequest,c
  5151                           
  5152                           ;Eeprom.c: 25: for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
  5153  0010A6  0E00               	movlw	0
  5154  0010A8  6E54               	movwf	Eeprom_Write_Block@LoopIndex,c
  5155  0010AA  D013               	goto	l2225
  5156  0010AC                     l2221:
  5157                           
  5158                           ;Eeprom.c: 26: {
  5159                           ;Eeprom.c: 27: DataArray[LoopIndex] = DataPtr[LoopIndex];
  5160  0010AC  5054               	movf	Eeprom_Write_Block@LoopIndex,w,c
  5161  0010AE  0D01               	mullw	1
  5162  0010B0  50F3               	movf	prodl,w,c
  5163  0010B2  244F               	addwf	Eeprom_Write_Block@DataPtr,w,c
  5164  0010B4  6ED9               	movwf	fsr2l,c
  5165  0010B6  50F4               	movf	prodh,w,c
  5166  0010B8  2050               	addwfc	Eeprom_Write_Block@DataPtr+1,w,c
  5167  0010BA  6EDA               	movwf	fsr2h,c
  5168  0010BC  5054               	movf	Eeprom_Write_Block@LoopIndex,w,c
  5169  0010BE  0D01               	mullw	1
  5170  0010C0  0E80               	movlw	low _DataArray
  5171  0010C2  24F3               	addwf	prodl,w,c
  5172  0010C4  6EE1               	movwf	fsr1l,c
  5173  0010C6  0E00               	movlw	high _DataArray
  5174  0010C8  20F4               	addwfc	prodh,w,c
  5175  0010CA  6EE2               	movwf	fsr1h,c
  5176  0010CC  CFDF FFE7          	movff	indf2,indf1
  5177  0010D0  2A54               	incf	Eeprom_Write_Block@LoopIndex,f,c
  5178  0010D2                     l2225:
  5179  0010D2  5051               	movf	Eeprom_Write_Block@BlockSize,w,c
  5180  0010D4  5C54               	subwf	Eeprom_Write_Block@LoopIndex,w,c
  5181  0010D6  A0D8               	btfss	status,0,c
  5182  0010D8  D7E9               	goto	l2221
  5183                           
  5184                           ;Eeprom.c: 28: }
  5185                           ;Eeprom.c: 29: DataSize = BlockSize;
  5186  0010DA  C051  F02D         	movff	Eeprom_Write_Block@BlockSize,_DataSize
  5187                           
  5188                           ;Eeprom.c: 30: EEPROMaddr = address;
  5189  0010DE  C053  F02E         	movff	Eeprom_Write_Block@address,_EEPROMaddr
  5190                           
  5191                           ;Eeprom.c: 31: WriteGranted = (unsigned char)1;
  5192  0010E2  0E01               	movlw	1
  5193  0010E4  6E52               	movwf	Eeprom_Write_Block@WriteGranted,c
  5194                           
  5195                           ;Eeprom.c: 32: }
  5196  0010E6  0012               	return	
  5197  0010E8                     l2229:
  5198                           
  5199                           ;Eeprom.c: 33: else
  5200                           ;Eeprom.c: 34: {
  5201                           ;Eeprom.c: 35: WriteGranted = (unsigned char)0;
  5202  0010E8  0E00               	movlw	0
  5203  0010EA  6E52               	movwf	Eeprom_Write_Block@WriteGranted,c
  5204  0010EC  0012               	return	
  5205  0010EE                     __end_of_Eeprom_Write_Block:
  5206                           	opt stack 0
  5207                           tosu	equ	0xFFF
  5208                           tosh	equ	0xFFE
  5209                           tosl	equ	0xFFD
  5210                           pclath	equ	0xFFA
  5211                           tblptru	equ	0xFF8
  5212                           tblptrh	equ	0xFF7
  5213                           tblptrl	equ	0xFF6
  5214                           tablat	equ	0xFF5
  5215                           prodh	equ	0xFF4
  5216                           prodl	equ	0xFF3
  5217                           intcon	equ	0xFF2
  5218                           intcon2	equ	0xFF1
  5219                           intcon3	equ	0xFF0
  5220                           postinc0	equ	0xFEE
  5221                           wreg	equ	0xFE8
  5222                           indf1	equ	0xFE7
  5223                           postinc1	equ	0xFE6
  5224                           fsr1h	equ	0xFE2
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           postdec2	equ	0xFDD
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _ISR *****************
  5234 ;; Defined at:
  5235 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5249 ;;      Params:         0       0       0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0
  5251 ;;      Temps:         14       0       0       0       0       0       0
  5252 ;;      Totals:        14       0       0       0       0       0       0
  5253 ;;Total ram usage:       14 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    3
  5256 ;; This function calls:
  5257 ;;		_APP_ISR1
  5258 ;;		_APP_ISR2
  5259 ;;		_APP_ISR3
  5260 ;;		_SchedulerTick
  5261 ;; This function is called by:
  5262 ;;		Interrupt level 2
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	intcode
  5267  000008                     __pintcode:
  5268                           	opt stack 0
  5269  000008                     _ISR:
  5270                           	opt stack 21
  5271                           
  5272                           ;incstack = 0
  5273  000008  826C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5274  00000A  ED48  F006         	call	int_func,f	;refresh shadow registers
  5275                           tosu	equ	0xFFF
  5276                           tosh	equ	0xFFE
  5277                           tosl	equ	0xFFD
  5278                           pclath	equ	0xFFA
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           intcon2	equ	0xFF1
  5287                           intcon3	equ	0xFF0
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           indf1	equ	0xFE7
  5291                           postinc1	equ	0xFE6
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301                           	psect	intcode_body
  5302  000C90                     __pintcode_body:
  5303                           	opt stack 21
  5304  000C90                     int_func:
  5305                           	opt stack 21
  5306  000C90  0006               	pop		; remove dummy address from shadow register refresh
  5307  000C92  CFFA F041          	movff	pclath,??_ISR
  5308  000C96  CFFB F042          	movff	pclatu,??_ISR+1
  5309  000C9A  CFE9 F043          	movff	fsr0l,??_ISR+2
  5310  000C9E  CFEA F044          	movff	fsr0h,??_ISR+3
  5311  000CA2  CFE1 F045          	movff	fsr1l,??_ISR+4
  5312  000CA6  CFE2 F046          	movff	fsr1h,??_ISR+5
  5313  000CAA  CFD9 F047          	movff	fsr2l,??_ISR+6
  5314  000CAE  CFDA F048          	movff	fsr2h,??_ISR+7
  5315  000CB2  CFF3 F049          	movff	prodl,??_ISR+8
  5316  000CB6  CFF4 F04A          	movff	prodh,??_ISR+9
  5317  000CBA  CFF6 F04B          	movff	tblptrl,??_ISR+10
  5318  000CBE  CFF7 F04C          	movff	tblptrh,??_ISR+11
  5319  000CC2  CFF8 F04D          	movff	tblptru,??_ISR+12
  5320  000CC6  CFF5 F04E          	movff	tablat,??_ISR+13
  5321                           
  5322                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  5323  000CCA  A4F2               	btfss	intcon,2,c	;volatile
  5324  000CCC  D005               	goto	i2l2103
  5325                           
  5326                           ;HWI_Interrupts.c: 55: {
  5327                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  5328  000CCE  94F2               	bcf	intcon,2,c	;volatile
  5329                           
  5330                           ;HWI_Interrupts.c: 57: TMR0L=18;
  5331  000CD0  0E12               	movlw	18
  5332  000CD2  6ED6               	movwf	4054,c	;volatile
  5333                           
  5334                           ;HWI_Interrupts.c: 58: SchedulerTick();
  5335  000CD4  EC1F  F00A         	call	_SchedulerTick	;wreg free
  5336  000CD8                     i2l2103:
  5337                           
  5338                           ;HWI_Interrupts.c: 59: }
  5339                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  5340  000CD8  A2A1               	btfss	4001,1,c	;volatile
  5341  000CDA  D005               	goto	i2l2109
  5342                           
  5343                           ;HWI_Interrupts.c: 61: {
  5344                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  5345  000CDC  92A1               	bcf	4001,1,c	;volatile
  5346                           
  5347                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  5348  000CDE  0EEF               	movlw	239
  5349  000CE0  6EB3               	movwf	4019,c	;volatile
  5350                           
  5351                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  5352  000CE2  0E00               	movlw	0
  5353  000CE4  6EB2               	movwf	4018,c	;volatile
  5354  000CE6                     i2l2109:
  5355                           
  5356                           ;HWI_Interrupts.c: 65: }
  5357                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  5358  000CE6  A09E               	btfss	3998,0,c	;volatile
  5359  000CE8  D007               	goto	i2l2117
  5360                           
  5361                           ;HWI_Interrupts.c: 67: {
  5362                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  5363  000CEA  909E               	bcf	3998,0,c	;volatile
  5364                           
  5365                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  5366  000CEC  0E00               	movlw	0
  5367  000CEE  6ECF               	movwf	4047,c	;volatile
  5368  000CF0  0E00               	movlw	0
  5369  000CF2  6ECE               	movwf	4046,c	;volatile
  5370                           
  5371                           ;HWI_Interrupts.c: 70: APP_ISR3();
  5372  000CF4  ECBE  F00A         	call	_APP_ISR3	;wreg free
  5373  000CF8                     i2l2117:
  5374                           
  5375                           ;HWI_Interrupts.c: 71: }
  5376                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  5377  000CF8  B29E               	btfsc	3998,1,c	;volatile
  5378                           
  5379                           ;HWI_Interrupts.c: 73: {
  5380                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  5381  000CFA  929E               	bcf	3998,1,c	;volatile
  5382                           
  5383                           ;HWI_Interrupts.c: 76: }
  5384                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  5385  000CFC  A2F2               	btfss	intcon,1,c	;volatile
  5386  000CFE  D003               	goto	i2l2125
  5387                           
  5388                           ;HWI_Interrupts.c: 79: {
  5389                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  5390  000D00  92F2               	bcf	intcon,1,c	;volatile
  5391                           
  5392                           ;HWI_Interrupts.c: 81: APP_ISR1();
  5393  000D02  ECC4  F00A         	call	_APP_ISR1	;wreg free
  5394  000D06                     i2l2125:
  5395                           
  5396                           ;HWI_Interrupts.c: 82: }
  5397                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  5398  000D06  A0F0               	btfss	intcon3,0,c	;volatile
  5399  000D08  D003               	goto	i2l445
  5400                           
  5401                           ;HWI_Interrupts.c: 85: {
  5402                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  5403  000D0A  90F0               	bcf	intcon3,0,c	;volatile
  5404                           
  5405                           ;HWI_Interrupts.c: 87: APP_ISR2();
  5406  000D0C  ECC1  F00A         	call	_APP_ISR2	;wreg free
  5407  000D10                     i2l445:
  5408  000D10  C04E  FFF5         	movff	??_ISR+13,tablat
  5409  000D14  C04D  FFF8         	movff	??_ISR+12,tblptru
  5410  000D18  C04C  FFF7         	movff	??_ISR+11,tblptrh
  5411  000D1C  C04B  FFF6         	movff	??_ISR+10,tblptrl
  5412  000D20  C04A  FFF4         	movff	??_ISR+9,prodh
  5413  000D24  C049  FFF3         	movff	??_ISR+8,prodl
  5414  000D28  C048  FFDA         	movff	??_ISR+7,fsr2h
  5415  000D2C  C047  FFD9         	movff	??_ISR+6,fsr2l
  5416  000D30  C046  FFE2         	movff	??_ISR+5,fsr1h
  5417  000D34  C045  FFE1         	movff	??_ISR+4,fsr1l
  5418  000D38  C044  FFEA         	movff	??_ISR+3,fsr0h
  5419  000D3C  C043  FFE9         	movff	??_ISR+2,fsr0l
  5420  000D40  C042  FFFB         	movff	??_ISR+1,pclatu
  5421  000D44  C041  FFFA         	movff	??_ISR,pclath
  5422  000D48  926C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5423  000D4A  0011               	retfie		f
  5424  000D4C                     __end_of_ISR:
  5425                           	opt stack 0
  5426                           tosu	equ	0xFFF
  5427                           tosh	equ	0xFFE
  5428                           tosl	equ	0xFFD
  5429                           pclatu	equ	0xFFB
  5430                           pclath	equ	0xFFA
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           intcon2	equ	0xFF1
  5439                           intcon3	equ	0xFF0
  5440                           postinc0	equ	0xFEE
  5441                           fsr0h	equ	0xFEA
  5442                           fsr0l	equ	0xFE9
  5443                           wreg	equ	0xFE8
  5444                           indf1	equ	0xFE7
  5445                           postinc1	equ	0xFE6
  5446                           fsr1h	equ	0xFE2
  5447                           fsr1l	equ	0xFE1
  5448                           indf2	equ	0xFDF
  5449                           postinc2	equ	0xFDE
  5450                           postdec2	equ	0xFDD
  5451                           fsr2h	equ	0xFDA
  5452                           fsr2l	equ	0xFD9
  5453                           status	equ	0xFD8
  5454                           
  5455 ;; *************** function _SchedulerTick *****************
  5456 ;; Defined at:
  5457 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5471 ;;      Params:         0       0       0       0       0       0       0
  5472 ;;      Locals:         1       0       0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0
  5474 ;;      Totals:         1       0       0       0       0       0       0
  5475 ;;Total ram usage:        1 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_ISR
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text36
  5485  00143E                     __ptext36:
  5486                           	opt stack 0
  5487  00143E                     _SchedulerTick:
  5488                           	opt stack 23
  5489                           
  5490                           ;Scheduler.c: 18: unsigned char TaskIndex;
  5491                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 4 ; TaskIndex++)
  5492                           
  5493                           ;incstack = 0
  5494  00143E  0E00               	movlw	0
  5495  001440  6E3C               	movwf	SchedulerTick@TaskIndex,c
  5496  001442                     i2l1611:
  5497  001442  0E03               	movlw	3
  5498  001444  643C               	cpfsgt	SchedulerTick@TaskIndex,c
  5499  001446  D001               	goto	i2l1615
  5500  001448  0012               	return	
  5501  00144A                     i2l1615:
  5502                           
  5503                           ;Scheduler.c: 20: {
  5504                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  5505  00144A  503C               	movf	SchedulerTick@TaskIndex,w,c
  5506  00144C  0D04               	mullw	4
  5507  00144E  0E03               	movlw	3
  5508  001450  26F3               	addwf	prodl,f,c
  5509  001452  0E00               	movlw	0
  5510  001454  22F4               	addwfc	prodh,f,c
  5511  001456  0E01               	movlw	low _ArrayTask
  5512  001458  24F3               	addwf	prodl,w,c
  5513  00145A  6ED9               	movwf	fsr2l,c
  5514  00145C  0E00               	movlw	high _ArrayTask
  5515  00145E  20F4               	addwfc	prodh,w,c
  5516  001460  6EDA               	movwf	fsr2h,c
  5517  001462  2ADF               	incf	indf2,f,c
  5518  001464  2A3C               	incf	SchedulerTick@TaskIndex,f,c
  5519  001466  D7ED               	goto	i2l1611
  5520  001468                     __end_of_SchedulerTick:
  5521                           	opt stack 0
  5522                           tosu	equ	0xFFF
  5523                           tosh	equ	0xFFE
  5524                           tosl	equ	0xFFD
  5525                           pclatu	equ	0xFFB
  5526                           pclath	equ	0xFFA
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           intcon2	equ	0xFF1
  5535                           intcon3	equ	0xFF0
  5536                           postinc0	equ	0xFEE
  5537                           fsr0h	equ	0xFEA
  5538                           fsr0l	equ	0xFE9
  5539                           wreg	equ	0xFE8
  5540                           indf1	equ	0xFE7
  5541                           postinc1	equ	0xFE6
  5542                           fsr1h	equ	0xFE2
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function _APP_ISR3 *****************
  5552 ;; Defined at:
  5553 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5567 ;;      Params:         0       0       0       0       0       0       0
  5568 ;;      Locals:         0       0       0       0       0       0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0
  5570 ;;      Totals:         0       0       0       0       0       0       0
  5571 ;;Total ram usage:        0 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    1
  5574 ;; This function calls:
  5575 ;;		_HWtimerCallback
  5576 ;; This function is called by:
  5577 ;;		_ISR
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text37
  5582  00157C                     __ptext37:
  5583                           	opt stack 0
  5584  00157C                     _APP_ISR3:
  5585                           	opt stack 22
  5586                           
  5587                           ;AppInterrupts.c: 20: HWtimerCallback();
  5588                           
  5589                           ;incstack = 0
  5590  00157C  ECA8  F00A         	call	_HWtimerCallback	;wreg free
  5591  001580  0012               	return		;funcret
  5592  001582                     __end_of_APP_ISR3:
  5593                           	opt stack 0
  5594                           tosu	equ	0xFFF
  5595                           tosh	equ	0xFFE
  5596                           tosl	equ	0xFFD
  5597                           pclatu	equ	0xFFB
  5598                           pclath	equ	0xFFA
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           intcon3	equ	0xFF0
  5608                           postinc0	equ	0xFEE
  5609                           fsr0h	equ	0xFEA
  5610                           fsr0l	equ	0xFE9
  5611                           wreg	equ	0xFE8
  5612                           indf1	equ	0xFE7
  5613                           postinc1	equ	0xFE6
  5614                           fsr1h	equ	0xFE2
  5615                           fsr1l	equ	0xFE1
  5616                           indf2	equ	0xFDF
  5617                           postinc2	equ	0xFDE
  5618                           postdec2	equ	0xFDD
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _HWtimerCallback *****************
  5624 ;; Defined at:
  5625 ;;		line 133 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5639 ;;      Params:         0       0       0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; This function calls:
  5646 ;;		Nothing
  5647 ;; This function is called by:
  5648 ;;		_APP_ISR3
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text38
  5653  001550                     __ptext38:
  5654                           	opt stack 0
  5655  001550                     _HWtimerCallback:
  5656                           	opt stack 22
  5657                           
  5658                           ;SpeedCalc.c: 135: if(HwTimerOVFLcount < 64)
  5659                           
  5660                           ;incstack = 0
  5661  001550  0E40               	movlw	64
  5662  001552  6028               	cpfslt	_HwTimerOVFLcount,c	;volatile
  5663  001554  0012               	return	
  5664                           
  5665                           ;SpeedCalc.c: 136: {
  5666                           ;SpeedCalc.c: 137: HwTimerOVFLcount++;
  5667  001556  2A28               	incf	_HwTimerOVFLcount,f,c	;volatile
  5668  001558  0012               	return	
  5669  00155A                     __end_of_HWtimerCallback:
  5670                           	opt stack 0
  5671                           tosu	equ	0xFFF
  5672                           tosh	equ	0xFFE
  5673                           tosl	equ	0xFFD
  5674                           pclatu	equ	0xFFB
  5675                           pclath	equ	0xFFA
  5676                           tblptru	equ	0xFF8
  5677                           tblptrh	equ	0xFF7
  5678                           tblptrl	equ	0xFF6
  5679                           tablat	equ	0xFF5
  5680                           prodh	equ	0xFF4
  5681                           prodl	equ	0xFF3
  5682                           intcon	equ	0xFF2
  5683                           intcon2	equ	0xFF1
  5684                           intcon3	equ	0xFF0
  5685                           postinc0	equ	0xFEE
  5686                           fsr0h	equ	0xFEA
  5687                           fsr0l	equ	0xFE9
  5688                           wreg	equ	0xFE8
  5689                           indf1	equ	0xFE7
  5690                           postinc1	equ	0xFE6
  5691                           fsr1h	equ	0xFE2
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function _APP_ISR2 *****************
  5701 ;; Defined at:
  5702 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;		None
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;		None
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      void 
  5709 ;; Registers used:
  5710 ;;		wreg, status,2, status,0, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5716 ;;      Params:         0       0       0       0       0       0       0
  5717 ;;      Locals:         0       0       0       0       0       0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0
  5719 ;;      Totals:         0       0       0       0       0       0       0
  5720 ;;Total ram usage:        0 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    2
  5723 ;; This function calls:
  5724 ;;		_SensorTwoNotify
  5725 ;; This function is called by:
  5726 ;;		_ISR
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           	psect	text39
  5731  001582                     __ptext39:
  5732                           	opt stack 0
  5733  001582                     _APP_ISR2:
  5734                           	opt stack 21
  5735                           
  5736                           ;AppInterrupts.c: 15: SensorTwoNotify();
  5737                           
  5738                           ;incstack = 0
  5739  001582  ECF2  F009         	call	_SensorTwoNotify	;wreg free
  5740  001586  0012               	return		;funcret
  5741  001588                     __end_of_APP_ISR2:
  5742                           	opt stack 0
  5743                           tosu	equ	0xFFF
  5744                           tosh	equ	0xFFE
  5745                           tosl	equ	0xFFD
  5746                           pclatu	equ	0xFFB
  5747                           pclath	equ	0xFFA
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           intcon2	equ	0xFF1
  5756                           intcon3	equ	0xFF0
  5757                           postinc0	equ	0xFEE
  5758                           fsr0h	equ	0xFEA
  5759                           fsr0l	equ	0xFE9
  5760                           wreg	equ	0xFE8
  5761                           indf1	equ	0xFE7
  5762                           postinc1	equ	0xFE6
  5763                           fsr1h	equ	0xFE2
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function _SensorTwoNotify *****************
  5773 ;; Defined at:
  5774 ;;		line 44 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;		None
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5788 ;;      Params:         0       0       0       0       0       0       0
  5789 ;;      Locals:         0       0       0       0       0       0       0
  5790 ;;      Temps:          0       0       0       0       0       0       0
  5791 ;;      Totals:         0       0       0       0       0       0       0
  5792 ;;Total ram usage:        0 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    1
  5795 ;; This function calls:
  5796 ;;		_ReloadHWtimer
  5797 ;; This function is called by:
  5798 ;;		_APP_ISR2
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text40
  5803  0013E4                     __ptext40:
  5804                           	opt stack 0
  5805  0013E4                     _SensorTwoNotify:
  5806                           	opt stack 21
  5807                           
  5808                           ;SpeedCalc.c: 46: if( (unsigned char)0 == NotifyFlag )
  5809                           
  5810                           ;incstack = 0
  5811  0013E4  502B               	movf	_NotifyFlag,w,c	;volatile
  5812  0013E6  A4D8               	btfss	status,2,c
  5813  0013E8  D00F               	goto	i2l2051
  5814                           
  5815                           ;SpeedCalc.c: 47: {
  5816                           ;SpeedCalc.c: 48: NotifyFlag = (unsigned char)1;
  5817  0013EA  0E01               	movlw	1
  5818  0013EC  6E2B               	movwf	_NotifyFlag,c	;volatile
  5819                           
  5820                           ;SpeedCalc.c: 49: LapCounter++;
  5821  0013EE  2A2A               	incf	_LapCounter,f,c	;volatile
  5822                           
  5823                           ;SpeedCalc.c: 50: HWtimerCount = ReloadHWtimer((unsigned char)1);
  5824  0013F0  0E01               	movlw	1
  5825  0013F2  EC76  F009         	call	_ReloadHWtimer
  5826  0013F6  C03C  F01D         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  5827  0013FA  C03D  F01E         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  5828                           
  5829                           ;SpeedCalc.c: 51: TimerOVFLcount = HwTimerOVFLcount;
  5830  0013FE  C028  F029         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  5831                           
  5832                           ;SpeedCalc.c: 52: HwTimerOVFLcount = (unsigned char)0;
  5833  001402  0E00               	movlw	0
  5834  001404  6E28               	movwf	_HwTimerOVFLcount,c	;volatile
  5835                           
  5836                           ;SpeedCalc.c: 53: }
  5837  001406  0012               	return	
  5838  001408                     i2l2051:
  5839                           
  5840                           ;SpeedCalc.c: 54: else
  5841                           ;SpeedCalc.c: 55: {
  5842                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  5843  001408  502A               	movf	_LapCounter,w,c	;volatile
  5844  00140A  B4D8               	btfsc	status,2,c
  5845  00140C  0012               	return	
  5846                           
  5847                           ;SpeedCalc.c: 57: {
  5848                           ;SpeedCalc.c: 58: LapCounter--;
  5849  00140E  062A               	decf	_LapCounter,f,c	;volatile
  5850  001410  0012               	return	
  5851  001412                     __end_of_SensorTwoNotify:
  5852                           	opt stack 0
  5853                           tosu	equ	0xFFF
  5854                           tosh	equ	0xFFE
  5855                           tosl	equ	0xFFD
  5856                           pclatu	equ	0xFFB
  5857                           pclath	equ	0xFFA
  5858                           tblptru	equ	0xFF8
  5859                           tblptrh	equ	0xFF7
  5860                           tblptrl	equ	0xFF6
  5861                           tablat	equ	0xFF5
  5862                           prodh	equ	0xFF4
  5863                           prodl	equ	0xFF3
  5864                           intcon	equ	0xFF2
  5865                           intcon2	equ	0xFF1
  5866                           intcon3	equ	0xFF0
  5867                           postinc0	equ	0xFEE
  5868                           fsr0h	equ	0xFEA
  5869                           fsr0l	equ	0xFE9
  5870                           wreg	equ	0xFE8
  5871                           indf1	equ	0xFE7
  5872                           postinc1	equ	0xFE6
  5873                           fsr1h	equ	0xFE2
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _ReloadHWtimer *****************
  5883 ;; Defined at:
  5884 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  TimerId         1    wreg     unsigned char 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  TimerId         1    2[COMRAM] unsigned char 
  5889 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2    0[COMRAM] unsigned short 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         2       0       0       0       0       0       0
  5900 ;;      Locals:         3       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         5       0       0       0       0       0       0
  5903 ;;Total ram usage:        5 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_SensorTwoNotify
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text41
  5913  0012EC                     __ptext41:
  5914                           	opt stack 0
  5915  0012EC                     _ReloadHWtimer:
  5916                           	opt stack 21
  5917                           
  5918                           ;incstack = 0
  5919                           ;ReloadHWtimer@TimerId stored from wreg
  5920  0012EC  6E3E               	movwf	ReloadHWtimer@TimerId,c
  5921                           
  5922                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  5923  0012EE  0E00               	movlw	0
  5924  0012F0  6E40               	movwf	ReloadHWtimer@ElapsedTime+1,c
  5925  0012F2  0E00               	movlw	0
  5926  0012F4  6E3F               	movwf	ReloadHWtimer@ElapsedTime,c
  5927                           
  5928                           ;HWI_Interrupts.c: 95: switch(TimerId)
  5929  0012F6  D009               	goto	i2l2013
  5930  0012F8                     i2l451:
  5931                           
  5932                           ;HWI_Interrupts.c: 98: case 1:
  5933                           ;HWI_Interrupts.c: 99: case 2:
  5934                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  5935  0012F8  CFCE F03F          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  5936  0012FC  CFCF F040          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  5937                           
  5938                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  5939  001300  0E00               	movlw	0
  5940  001302  6ECF               	movwf	4047,c	;volatile
  5941  001304  0E00               	movlw	0
  5942  001306  6ECE               	movwf	4046,c	;volatile
  5943                           
  5944                           ;HWI_Interrupts.c: 105: }
  5945                           
  5946                           ;HWI_Interrupts.c: 104: break;
  5947                           
  5948                           ;HWI_Interrupts.c: 103: default:
  5949                           
  5950                           ;HWI_Interrupts.c: 102: break;
  5951  001308  D00A               	goto	i2l452
  5952  00130A                     i2l2013:
  5953  00130A  503E               	movf	ReloadHWtimer@TimerId,w,c
  5954                           
  5955                           ; Switch size 1, requested type "space"
  5956                           ; Number of cases is 3, Range of values is 0 to 2
  5957                           ; switch strategies available:
  5958                           ; Name         Instructions Cycles
  5959                           ; simple_byte           10     6 (average)
  5960                           ;	Chosen strategy is simple_byte
  5961  00130C  0A00               	xorlw	0	; case 0
  5962  00130E  B4D8               	btfsc	status,2,c
  5963  001310  D7F3               	goto	i2l451
  5964  001312  0A01               	xorlw	1	; case 1
  5965  001314  B4D8               	btfsc	status,2,c
  5966  001316  D7F0               	goto	i2l451
  5967  001318  0A03               	xorlw	3	; case 2
  5968  00131A  B4D8               	btfsc	status,2,c
  5969  00131C  D7ED               	goto	i2l451
  5970  00131E                     i2l452:
  5971                           
  5972                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  5973  00131E  C03F  F03C         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  5974  001322  C040  F03D         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  5975  001326  0012               	return		;funcret
  5976  001328                     __end_of_ReloadHWtimer:
  5977                           	opt stack 0
  5978                           tosu	equ	0xFFF
  5979                           tosh	equ	0xFFE
  5980                           tosl	equ	0xFFD
  5981                           pclatu	equ	0xFFB
  5982                           pclath	equ	0xFFA
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           intcon3	equ	0xFF0
  5992                           postinc0	equ	0xFEE
  5993                           fsr0h	equ	0xFEA
  5994                           fsr0l	equ	0xFE9
  5995                           wreg	equ	0xFE8
  5996                           indf1	equ	0xFE7
  5997                           postinc1	equ	0xFE6
  5998                           fsr1h	equ	0xFE2
  5999                           fsr1l	equ	0xFE1
  6000                           indf2	equ	0xFDF
  6001                           postinc2	equ	0xFDE
  6002                           postdec2	equ	0xFDD
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _APP_ISR1 *****************
  6008 ;; Defined at:
  6009 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6023 ;;      Params:         0       0       0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0
  6026 ;;      Totals:         0       0       0       0       0       0       0
  6027 ;;Total ram usage:        0 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    1
  6030 ;; This function calls:
  6031 ;;		_SensorOneNotify
  6032 ;; This function is called by:
  6033 ;;		_ISR
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text42
  6038  001588                     __ptext42:
  6039                           	opt stack 0
  6040  001588                     _APP_ISR1:
  6041                           	opt stack 22
  6042                           
  6043                           ;AppInterrupts.c: 10: SensorOneNotify();
  6044                           
  6045                           ;incstack = 0
  6046  001588  EC89  F00A         	call	_SensorOneNotify	;wreg free
  6047  00158C  0012               	return		;funcret
  6048  00158E                     __end_of_APP_ISR1:
  6049                           	opt stack 0
  6050                           tosu	equ	0xFFF
  6051                           tosh	equ	0xFFE
  6052                           tosl	equ	0xFFD
  6053                           pclatu	equ	0xFFB
  6054                           pclath	equ	0xFFA
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon2	equ	0xFF1
  6063                           intcon3	equ	0xFF0
  6064                           postinc0	equ	0xFEE
  6065                           fsr0h	equ	0xFEA
  6066                           fsr0l	equ	0xFE9
  6067                           wreg	equ	0xFE8
  6068                           indf1	equ	0xFE7
  6069                           postinc1	equ	0xFE6
  6070                           fsr1h	equ	0xFE2
  6071                           fsr1l	equ	0xFE1
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079 ;; *************** function _SensorOneNotify *****************
  6080 ;; Defined at:
  6081 ;;		line 29 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      void 
  6088 ;; Registers used:
  6089 ;;		wreg, status,2, status,0
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6095 ;;      Params:         0       0       0       0       0       0       0
  6096 ;;      Locals:         0       0       0       0       0       0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0
  6098 ;;      Totals:         0       0       0       0       0       0       0
  6099 ;;Total ram usage:        0 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_APP_ISR1
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text43
  6109  001512                     __ptext43:
  6110                           	opt stack 0
  6111  001512                     _SensorOneNotify:
  6112                           	opt stack 22
  6113                           
  6114                           ;SpeedCalc.c: 31: if( (unsigned char)1 == NotifyFlag )
  6115                           
  6116                           ;incstack = 0
  6117  001512  042B               	decf	_NotifyFlag,w,c	;volatile
  6118  001514  A4D8               	btfss	status,2,c
  6119  001516  D003               	goto	i2l1507
  6120                           
  6121                           ;SpeedCalc.c: 32: {
  6122                           ;SpeedCalc.c: 33: NotifyFlag = (unsigned char)0;
  6123  001518  0E00               	movlw	0
  6124  00151A  6E2B               	movwf	_NotifyFlag,c	;volatile
  6125                           
  6126                           ;SpeedCalc.c: 34: }
  6127  00151C  0012               	return	
  6128  00151E                     i2l1507:
  6129                           
  6130                           ;SpeedCalc.c: 35: else
  6131                           ;SpeedCalc.c: 36: {
  6132                           ;SpeedCalc.c: 37: if(LapCounter != (unsigned char)0)
  6133  00151E  502A               	movf	_LapCounter,w,c	;volatile
  6134  001520  B4D8               	btfsc	status,2,c
  6135  001522  0012               	return	
  6136                           
  6137                           ;SpeedCalc.c: 38: {
  6138                           ;SpeedCalc.c: 39: LapCounter--;
  6139  001524  062A               	decf	_LapCounter,f,c	;volatile
  6140  001526  0012               	return	
  6141  001528                     __end_of_SensorOneNotify:
  6142                           	opt stack 0
  6143                           tosu	equ	0xFFF
  6144                           tosh	equ	0xFFE
  6145                           tosl	equ	0xFFD
  6146                           pclatu	equ	0xFFB
  6147                           pclath	equ	0xFFA
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           intcon2	equ	0xFF1
  6156                           intcon3	equ	0xFF0
  6157                           postinc0	equ	0xFEE
  6158                           fsr0h	equ	0xFEA
  6159                           fsr0l	equ	0xFE9
  6160                           wreg	equ	0xFE8
  6161                           indf1	equ	0xFE7
  6162                           postinc1	equ	0xFE6
  6163                           fsr1h	equ	0xFE2
  6164                           fsr1l	equ	0xFE1
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           tosu	equ	0xFFF
  6172                           tosh	equ	0xFFE
  6173                           tosl	equ	0xFFD
  6174                           pclatu	equ	0xFFB
  6175                           pclath	equ	0xFFA
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon2	equ	0xFF1
  6184                           intcon3	equ	0xFF0
  6185                           postinc0	equ	0xFEE
  6186                           fsr0h	equ	0xFEA
  6187                           fsr0l	equ	0xFE9
  6188                           wreg	equ	0xFE8
  6189                           indf1	equ	0xFE7
  6190                           postinc1	equ	0xFE6
  6191                           fsr1h	equ	0xFE2
  6192                           fsr1l	equ	0xFE1
  6193                           indf2	equ	0xFDF
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200                           	psect	text44
  6201  000000                     __ptext44:
  6202                           	opt stack 0
  6203                           tosu	equ	0xFFF
  6204                           tosh	equ	0xFFE
  6205                           tosl	equ	0xFFD
  6206                           pclatu	equ	0xFFB
  6207                           pclath	equ	0xFFA
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           intcon2	equ	0xFF1
  6216                           intcon3	equ	0xFF0
  6217                           postinc0	equ	0xFEE
  6218                           fsr0h	equ	0xFEA
  6219                           fsr0l	equ	0xFE9
  6220                           wreg	equ	0xFE8
  6221                           indf1	equ	0xFE7
  6222                           postinc1	equ	0xFE6
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232                           	psect	rparam
  6233  0000                     tosu	equ	0xFFF
  6234                           tosh	equ	0xFFE
  6235                           tosl	equ	0xFFD
  6236                           pclatu	equ	0xFFB
  6237                           pclath	equ	0xFFA
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           intcon2	equ	0xFF1
  6246                           intcon3	equ	0xFF0
  6247                           postinc0	equ	0xFEE
  6248                           fsr0h	equ	0xFEA
  6249                           fsr0l	equ	0xFE9
  6250                           wreg	equ	0xFE8
  6251                           indf1	equ	0xFE7
  6252                           postinc1	equ	0xFE6
  6253                           fsr1h	equ	0xFE2
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262                           	psect	temp
  6263  00006C                     btemp:
  6264                           	opt stack 0
  6265  00006C                     	ds	1
  6266  0000                     int$flags	set	btemp
  6267                           tosu	equ	0xFFF
  6268                           tosh	equ	0xFFE
  6269                           tosl	equ	0xFFD
  6270                           pclatu	equ	0xFFB
  6271                           pclath	equ	0xFFA
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           intcon	equ	0xFF2
  6279                           intcon2	equ	0xFF1
  6280                           intcon3	equ	0xFF0
  6281                           postinc0	equ	0xFEE
  6282                           fsr0h	equ	0xFEA
  6283                           fsr0l	equ	0xFE9
  6284                           wreg	equ	0xFE8
  6285                           indf1	equ	0xFE7
  6286                           postinc1	equ	0xFE6
  6287                           fsr1h	equ	0xFE2
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    56
    Data        2
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     46     107
    BANK0           128     29      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    HWIeeprom_Read@Data	PTR unsigned char  size(2) Largest target is 2
		 -> APP_MANAGE@AvgSpeedKph(BANK0[2]), 

    S277$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 6
		 -> KeyInternalData(COMRAM[6]), 

    Eeprom_Read_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> APP_MANAGE@AvgSpeedKph(BANK0[2]), 

    Eeprom_Write_Block@DataPtr	PTR unsigned char  size(2) Largest target is 29
		 -> APP_MANAGE@AvgSpeedKph(BANK0[2]), APP_INITIALIZE@stringX(BANK0[29]), 


Critical Paths under _main in COMRAM

    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageDrivers->_MangeKeys
    _MangeKeys->_HWI_DIGI_READ
    _EepromManage->_HWIeeprom_Write
    _APP_MANAGE->_GetAvgSpeed
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _Eeprom_Read_Block->_HWIeeprom_Read
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE
    _APP_INITIALIZE->_Eeprom_Write_Block

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    _Start_App->_APP_INITIALIZE
    _ManageSpeedCalc->_SpeedCalcManage
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9840
                          _Start_App
 ---------------------------------------------------------------------------------
 (1) _Start_App                                            0     0      0    9840
                     _APP_INITIALIZE
                      _BCDInitialize
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (2) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunScheduler                                         2     2      0    8313
                                             15 BANK0      2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                      _ManageDrivers *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (3) _ManageSpeedCalc                                      0     0      0    1703
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (4) _SpeedCalcManage                                      4     4      0    1703
                                             44 COMRAM     2     2      0
                                              0 BANK0      2     2      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ManageDrivers                                        1     1      0     838
                                             26 COMRAM     1     1      0
                       _EepromManage
                          _MangeKeys
 ---------------------------------------------------------------------------------
 (4) _MangeKeys                                            5     5      0     615
                                             21 COMRAM     5     5      0
                      _HWI_DIGI_READ
 ---------------------------------------------------------------------------------
 (5) _HWI_DIGI_READ                                        2     2      0      30
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _EepromManage                                         1     1      0     155
                                             22 COMRAM     1     1      0
                    _HWIeeprom_Write
 ---------------------------------------------------------------------------------
 (5) _HWIeeprom_Write                                      3     2      1     132
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ManageApplication                                    0     0      0    5374
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (4) _APP_MANAGE                                           8     8      0    5374
                                              7 BANK0      8     8      0
                      _BCDsendNumber
                         _BlinkDigit
                  _Eeprom_Read_Block
                 _Eeprom_Write_Block
                        _GetAvgSpeed
                        _GetDistance
                       _GetKeyStatus
                   _SetCircumfirunce
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SetCircumfirunce                                     2     0      2     108
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _GetKeyStatus                                         2     2      0      67
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _GetAvgSpeed                                          9     7      2    1215
                                             44 COMRAM     2     0      2
                                              0 BANK0      7     7      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     558
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Read_Block                                    7     4      3     569
                                             23 COMRAM     7     4      3
                     _HWIeeprom_Read
 ---------------------------------------------------------------------------------
 (6) _HWIeeprom_Read                                       4     2      2     176
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _BlinkDigit                                           2     1      1     216
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _BCDsendNumber                                       12     9      3    1819
                                             26 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     540
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     549
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _DisplayAlphaNumeric                                  0     0      0     398
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (4) _BCDManage7segment                                    4     4      0     398
                                             21 COMRAM     4     4      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (5) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateTask                                           4     0      4     900
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _BCDInitialize                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_INITIALIZE                                      29    29      0     612
                                              0 BANK0     29    29      0
                 _Eeprom_Write_Block
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Write_Block                                   6     3      3     575
                                             19 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0      91
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (8) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (9) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (9) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (10) _ReloadHWtimer                                       5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (9) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Start_App
     _APP_INITIALIZE
       _Eeprom_Write_Block
     _BCDInitialize
     _CreateTask
     _HWI_DIGITAL_INITIALIZE
     _HWI_INTERRUPTS_INTITALIZE
     _RunScheduler
       _DisplayAlphaNumeric *
         _BCDManage7segment
           _HWI_4Digit_WRITE
           _HWI_8Digit_WRITE
       _ManageApplication *
         _APP_MANAGE
           _BCDsendNumber
             ___lwdiv
             ___wmul
           _BlinkDigit
           _Eeprom_Read_Block
             _HWIeeprom_Read
           _Eeprom_Write_Block
           _GetAvgSpeed
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _GetDistance
           _GetKeyStatus
           _SetCircumfirunce
           ___lmul
       _ManageDrivers *
         _EepromManage
           _HWIeeprom_Write
         _MangeKeys
           _HWI_DIGI_READ
       _ManageSpeedCalc *
         _SpeedCalcManage
           ___lldiv
             ___lmul (ARG)
           ___lwdiv
           ___wmul
     _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      4F       5       61.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2E      6B       1       84.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      15        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Jun 25 19:26:55 2017

                                  l61 0BBE                   __end_of_GetAvgSpeed 0DEA  
                 ___wmul@multiplicand 0051                           __CFG_BORV$3 000000  
                   GetAvgSpeed@bIsKph 00B2                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                   __end_of_GetDistance 153A  
                         __CFG_OSC$XT 000000                           __CFG_LVP$ON 000000  
                                 l361 14C0                                   l362 14C6  
                                 l380 1366                                   l359 14BA  
                                 l378 135E                                   l379 1384  
                                 l809 1016                                   l862 11E4  
                        __CFG_CPB$OFF 000000                                   u431 06EE  
         Eeprom_Write_Block@LoopIndex 0054                          __CFG_CPD$OFF 000000  
                                 _ISR 0008                                   u461 0824  
         HWIeeprom_Write@WriteSuccess 0051                BCDManage7segment@Index 0053  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                                  ?_ISR 003C  
                        __CFG_WDT$OFF 000000                                  l2023 14E0  
                                l2201 11BA                                  l1313 1374  
                                l2033 14F2                                  l2211 11DA  
                                l2203 11BE                                  l2027 14E8  
                                l2221 10AC                                  l2301 0C62  
                                l1309 136E                                  l1421 0764  
                                l2225 10D2                                  l2305 0C66  
                                l2241 0D6C                                  l1433 0878  
                                l1409 066E                                  l2163 1156  
                                l2251 0DE0                                  l1451 0A3C  
                                l1443 0988                                  l1435 08B6  
                                l1419 0742                                  l2229 10E8  
                                l2149 1488                                  l2181 0FD8  
                                l2263 11FC                                  l2167 116A  
                                l2247 0DCE                                  l2343 0B3C  
                                l1447 09E8                                  l1439 0934  
                                l1455 0A52                                  l2281 0BA6  
                                l2273 122A                                  l2177 0FC8  
                                l2179 0FD4                                  l2355 0B72  
                                l2285 0BAE                                  l2269 121C  
                                l2189 1008                                  l2199 11B2  
                                l2295 0C18                                  l2383 0F1A  
                                l2393 0F86                                  l2385 0F1E  
                                l2299 0C4A                                  l2395 0FA2  
                                l2389 0F26                                  l1863 132C  
                                l1865 1336                                  l1873 14CC  
                                l1961 0EA4                                  l1867 1340  
                                l1971 0EEC                                  l1869 134A  
                                l1975 0EF6                                  l1967 0EB8  
                                l1959 0EA0                                  l1899 13AE  
                                l1989 1248                                  u1084 0ECE  
                                u1085 0ECA                                  _LATC 000F8B  
                                _LATD 000F8C                                  u1620 1420  
                                u1555 0AD0                                  u1658 0F72  
                                _TMR1 000FCE                                  _main 155A  
                __end_of_GetKeyStatus 13E4                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 006C  
                                prodh 000FF4                                  prodl 000FF3  
                   _BCDManage7segment 0E82                                  start 000E  
                       __CFG_IESO$OFF 000000                            _BlinkDigit 153A  
                          _BlinkIndex 0033                    ?_BCDManage7segment 003C  
            __size_of_SpeedCalcManage 0098                          ___param_bank 000000  
                    __end_of_APP_ISR1 158E                      __end_of_APP_ISR2 1588  
                    __end_of_APP_ISR3 1582                                 ??_ISR 0041  
                     ??_ManageDrivers 0056                   BCDsendNumber@Buffer 005F  
           _SpeedCalcNotifyInitialize 1590                   BCDsendNumber@Number 0056  
                APP_MANAGE@blinkIndex 0025                   __size_of_APP_MANAGE 0132  
                 ??_BCDManage7segment 0051                   BCDsendNumber@Output 005D  
                               ?_main 003C                            _CreateTask 10EE  
                               _EEADR 000FA9                  HWI_DIGI_READ@HWIread 0050  
                     __end_of___lldiv 1028                            _LapCounter 002A  
                               _T0CON 000FD5                                 _T1CON 000FCD  
                               _T3CON 000FB1                       __end_of___lwdiv 11EE  
                               i2l451 12F8                                 i2l452 131E  
                               i2l445 0D10                                 _TMR0L 000FD6  
                               _TMR3H 000FB3                                 _TMR3L 000FB2  
                   _ManageApplication 1570                                 _PORTC 000F82  
                               _PORTD 000F83                                 _TRISC 000F94  
                               _TRISD 000F95                         __CFG_PWRT$OFF 000000  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                       __CFG_WRT2$OFF 000000                   ___lmul@multiplicand 0053  
                       __CFG_WRT3$OFF 000000                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
                        _WriteRequest 002F                    ?_ManageApplication 003C  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
                  _Eeprom_Write_Block 1094               CreateTask@MangeFunction 004F  
           BCDsendNumber@DecimalPlace 0058                                 pclath 000FFA  
                               tablat 000FF5                   ??_ManageApplication 006A  
                   ?_HWI_8Digit_WRITE 004F             __end_of_BCDManage7segment 0F1A  
                __end_of_EepromManage 1270                                 status 000FD8  
               __end_of_BCDsendNumber 0C90                   ?_Eeprom_Write_Block 004F  
     __size_of_HWI_DIGITAL_INITIALIZE 001A                    ??_HWI_8Digit_WRITE 0050  
                         _GetAvgSpeed 0D4C                        __CFG_MCLRE$OFF 000000  
                     __initialization 1270                           _GetDistance 1528  
                        __end_of_main 1562               __size_of_HWIeeprom_Read 0028  
           __end_of_ManageApplication 1576                                ??_main 006A  
                ??_Eeprom_Write_Block 0052                        MangeKeys@KeyID 0055  
                       __activetblptr 000002                                _EEDATA 000FA8  
                              _EECON2 000FA7             HWIeeprom_Read@ReadSuccess 0052  
                  __size_of_MangeKeys 042E                                _INT0IF 007F91  
                              _INT1IF 007F80                                i2l2013 130A  
                              i2l2103 0CD8                                i2l2051 1408  
                              i2l2125 0D06                                i2l2117 0CF8  
                              i2l2109 0CE6                                i2l1507 151E  
                              i2l1611 1442                                i2l1615 144A  
         BCDManage7segment@DigitIndex 003B                                _INTCON 000FF2  
            __size_of_SensorOneNotify 0016              __size_of_ManageSpeedCalc 0006  
                HWI_8Digit_WRITE@port 0050                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR1IE 007CE8  
                              _TMR1IF 007CF0                                _TMR2IF 007CF1  
                              _TMR3IE 007D01                                _TMR3IF 007D09  
              __size_of_BCDInitialize 0008                       BlinkDigit@Index 0050  
                 _DisplayAlphaNumeric 156A                           ?_BlinkDigit 004F  
                      __CFG_XINST$OFF 000000                            _NotifyFlag 002B  
                              ___lmul 1146                                ___wmul 1490  
                      __CFG_STVREN$ON 000000                             ??___lldiv 0063  
                           ??___lwdiv 0053                          _HWtimerCount 001D  
              EepromManage@WriteIndex 002C                                clear_0 128E  
                              clear_1 129A                     ??_SpeedCalcManage 0068  
                         ?_CreateTask 004F                _HWI_DIGITAL_INITIALIZE 14F8  
                    CreateTask@Period 0052                      CreateTask@TaskId 0051  
                        __pdataCOMRAM 006A                __size_of_HWI_DIGI_READ 002E  
                ?_DisplayAlphaNumeric 003C                          __mediumconst 0000  
            __size_of_SensorTwoNotify 002E                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                  __size_of_Start_App 006C                 __size_of_GetKeyStatus 002E  
                        ??_APP_MANAGE 00B9                             ?_APP_ISR1 003C  
                           ?_APP_ISR2 003C                             ?_APP_ISR3 003C  
              __size_of_SchedulerTick 002A              ReloadHWtimer@ElapsedTime 003F  
          __size_of_BCDManage7segment 0098                            __accesstop 0080  
             __end_of__initialization 12A0                       __CFG_PBADEN$OFF 000000  
                   MangeKeys@KeyState 0053                     ?_SetCircumfirunce 004F  
                       ___rparam_used 000001                    ??_SetCircumfirunce 0051  
                      _TimerOVFLcount 0029                        __pcstackCOMRAM 003C  
                   BCDsendNumber@Link 005B             GetAvgSpeed@AvgSpeedKphMph 00B7  
                   __end_of_MangeKeys 0A68             __size_of_HWI_4Digit_WRITE 0032  
          __size_of_ManageApplication 0006                    __end_of_APP_MANAGE 0B9A  
                        _GetKeyStatus 13B6                         _BCDInitialize 1562  
               ??_DisplayAlphaNumeric 0055  SpeedCalcManage@HundredMeterReference 00B2  
            __size_of_HWtimerCallback 000A    __size_of_SpeedCalcNotifyInitialize 0002  
            __size_of_HWIeeprom_Write 002E                   __size_of_BlinkDigit 000C  
               __size_of_EepromManage 0040                __size_of_ReloadHWtimer 003C  
                          ??_APP_ISR1 003C                            ??_APP_ISR2 0041  
                          ??_APP_ISR3 003C                            __pbssBANK0 0080  
       BCDManage7segment@BlinkCounter 0030                          _CircumFactor 006A  
                 __size_of_CreateTask 0058                         _HWI_DIGI_READ 135A  
                   ??_SensorOneNotify 003C                     ??_ManageSpeedCalc 006A  
             __size_of_APP_INITIALIZE 002C                               ?___lmul 004F  
              SetCircumfirunce@Circum 004F                     __end_of_Start_App 1094  
                             ?___wmul 004F                         _SchedulerTick 143E  
                      _HWIeeprom_Read 1468                        ___lmul@product 0057  
  __size_of_HWI_INTERRUPTS_INTITALIZE 003E            ?_HWI_INTERRUPTS_INTITALIZE 003C  
                        _EepromManage 1230                        ?_BCDInitialize 003C  
                             _INTCON3 000FF0                 HWI_8Digit_WRITE@value 004F  
      Eeprom_Write_Block@WriteGranted 0052                   APP_INITIALIZE@F3085 0601  
                   ??_SensorTwoNotify 0041                      HWI_DIGI_READ@pin 004F  
                      ?_HWI_DIGI_READ 003C                               __Hparam 0000  
                        ?_GetAvgSpeed 0068                             _BCDNumber 0011  
                             __Lparam 0000                          ?_GetDistance 004F  
              __end_of_HWIeeprom_Read 1490                       __size_of___lmul 0056  
                       _ReloadHWtimer 12EC                        ?_SchedulerTick 003C  
                             ___lldiv 0FA6                       __size_of___wmul 0026  
                             ___lwdiv 119C                          __psmallconst 0600  
           __size_of_HWI_8Digit_WRITE 0026                 __end_of_ManageDrivers 14F8  
                             __pcinit 1270                     _Eeprom_Read_Block 11EE  
                             __ramtop 0600                               __ptext0 155A  
                             __ptext1 1028                               __ptext2 1590  
                             __ptext3 0F1A                               __ptext4 14DC  
                             __ptext5 156A                               __ptext6 1570  
                             __ptext7 1576                               __ptext8 0DEA  
                             __ptext9 063A     __end_of_HWI_INTERRUPTS_INTITALIZE 12EC  
                        __size_of_ISR 0D44                    ?_Eeprom_Read_Block 0053  
                       ?_RunScheduler 003C                SchedulerTick@TaskIndex 003C  
                 ??_Eeprom_Read_Block 0056                        __pintcode_body 0C90  
                end_of_initialization 12A0                     ??_HWtimerCallback 003C  
                       __Lmediumconst 0000                     ??_HWIeeprom_Write 0050  
                             int_func 0C90                       _SevenSegmentMAP 062E  
                     ___lldiv@divisor 005F                       _SpeedCalcManage 0DEA  
                        ??_BlinkDigit 0050                       ___lldiv@counter 0067  
                      ?_ReloadHWtimer 003C                               postdec2 000FDD  
                     ?_HWIeeprom_Read 004F                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
           __end_of_Eeprom_Read_Block 1230               ?_HWI_DIGITAL_INITIALIZE 003C  
         APP_MANAGE@TravelledDistance 00BA                      _HWI_4Digit_WRITE 1328  
                     ??_BCDInitialize 004F                          ??_CreateTask 0053  
                           _PORTBbits 000F81           __size_of_Eeprom_Write_Block 005A  
              __size_of_BCDsendNumber 00F6                        ??_RunScheduler 00C1  
                           _TRISBbits 000F93                  BCDManage7segment@BCD 0054  
                  __end_of_BlinkDigit 1546                       ??_HWI_DIGI_READ 004F  
                           _DataArray 0080                     __size_of_APP_ISR1 0006  
                   __size_of_APP_ISR2 0006                     __size_of_APP_ISR3 0006  
                  __end_of_CreateTask 1146           BCDInitialize@bIsCommonAnode 004F  
                           _BlinkFlag 0031                        _APP_INITIALIZE 1412  
                      _DistTravelCntr 0019                       ??_SchedulerTick 003C  
                       _BlinkDuration 0032                     _LapTimeTenthMilli 001F  
      __end_of_HWI_DIGITAL_INITIALIZE 1512                        __end_of___lmul 119C  
                      __end_of___wmul 14B6                         __pidataCOMRAM 158E  
                           _ArrayTask 0001             __size_of_SetCircumfirunce 000A  
                           _MangeKeys 063A                   start_initialization 1270  
                         __end_of_ISR 0D4C                   HWIeeprom_Write@Data 004F  
                     _SensorOneNotify 1512               __end_of_SevenSegmentMAP 0639  
                     _ManageSpeedCalc 1576               __end_of_SpeedCalcManage 0E82  
                 APP_MANAGE@keystatus 00BE                __end_of_APP_INITIALIZE 143E  
                       _BCDsendNumber 0B9A                       ??_ReloadHWtimer 003E  
          Eeprom_Read_Block@BlockSize 0055              Eeprom_Read_Block@DataPtr 0053  
                            ??___lmul 0057                              ??___wmul 0053  
                __size_of_GetAvgSpeed 009E            __size_of_Eeprom_Read_Block 0042  
         __end_of_DisplayAlphaNumeric 1570                      __CFG_LPT1OSC$OFF 000000  
                __size_of_GetDistance 0012                      _HWI_8Digit_WRITE 14B6  
              HWIeeprom_Write@address 0050                             _Start_App 1028  
                  BlinkDigit@duration 004F           ??_HWI_INTERRUPTS_INTITALIZE 004F  
                          ?_MangeKeys 003C                       _SensorTwoNotify 13E4  
                         __pbssCOMRAM 0001                BCDsendNumber@LoopIndex 0061  
               APP_INITIALIZE@stringX 00B2                         __pcstackBANK0 00B2  
            Eeprom_Read_Block@address 0057                 APP_MANAGE@AvgSpeedKph 00BF  
          Eeprom_Read_Block@LoopIndex 0059                 RunScheduler@TaskIndex 0027  
                      ?_BCDsendNumber 0056                       ?_APP_INITIALIZE 003C  
                    ___lwdiv@dividend 004F                  __end_of_RunScheduler 0FA6  
                   __CFG_CCP2MX$PORTC 000000                APP_MANAGE@bIsBlinkMode 0023  
                           __pintcode 0008                              ?___lldiv 005B  
                            ?___lwdiv 004F                            ?_Start_App 003C  
                    _HwTimerOVFLcount 0028                          _bIsAnodeUsed 0034  
                     _HWtimerCallback 1550                           __smallconst 0600  
             __end_of_SensorOneNotify 1528               __end_of_ManageSpeedCalc 157C  
                     _HWIeeprom_Write 1388                 HWI_4Digit_WRITE@value 004F  
                    ___lwdiv@quotient 0054              __end_of_HWI_4Digit_WRITE 135A  
                            _APP_ISR1 1588                              _APP_ISR2 1582  
                            _APP_ISR3 157C            ?_SpeedCalcNotifyInitialize 003C  
        Eeprom_Read_Block@ReadGranted 0056                    HWIeeprom_Read@Data 004F  
                    ?_SpeedCalcManage 003C             _HWI_INTERRUPTS_INTITALIZE 12AE  
                ReloadHWtimer@TimerId 003E                        ___wmul@product 0053  
                    ??_HWIeeprom_Read 0051          Eeprom_Read_Block@ReadSuccess 0058  
                    __CFG_WDTPS$32768 000000                 HWIeeprom_Read@address 0051  
             __end_of_SensorTwoNotify 1412                      _SetCircumfirunce 1546  
                   ___wmul@multiplier 004F                           ??_MangeKeys 0051  
                            _DataSize 002D                     ___lmul@multiplier 004F  
                         _INTCON2bits 000FF1                       ??_BCDsendNumber 0059  
   __end_of_SpeedCalcNotifyInitialize 1592                __size_of_ManageDrivers 001C  
                          _EECON1bits 000FA6           __end_ofAPP_INITIALIZE@F3085 061E  
                      _KeyArrayConfig 061E                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
             __end_of_HWtimerCallback 155A                     GetKeyStatus@KeyID 0050  
                    __size_of___lldiv 0082            __end_of_Eeprom_Write_Block 10EE  
             __end_of_HWIeeprom_Write 13B6                      __size_of___lwdiv 0052  
                         ??_Start_App 006A                 __end_of_BCDInitialize 156A  
                       ?_GetKeyStatus 003C                      ?_SensorOneNotify 003C  
                          _EEPROMaddr 002E                      ?_ManageSpeedCalc 003C  
                     ___lwdiv@divisor 0051                       ___lwdiv@counter 0053  
                            __ptext10 135A                              __ptext11 1230  
                            __ptext20 11EE                              __ptext12 1388  
                            __ptext21 1468                              __ptext13 0A68  
                            __ptext30 14F8                              __ptext22 153A  
                            __ptext14 1546                              __ptext31 10EE  
                            __ptext23 0B9A                              __ptext15 13B6  
                            __ptext40 13E4                              __ptext32 1562  
                            __ptext24 1490                              __ptext16 1528  
                            __ptext41 12EC                              __ptext33 1412  
                            __ptext25 119C                              __ptext17 0D4C  
                            __ptext42 1588                              __ptext34 1094  
                            __ptext26 0E82                              __ptext18 1146  
                            __ptext43 1512                              __ptext27 14B6  
                            __ptext19 0FA6                              __ptext44 0000  
                            __ptext36 143E                              __ptext28 1328  
                            __ptext37 157C                              __ptext29 12AE  
                            __ptext38 1550                              __ptext39 1582  
           Eeprom_Write_Block@DataPtr 004F                            _APP_MANAGE 0A68  
                     _KeyInternalData 0035              __end_of_HWI_8Digit_WRITE 14DC  
                  _LapDistanceCounter 0021                 __size_of_RunScheduler 008C  
                HWI_4Digit_WRITE@port 0050                         __size_of_main 0008  
              __end_of_KeyArrayConfig 062E                   MangeKeys@HWIreading 0054  
               __end_of_HWI_DIGI_READ 1388              EepromManage@WriteSuccess 0052  
                            int$flags 006C             Eeprom_Write_Block@address 0053  
               __end_of_SchedulerTick 1468                      ?_SensorTwoNotify 003C  
             GetAvgSpeed@KphMphFactor 00B3                        ??_GetKeyStatus 004F  
                       ?_EepromManage 003C                         _ManageDrivers 14DC  
                          _INTCONbits 000FF2                          _RunScheduler 0F1A  
                    ??_APP_INITIALIZE 0055                              intlevel2 0000  
                    ___lldiv@dividend 005B                         ??_GetAvgSpeed 006A  
                       ??_GetDistance 0053                 __end_of_ReloadHWtimer 1328  
                    ?_HWtimerCallback 003C                        ??_EepromManage 0052  
                      ?_ManageDrivers 003C                      ?_HWIeeprom_Write 004F  
                    ___lldiv@quotient 0063          __size_of_DisplayAlphaNumeric 0006  
         Eeprom_Write_Block@BlockSize 0051                           ?_APP_MANAGE 003C  
         ??_SpeedCalcNotifyInitialize 004F                     ?_HWI_4Digit_WRITE 004F  
            __end_of_SetCircumfirunce 1550              ??_HWI_DIGITAL_INITIALIZE 004F  
                  ??_HWI_4Digit_WRITE 0050                ManageDrivers@LoopIndex 0056  
               GetKeyStatus@KeyStatus 004F  
