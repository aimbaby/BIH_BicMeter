

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Jun 25 08:11:31 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.41
    65                           ; Generated 25/01/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4520 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  00150C                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _CircumFactor
   104  00150C  00C8               	dw	200
   105                           
   106                           	psect	smallconst
   107  000600                     __psmallconst:
   108                           	opt stack 0
   109  000600  00                 	db	0
   110  000601                     _KeyArrayConfig:
   111                           	opt stack 0
   112  000601  0F                 	db	15
   113  000602  00                 	db	0
   114  000603  0004               	dw	4
   115  000605  0004               	dw	4
   116  000607  0064               	dw	100
   117  000609  10                 	db	16
   118  00060A  00                 	db	0
   119  00060B  0004               	dw	4
   120  00060D  0004               	dw	4
   121  00060F  0064               	dw	100
   122  000611                     __end_of_KeyArrayConfig:
   123                           	opt stack 0
   124  000611                     _SevenSegmentMAP:
   125                           	opt stack 0
   126  000611  FC                 	db	252
   127  000612  60                 	db	96
   128  000613  DA                 	db	218
   129  000614  F2                 	db	242
   130  000615  66                 	db	102
   131  000616  B6                 	db	182
   132  000617  BE                 	db	190
   133  000618  E0                 	db	224
   134  000619  FE                 	db	254
   135  00061A  F6                 	db	246
   136  00061B  01                 	db	1
   137  00061C                     __end_of_SevenSegmentMAP:
   138                           	opt stack 0
   139  00061C  00                 	db	0	; dummy byte at the end
   140  0000                     
   141                           	psect	nvCOMRAM
   142  00006B                     __pnvCOMRAM:
   143                           	opt stack 0
   144  00006B                     _bIsAnodeUsed:
   145                           	opt stack 0
   146  00006B                     	ds	1
   147  0000                     _TMR1	set	4046
   148  0000                     _TMR3H	set	4019
   149  0000                     _TMR3L	set	4018
   150  0000                     _TMR0L	set	4054
   151  0000                     _INTCON2bits	set	4081
   152  0000                     _T3CON	set	4017
   153  0000                     _T1CON	set	4045
   154  0000                     _T0CON	set	4053
   155  0000                     _INTCON3	set	4080
   156  0000                     _INTCON	set	4082
   157  0000                     _PORTBbits	set	3969
   158  0000                     _TRISBbits	set	3987
   159  0000                     _TRISC	set	3988
   160  0000                     _TRISD	set	3989
   161  0000                     _LATD	set	3980
   162  0000                     _PORTD	set	3971
   163  0000                     _LATC	set	3979
   164  0000                     _PORTC	set	3970
   165  0000                     _EECON2	set	4007
   166  0000                     _INTCONbits	set	4082
   167  0000                     _EEDATA	set	4008
   168  0000                     _EEADR	set	4009
   169  0000                     _EECON1bits	set	4006
   170  0000                     _INT1IF	set	32640
   171  0000                     _INT0IF	set	32657
   172  0000                     _TMR2IF	set	31985
   173  0000                     _TMR3IE	set	32001
   174  0000                     _TMR3IF	set	32009
   175  0000                     _TMR1IE	set	31976
   176  0000                     _TMR1IF	set	31984
   177  0000                     _TMR0IE	set	32661
   178  0000                     _TMR0IF	set	32658
   179                           
   180                           ; #config settings
   181  0000                     
   182                           	psect	cinit
   183  0011E8                     __pcinit:
   184                           	opt stack 0
   185  0011E8                     start_initialization:
   186                           	opt stack 0
   187  0011E8                     __initialization:
   188                           	opt stack 0
   189                           
   190                           ; Initialize objects allocated to COMRAM (2 bytes)
   191                           ; load TBLPTR registers with __pidataCOMRAM
   192  0011E8  0E0C               	movlw	low __pidataCOMRAM
   193  0011EA  6EF6               	movwf	tblptrl,c
   194  0011EC  0E15               	movlw	high __pidataCOMRAM
   195  0011EE  6EF7               	movwf	tblptrh,c
   196  0011F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   197  0011F2  6EF8               	movwf	tblptru,c
   198  0011F4  0009               	tblrd		*+	;fetch initializer
   199  0011F6  CFF5 F069          	movff	tablat,__pdataCOMRAM
   200  0011FA  0009               	tblrd		*+	;fetch initializer
   201  0011FC  CFF5 F06A          	movff	tablat,__pdataCOMRAM+1
   202                           
   203                           ; Clear objects allocated to BANK0 (10 bytes)
   204  001200  EE00  F08E         	lfsr	0,__pbssBANK0
   205  001204  0E0A               	movlw	10
   206  001206                     clear_0:
   207  001206  6AEE               	clrf	postinc0,c
   208  001208  06E8               	decf	wreg,f,c
   209  00120A  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (58 bytes)
   212  00120C  EE00  F001         	lfsr	0,__pbssCOMRAM
   213  001210  0E3A               	movlw	58
   214  001212                     clear_1:
   215  001212  6AEE               	clrf	postinc0,c
   216  001214  06E8               	decf	wreg,f,c
   217  001216  E1FD               	bnz	clear_1
   218  001218                     end_of_initialization:
   219                           	opt stack 0
   220  001218                     __end_of__initialization:
   221                           	opt stack 0
   222  001218  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   223  00121A  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   224  00121C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   225  00121E  6EF8               	movwf	tblptru,c
   226  001220  0100               	movlb	0
   227  001222  EF6C  F00A         	goto	_main	;jump to C main() function
   228                           tblptru	equ	0xFF8
   229                           tblptrh	equ	0xFF7
   230                           tblptrl	equ	0xFF6
   231                           tablat	equ	0xFF5
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	bssCOMRAM
   236  000001                     __pbssCOMRAM:
   237                           	opt stack 0
   238  000001                     _ArrayTask:
   239                           	opt stack 0
   240  000001                     	ds	16
   241  000011                     _BCDNumber:
   242                           	opt stack 0
   243  000011                     	ds	8
   244  000019                     _DistTravelCntr:
   245                           	opt stack 0
   246  000019                     	ds	4
   247  00001D                     _HWtimerCount:
   248                           	opt stack 0
   249  00001D                     	ds	2
   250  00001F                     _LapTimeTenthMilli:
   251                           	opt stack 0
   252  00001F                     	ds	2
   253  000021                     _LapDistanceCounter:
   254                           	opt stack 0
   255  000021                     	ds	2
   256  000023                     APP_MANAGE@bIsBlinkMode:
   257                           	opt stack 0
   258  000023                     	ds	2
   259  000025                     APP_MANAGE@blinkIndex:
   260                           	opt stack 0
   261  000025                     	ds	2
   262  000027                     RunScheduler@TaskIndex:
   263                           	opt stack 0
   264  000027                     	ds	1
   265  000028                     _HwTimerOVFLcount:
   266                           	opt stack 0
   267  000028                     	ds	1
   268  000029                     _TimerOVFLcount:
   269                           	opt stack 0
   270  000029                     	ds	1
   271  00002A                     _LapCounter:
   272                           	opt stack 0
   273  00002A                     	ds	1
   274  00002B                     _NotifyFlag:
   275                           	opt stack 0
   276  00002B                     	ds	1
   277  00002C                     EepromManage@WriteIndex:
   278                           	opt stack 0
   279  00002C                     	ds	1
   280  00002D                     _DataSize:
   281                           	opt stack 0
   282  00002D                     	ds	1
   283  00002E                     _EEPROMaddr:
   284                           	opt stack 0
   285  00002E                     	ds	1
   286  00002F                     _WriteRequest:
   287                           	opt stack 0
   288  00002F                     	ds	1
   289  000030                     BCDManage7segment@BlinkCounter:
   290                           	opt stack 0
   291  000030                     	ds	1
   292  000031                     _BlinkFlag:
   293                           	opt stack 0
   294  000031                     	ds	1
   295  000032                     _BlinkDuration:
   296                           	opt stack 0
   297  000032                     	ds	1
   298  000033                     _BlinkIndex:
   299                           	opt stack 0
   300  000033                     	ds	1
   301  000034                     _KeyInternalData:
   302                           	opt stack 0
   303  000034                     	ds	6
   304  00003A                     BCDManage7segment@DigitIndex:
   305                           	opt stack 0
   306  00003A                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	dataCOMRAM
   315  000069                     __pdataCOMRAM:
   316                           	opt stack 0
   317  000069                     _CircumFactor:
   318                           	opt stack 0
   319  000069                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	bssBANK0
   328  00008E                     __pbssBANK0:
   329                           	opt stack 0
   330  00008E                     _DataArray:
   331                           	opt stack 0
   332  00008E                     	ds	10
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	cstackBANK0
   341  000080                     __pcstackBANK0:
   342                           	opt stack 0
   343  000080                     GetAvgSpeed@bIsKph:
   344                           	opt stack 0
   345  000080                     SpeedCalcManage@HundredMeterReference:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x0
   349  000080                     	ds	1
   350  000081                     GetAvgSpeed@KphMphFactor:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x1
   354  000081                     	ds	4
   355  000085                     GetAvgSpeed@AvgSpeedKphMph:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x5
   359  000085                     	ds	2
   360  000087                     APP_MANAGE@AvgSpeedKph:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x7
   364  000087                     	ds	2
   365  000089                     APP_MANAGE@TravelledDistance:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x9
   369  000089                     	ds	2
   370  00008B                     APP_MANAGE@keystatus:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0xB
   374  00008B                     	ds	1
   375  00008C                     
   376                           ; 1 bytes @ 0xC
   377  00008C                     	ds	2
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           
   385                           	psect	cstackCOMRAM
   386  00003B                     __pcstackCOMRAM:
   387                           	opt stack 0
   388  00003B                     ?_ReloadHWtimer:
   389                           	opt stack 0
   390  00003B                     SchedulerTick@TaskIndex:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x0
   394  00003B                     	ds	2
   395  00003D                     ReloadHWtimer@TimerId:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x2
   399  00003D                     	ds	1
   400  00003E                     ReloadHWtimer@ElapsedTime:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x3
   404  00003E                     	ds	2
   405  000040                     ??_ISR:
   406                           
   407                           ; 1 bytes @ 0x5
   408  000040                     	ds	14
   409  00004E                     ?___wmul:
   410                           	opt stack 0
   411  00004E                     ?___lwdiv:
   412                           	opt stack 0
   413  00004E                     ?_GetDistance:
   414                           	opt stack 0
   415  00004E                     ?___lmul:
   416                           	opt stack 0
   417  00004E                     BCDInitialize@bIsCommonAnode:
   418                           	opt stack 0
   419  00004E                     BlinkDigit@duration:
   420                           	opt stack 0
   421  00004E                     GetKeyStatus@KeyStatus:
   422                           	opt stack 0
   423  00004E                     HWIeeprom_Write@Data:
   424                           	opt stack 0
   425  00004E                     HWI_4Digit_WRITE@value:
   426                           	opt stack 0
   427  00004E                     HWI_8Digit_WRITE@value:
   428                           	opt stack 0
   429  00004E                     HWI_DIGI_READ@pin:
   430                           	opt stack 0
   431  00004E                     Eeprom_Write_Block@DataPtr:
   432                           	opt stack 0
   433  00004E                     SetCircumfirunce@Circum:
   434                           	opt stack 0
   435  00004E                     CreateTask@MangeFunction:
   436                           	opt stack 0
   437  00004E                     HWIeeprom_Read@Data:
   438                           	opt stack 0
   439  00004E                     ___wmul@multiplier:
   440                           	opt stack 0
   441  00004E                     ___lwdiv@dividend:
   442                           	opt stack 0
   443  00004E                     ___lmul@multiplier:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x13
   447  00004E                     	ds	1
   448  00004F                     BlinkDigit@Index:
   449                           	opt stack 0
   450  00004F                     GetKeyStatus@KeyID:
   451                           	opt stack 0
   452  00004F                     HWIeeprom_Write@address:
   453                           	opt stack 0
   454  00004F                     HWI_4Digit_WRITE@port:
   455                           	opt stack 0
   456  00004F                     HWI_8Digit_WRITE@port:
   457                           	opt stack 0
   458  00004F                     HWI_DIGI_READ@HWIread:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x14
   462  00004F                     	ds	1
   463  000050                     ??_BCDManage7segment:
   464  000050                     Eeprom_Write_Block@BlockSize:
   465                           	opt stack 0
   466  000050                     CreateTask@TaskId:
   467                           	opt stack 0
   468  000050                     HWIeeprom_Write@WriteSuccess:
   469                           	opt stack 0
   470  000050                     HWIeeprom_Read@address:
   471                           	opt stack 0
   472  000050                     ___wmul@multiplicand:
   473                           	opt stack 0
   474  000050                     ___lwdiv@divisor:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x15
   478  000050                     	ds	1
   479  000051                     Eeprom_Write_Block@WriteGranted:
   480                           	opt stack 0
   481  000051                     EepromManage@WriteSuccess:
   482                           	opt stack 0
   483  000051                     CreateTask@Period:
   484                           	opt stack 0
   485  000051                     HWIeeprom_Read@ReadSuccess:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x16
   489  000051                     	ds	1
   490  000052                     BCDManage7segment@Index:
   491                           	opt stack 0
   492  000052                     Eeprom_Write_Block@address:
   493                           	opt stack 0
   494  000052                     MangeKeys@KeyState:
   495                           	opt stack 0
   496  000052                     ___lwdiv@counter:
   497                           	opt stack 0
   498  000052                     Eeprom_Read_Block@DataPtr:
   499                           	opt stack 0
   500  000052                     ___wmul@product:
   501                           	opt stack 0
   502  000052                     ___lmul@multiplicand:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x17
   506  000052                     	ds	1
   507  000053                     BCDManage7segment@BCD:
   508                           	opt stack 0
   509  000053                     Eeprom_Write_Block@LoopIndex:
   510                           	opt stack 0
   511  000053                     MangeKeys@HWIreading:
   512                           	opt stack 0
   513  000053                     ___lwdiv@quotient:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x18
   517  000053                     	ds	1
   518  000054                     Eeprom_Read_Block@BlockSize:
   519                           	opt stack 0
   520  000054                     MangeKeys@KeyID:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x19
   524  000054                     	ds	1
   525  000055                     Eeprom_Read_Block@address:
   526                           	opt stack 0
   527  000055                     ManageDrivers@LoopIndex:
   528                           	opt stack 0
   529  000055                     BCDsendNumber@Number:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x1A
   533  000055                     	ds	1
   534  000056                     Eeprom_Read_Block@ReadSuccess:
   535                           	opt stack 0
   536  000056                     ___lmul@product:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x1B
   540  000056                     	ds	1
   541  000057                     BCDsendNumber@DecimalPlace:
   542                           	opt stack 0
   543  000057                     Eeprom_Read_Block@LoopIndex:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1C
   547  000057                     	ds	1
   548  000058                     ??_BCDsendNumber:
   549                           
   550                           ; 1 bytes @ 0x1D
   551  000058                     	ds	2
   552  00005A                     ?___lldiv:
   553                           	opt stack 0
   554  00005A                     BCDsendNumber@Link:
   555                           	opt stack 0
   556  00005A                     ___lldiv@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x1F
   560  00005A                     	ds	2
   561  00005C                     BCDsendNumber@Output:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x21
   565  00005C                     	ds	2
   566  00005E                     BCDsendNumber@Buffer:
   567                           	opt stack 0
   568  00005E                     ___lldiv@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x23
   572  00005E                     	ds	2
   573  000060                     BCDsendNumber@LoopIndex:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x25
   577  000060                     	ds	2
   578  000062                     ___lldiv@quotient:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0x27
   582  000062                     	ds	4
   583  000066                     ___lldiv@counter:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x2B
   587  000066                     	ds	1
   588  000067                     ??_SpeedCalcManage:
   589  000067                     ?_GetAvgSpeed:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x2C
   593  000067                     	ds	2
   594  000069                     tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           
   601                           ; 1 bytes @ 0x2E
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 78 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   621 ;;      Params:         0       0       0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels required when called:   10
   627 ;; This function calls:
   628 ;;		_Start_App
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text0
   635  0014D8                     __ptext0:
   636                           	opt stack 0
   637  0014D8                     _main:
   638                           	opt stack 21
   639                           
   640                           ;main.c: 80: Start_App();
   641                           
   642                           ;incstack = 0
   643  0014D8  ECF4  F007         	call	_Start_App	;wreg free
   644                           
   645                           ;main.c: 81: return;
   646  0014DC  EF07  F000         	goto	start
   647  0014E0                     __end_of_main:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           
   656 ;; *************** function _Start_App *****************
   657 ;; Defined at:
   658 ;;		line 21 in file "../../../../OS/OS_manage/OS_manage.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;		None
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : 0/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   672 ;;      Params:         0       0       0       0       0       0       0
   673 ;;      Locals:         0       0       0       0       0       0       0
   674 ;;      Temps:          0       0       0       0       0       0       0
   675 ;;      Totals:         0       0       0       0       0       0       0
   676 ;;Total ram usage:        0 bytes
   677 ;; Hardware stack levels used:    1
   678 ;; Hardware stack levels required when called:    9
   679 ;; This function calls:
   680 ;;		_APP_INITIALIZE
   681 ;;		_BCDInitialize
   682 ;;		_CreateTask
   683 ;;		_HWI_DIGITAL_INITIALIZE
   684 ;;		_HWI_INTERRUPTS_INTITALIZE
   685 ;;		_RunScheduler
   686 ;;		_SpeedCalcNotifyInitialize
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text1
   693  000FE8                     __ptext1:
   694                           	opt stack 0
   695  000FE8                     _Start_App:
   696                           	opt stack 21
   697                           
   698                           ;OS_manage.c: 23: HWI_INTERRUPTS_INTITALIZE();
   699                           
   700                           ;incstack = 0
   701  000FE8  EC13  F009         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   702                           
   703                           ;OS_manage.c: 24: HWI_DIGITAL_INITIALIZE();
   704  000FEC  EC3B  F00A         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   705                           
   706                           ;OS_manage.c: 25: SpeedCalcNotifyInitialize();
   707  000FF0  EC87  F00A         	call	_SpeedCalcNotifyInitialize	;wreg free
   708                           
   709                           ;OS_manage.c: 26: APP_INITIALIZE();
   710  000FF4  EC88  F00A         	call	_APP_INITIALIZE	;wreg free
   711                           
   712                           ;OS_manage.c: 27: BCDInitialize(1);
   713  000FF8  0E01               	movlw	1
   714  000FFA  EC70  F00A         	call	_BCDInitialize
   715                           
   716                           ;OS_manage.c: 29: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   717  000FFE  0EF4               	movlw	low _ManageSpeedCalc
   718  001000  6E4E               	movwf	CreateTask@MangeFunction,c
   719  001002  0E14               	movlw	high _ManageSpeedCalc
   720  001004  6E4F               	movwf	CreateTask@MangeFunction+1,c
   721  001006  0E00               	movlw	0
   722  001008  6E50               	movwf	CreateTask@TaskId,c
   723  00100A  0E14               	movlw	20
   724  00100C  6E51               	movwf	CreateTask@Period,c
   725  00100E  EC2A  F008         	call	_CreateTask	;wreg free
   726                           
   727                           ;OS_manage.c: 31: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100)
      +                          ;
   728  001012  0EEE               	movlw	low _ManageApplication
   729  001014  6E4E               	movwf	CreateTask@MangeFunction,c
   730  001016  0E14               	movlw	high _ManageApplication
   731  001018  6E4F               	movwf	CreateTask@MangeFunction+1,c
   732  00101A  0E02               	movlw	2
   733  00101C  6E50               	movwf	CreateTask@TaskId,c
   734  00101E  0E64               	movlw	100
   735  001020  6E51               	movwf	CreateTask@Period,c
   736  001022  EC2A  F008         	call	_CreateTask	;wreg free
   737                           
   738                           ;OS_manage.c: 33: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 4)
      +                          ;
   739  001026  0EE8               	movlw	low _DisplayAlphaNumeric
   740  001028  6E4E               	movwf	CreateTask@MangeFunction,c
   741  00102A  0E14               	movlw	high _DisplayAlphaNumeric
   742  00102C  6E4F               	movwf	CreateTask@MangeFunction+1,c
   743  00102E  0E01               	movlw	1
   744  001030  6E50               	movwf	CreateTask@TaskId,c
   745  001032  0E04               	movlw	4
   746  001034  6E51               	movwf	CreateTask@Period,c
   747  001036  EC2A  F008         	call	_CreateTask	;wreg free
   748                           
   749                           ;OS_manage.c: 35: CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
   750  00103A  0E5A               	movlw	low _ManageDrivers
   751  00103C  6E4E               	movwf	CreateTask@MangeFunction,c
   752  00103E  0E14               	movlw	high _ManageDrivers
   753  001040  6E4F               	movwf	CreateTask@MangeFunction+1,c
   754  001042  0E03               	movlw	3
   755  001044  6E50               	movwf	CreateTask@TaskId,c
   756  001046  0E0A               	movlw	10
   757  001048  6E51               	movwf	CreateTask@Period,c
   758  00104A  EC2A  F008         	call	_CreateTask	;wreg free
   759                           
   760                           ;OS_manage.c: 37: RunScheduler();
   761  00104E  EC6D  F007         	call	_RunScheduler	;wreg free
   762  001052  0012               	return		;funcret
   763  001054                     __end_of_Start_App:
   764                           	opt stack 0
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           
   772 ;; *************** function _SpeedCalcNotifyInitialize *****************
   773 ;; Defined at:
   774 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		None
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   788 ;;      Params:         0       0       0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0
   791 ;;      Totals:         0       0       0       0       0       0       0
   792 ;;Total ram usage:        0 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    4
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_Start_App
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text2
   803  00150E                     __ptext2:
   804                           	opt stack 0
   805  00150E                     _SpeedCalcNotifyInitialize:
   806                           	opt stack 25
   807                           
   808                           ;incstack = 0
   809  00150E  0012               	return		;funcret
   810  001510                     __end_of_SpeedCalcNotifyInitialize:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           
   819 ;; *************** function _RunScheduler *****************
   820 ;; Defined at:
   821 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      void 
   828 ;; Registers used:
   829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   835 ;;      Params:         0       0       0       0       0       0       0
   836 ;;      Locals:         0       0       0       0       0       0       0
   837 ;;      Temps:          0       2       0       0       0       0       0
   838 ;;      Totals:         0       2       0       0       0       0       0
   839 ;;Total ram usage:        2 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    8
   842 ;; This function calls:
   843 ;;		_DisplayAlphaNumeric
   844 ;;		_ManageApplication
   845 ;;		_ManageDrivers
   846 ;;		_ManageSpeedCalc
   847 ;; This function is called by:
   848 ;;		_Start_App
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text3
   853  000EDA                     __ptext3:
   854                           	opt stack 0
   855  000EDA                     _RunScheduler:
   856                           	opt stack 21
   857  000EDA                     
   858                           ;Scheduler.c: 29: {
   859                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 4 ; TaskIndex++)
   860  000EDA  0E00               	movlw	0
   861  000EDC  6E27               	movwf	RunScheduler@TaskIndex,c
   862  000EDE                     l2333:
   863  000EDE  0E03               	movlw	3
   864  000EE0  6427               	cpfsgt	RunScheduler@TaskIndex,c
   865  000EE2  D001               	goto	l2337
   866  000EE4  D7FA               	goto	l2331
   867  000EE6                     l2337:
   868                           
   869                           ;Scheduler.c: 31: {
   870                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   871  000EE6  5027               	movf	RunScheduler@TaskIndex,w,c
   872  000EE8  0D04               	mullw	4
   873  000EEA  0E02               	movlw	2
   874  000EEC  26F3               	addwf	prodl,f,c
   875  000EEE  0E00               	movlw	0
   876  000EF0  22F4               	addwfc	prodh,f,c
   877  000EF2  0E01               	movlw	low _ArrayTask
   878  000EF4  24F3               	addwf	prodl,w,c
   879  000EF6  6ED9               	movwf	fsr2l,c
   880  000EF8  0E00               	movlw	high _ArrayTask
   881  000EFA  20F4               	addwfc	prodh,w,c
   882  000EFC  6EDA               	movwf	fsr2h,c
   883  000EFE  5027               	movf	RunScheduler@TaskIndex,w,c
   884  000F00  0D04               	mullw	4
   885  000F02  0E03               	movlw	3
   886  000F04  26F3               	addwf	prodl,f,c
   887  000F06  0E00               	movlw	0
   888  000F08  22F4               	addwfc	prodh,f,c
   889  000F0A  0E01               	movlw	low _ArrayTask
   890  000F0C  24F3               	addwf	prodl,w,c
   891  000F0E  6EE1               	movwf	fsr1l,c
   892  000F10  0E00               	movlw	high _ArrayTask
   893  000F12  20F4               	addwfc	prodh,w,c
   894  000F14  6EE2               	movwf	fsr1h,c
   895  000F16  50DE               	movf	postinc2,w,c
   896  000F18  5CE6               	subwf	postinc1,w,c
   897  000F1A  A0D8               	btfss	status,0,c
   898  000F1C  D022               	goto	l2343
   899                           
   900                           ;Scheduler.c: 33: {
   901                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   902  000F1E  5027               	movf	RunScheduler@TaskIndex,w,c
   903  000F20  0D04               	mullw	4
   904  000F22  0E01               	movlw	low _ArrayTask
   905  000F24  24F3               	addwf	prodl,w,c
   906  000F26  6ED9               	movwf	fsr2l,c
   907  000F28  0E00               	movlw	high _ArrayTask
   908  000F2A  20F4               	addwfc	prodh,w,c
   909  000F2C  6EDA               	movwf	fsr2h,c
   910  000F2E  D801               	call	u1538
   911  000F30  D00A               	goto	l2341
   912  000F32                     u1538:
   913  000F32  0005               	push	
   914  000F34  6EFA               	movwf	pclath,c
   915  000F36  50DE               	movf	postinc2,w,c
   916  000F38  6EFD               	movwf	tosl,c
   917  000F3A  50DE               	movf	postinc2,w,c
   918  000F3C  6EFE               	movwf	tosh,c
   919  000F3E  50F8               	movf	tblptru,w,c
   920  000F40  6EFF               	movwf	tosu,c
   921  000F42  50FA               	movf	pclath,w,c
   922  000F44  0012               	return		;indir
   923  000F46                     l2341:
   924                           
   925                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   926  000F46  5027               	movf	RunScheduler@TaskIndex,w,c
   927  000F48  0D04               	mullw	4
   928  000F4A  0E03               	movlw	3
   929  000F4C  26F3               	addwf	prodl,f,c
   930  000F4E  0E00               	movlw	0
   931  000F50  22F4               	addwfc	prodh,f,c
   932  000F52  0E01               	movlw	low _ArrayTask
   933  000F54  24F3               	addwf	prodl,w,c
   934  000F56  6ED9               	movwf	fsr2l,c
   935  000F58  0E00               	movlw	high _ArrayTask
   936  000F5A  20F4               	addwfc	prodh,w,c
   937  000F5C  6EDA               	movwf	fsr2h,c
   938  000F5E  0E00               	movlw	0
   939  000F60  6EDF               	movwf	indf2,c
   940  000F62                     l2343:
   941  000F62  2A27               	incf	RunScheduler@TaskIndex,f,c
   942  000F64  D7BC               	goto	l2333
   943  000F66                     __end_of_RunScheduler:
   944                           	opt stack 0
   945                           tosu	equ	0xFFF
   946                           tosh	equ	0xFFE
   947                           tosl	equ	0xFFD
   948                           pclath	equ	0xFFA
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           prodh	equ	0xFF4
   954                           prodl	equ	0xFF3
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postinc1	equ	0xFE6
   958                           fsr1h	equ	0xFE2
   959                           fsr1l	equ	0xFE1
   960                           indf2	equ	0xFDF
   961                           postinc2	equ	0xFDE
   962                           fsr2h	equ	0xFDA
   963                           fsr2l	equ	0xFD9
   964                           status	equ	0xFD8
   965                           
   966 ;; *************** function _ManageDrivers *****************
   967 ;; Defined at:
   968 ;;		line 54 in file "../../../../OS/OS_manage/OS_manage.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;		None
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  LoopIndex       1   26[COMRAM] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   982 ;;      Params:         0       0       0       0       0       0       0
   983 ;;      Locals:         1       0       0       0       0       0       0
   984 ;;      Temps:          0       0       0       0       0       0       0
   985 ;;      Totals:         1       0       0       0       0       0       0
   986 ;;Total ram usage:        1 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    6
   989 ;; This function calls:
   990 ;;		_EepromManage
   991 ;;		_MangeKeys
   992 ;; This function is called by:
   993 ;;		_Start_App
   994 ;;		_RunScheduler
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text4
   999  00145A                     __ptext4:
  1000                           	opt stack 0
  1001  00145A                     _ManageDrivers:
  1002                           	opt stack 22
  1003                           
  1004                           ;OS_manage.c: 56: unsigned char LoopIndex;
  1005                           ;OS_manage.c: 57: for(LoopIndex = (unsigned char)0 ; LoopIndex < (unsigned char)2 ; Loop
      +                          Index++)
  1006                           
  1007                           ;incstack = 0
  1008  00145A  0E00               	movlw	0
  1009  00145C  6E55               	movwf	ManageDrivers@LoopIndex,c
  1010  00145E                     l1991:
  1011  00145E  0E01               	movlw	1
  1012  001460  6455               	cpfsgt	ManageDrivers@LoopIndex,c
  1013  001462  D001               	goto	l1995
  1014  001464  D005               	goto	l2001
  1015  001466                     l1995:
  1016                           
  1017                           ;OS_manage.c: 58: {
  1018                           ;OS_manage.c: 59: MangeKeys(LoopIndex);
  1019  001466  5055               	movf	ManageDrivers@LoopIndex,w,c
  1020  001468  EC0F  F003         	call	_MangeKeys
  1021  00146C  2A55               	incf	ManageDrivers@LoopIndex,f,c
  1022  00146E  D7F7               	goto	l1991
  1023  001470                     l2001:
  1024                           
  1025                           ;OS_manage.c: 60: }
  1026                           ;OS_manage.c: 61: EepromManage();
  1027  001470  ECD4  F008         	call	_EepromManage	;wreg free
  1028  001474  0012               	return		;funcret
  1029  001476                     __end_of_ManageDrivers:
  1030                           	opt stack 0
  1031                           tosu	equ	0xFFF
  1032                           tosh	equ	0xFFE
  1033                           tosl	equ	0xFFD
  1034                           pclath	equ	0xFFA
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           prodh	equ	0xFF4
  1040                           prodl	equ	0xFF3
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postinc1	equ	0xFE6
  1044                           fsr1h	equ	0xFE2
  1045                           fsr1l	equ	0xFE1
  1046                           indf2	equ	0xFDF
  1047                           postinc2	equ	0xFDE
  1048                           fsr2h	equ	0xFDA
  1049                           fsr2l	equ	0xFD9
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _DisplayAlphaNumeric *****************
  1053 ;; Defined at:
  1054 ;;		line 41 in file "../../../../OS/OS_manage/OS_manage.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1068 ;;      Params:         0       0       0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    6
  1075 ;; This function calls:
  1076 ;;		_BCDManage7segment
  1077 ;; This function is called by:
  1078 ;;		_Start_App
  1079 ;;		_RunScheduler
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text5
  1084  0014E8                     __ptext5:
  1085                           	opt stack 0
  1086  0014E8                     _DisplayAlphaNumeric:
  1087                           	opt stack 22
  1088                           
  1089                           ;OS_manage.c: 43: BCDManage7segment();
  1090                           
  1091                           ;incstack = 0
  1092  0014E8  EC21  F007         	call	_BCDManage7segment	;wreg free
  1093  0014EC  0012               	return		;funcret
  1094  0014EE                     __end_of_DisplayAlphaNumeric:
  1095                           	opt stack 0
  1096                           tosu	equ	0xFFF
  1097                           tosh	equ	0xFFE
  1098                           tosl	equ	0xFFD
  1099                           pclath	equ	0xFFA
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           prodh	equ	0xFF4
  1105                           prodl	equ	0xFF3
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postinc1	equ	0xFE6
  1109                           fsr1h	equ	0xFE2
  1110                           fsr1l	equ	0xFE1
  1111                           indf2	equ	0xFDF
  1112                           postinc2	equ	0xFDE
  1113                           fsr2h	equ	0xFDA
  1114                           fsr2l	equ	0xFD9
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function _ManageApplication *****************
  1118 ;; Defined at:
  1119 ;;		line 45 in file "../../../../OS/OS_manage/OS_manage.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1133 ;;      Params:         0       0       0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    7
  1140 ;; This function calls:
  1141 ;;		_APP_MANAGE
  1142 ;; This function is called by:
  1143 ;;		_Start_App
  1144 ;;		_RunScheduler
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text6
  1149  0014EE                     __ptext6:
  1150                           	opt stack 0
  1151  0014EE                     _ManageApplication:
  1152                           	opt stack 21
  1153                           
  1154                           ;OS_manage.c: 47: APP_MANAGE();
  1155                           
  1156                           ;incstack = 0
  1157  0014EE  EC26  F005         	call	_APP_MANAGE	;wreg free
  1158  0014F2  0012               	return		;funcret
  1159  0014F4                     __end_of_ManageApplication:
  1160                           	opt stack 0
  1161                           tosu	equ	0xFFF
  1162                           tosh	equ	0xFFE
  1163                           tosl	equ	0xFFD
  1164                           pclath	equ	0xFFA
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           prodh	equ	0xFF4
  1170                           prodl	equ	0xFF3
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postinc1	equ	0xFE6
  1174                           fsr1h	equ	0xFE2
  1175                           fsr1l	equ	0xFE1
  1176                           indf2	equ	0xFDF
  1177                           postinc2	equ	0xFDE
  1178                           fsr2h	equ	0xFDA
  1179                           fsr2l	equ	0xFD9
  1180                           status	equ	0xFD8
  1181                           
  1182 ;; *************** function _ManageSpeedCalc *****************
  1183 ;; Defined at:
  1184 ;;		line 49 in file "../../../../OS/OS_manage/OS_manage.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1198 ;;      Params:         0       0       0       0       0       0       0
  1199 ;;      Locals:         0       0       0       0       0       0       0
  1200 ;;      Temps:          0       0       0       0       0       0       0
  1201 ;;      Totals:         0       0       0       0       0       0       0
  1202 ;;Total ram usage:        0 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    6
  1205 ;; This function calls:
  1206 ;;		_SpeedCalcManage
  1207 ;; This function is called by:
  1208 ;;		_Start_App
  1209 ;;		_RunScheduler
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text7
  1214  0014F4                     __ptext7:
  1215                           	opt stack 0
  1216  0014F4                     _ManageSpeedCalc:
  1217                           	opt stack 22
  1218                           
  1219                           ;OS_manage.c: 51: SpeedCalcManage();
  1220                           
  1221                           ;incstack = 0
  1222  0014F4  ECD5  F006         	call	_SpeedCalcManage	;wreg free
  1223  0014F8  0012               	return		;funcret
  1224  0014FA                     __end_of_ManageSpeedCalc:
  1225                           	opt stack 0
  1226                           tosu	equ	0xFFF
  1227                           tosh	equ	0xFFE
  1228                           tosl	equ	0xFFD
  1229                           pclath	equ	0xFFA
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           prodh	equ	0xFF4
  1235                           prodl	equ	0xFF3
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postinc1	equ	0xFE6
  1239                           fsr1h	equ	0xFE2
  1240                           fsr1l	equ	0xFE1
  1241                           indf2	equ	0xFDF
  1242                           postinc2	equ	0xFDE
  1243                           fsr2h	equ	0xFDA
  1244                           fsr2l	equ	0xFD9
  1245                           status	equ	0xFD8
  1246                           
  1247 ;; *************** function _SpeedCalcManage *****************
  1248 ;; Defined at:
  1249 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;		None
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  HundredMeter    2    0[BANK0 ] unsigned short 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1263 ;;      Params:         0       0       0       0       0       0       0
  1264 ;;      Locals:         0       2       0       0       0       0       0
  1265 ;;      Temps:          2       0       0       0       0       0       0
  1266 ;;      Totals:         2       2       0       0       0       0       0
  1267 ;;Total ram usage:        4 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    5
  1270 ;; This function calls:
  1271 ;;		___lldiv
  1272 ;;		___lwdiv
  1273 ;;		___wmul
  1274 ;; This function is called by:
  1275 ;;		_ManageSpeedCalc
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text8
  1280  000DAA                     __ptext8:
  1281                           	opt stack 0
  1282  000DAA                     _SpeedCalcManage:
  1283                           	opt stack 22
  1284                           
  1285                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
  1286                           ;SpeedCalc.c: 67: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
  1287                           ;SpeedCalc.c: 68: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  1288                           
  1289                           ;incstack = 0
  1290  000DAA  C01D  F04E         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
  1291  000DAE  C01E  F04F         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
  1292  000DB2  0E00               	movlw	0
  1293  000DB4  6E51               	movwf	___lwdiv@divisor+1,c
  1294  000DB6  0E64               	movlw	100
  1295  000DB8  6E50               	movwf	___lwdiv@divisor,c
  1296  000DBA  ECAB  F008         	call	___lwdiv	;wreg free
  1297  000DBE  C04E  F067         	movff	?___lwdiv,??_SpeedCalcManage
  1298  000DC2  C04F  F068         	movff	?___lwdiv+1,??_SpeedCalcManage+1
  1299  000DC6  C029  F04E         	movff	_TimerOVFLcount,___wmul@multiplier
  1300  000DCA  6A4F               	clrf	___wmul@multiplier+1,c
  1301  000DCC  0E02               	movlw	2
  1302  000DCE  6E51               	movwf	___wmul@multiplicand+1,c
  1303  000DD0  0E8F               	movlw	143
  1304  000DD2  6E50               	movwf	___wmul@multiplicand,c
  1305  000DD4  EC07  F00A         	call	___wmul	;wreg free
  1306  000DD8  504E               	movf	?___wmul,w,c
  1307  000DDA  2467               	addwf	??_SpeedCalcManage,w,c
  1308  000DDC  6E1F               	movwf	_LapTimeTenthMilli,c
  1309  000DDE  504F               	movf	?___wmul+1,w,c
  1310  000DE0  2068               	addwfc	??_SpeedCalcManage+1,w,c
  1311  000DE2  6E20               	movwf	_LapTimeTenthMilli+1,c
  1312                           
  1313                           ;SpeedCalc.c: 70: LapDistanceCounter += LapCounter;
  1314  000DE4  502A               	movf	_LapCounter,w,c	;volatile
  1315  000DE6  2621               	addwf	_LapDistanceCounter,f,c
  1316  000DE8  0E00               	movlw	0
  1317  000DEA  2222               	addwfc	_LapDistanceCounter+1,f,c
  1318                           
  1319                           ;SpeedCalc.c: 72: LapCounter = (unsigned char)0;
  1320  000DEC  0E00               	movlw	0
  1321  000DEE  6E2A               	movwf	_LapCounter,c	;volatile
  1322                           
  1323                           ;SpeedCalc.c: 74: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1324                           ;SpeedCalc.c: 75: (unsigned long)CircumFactor);
  1325  000DF0  0EA0               	movlw	160
  1326  000DF2  6E5A               	movwf	___lldiv@dividend,c
  1327  000DF4  0E86               	movlw	134
  1328  000DF6  6E5B               	movwf	___lldiv@dividend+1,c
  1329  000DF8  0E01               	movlw	1
  1330  000DFA  6E5C               	movwf	___lldiv@dividend+2,c
  1331  000DFC  0E00               	movlw	0
  1332  000DFE  6E5D               	movwf	___lldiv@dividend+3,c
  1333  000E00  C069  F05E         	movff	_CircumFactor,___lldiv@divisor
  1334  000E04  C06A  F05F         	movff	_CircumFactor+1,___lldiv@divisor+1
  1335  000E08  6A60               	clrf	___lldiv@divisor+2,c
  1336  000E0A  6A61               	clrf	___lldiv@divisor+3,c
  1337  000E0C  ECB3  F007         	call	___lldiv	;wreg free
  1338  000E10  C05A  F080         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1339  000E14  C05B  F081         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1340                           
  1341                           ;SpeedCalc.c: 77: if(LapDistanceCounter >= HundredMeterReference)
  1342  000E18  0100               	movlb	0	; () banked
  1343  000E1A  5180               	movf	SpeedCalcManage@HundredMeterReference& (0+255),w,b
  1344  000E1C  5C21               	subwf	_LapDistanceCounter,w,c
  1345  000E1E  0100               	movlb	0	; () banked
  1346  000E20  5181               	movf	(SpeedCalcManage@HundredMeterReference+1)& (0+255),w,b
  1347  000E22  5822               	subwfb	_LapDistanceCounter+1,w,c
  1348  000E24  A0D8               	btfss	status,0,c
  1349  000E26  0012               	return	
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;SpeedCalc.c: 78: {
  1353                           ;SpeedCalc.c: 79: DistTravelCntr ++;
  1354  000E28  0E01               	movlw	1
  1355  000E2A  2619               	addwf	_DistTravelCntr,f,c
  1356  000E2C  0E00               	movlw	0
  1357  000E2E  221A               	addwfc	_DistTravelCntr+1,f,c
  1358  000E30  221B               	addwfc	_DistTravelCntr+2,f,c
  1359  000E32  221C               	addwfc	_DistTravelCntr+3,f,c
  1360                           
  1361                           ;SpeedCalc.c: 80: LapDistanceCounter -= HundredMeterReference;
  1362  000E34  0100               	movlb	0	; () banked
  1363  000E36  5180               	movf	SpeedCalcManage@HundredMeterReference& (0+255),w,b
  1364  000E38  5E21               	subwf	_LapDistanceCounter,f,c
  1365  000E3A  0100               	movlb	0	; () banked
  1366  000E3C  5181               	movf	(SpeedCalcManage@HundredMeterReference+1)& (0+255),w,b
  1367  000E3E  5A22               	subwfb	_LapDistanceCounter+1,f,c
  1368                           
  1369                           ; BSR set to: 0
  1370                           
  1371                           ;SpeedCalc.c: 81: }
  1372  000E40  0012               	return	
  1373  000E42                     __end_of_SpeedCalcManage:
  1374                           	opt stack 0
  1375                           tosu	equ	0xFFF
  1376                           tosh	equ	0xFFE
  1377                           tosl	equ	0xFFD
  1378                           pclath	equ	0xFFA
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           prodh	equ	0xFF4
  1384                           prodl	equ	0xFF3
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postinc1	equ	0xFE6
  1388                           fsr1h	equ	0xFE2
  1389                           fsr1l	equ	0xFE1
  1390                           indf2	equ	0xFDF
  1391                           postinc2	equ	0xFDE
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _MangeKeys *****************
  1397 ;; Defined at:
  1398 ;;		line 29 in file "../../../../Common/Driver/Key/Key.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  KeyID           1    wreg     unsigned char 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  KeyID           1   25[COMRAM] unsigned char 
  1403 ;;  HWIreading      1   24[COMRAM] unsigned char 
  1404 ;;  KeyState        1   23[COMRAM] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1414 ;;      Params:         0       0       0       0       0       0       0
  1415 ;;      Locals:         3       0       0       0       0       0       0
  1416 ;;      Temps:          2       0       0       0       0       0       0
  1417 ;;      Totals:         5       0       0       0       0       0       0
  1418 ;;Total ram usage:        5 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    5
  1421 ;; This function calls:
  1422 ;;		_HWI_DIGI_READ
  1423 ;; This function is called by:
  1424 ;;		_ManageDrivers
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text9
  1429  00061E                     __ptext9:
  1430                           	opt stack 0
  1431  00061E                     _MangeKeys:
  1432                           	opt stack 22
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;incstack = 0
  1436                           ;MangeKeys@KeyID stored from wreg
  1437  00061E  6E54               	movwf	MangeKeys@KeyID,c
  1438                           
  1439                           ;Key.c: 31: unsigned char HWIreading;
  1440                           ;Key.c: 32: unsigned char KeyState;
  1441                           ;Key.c: 34: KeyState = KeyInternalData[KeyID].KeyState & (unsigned char)0x7F;
  1442  000620  5054               	movf	MangeKeys@KeyID,w,c
  1443  000622  0D03               	mullw	3
  1444  000624  0E34               	movlw	low _KeyInternalData
  1445  000626  24F3               	addwf	prodl,w,c
  1446  000628  6ED9               	movwf	fsr2l,c
  1447  00062A  0E00               	movlw	high _KeyInternalData
  1448  00062C  20F4               	addwfc	prodh,w,c
  1449  00062E  6EDA               	movwf	fsr2h,c
  1450  000630  50DF               	movf	indf2,w,c
  1451  000632  0B7F               	andlw	127
  1452  000634  6E52               	movwf	MangeKeys@KeyState,c
  1453                           
  1454                           ;Key.c: 35: HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
  1455  000636  5054               	movf	MangeKeys@KeyID,w,c
  1456  000638  0D08               	mullw	8
  1457  00063A  0E01               	movlw	low _KeyArrayConfig
  1458  00063C  24F3               	addwf	prodl,w,c
  1459  00063E  6EF6               	movwf	tblptrl,c
  1460  000640  0E06               	movlw	high _KeyArrayConfig
  1461  000642  20F4               	addwfc	prodh,w,c
  1462  000644  6EF7               	movwf	tblptrh,c
  1463  000646                     	if	0	;There are less than 3 active tblptr bytes
  1464  000646                     	endif
  1465  000646  0008               	tblrd		*
  1466  000648  50F5               	movf	tablat,w,c
  1467  00064A  EC82  F009         	call	_HWI_DIGI_READ
  1468  00064E  6E53               	movwf	MangeKeys@HWIreading,c
  1469                           
  1470                           ;Key.c: 37: switch(KeyState)
  1471  000650  D1F2               	goto	l1439
  1472  000652                     l1393:
  1473                           
  1474                           ;Key.c: 40: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1475  000652  5054               	movf	MangeKeys@KeyID,w,c
  1476  000654  0D08               	mullw	8
  1477  000656  0E01               	movlw	1
  1478  000658  26F3               	addwf	prodl,f,c
  1479  00065A  0E00               	movlw	0
  1480  00065C  22F4               	addwfc	prodh,f,c
  1481  00065E  0E01               	movlw	low _KeyArrayConfig
  1482  000660  24F3               	addwf	prodl,w,c
  1483  000662  6EF6               	movwf	tblptrl,c
  1484  000664  0E06               	movlw	high _KeyArrayConfig
  1485  000666  20F4               	addwfc	prodh,w,c
  1486  000668  6EF7               	movwf	tblptrh,c
  1487  00066A                     	if	0	;There are less than 3 active tblptr bytes
  1488  00066A                     	endif
  1489  00066A  0008               	tblrd		*
  1490  00066C  50F5               	movf	tablat,w,c
  1491  00066E  1853               	xorwf	MangeKeys@HWIreading,w,c
  1492  000670  A4D8               	btfss	status,2,c
  1493  000672  D059               	goto	l1403
  1494                           
  1495                           ;Key.c: 41: {
  1496                           ;Key.c: 42: KeyInternalData[KeyID].KeyCounter++;
  1497  000674  5054               	movf	MangeKeys@KeyID,w,c
  1498  000676  0D03               	mullw	3
  1499  000678  0E01               	movlw	1
  1500  00067A  26F3               	addwf	prodl,f,c
  1501  00067C  0E00               	movlw	0
  1502  00067E  22F4               	addwfc	prodh,f,c
  1503  000680  0E34               	movlw	low _KeyInternalData
  1504  000682  24F3               	addwf	prodl,w,c
  1505  000684  6ED9               	movwf	fsr2l,c
  1506  000686  0E00               	movlw	high _KeyInternalData
  1507  000688  20F4               	addwfc	prodh,w,c
  1508  00068A  6EDA               	movwf	fsr2h,c
  1509  00068C  2ADE               	incf	postinc2,f,c
  1510  00068E  0E00               	movlw	0
  1511  000690  22DD               	addwfc	postdec2,f,c
  1512                           
  1513                           ;Key.c: 43: if(KeyArrayConfig[KeyID].ShortPress ==
  1514                           ;Key.c: 44: KeyInternalData[KeyID].KeyCounter)
  1515  000692  5054               	movf	MangeKeys@KeyID,w,c
  1516  000694  0D03               	mullw	3
  1517  000696  0E01               	movlw	1
  1518  000698  26F3               	addwf	prodl,f,c
  1519  00069A  0E00               	movlw	0
  1520  00069C  22F4               	addwfc	prodh,f,c
  1521  00069E  0E34               	movlw	low _KeyInternalData
  1522  0006A0  24F3               	addwf	prodl,w,c
  1523  0006A2  6ED9               	movwf	fsr2l,c
  1524  0006A4  0E00               	movlw	high _KeyInternalData
  1525  0006A6  20F4               	addwfc	prodh,w,c
  1526  0006A8  6EDA               	movwf	fsr2h,c
  1527  0006AA  5054               	movf	MangeKeys@KeyID,w,c
  1528  0006AC  0D08               	mullw	8
  1529  0006AE  0E04               	movlw	4
  1530  0006B0  26F3               	addwf	prodl,f,c
  1531  0006B2  0E00               	movlw	0
  1532  0006B4  22F4               	addwfc	prodh,f,c
  1533  0006B6  0E01               	movlw	low _KeyArrayConfig
  1534  0006B8  24F3               	addwf	prodl,w,c
  1535  0006BA  6EF6               	movwf	tblptrl,c
  1536  0006BC  0E06               	movlw	high _KeyArrayConfig
  1537  0006BE  20F4               	addwfc	prodh,w,c
  1538  0006C0  6EF7               	movwf	tblptrh,c
  1539  0006C2                     	if	0	;There are less than 3 active tblptr bytes
  1540  0006C2                     	endif
  1541  0006C2  50DE               	movf	postinc2,w,c
  1542  0006C4  0009               	tblrd		*+
  1543  0006C6  18F5               	xorwf	tablat,w,c
  1544  0006C8  E104               	bnz	u401
  1545  0006CA  50DE               	movf	postinc2,w,c
  1546  0006CC  0009               	tblrd		*+
  1547  0006CE  18F5               	xorwf	tablat,w,c
  1548  0006D0  A4D8               	btfss	status,2,c
  1549  0006D2                     u401:
  1550  0006D2  0012               	return	
  1551                           
  1552                           ;Key.c: 45: {
  1553                           ;Key.c: 46: KeyInternalData[KeyID].KeyState = (unsigned char)0x81;
  1554  0006D4  5054               	movf	MangeKeys@KeyID,w,c
  1555  0006D6  0D03               	mullw	3
  1556  0006D8  0E34               	movlw	low _KeyInternalData
  1557  0006DA  24F3               	addwf	prodl,w,c
  1558  0006DC  6ED9               	movwf	fsr2l,c
  1559  0006DE  0E00               	movlw	high _KeyInternalData
  1560  0006E0  20F4               	addwfc	prodh,w,c
  1561  0006E2  6EDA               	movwf	fsr2h,c
  1562  0006E4  0E81               	movlw	129
  1563  0006E6  6EDF               	movwf	indf2,c
  1564                           
  1565                           ;Key.c: 47: KeyInternalData[KeyID].KeyCounter =
  1566                           ;Key.c: 48: KeyArrayConfig[KeyID].ReleaseTicks;
  1567  0006E8  5054               	movf	MangeKeys@KeyID,w,c
  1568  0006EA  0D08               	mullw	8
  1569  0006EC  0E02               	movlw	2
  1570  0006EE  26F3               	addwf	prodl,f,c
  1571  0006F0  0E00               	movlw	0
  1572  0006F2  22F4               	addwfc	prodh,f,c
  1573  0006F4  0E01               	movlw	low _KeyArrayConfig
  1574  0006F6  24F3               	addwf	prodl,w,c
  1575  0006F8  6EF6               	movwf	tblptrl,c
  1576  0006FA  0E06               	movlw	high _KeyArrayConfig
  1577  0006FC  20F4               	addwfc	prodh,w,c
  1578  0006FE  6EF7               	movwf	tblptrh,c
  1579  000700                     	if	0	;There are less than 3 active tblptr bytes
  1580  000700                     	endif
  1581  000700  5054               	movf	MangeKeys@KeyID,w,c
  1582  000702  0D03               	mullw	3
  1583  000704  0E01               	movlw	1
  1584  000706  26F3               	addwf	prodl,f,c
  1585  000708  0E00               	movlw	0
  1586  00070A  22F4               	addwfc	prodh,f,c
  1587  00070C  0E34               	movlw	low _KeyInternalData
  1588  00070E  24F3               	addwf	prodl,w,c
  1589  000710  6ED9               	movwf	fsr2l,c
  1590  000712  0E00               	movlw	high _KeyInternalData
  1591  000714  20F4               	addwfc	prodh,w,c
  1592  000716  6EDA               	movwf	fsr2h,c
  1593  000718  0009               	tblrd		*+
  1594  00071A  CFF5 FFDE          	movff	tablat,postinc2
  1595  00071E  0008               	tblrd		*
  1596  000720  CFF5 FFDD          	movff	tablat,postdec2
  1597                           
  1598                           ;Key.c: 49: }
  1599                           ;Key.c: 50: }
  1600  000724  0012               	return	
  1601  000726                     l1403:
  1602                           
  1603                           ;Key.c: 51: else
  1604                           ;Key.c: 52: {
  1605                           ;Key.c: 53: KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
  1606  000726  5054               	movf	MangeKeys@KeyID,w,c
  1607  000728  0D03               	mullw	3
  1608  00072A  0E01               	movlw	1
  1609  00072C  26F3               	addwf	prodl,f,c
  1610  00072E  0E00               	movlw	0
  1611  000730  22F4               	addwfc	prodh,f,c
  1612  000732  0E34               	movlw	low _KeyInternalData
  1613  000734  24F3               	addwf	prodl,w,c
  1614  000736  6ED9               	movwf	fsr2l,c
  1615  000738  0E00               	movlw	high _KeyInternalData
  1616  00073A  20F4               	addwfc	prodh,w,c
  1617  00073C  6EDA               	movwf	fsr2h,c
  1618  00073E  0E00               	movlw	0
  1619  000740  6EDE               	movwf	postinc2,c
  1620  000742  0E00               	movlw	0
  1621  000744  6EDD               	movwf	postdec2,c
  1622                           
  1623                           ;Key.c: 54: }
  1624                           ;Key.c: 55: break;
  1625  000746  0012               	return	
  1626  000748                     l1405:
  1627                           
  1628                           ;Key.c: 57: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1629  000748  5054               	movf	MangeKeys@KeyID,w,c
  1630  00074A  0D08               	mullw	8
  1631  00074C  0E01               	movlw	1
  1632  00074E  26F3               	addwf	prodl,f,c
  1633  000750  0E00               	movlw	0
  1634  000752  22F4               	addwfc	prodh,f,c
  1635  000754  0E01               	movlw	low _KeyArrayConfig
  1636  000756  24F3               	addwf	prodl,w,c
  1637  000758  6EF6               	movwf	tblptrl,c
  1638  00075A  0E06               	movlw	high _KeyArrayConfig
  1639  00075C  20F4               	addwfc	prodh,w,c
  1640  00075E  6EF7               	movwf	tblptrh,c
  1641  000760                     	if	0	;There are less than 3 active tblptr bytes
  1642  000760                     	endif
  1643  000760  0008               	tblrd		*
  1644  000762  50F5               	movf	tablat,w,c
  1645  000764  1853               	xorwf	MangeKeys@HWIreading,w,c
  1646  000766  A4D8               	btfss	status,2,c
  1647  000768  D098               	goto	l1419
  1648                           
  1649                           ;Key.c: 58: {
  1650                           ;Key.c: 59: if ( KeyInternalData[KeyID].KeyCounter >=
  1651                           ;Key.c: 60: KeyArrayConfig[KeyID].ReleaseTicks)
  1652  00076A  5054               	movf	MangeKeys@KeyID,w,c
  1653  00076C  0D08               	mullw	8
  1654  00076E  0E02               	movlw	2
  1655  000770  26F3               	addwf	prodl,f,c
  1656  000772  0E00               	movlw	0
  1657  000774  22F4               	addwfc	prodh,f,c
  1658  000776  0E01               	movlw	low _KeyArrayConfig
  1659  000778  24F3               	addwf	prodl,w,c
  1660  00077A  6EF6               	movwf	tblptrl,c
  1661  00077C  0E06               	movlw	high _KeyArrayConfig
  1662  00077E  20F4               	addwfc	prodh,w,c
  1663  000780  6EF7               	movwf	tblptrh,c
  1664  000782                     	if	0	;There are less than 3 active tblptr bytes
  1665  000782                     	endif
  1666  000782  5054               	movf	MangeKeys@KeyID,w,c
  1667  000784  0D03               	mullw	3
  1668  000786  0E01               	movlw	1
  1669  000788  26F3               	addwf	prodl,f,c
  1670  00078A  0E00               	movlw	0
  1671  00078C  22F4               	addwfc	prodh,f,c
  1672  00078E  0E34               	movlw	low _KeyInternalData
  1673  000790  24F3               	addwf	prodl,w,c
  1674  000792  6ED9               	movwf	fsr2l,c
  1675  000794  0E00               	movlw	high _KeyInternalData
  1676  000796  20F4               	addwfc	prodh,w,c
  1677  000798  6EDA               	movwf	fsr2h,c
  1678  00079A  0009               	tblrd		*+
  1679  00079C  50F5               	movf	tablat,w,c
  1680  00079E  5CDE               	subwf	postinc2,w,c
  1681  0007A0  0009               	tblrd		*+
  1682  0007A2  50F5               	movf	tablat,w,c
  1683  0007A4  58DE               	subwfb	postinc2,w,c
  1684  0007A6  A0D8               	btfss	status,0,c
  1685  0007A8  D059               	goto	l1417
  1686                           
  1687                           ;Key.c: 61: {
  1688                           ;Key.c: 62: KeyInternalData[KeyID].KeyCounter++;
  1689  0007AA  5054               	movf	MangeKeys@KeyID,w,c
  1690  0007AC  0D03               	mullw	3
  1691  0007AE  0E01               	movlw	1
  1692  0007B0  26F3               	addwf	prodl,f,c
  1693  0007B2  0E00               	movlw	0
  1694  0007B4  22F4               	addwfc	prodh,f,c
  1695  0007B6  0E34               	movlw	low _KeyInternalData
  1696  0007B8  24F3               	addwf	prodl,w,c
  1697  0007BA  6ED9               	movwf	fsr2l,c
  1698  0007BC  0E00               	movlw	high _KeyInternalData
  1699  0007BE  20F4               	addwfc	prodh,w,c
  1700  0007C0  6EDA               	movwf	fsr2h,c
  1701  0007C2  2ADE               	incf	postinc2,f,c
  1702  0007C4  0E00               	movlw	0
  1703  0007C6  22DD               	addwfc	postdec2,f,c
  1704                           
  1705                           ;Key.c: 63: if(KeyArrayConfig[KeyID].LongPress ==
  1706                           ;Key.c: 64: KeyInternalData[KeyID].KeyCounter)
  1707  0007C8  5054               	movf	MangeKeys@KeyID,w,c
  1708  0007CA  0D03               	mullw	3
  1709  0007CC  0E01               	movlw	1
  1710  0007CE  26F3               	addwf	prodl,f,c
  1711  0007D0  0E00               	movlw	0
  1712  0007D2  22F4               	addwfc	prodh,f,c
  1713  0007D4  0E34               	movlw	low _KeyInternalData
  1714  0007D6  24F3               	addwf	prodl,w,c
  1715  0007D8  6ED9               	movwf	fsr2l,c
  1716  0007DA  0E00               	movlw	high _KeyInternalData
  1717  0007DC  20F4               	addwfc	prodh,w,c
  1718  0007DE  6EDA               	movwf	fsr2h,c
  1719  0007E0  5054               	movf	MangeKeys@KeyID,w,c
  1720  0007E2  0D08               	mullw	8
  1721  0007E4  0E06               	movlw	6
  1722  0007E6  26F3               	addwf	prodl,f,c
  1723  0007E8  0E00               	movlw	0
  1724  0007EA  22F4               	addwfc	prodh,f,c
  1725  0007EC  0E01               	movlw	low _KeyArrayConfig
  1726  0007EE  24F3               	addwf	prodl,w,c
  1727  0007F0  6EF6               	movwf	tblptrl,c
  1728  0007F2  0E06               	movlw	high _KeyArrayConfig
  1729  0007F4  20F4               	addwfc	prodh,w,c
  1730  0007F6  6EF7               	movwf	tblptrh,c
  1731  0007F8                     	if	0	;There are less than 3 active tblptr bytes
  1732  0007F8                     	endif
  1733  0007F8  50DE               	movf	postinc2,w,c
  1734  0007FA  0009               	tblrd		*+
  1735  0007FC  18F5               	xorwf	tablat,w,c
  1736  0007FE  E104               	bnz	u431
  1737  000800  50DE               	movf	postinc2,w,c
  1738  000802  0009               	tblrd		*+
  1739  000804  18F5               	xorwf	tablat,w,c
  1740  000806  A4D8               	btfss	status,2,c
  1741  000808                     u431:
  1742  000808  0012               	return	
  1743                           
  1744                           ;Key.c: 65: {
  1745                           ;Key.c: 66: KeyInternalData[KeyID].KeyState = (unsigned char)0x82;
  1746  00080A  5054               	movf	MangeKeys@KeyID,w,c
  1747  00080C  0D03               	mullw	3
  1748  00080E  0E34               	movlw	low _KeyInternalData
  1749  000810  24F3               	addwf	prodl,w,c
  1750  000812  6ED9               	movwf	fsr2l,c
  1751  000814  0E00               	movlw	high _KeyInternalData
  1752  000816  20F4               	addwfc	prodh,w,c
  1753  000818  6EDA               	movwf	fsr2h,c
  1754  00081A  0E82               	movlw	130
  1755  00081C  6EDF               	movwf	indf2,c
  1756                           
  1757                           ;Key.c: 67: KeyInternalData[KeyID].KeyCounter =
  1758                           ;Key.c: 68: KeyArrayConfig[KeyID].ReleaseTicks;
  1759  00081E  5054               	movf	MangeKeys@KeyID,w,c
  1760  000820  0D08               	mullw	8
  1761  000822  0E02               	movlw	2
  1762  000824  26F3               	addwf	prodl,f,c
  1763  000826  0E00               	movlw	0
  1764  000828  22F4               	addwfc	prodh,f,c
  1765  00082A  0E01               	movlw	low _KeyArrayConfig
  1766  00082C  24F3               	addwf	prodl,w,c
  1767  00082E  6EF6               	movwf	tblptrl,c
  1768  000830  0E06               	movlw	high _KeyArrayConfig
  1769  000832  20F4               	addwfc	prodh,w,c
  1770  000834  6EF7               	movwf	tblptrh,c
  1771  000836                     	if	0	;There are less than 3 active tblptr bytes
  1772  000836                     	endif
  1773  000836  5054               	movf	MangeKeys@KeyID,w,c
  1774  000838  0D03               	mullw	3
  1775  00083A  0E01               	movlw	1
  1776  00083C  26F3               	addwf	prodl,f,c
  1777  00083E  0E00               	movlw	0
  1778  000840  22F4               	addwfc	prodh,f,c
  1779  000842  0E34               	movlw	low _KeyInternalData
  1780  000844  24F3               	addwf	prodl,w,c
  1781  000846  6ED9               	movwf	fsr2l,c
  1782  000848  0E00               	movlw	high _KeyInternalData
  1783  00084A  20F4               	addwfc	prodh,w,c
  1784  00084C  6EDA               	movwf	fsr2h,c
  1785  00084E  0009               	tblrd		*+
  1786  000850  CFF5 FFDE          	movff	tablat,postinc2
  1787  000854  0008               	tblrd		*
  1788  000856  CFF5 FFDD          	movff	tablat,postdec2
  1789                           
  1790                           ;Key.c: 69: }
  1791                           ;Key.c: 70: }
  1792  00085A  0012               	return	
  1793  00085C                     l1417:
  1794                           
  1795                           ;Key.c: 71: else
  1796                           ;Key.c: 72: {
  1797                           ;Key.c: 73: KeyInternalData[KeyID].KeyCounter =
  1798                           ;Key.c: 74: KeyArrayConfig[KeyID].ReleaseTicks;
  1799  00085C  5054               	movf	MangeKeys@KeyID,w,c
  1800  00085E  0D08               	mullw	8
  1801  000860  0E02               	movlw	2
  1802  000862  26F3               	addwf	prodl,f,c
  1803  000864  0E00               	movlw	0
  1804  000866  22F4               	addwfc	prodh,f,c
  1805  000868  0E01               	movlw	low _KeyArrayConfig
  1806  00086A  24F3               	addwf	prodl,w,c
  1807  00086C  6EF6               	movwf	tblptrl,c
  1808  00086E  0E06               	movlw	high _KeyArrayConfig
  1809  000870  20F4               	addwfc	prodh,w,c
  1810  000872  6EF7               	movwf	tblptrh,c
  1811  000874                     	if	0	;There are less than 3 active tblptr bytes
  1812  000874                     	endif
  1813  000874  5054               	movf	MangeKeys@KeyID,w,c
  1814  000876  0D03               	mullw	3
  1815  000878  0E01               	movlw	1
  1816  00087A  26F3               	addwf	prodl,f,c
  1817  00087C  0E00               	movlw	0
  1818  00087E  22F4               	addwfc	prodh,f,c
  1819  000880  0E34               	movlw	low _KeyInternalData
  1820  000882  24F3               	addwf	prodl,w,c
  1821  000884  6ED9               	movwf	fsr2l,c
  1822  000886  0E00               	movlw	high _KeyInternalData
  1823  000888  20F4               	addwfc	prodh,w,c
  1824  00088A  6EDA               	movwf	fsr2h,c
  1825  00088C  0009               	tblrd		*+
  1826  00088E  CFF5 FFDE          	movff	tablat,postinc2
  1827  000892  0008               	tblrd		*
  1828  000894  CFF5 FFDD          	movff	tablat,postdec2
  1829                           
  1830                           ;Key.c: 75: }
  1831                           ;Key.c: 76: }
  1832  000898  0012               	return	
  1833  00089A                     l1419:
  1834                           
  1835                           ;Key.c: 77: else
  1836                           ;Key.c: 78: {
  1837                           ;Key.c: 79: if ( KeyInternalData[KeyID].KeyCounter >
  1838                           ;Key.c: 80: KeyArrayConfig[KeyID].ReleaseTicks)
  1839  00089A  5054               	movf	MangeKeys@KeyID,w,c
  1840  00089C  0D03               	mullw	3
  1841  00089E  0E01               	movlw	1
  1842  0008A0  26F3               	addwf	prodl,f,c
  1843  0008A2  0E00               	movlw	0
  1844  0008A4  22F4               	addwfc	prodh,f,c
  1845  0008A6  0E34               	movlw	low _KeyInternalData
  1846  0008A8  24F3               	addwf	prodl,w,c
  1847  0008AA  6ED9               	movwf	fsr2l,c
  1848  0008AC  0E00               	movlw	high _KeyInternalData
  1849  0008AE  20F4               	addwfc	prodh,w,c
  1850  0008B0  6EDA               	movwf	fsr2h,c
  1851  0008B2  5054               	movf	MangeKeys@KeyID,w,c
  1852  0008B4  0D08               	mullw	8
  1853  0008B6  0E02               	movlw	2
  1854  0008B8  26F3               	addwf	prodl,f,c
  1855  0008BA  0E00               	movlw	0
  1856  0008BC  22F4               	addwfc	prodh,f,c
  1857  0008BE  0E01               	movlw	low _KeyArrayConfig
  1858  0008C0  24F3               	addwf	prodl,w,c
  1859  0008C2  6EF6               	movwf	tblptrl,c
  1860  0008C4  0E06               	movlw	high _KeyArrayConfig
  1861  0008C6  20F4               	addwfc	prodh,w,c
  1862  0008C8  6EF7               	movwf	tblptrh,c
  1863  0008CA                     	if	0	;There are less than 3 active tblptr bytes
  1864  0008CA                     	endif
  1865  0008CA  50DE               	movf	postinc2,w,c
  1866  0008CC  0009               	tblrd		*+
  1867  0008CE  5CF5               	subwf	tablat,w,c
  1868  0008D0  50DE               	movf	postinc2,w,c
  1869  0008D2  0009               	tblrd		*+
  1870  0008D4  58F5               	subwfb	tablat,w,c
  1871  0008D6  B0D8               	btfsc	status,0,c
  1872  0008D8  D01F               	goto	l1423
  1873                           
  1874                           ;Key.c: 81: {
  1875                           ;Key.c: 82: KeyInternalData[KeyID].KeyCounter =
  1876                           ;Key.c: 83: KeyArrayConfig[KeyID].ReleaseTicks;
  1877  0008DA  5054               	movf	MangeKeys@KeyID,w,c
  1878  0008DC  0D08               	mullw	8
  1879  0008DE  0E02               	movlw	2
  1880  0008E0  26F3               	addwf	prodl,f,c
  1881  0008E2  0E00               	movlw	0
  1882  0008E4  22F4               	addwfc	prodh,f,c
  1883  0008E6  0E01               	movlw	low _KeyArrayConfig
  1884  0008E8  24F3               	addwf	prodl,w,c
  1885  0008EA  6EF6               	movwf	tblptrl,c
  1886  0008EC  0E06               	movlw	high _KeyArrayConfig
  1887  0008EE  20F4               	addwfc	prodh,w,c
  1888  0008F0  6EF7               	movwf	tblptrh,c
  1889  0008F2                     	if	0	;There are less than 3 active tblptr bytes
  1890  0008F2                     	endif
  1891  0008F2  5054               	movf	MangeKeys@KeyID,w,c
  1892  0008F4  0D03               	mullw	3
  1893  0008F6  0E01               	movlw	1
  1894  0008F8  26F3               	addwf	prodl,f,c
  1895  0008FA  0E00               	movlw	0
  1896  0008FC  22F4               	addwfc	prodh,f,c
  1897  0008FE  0E34               	movlw	low _KeyInternalData
  1898  000900  24F3               	addwf	prodl,w,c
  1899  000902  6ED9               	movwf	fsr2l,c
  1900  000904  0E00               	movlw	high _KeyInternalData
  1901  000906  20F4               	addwfc	prodh,w,c
  1902  000908  6EDA               	movwf	fsr2h,c
  1903  00090A  0009               	tblrd		*+
  1904  00090C  CFF5 FFDE          	movff	tablat,postinc2
  1905  000910  0008               	tblrd		*
  1906  000912  CFF5 FFDD          	movff	tablat,postdec2
  1907                           
  1908                           ;Key.c: 84: }
  1909  000916  0012               	return	
  1910  000918                     l1423:
  1911                           
  1912                           ;Key.c: 85: else
  1913                           ;Key.c: 86: {
  1914                           ;Key.c: 87: KeyInternalData[KeyID].KeyCounter--;
  1915  000918  5054               	movf	MangeKeys@KeyID,w,c
  1916  00091A  0D03               	mullw	3
  1917  00091C  0E01               	movlw	1
  1918  00091E  26F3               	addwf	prodl,f,c
  1919  000920  0E00               	movlw	0
  1920  000922  22F4               	addwfc	prodh,f,c
  1921  000924  0E34               	movlw	low _KeyInternalData
  1922  000926  24F3               	addwf	prodl,w,c
  1923  000928  6ED9               	movwf	fsr2l,c
  1924  00092A  0E00               	movlw	high _KeyInternalData
  1925  00092C  20F4               	addwfc	prodh,w,c
  1926  00092E  6EDA               	movwf	fsr2h,c
  1927  000930  06DE               	decf	postinc2,f,c
  1928  000932  0E00               	movlw	0
  1929  000934  5ADD               	subwfb	postdec2,f,c
  1930                           
  1931                           ;Key.c: 88: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  1932  000936  5054               	movf	MangeKeys@KeyID,w,c
  1933  000938  0D03               	mullw	3
  1934  00093A  0E01               	movlw	1
  1935  00093C  26F3               	addwf	prodl,f,c
  1936  00093E  0E00               	movlw	0
  1937  000940  22F4               	addwfc	prodh,f,c
  1938  000942  0E34               	movlw	low _KeyInternalData
  1939  000944  24F3               	addwf	prodl,w,c
  1940  000946  6ED9               	movwf	fsr2l,c
  1941  000948  0E00               	movlw	high _KeyInternalData
  1942  00094A  20F4               	addwfc	prodh,w,c
  1943  00094C  6EDA               	movwf	fsr2h,c
  1944  00094E  50DE               	movf	postinc2,w,c
  1945  000950  10DE               	iorwf	postinc2,w,c
  1946  000952  A4D8               	btfss	status,2,c
  1947  000954  0012               	return	
  1948                           
  1949                           ;Key.c: 89: {
  1950                           ;Key.c: 90: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  1951  000956  5054               	movf	MangeKeys@KeyID,w,c
  1952  000958  0D03               	mullw	3
  1953  00095A  0E34               	movlw	low _KeyInternalData
  1954  00095C  24F3               	addwf	prodl,w,c
  1955  00095E  6ED9               	movwf	fsr2l,c
  1956  000960  0E00               	movlw	high _KeyInternalData
  1957  000962  20F4               	addwfc	prodh,w,c
  1958  000964  6EDA               	movwf	fsr2h,c
  1959  000966  0E80               	movlw	128
  1960  000968  6EDF               	movwf	indf2,c
  1961                           
  1962                           ;Key.c: 91: }
  1963                           ;Key.c: 92: }
  1964                           ;Key.c: 93: }
  1965                           ;Key.c: 94: break;
  1966  00096A  0012               	return	
  1967  00096C                     l1427:
  1968                           
  1969                           ;Key.c: 96: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1970  00096C  5054               	movf	MangeKeys@KeyID,w,c
  1971  00096E  0D08               	mullw	8
  1972  000970  0E01               	movlw	1
  1973  000972  26F3               	addwf	prodl,f,c
  1974  000974  0E00               	movlw	0
  1975  000976  22F4               	addwfc	prodh,f,c
  1976  000978  0E01               	movlw	low _KeyArrayConfig
  1977  00097A  24F3               	addwf	prodl,w,c
  1978  00097C  6EF6               	movwf	tblptrl,c
  1979  00097E  0E06               	movlw	high _KeyArrayConfig
  1980  000980  20F4               	addwfc	prodh,w,c
  1981  000982  6EF7               	movwf	tblptrh,c
  1982  000984                     	if	0	;There are less than 3 active tblptr bytes
  1983  000984                     	endif
  1984  000984  0008               	tblrd		*
  1985  000986  50F5               	movf	tablat,w,c
  1986  000988  1853               	xorwf	MangeKeys@HWIreading,w,c
  1987  00098A  A4D8               	btfss	status,2,c
  1988  00098C  D01F               	goto	l1431
  1989                           
  1990                           ;Key.c: 97: {
  1991                           ;Key.c: 98: KeyInternalData[KeyID].KeyCounter =
  1992                           ;Key.c: 99: KeyArrayConfig[KeyID].ReleaseTicks;
  1993  00098E  5054               	movf	MangeKeys@KeyID,w,c
  1994  000990  0D08               	mullw	8
  1995  000992  0E02               	movlw	2
  1996  000994  26F3               	addwf	prodl,f,c
  1997  000996  0E00               	movlw	0
  1998  000998  22F4               	addwfc	prodh,f,c
  1999  00099A  0E01               	movlw	low _KeyArrayConfig
  2000  00099C  24F3               	addwf	prodl,w,c
  2001  00099E  6EF6               	movwf	tblptrl,c
  2002  0009A0  0E06               	movlw	high _KeyArrayConfig
  2003  0009A2  20F4               	addwfc	prodh,w,c
  2004  0009A4  6EF7               	movwf	tblptrh,c
  2005  0009A6                     	if	0	;There are less than 3 active tblptr bytes
  2006  0009A6                     	endif
  2007  0009A6  5054               	movf	MangeKeys@KeyID,w,c
  2008  0009A8  0D03               	mullw	3
  2009  0009AA  0E01               	movlw	1
  2010  0009AC  26F3               	addwf	prodl,f,c
  2011  0009AE  0E00               	movlw	0
  2012  0009B0  22F4               	addwfc	prodh,f,c
  2013  0009B2  0E34               	movlw	low _KeyInternalData
  2014  0009B4  24F3               	addwf	prodl,w,c
  2015  0009B6  6ED9               	movwf	fsr2l,c
  2016  0009B8  0E00               	movlw	high _KeyInternalData
  2017  0009BA  20F4               	addwfc	prodh,w,c
  2018  0009BC  6EDA               	movwf	fsr2h,c
  2019  0009BE  0009               	tblrd		*+
  2020  0009C0  CFF5 FFDE          	movff	tablat,postinc2
  2021  0009C4  0008               	tblrd		*
  2022  0009C6  CFF5 FFDD          	movff	tablat,postdec2
  2023                           
  2024                           ;Key.c: 100: }
  2025  0009CA  0012               	return	
  2026  0009CC                     l1431:
  2027                           
  2028                           ;Key.c: 101: else
  2029                           ;Key.c: 102: {
  2030                           ;Key.c: 103: KeyInternalData[KeyID].KeyCounter--;
  2031  0009CC  5054               	movf	MangeKeys@KeyID,w,c
  2032  0009CE  0D03               	mullw	3
  2033  0009D0  0E01               	movlw	1
  2034  0009D2  26F3               	addwf	prodl,f,c
  2035  0009D4  0E00               	movlw	0
  2036  0009D6  22F4               	addwfc	prodh,f,c
  2037  0009D8  0E34               	movlw	low _KeyInternalData
  2038  0009DA  24F3               	addwf	prodl,w,c
  2039  0009DC  6ED9               	movwf	fsr2l,c
  2040  0009DE  0E00               	movlw	high _KeyInternalData
  2041  0009E0  20F4               	addwfc	prodh,w,c
  2042  0009E2  6EDA               	movwf	fsr2h,c
  2043  0009E4  06DE               	decf	postinc2,f,c
  2044  0009E6  0E00               	movlw	0
  2045  0009E8  5ADD               	subwfb	postdec2,f,c
  2046                           
  2047                           ;Key.c: 104: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2048  0009EA  5054               	movf	MangeKeys@KeyID,w,c
  2049  0009EC  0D03               	mullw	3
  2050  0009EE  0E01               	movlw	1
  2051  0009F0  26F3               	addwf	prodl,f,c
  2052  0009F2  0E00               	movlw	0
  2053  0009F4  22F4               	addwfc	prodh,f,c
  2054  0009F6  0E34               	movlw	low _KeyInternalData
  2055  0009F8  24F3               	addwf	prodl,w,c
  2056  0009FA  6ED9               	movwf	fsr2l,c
  2057  0009FC  0E00               	movlw	high _KeyInternalData
  2058  0009FE  20F4               	addwfc	prodh,w,c
  2059  000A00  6EDA               	movwf	fsr2h,c
  2060  000A02  50DE               	movf	postinc2,w,c
  2061  000A04  10DE               	iorwf	postinc2,w,c
  2062  000A06  A4D8               	btfss	status,2,c
  2063  000A08  0012               	return	
  2064                           
  2065                           ;Key.c: 105: {
  2066                           ;Key.c: 106: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  2067  000A0A  5054               	movf	MangeKeys@KeyID,w,c
  2068  000A0C  0D03               	mullw	3
  2069  000A0E  0E34               	movlw	low _KeyInternalData
  2070  000A10  24F3               	addwf	prodl,w,c
  2071  000A12  6ED9               	movwf	fsr2l,c
  2072  000A14  0E00               	movlw	high _KeyInternalData
  2073  000A16  20F4               	addwfc	prodh,w,c
  2074  000A18  6EDA               	movwf	fsr2h,c
  2075  000A1A  0E80               	movlw	128
  2076  000A1C  6EDF               	movwf	indf2,c
  2077                           
  2078                           ;Key.c: 107: }
  2079                           ;Key.c: 108: }
  2080                           ;Key.c: 109: break;
  2081  000A1E  0012               	return	
  2082  000A20                     l1435:
  2083                           
  2084                           ;Key.c: 111: KeyInternalData[KeyID].KeyState = (unsigned char)0x00;
  2085  000A20  5054               	movf	MangeKeys@KeyID,w,c
  2086  000A22  0D03               	mullw	3
  2087  000A24  0E34               	movlw	low _KeyInternalData
  2088  000A26  24F3               	addwf	prodl,w,c
  2089  000A28  6ED9               	movwf	fsr2l,c
  2090  000A2A  0E00               	movlw	high _KeyInternalData
  2091  000A2C  20F4               	addwfc	prodh,w,c
  2092  000A2E  6EDA               	movwf	fsr2h,c
  2093  000A30  0E00               	movlw	0
  2094  000A32  6EDF               	movwf	indf2,c
  2095                           
  2096                           ;Key.c: 113: }
  2097                           
  2098                           ;Key.c: 112: break;
  2099  000A34  0012               	return	
  2100  000A36                     l1439:
  2101  000A36  5052               	movf	MangeKeys@KeyState,w,c
  2102                           
  2103                           ; Switch size 1, requested type "space"
  2104                           ; Number of cases is 3, Range of values is 0 to 2
  2105                           ; switch strategies available:
  2106                           ; Name         Instructions Cycles
  2107                           ; simple_byte           10     6 (average)
  2108                           ;	Chosen strategy is simple_byte
  2109  000A38  0A00               	xorlw	0	; case 0
  2110  000A3A  B4D8               	btfsc	status,2,c
  2111  000A3C  D60A               	goto	l1393
  2112  000A3E  0A01               	xorlw	1	; case 1
  2113  000A40  B4D8               	btfsc	status,2,c
  2114  000A42  D682               	goto	l1405
  2115  000A44  0A03               	xorlw	3	; case 2
  2116  000A46  B4D8               	btfsc	status,2,c
  2117  000A48  D791               	goto	l1427
  2118  000A4A  D7EA               	goto	l1435
  2119  000A4C                     __end_of_MangeKeys:
  2120                           	opt stack 0
  2121                           tosu	equ	0xFFF
  2122                           tosh	equ	0xFFE
  2123                           tosl	equ	0xFFD
  2124                           pclath	equ	0xFFA
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           postinc0	equ	0xFEE
  2132                           wreg	equ	0xFE8
  2133                           postinc1	equ	0xFE6
  2134                           fsr1h	equ	0xFE2
  2135                           fsr1l	equ	0xFE1
  2136                           indf2	equ	0xFDF
  2137                           postinc2	equ	0xFDE
  2138                           postdec2	equ	0xFDD
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _HWI_DIGI_READ *****************
  2144 ;; Defined at:
  2145 ;;		line 91 in file "../../HWIsource/HWI_DIGITAL.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  pin             1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  pin             1   19[COMRAM] unsigned char 
  2150 ;;  HWIread         1   20[COMRAM] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      unsigned char 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2160 ;;      Params:         0       0       0       0       0       0       0
  2161 ;;      Locals:         2       0       0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0
  2163 ;;      Totals:         2       0       0       0       0       0       0
  2164 ;;Total ram usage:        2 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    4
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_MangeKeys
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text10
  2175  001304                     __ptext10:
  2176                           	opt stack 0
  2177  001304                     _HWI_DIGI_READ:
  2178                           	opt stack 22
  2179                           
  2180                           ;incstack = 0
  2181                           ;HWI_DIGI_READ@pin stored from wreg
  2182  001304  6E4E               	movwf	HWI_DIGI_READ@pin,c
  2183                           
  2184                           ;HWI_DIGITAL.c: 93: unsigned char HWIread;
  2185                           ;HWI_DIGITAL.c: 95: switch (pin)
  2186  001306  D00B               	goto	l1297
  2187  001308                     l374:
  2188                           
  2189                           ;HWI_DIGITAL.c: 98: HWIread = PORTBbits.RB2;
  2190  001308  0E00               	movlw	0
  2191  00130A  B481               	btfsc	3969,2,c	;volatile
  2192  00130C  0E01               	movlw	1
  2193  00130E  D005               	goto	L1
  2194  001310                     l376:
  2195                           
  2196                           ;HWI_DIGITAL.c: 101: HWIread = PORTBbits.RB3;
  2197  001310  0E00               	movlw	0
  2198  001312  B681               	btfsc	3969,3,c	;volatile
  2199  001314  0E01               	movlw	1
  2200  001316  D001               	goto	L1
  2201  001318                     l1293:
  2202                           
  2203                           ;HWI_DIGITAL.c: 104: HWIread = (unsigned char)0;
  2204  001318  0E00               	movlw	0
  2205  00131A                     L1:
  2206  00131A  6E4F               	movwf	HWI_DIGI_READ@HWIread,c
  2207                           
  2208                           ;HWI_DIGITAL.c: 106: }
  2209                           
  2210                           ;HWI_DIGITAL.c: 105: break;
  2211  00131C  D008               	goto	l375
  2212  00131E                     l1297:
  2213  00131E  504E               	movf	HWI_DIGI_READ@pin,w,c
  2214                           
  2215                           ; Switch size 1, requested type "space"
  2216                           ; Number of cases is 2, Range of values is 15 to 16
  2217                           ; switch strategies available:
  2218                           ; Name         Instructions Cycles
  2219                           ; simple_byte            7     4 (average)
  2220                           ;	Chosen strategy is simple_byte
  2221  001320  0A0F               	xorlw	15	; case 15
  2222  001322  B4D8               	btfsc	status,2,c
  2223  001324  D7F1               	goto	l374
  2224  001326  0A1F               	xorlw	31	; case 16
  2225  001328  B4D8               	btfsc	status,2,c
  2226  00132A  D7F2               	goto	l376
  2227  00132C  D7F5               	goto	l1293
  2228  00132E                     l375:
  2229                           
  2230                           ;HWI_DIGITAL.c: 107: return HWIread;
  2231  00132E  504F               	movf	HWI_DIGI_READ@HWIread,w,c
  2232  001330  0012               	return		;funcret
  2233  001332                     __end_of_HWI_DIGI_READ:
  2234                           	opt stack 0
  2235                           tosu	equ	0xFFF
  2236                           tosh	equ	0xFFE
  2237                           tosl	equ	0xFFD
  2238                           pclath	equ	0xFFA
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           postinc1	equ	0xFE6
  2248                           fsr1h	equ	0xFE2
  2249                           fsr1l	equ	0xFE1
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _EepromManage *****************
  2258 ;; Defined at:
  2259 ;;		line 60 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  WriteSuccess    1   22[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2273 ;;      Params:         0       0       0       0       0       0       0
  2274 ;;      Locals:         1       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0
  2276 ;;      Totals:         1       0       0       0       0       0       0
  2277 ;;Total ram usage:        1 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    5
  2280 ;; This function calls:
  2281 ;;		_HWIeeprom_Write
  2282 ;; This function is called by:
  2283 ;;		_ManageDrivers
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text11
  2288  0011A8                     __ptext11:
  2289                           	opt stack 0
  2290  0011A8                     _EepromManage:
  2291                           	opt stack 22
  2292                           
  2293                           ;Eeprom.c: 62: static unsigned char WriteIndex = ((unsigned char)0);
  2294                           ;Eeprom.c: 63: unsigned char WriteSuccess;
  2295                           ;Eeprom.c: 65: if((unsigned char)1 == WriteRequest )
  2296                           
  2297                           ;incstack = 0
  2298  0011A8  042F               	decf	_WriteRequest,w,c
  2299  0011AA  A4D8               	btfss	status,2,c
  2300  0011AC  0012               	return	
  2301                           
  2302                           ;Eeprom.c: 66: {
  2303                           ;Eeprom.c: 67: if(WriteIndex == DataSize)
  2304  0011AE  502D               	movf	_DataSize,w,c
  2305  0011B0  182C               	xorwf	EepromManage@WriteIndex,w,c
  2306  0011B2  A4D8               	btfss	status,2,c
  2307  0011B4  D005               	goto	l1957
  2308                           
  2309                           ;Eeprom.c: 68: {
  2310                           ;Eeprom.c: 69: WriteIndex = (unsigned char)0;
  2311  0011B6  0E00               	movlw	0
  2312  0011B8  6E2C               	movwf	EepromManage@WriteIndex,c
  2313                           
  2314                           ;Eeprom.c: 70: WriteRequest = (unsigned char)0;
  2315  0011BA  0E00               	movlw	0
  2316  0011BC  6E2F               	movwf	_WriteRequest,c
  2317                           
  2318                           ;Eeprom.c: 71: }
  2319  0011BE  0012               	return	
  2320  0011C0                     l1957:
  2321                           
  2322                           ;Eeprom.c: 72: else
  2323                           ;Eeprom.c: 73: {
  2324                           ;Eeprom.c: 74: WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[Writ
      +                          eIndex]);
  2325  0011C0  502C               	movf	EepromManage@WriteIndex,w,c
  2326  0011C2  0D01               	mullw	1
  2327  0011C4  0E8E               	movlw	low _DataArray
  2328  0011C6  24F3               	addwf	prodl,w,c
  2329  0011C8  6ED9               	movwf	fsr2l,c
  2330  0011CA  0E00               	movlw	high _DataArray
  2331  0011CC  20F4               	addwfc	prodh,w,c
  2332  0011CE  6EDA               	movwf	fsr2h,c
  2333  0011D0  50DF               	movf	indf2,w,c
  2334  0011D2  6E4E               	movwf	HWIeeprom_Write@Data,c
  2335  0011D4  502E               	movf	_EEPROMaddr,w,c
  2336  0011D6  242C               	addwf	EepromManage@WriteIndex,w,c
  2337  0011D8  EC99  F009         	call	_HWIeeprom_Write
  2338  0011DC  6E51               	movwf	EepromManage@WriteSuccess,c
  2339                           
  2340                           ;Eeprom.c: 75: if( (unsigned char)1 == WriteSuccess )
  2341  0011DE  0451               	decf	EepromManage@WriteSuccess,w,c
  2342  0011E0  A4D8               	btfss	status,2,c
  2343  0011E2  0012               	return	
  2344                           
  2345                           ;Eeprom.c: 76: {
  2346                           ;Eeprom.c: 77: WriteIndex++;
  2347  0011E4  2A2C               	incf	EepromManage@WriteIndex,f,c
  2348  0011E6  0012               	return	
  2349  0011E8                     __end_of_EepromManage:
  2350                           	opt stack 0
  2351                           tosu	equ	0xFFF
  2352                           tosh	equ	0xFFE
  2353                           tosl	equ	0xFFD
  2354                           pclath	equ	0xFFA
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           postinc1	equ	0xFE6
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _HWIeeprom_Write *****************
  2374 ;; Defined at:
  2375 ;;		line 6 in file "../../HWIeeprom/HWIeeprom.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  address         1    wreg     unsigned char 
  2378 ;;  Data            1   19[COMRAM] unsigned char 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  address         1   20[COMRAM] unsigned char 
  2381 ;;  WriteSuccess    1   21[COMRAM] unsigned char 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      unsigned char 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2391 ;;      Params:         1       0       0       0       0       0       0
  2392 ;;      Locals:         2       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0
  2394 ;;      Totals:         3       0       0       0       0       0       0
  2395 ;;Total ram usage:        3 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    4
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_EepromManage
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text12
  2406  001332                     __ptext12:
  2407                           	opt stack 0
  2408  001332                     _HWIeeprom_Write:
  2409                           	opt stack 22
  2410                           
  2411                           ;incstack = 0
  2412                           ;HWIeeprom_Write@address stored from wreg
  2413  001332  6E4F               	movwf	HWIeeprom_Write@address,c
  2414                           
  2415                           ;HWIeeprom.c: 8: unsigned char WriteSuccess;
  2416                           ;HWIeeprom.c: 9: if((unsigned char)0 == EECON1bits.WR )
  2417  001334  B2A6               	btfsc	4006,1,c	;volatile
  2418  001336  D010               	goto	l1867
  2419                           
  2420                           ;HWIeeprom.c: 10: {
  2421                           ;HWIeeprom.c: 11: EEADR = address;
  2422  001338  C04F  FFA9         	movff	HWIeeprom_Write@address,4009	;volatile
  2423                           
  2424                           ;HWIeeprom.c: 12: EEDATA = Data;
  2425  00133C  C04E  FFA8         	movff	HWIeeprom_Write@Data,4008	;volatile
  2426                           
  2427                           ;HWIeeprom.c: 13: EECON1bits.EEPGD = (unsigned char)0;
  2428  001340  9EA6               	bcf	4006,7,c	;volatile
  2429                           
  2430                           ;HWIeeprom.c: 14: EECON1bits.CFGS = (unsigned char)0;
  2431  001342  9CA6               	bcf	4006,6,c	;volatile
  2432                           
  2433                           ;HWIeeprom.c: 15: EECON1bits.WREN = (unsigned char)1;
  2434  001344  84A6               	bsf	4006,2,c	;volatile
  2435                           
  2436                           ;HWIeeprom.c: 17: INTCONbits.GIE = (unsigned char)0;
  2437  001346  9EF2               	bcf	intcon,7,c	;volatile
  2438                           
  2439                           ;HWIeeprom.c: 18: EECON2 = (unsigned char)0x55;
  2440  001348  0E55               	movlw	85
  2441  00134A  6EA7               	movwf	4007,c	;volatile
  2442                           
  2443                           ;HWIeeprom.c: 19: EECON2 = (unsigned char)0xAA;
  2444  00134C  0EAA               	movlw	170
  2445  00134E  6EA7               	movwf	4007,c	;volatile
  2446                           
  2447                           ;HWIeeprom.c: 20: EECON1bits.WR = (unsigned char)1;
  2448  001350  82A6               	bsf	4006,1,c	;volatile
  2449                           
  2450                           ;HWIeeprom.c: 21: INTCONbits.GIE = (unsigned char)1;
  2451  001352  8EF2               	bsf	intcon,7,c	;volatile
  2452                           
  2453                           ;HWIeeprom.c: 22: WriteSuccess = (unsigned char)1;
  2454  001354  0E01               	movlw	1
  2455  001356  D001               	goto	L2
  2456  001358                     l1867:
  2457                           
  2458                           ;HWIeeprom.c: 24: else
  2459                           ;HWIeeprom.c: 25: {
  2460                           ;HWIeeprom.c: 26: WriteSuccess = (unsigned char)0;
  2461  001358  0E00               	movlw	0
  2462  00135A                     L2:
  2463  00135A  6E50               	movwf	HWIeeprom_Write@WriteSuccess,c
  2464                           
  2465                           ;HWIeeprom.c: 27: }
  2466                           ;HWIeeprom.c: 29: return WriteSuccess;
  2467  00135C  5050               	movf	HWIeeprom_Write@WriteSuccess,w,c
  2468  00135E  0012               	return	
  2469  001360                     __end_of_HWIeeprom_Write:
  2470                           	opt stack 0
  2471                           tosu	equ	0xFFF
  2472                           tosh	equ	0xFFE
  2473                           tosl	equ	0xFFD
  2474                           pclath	equ	0xFFA
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           intcon	equ	0xFF2
  2482                           postinc0	equ	0xFEE
  2483                           wreg	equ	0xFE8
  2484                           postinc1	equ	0xFE6
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _APP_MANAGE *****************
  2495 ;; Defined at:
  2496 ;;		line 18 in file "../../../../Common/App/APP.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  TravelledDis    2    9[BANK0 ] unsigned short 
  2501 ;;  AvgSpeedKph     2    7[BANK0 ] unsigned short 
  2502 ;;  keystatus       1   11[BANK0 ] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2512 ;;      Params:         0       0       0       0       0       0       0
  2513 ;;      Locals:         0       5       0       0       0       0       0
  2514 ;;      Temps:          0       0       0       0       0       0       0
  2515 ;;      Totals:         0       5       0       0       0       0       0
  2516 ;;Total ram usage:        5 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    6
  2519 ;; This function calls:
  2520 ;;		_BCDsendNumber
  2521 ;;		_BlinkDigit
  2522 ;;		_Eeprom_Read_Block
  2523 ;;		_Eeprom_Write_Block
  2524 ;;		_GetAvgSpeed
  2525 ;;		_GetDistance
  2526 ;;		_GetKeyStatus
  2527 ;;		_SetCircumfirunce
  2528 ;;		___wmul
  2529 ;; This function is called by:
  2530 ;;		_ManageApplication
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text13
  2535  000A4C                     __ptext13:
  2536                           	opt stack 0
  2537  000A4C                     _APP_MANAGE:
  2538                           	opt stack 21
  2539                           
  2540                           ;APP.c: 20: static unsigned blinkIndex = (unsigned char)0;
  2541                           ;APP.c: 21: static unsigned bIsBlinkMode = (unsigned char)0;
  2542                           ;APP.c: 22: unsigned short AvgSpeedKph;
  2543                           ;APP.c: 23: unsigned short TravelledDistance;
  2544                           ;APP.c: 24: unsigned char keystatus;
  2545                           ;APP.c: 26: SetCircumfirunce(2056);
  2546                           
  2547                           ;incstack = 0
  2548  000A4C  0E08               	movlw	8
  2549  000A4E  6E4F               	movwf	SetCircumfirunce@Circum+1,c
  2550  000A50  0E08               	movlw	8
  2551  000A52  6E4E               	movwf	SetCircumfirunce@Circum,c
  2552  000A54  EC62  F00A         	call	_SetCircumfirunce	;wreg free
  2553                           
  2554                           ;APP.c: 28: AvgSpeedKph = GetAvgSpeed(1);
  2555  000A58  0E01               	movlw	1
  2556  000A5A  EC86  F006         	call	_GetAvgSpeed
  2557  000A5E  C067  F087         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  2558  000A62  C068  F088         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  2559                           
  2560                           ;APP.c: 29: TravelledDistance = GetDistance();
  2561  000A66  EC53  F00A         	call	_GetDistance	;wreg free
  2562  000A6A  C04E  F089         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  2563  000A6E  C04F  F08A         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  2564                           
  2565                           ;APP.c: 30: TravelledDistance *= (unsigned short)10;
  2566  000A72  C089  F04E         	movff	APP_MANAGE@TravelledDistance,___wmul@multiplier
  2567  000A76  C08A  F04F         	movff	APP_MANAGE@TravelledDistance+1,___wmul@multiplier+1
  2568  000A7A  0E00               	movlw	0
  2569  000A7C  6E51               	movwf	___wmul@multiplicand+1,c
  2570  000A7E  0E0A               	movlw	10
  2571  000A80  6E50               	movwf	___wmul@multiplicand,c
  2572  000A82  EC07  F00A         	call	___wmul	;wreg free
  2573  000A86  C04E  F089         	movff	?___wmul,APP_MANAGE@TravelledDistance
  2574  000A8A  C04F  F08A         	movff	?___wmul+1,APP_MANAGE@TravelledDistance+1
  2575                           
  2576                           ;APP.c: 31: TravelledDistance /= (unsigned short)16;
  2577  000A8E  0100               	movlb	0	; () banked
  2578  000A90  3B89               	swapf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2579  000A92  3B8A               	swapf	(APP_MANAGE@TravelledDistance+1)& (0+255),f,b
  2580  000A94  0E0F               	movlw	15
  2581  000A96  1789               	andwf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2582  000A98  518A               	movf	(APP_MANAGE@TravelledDistance+1)& (0+255),w,b
  2583  000A9A  0BF0               	andlw	240
  2584  000A9C  1389               	iorwf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2585  000A9E  0E0F               	movlw	15
  2586  000AA0  178A               	andwf	(APP_MANAGE@TravelledDistance+1)& (0+255),f,b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;APP.c: 33: Eeprom_Write_Block(1,(unsigned char*)&TravelledDistance , (unsigned char)2);
  2590  000AA2  0E89               	movlw	low APP_MANAGE@TravelledDistance
  2591  000AA4  6E4E               	movwf	Eeprom_Write_Block@DataPtr,c
  2592  000AA6  0E00               	movlw	high APP_MANAGE@TravelledDistance
  2593  000AA8  6E4F               	movwf	Eeprom_Write_Block@DataPtr+1,c
  2594  000AAA  0E02               	movlw	2
  2595  000AAC  6E50               	movwf	Eeprom_Write_Block@BlockSize,c
  2596  000AAE  0E01               	movlw	1
  2597  000AB0  EC81  F008         	call	_Eeprom_Write_Block
  2598                           
  2599                           ;APP.c: 35: Eeprom_Read_Block(1 , (unsigned char*)&AvgSpeedKph , (unsigned char)2);
  2600  000AB4  0E87               	movlw	low APP_MANAGE@AvgSpeedKph
  2601  000AB6  6E52               	movwf	Eeprom_Read_Block@DataPtr,c
  2602  000AB8  0E00               	movlw	high APP_MANAGE@AvgSpeedKph
  2603  000ABA  6E53               	movwf	Eeprom_Read_Block@DataPtr+1,c
  2604  000ABC  0E02               	movlw	2
  2605  000ABE  6E54               	movwf	Eeprom_Read_Block@BlockSize,c
  2606  000AC0  0E01               	movlw	1
  2607  000AC2  EC50  F009         	call	_Eeprom_Read_Block
  2608                           
  2609                           ;APP.c: 36: BCDsendNumber(AvgSpeedKph,1 );
  2610  000AC6  C087  F055         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  2611  000ACA  C088  F056         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  2612  000ACE  0E01               	movlw	1
  2613  000AD0  6E57               	movwf	BCDsendNumber@DecimalPlace,c
  2614  000AD2  ECAD  F005         	call	_BCDsendNumber	;wreg free
  2615                           
  2616                           ;APP.c: 38: if(bIsBlinkMode == (unsigned char)0)
  2617  000AD6  5023               	movf	APP_MANAGE@bIsBlinkMode,w,c
  2618  000AD8  1024               	iorwf	APP_MANAGE@bIsBlinkMode+1,w,c
  2619  000ADA  A4D8               	btfss	status,2,c
  2620  000ADC  D00F               	goto	l2295
  2621                           
  2622                           ;APP.c: 39: {
  2623                           ;APP.c: 40: keystatus = GetKeyStatus(0);
  2624  000ADE  0E00               	movlw	0
  2625  000AE0  ECB0  F009         	call	_GetKeyStatus
  2626  000AE4  0100               	movlb	0	; () banked
  2627  000AE6  6F8B               	movwf	APP_MANAGE@keystatus& (0+255),b
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;APP.c: 41: if( keystatus == (unsigned char)0x82)
  2631  000AE8  0E82               	movlw	130
  2632  000AEA  0100               	movlb	0	; () banked
  2633  000AEC  198B               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2634  000AEE  A4D8               	btfss	status,2,c
  2635  000AF0  0012               	return	
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;APP.c: 42: {
  2639                           ;APP.c: 43: bIsBlinkMode = (unsigned char)1;
  2640  000AF2  0E00               	movlw	0
  2641  000AF4  6E24               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2642  000AF6  0E01               	movlw	1
  2643  000AF8  6E23               	movwf	APP_MANAGE@bIsBlinkMode,c
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;APP.c: 44: }
  2647                           ;APP.c: 45: }
  2648  000AFA  0012               	return	
  2649  000AFC                     l2295:
  2650                           
  2651                           ;APP.c: 46: else
  2652                           ;APP.c: 47: {
  2653                           ;APP.c: 48: BlinkDigit(blinkIndex,100);
  2654  000AFC  0E64               	movlw	100
  2655  000AFE  6E4E               	movwf	BlinkDigit@duration,c
  2656  000B00  5025               	movf	APP_MANAGE@blinkIndex,w,c
  2657  000B02  EC5C  F00A         	call	_BlinkDigit
  2658                           
  2659                           ;APP.c: 49: keystatus = GetKeyStatus(0);
  2660  000B06  0E00               	movlw	0
  2661  000B08  ECB0  F009         	call	_GetKeyStatus
  2662  000B0C  0100               	movlb	0	; () banked
  2663  000B0E  6F8B               	movwf	APP_MANAGE@keystatus& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;APP.c: 50: if( keystatus == (unsigned char)0x81)
  2667  000B10  0E81               	movlw	129
  2668  000B12  0100               	movlb	0	; () banked
  2669  000B14  198B               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2670  000B16  A4D8               	btfss	status,2,c
  2671  000B18  D00C               	goto	l2307
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;APP.c: 51: {
  2675                           ;APP.c: 52: blinkIndex++;
  2676  000B1A  4A25               	infsnz	APP_MANAGE@blinkIndex,f,c
  2677  000B1C  2A26               	incf	APP_MANAGE@blinkIndex+1,f,c
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;APP.c: 53: if(blinkIndex == 4)
  2681  000B1E  0E04               	movlw	4
  2682  000B20  1825               	xorwf	APP_MANAGE@blinkIndex,w,c
  2683  000B22  1026               	iorwf	APP_MANAGE@blinkIndex+1,w,c
  2684  000B24  A4D8               	btfss	status,2,c
  2685  000B26  0012               	return	
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;APP.c: 54: {
  2689                           ;APP.c: 55: blinkIndex=0;
  2690  000B28  0E00               	movlw	0
  2691  000B2A  6E26               	movwf	APP_MANAGE@blinkIndex+1,c
  2692  000B2C  0E00               	movlw	0
  2693  000B2E  6E25               	movwf	APP_MANAGE@blinkIndex,c
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;APP.c: 56: }
  2697                           ;APP.c: 57: }
  2698  000B30  0012               	return	
  2699  000B32                     l2307:
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;APP.c: 58: else
  2703                           ;APP.c: 59: {
  2704                           ;APP.c: 60: keystatus = GetKeyStatus(1);
  2705  000B32  0E01               	movlw	1
  2706  000B34  ECB0  F009         	call	_GetKeyStatus
  2707  000B38  0100               	movlb	0	; () banked
  2708  000B3A  6F8B               	movwf	APP_MANAGE@keystatus& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;APP.c: 61: if(keystatus == (unsigned char)0x82 )
  2712  000B3C  0E82               	movlw	130
  2713  000B3E  0100               	movlb	0	; () banked
  2714  000B40  198B               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2715  000B42  A4D8               	btfss	status,2,c
  2716  000B44  0012               	return	
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;APP.c: 62: {
  2720                           ;APP.c: 63: BlinkDigit(1,0);
  2721  000B46  0E00               	movlw	0
  2722  000B48  6E4E               	movwf	BlinkDigit@duration,c
  2723  000B4A  0E01               	movlw	1
  2724  000B4C  EC5C  F00A         	call	_BlinkDigit
  2725                           
  2726                           ;APP.c: 64: bIsBlinkMode = (unsigned char)0;
  2727  000B50  0E00               	movlw	0
  2728  000B52  6E24               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2729  000B54  0E00               	movlw	0
  2730  000B56  6E23               	movwf	APP_MANAGE@bIsBlinkMode,c
  2731  000B58  0012               	return	
  2732  000B5A                     __end_of_APP_MANAGE:
  2733                           	opt stack 0
  2734                           tosu	equ	0xFFF
  2735                           tosh	equ	0xFFE
  2736                           tosl	equ	0xFFD
  2737                           pclath	equ	0xFFA
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           intcon	equ	0xFF2
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postinc1	equ	0xFE6
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _SetCircumfirunce *****************
  2758 ;; Defined at:
  2759 ;;		line 99 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  Circum          2   19[COMRAM] unsigned short 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		None
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2773 ;;      Params:         2       0       0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0
  2776 ;;      Totals:         2       0       0       0       0       0       0
  2777 ;;Total ram usage:        2 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    4
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_APP_MANAGE
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text14
  2788  0014C4                     __ptext14:
  2789                           	opt stack 0
  2790  0014C4                     _SetCircumfirunce:
  2791                           	opt stack 22
  2792                           
  2793                           ;SpeedCalc.c: 101: CircumFactor = (unsigned short)Circum;
  2794                           
  2795                           ;incstack = 0
  2796  0014C4  C04E  F069         	movff	SetCircumfirunce@Circum,_CircumFactor
  2797  0014C8  C04F  F06A         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  2798  0014CC  0012               	return		;funcret
  2799  0014CE                     __end_of_SetCircumfirunce:
  2800                           	opt stack 0
  2801                           tosu	equ	0xFFF
  2802                           tosh	equ	0xFFE
  2803                           tosl	equ	0xFFD
  2804                           pclath	equ	0xFFA
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           intcon	equ	0xFF2
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postinc1	equ	0xFE6
  2815                           fsr1h	equ	0xFE2
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _GetKeyStatus *****************
  2825 ;; Defined at:
  2826 ;;		line 19 in file "../../../../Common/Driver/Key/Key.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  KeyID           1    wreg     unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  KeyID           1   20[COMRAM] unsigned char 
  2831 ;;  KeyStatus       1   19[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      unsigned char 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         2       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         2       0       0       0       0       0       0
  2845 ;;Total ram usage:        2 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    4
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_APP_MANAGE
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text15
  2856  001360                     __ptext15:
  2857                           	opt stack 0
  2858  001360                     _GetKeyStatus:
  2859                           	opt stack 22
  2860                           
  2861                           ;incstack = 0
  2862                           ;GetKeyStatus@KeyID stored from wreg
  2863  001360  6E4F               	movwf	GetKeyStatus@KeyID,c
  2864                           
  2865                           ;Key.c: 21: unsigned char KeyStatus;
  2866                           ;Key.c: 23: KeyStatus = KeyInternalData[KeyID].KeyState;
  2867  001362  504F               	movf	GetKeyStatus@KeyID,w,c
  2868  001364  0D03               	mullw	3
  2869  001366  0E34               	movlw	low _KeyInternalData
  2870  001368  24F3               	addwf	prodl,w,c
  2871  00136A  6ED9               	movwf	fsr2l,c
  2872  00136C  0E00               	movlw	high _KeyInternalData
  2873  00136E  20F4               	addwfc	prodh,w,c
  2874  001370  6EDA               	movwf	fsr2h,c
  2875  001372  50DF               	movf	indf2,w,c
  2876  001374  6E4E               	movwf	GetKeyStatus@KeyStatus,c
  2877                           
  2878                           ;Key.c: 24: KeyInternalData[KeyID].KeyState &= (unsigned char)0x7F;
  2879  001376  504F               	movf	GetKeyStatus@KeyID,w,c
  2880  001378  0D03               	mullw	3
  2881  00137A  0E34               	movlw	low _KeyInternalData
  2882  00137C  24F3               	addwf	prodl,w,c
  2883  00137E  6ED9               	movwf	fsr2l,c
  2884  001380  0E00               	movlw	high _KeyInternalData
  2885  001382  20F4               	addwfc	prodh,w,c
  2886  001384  6EDA               	movwf	fsr2h,c
  2887  001386  0E7F               	movlw	127
  2888  001388  16DF               	andwf	indf2,f,c
  2889                           
  2890                           ;Key.c: 26: return KeyStatus;
  2891  00138A  504E               	movf	GetKeyStatus@KeyStatus,w,c
  2892  00138C  0012               	return	
  2893  00138E                     __end_of_GetKeyStatus:
  2894                           	opt stack 0
  2895                           tosu	equ	0xFFF
  2896                           tosh	equ	0xFFE
  2897                           tosl	equ	0xFFD
  2898                           pclath	equ	0xFFA
  2899                           tblptru	equ	0xFF8
  2900                           tblptrh	equ	0xFF7
  2901                           tblptrl	equ	0xFF6
  2902                           tablat	equ	0xFF5
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           intcon	equ	0xFF2
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postinc1	equ	0xFE6
  2909                           fsr1h	equ	0xFE2
  2910                           fsr1l	equ	0xFE1
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _GetDistance *****************
  2919 ;; Defined at:
  2920 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  4   19[COMRAM] unsigned long 
  2927 ;; Registers used:
  2928 ;;		None
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2934 ;;      Params:         4       0       0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0
  2937 ;;      Totals:         4       0       0       0       0       0       0
  2938 ;;Total ram usage:        4 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    4
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_APP_MANAGE
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text16
  2949  0014A6                     __ptext16:
  2950                           	opt stack 0
  2951  0014A6                     _GetDistance:
  2952                           	opt stack 22
  2953                           
  2954                           ;SpeedCalc.c: 95: return DistTravelCntr;
  2955                           
  2956                           ;incstack = 0
  2957  0014A6  C019  F04E         	movff	_DistTravelCntr,?_GetDistance
  2958  0014AA  C01A  F04F         	movff	_DistTravelCntr+1,?_GetDistance+1
  2959  0014AE  C01B  F050         	movff	_DistTravelCntr+2,?_GetDistance+2
  2960  0014B2  C01C  F051         	movff	_DistTravelCntr+3,?_GetDistance+3
  2961  0014B6  0012               	return		;funcret
  2962  0014B8                     __end_of_GetDistance:
  2963                           	opt stack 0
  2964                           tosu	equ	0xFFF
  2965                           tosh	equ	0xFFE
  2966                           tosl	equ	0xFFD
  2967                           pclath	equ	0xFFA
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           postinc1	equ	0xFE6
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _GetAvgSpeed *****************
  2988 ;; Defined at:
  2989 ;;		line 105 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  bIsKph          1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  bIsKph          1    0[BANK0 ] unsigned char 
  2994 ;;  KphMphFactor    4    1[BANK0 ] unsigned long 
  2995 ;;  AvgSpeedKphM    2    5[BANK0 ] unsigned short 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  2   44[COMRAM] unsigned short 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3005 ;;      Params:         2       0       0       0       0       0       0
  3006 ;;      Locals:         0       7       0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0
  3008 ;;      Totals:         2       7       0       0       0       0       0
  3009 ;;Total ram usage:        9 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    5
  3012 ;; This function calls:
  3013 ;;		___lldiv
  3014 ;;		___lmul
  3015 ;; This function is called by:
  3016 ;;		_APP_MANAGE
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text17
  3021  000D0C                     __ptext17:
  3022                           	opt stack 0
  3023  000D0C                     _GetAvgSpeed:
  3024                           	opt stack 21
  3025                           
  3026                           ;incstack = 0
  3027                           ;GetAvgSpeed@bIsKph stored from wreg
  3028  000D0C  0100               	movlb	0	; () banked
  3029  000D0E  6F80               	movwf	GetAvgSpeed@bIsKph& (0+255),b
  3030                           
  3031                           ;SpeedCalc.c: 107: unsigned short AvgSpeedKphMph = (unsigned short)0;
  3032  000D10  0E00               	movlw	0
  3033  000D12  0100               	movlb	0	; () banked
  3034  000D14  6F86               	movwf	(GetAvgSpeed@AvgSpeedKphMph+1)& (0+255),b
  3035  000D16  0E00               	movlw	0
  3036  000D18  6F85               	movwf	GetAvgSpeed@AvgSpeedKphMph& (0+255),b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;SpeedCalc.c: 108: unsigned long KphMphFactor;
  3040                           ;SpeedCalc.c: 110: if( (unsigned char)1 == bIsKph )
  3041  000D1A  0100               	movlb	0	; () banked
  3042  000D1C  0580               	decf	GetAvgSpeed@bIsKph& (0+255),w,b
  3043  000D1E  A4D8               	btfss	status,2,c
  3044  000D20  D005               	goto	l2187
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;SpeedCalc.c: 111: {
  3048                           ;SpeedCalc.c: 112: KphMphFactor = (unsigned long)360;
  3049  000D22  0E68               	movlw	104
  3050  000D24  0100               	movlb	0	; () banked
  3051  000D26  6F81               	movwf	GetAvgSpeed@KphMphFactor& (0+255),b
  3052  000D28  0E01               	movlw	1
  3053  000D2A  D004               	goto	L3
  3054  000D2C                     l2187:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;SpeedCalc.c: 114: else
  3058                           ;SpeedCalc.c: 115: {
  3059                           ;SpeedCalc.c: 116: KphMphFactor = (unsigned long)225;
  3060  000D2C  0EE1               	movlw	225
  3061  000D2E  0100               	movlb	0	; () banked
  3062  000D30  6F81               	movwf	GetAvgSpeed@KphMphFactor& (0+255),b
  3063  000D32  0E00               	movlw	0
  3064  000D34                     L3:
  3065  000D34  6F82               	movwf	(GetAvgSpeed@KphMphFactor+1)& (0+255),b
  3066  000D36  0E00               	movlw	0
  3067  000D38  6F83               	movwf	(GetAvgSpeed@KphMphFactor+2)& (0+255),b
  3068  000D3A  0E00               	movlw	0
  3069  000D3C  6F84               	movwf	(GetAvgSpeed@KphMphFactor+3)& (0+255),b
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;SpeedCalc.c: 117: }
  3073                           ;SpeedCalc.c: 119: if(LapTimeTenthMilli != (unsigned short)0)
  3074                           
  3075                           ; BSR set to: 0
  3076  000D3E  501F               	movf	_LapTimeTenthMilli,w,c
  3077  000D40  1020               	iorwf	_LapTimeTenthMilli+1,w,c
  3078  000D42  B4D8               	btfsc	status,2,c
  3079  000D44  D024               	goto	l2193
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;SpeedCalc.c: 120: {
  3083                           ;SpeedCalc.c: 121: AvgSpeedKphMph = (unsigned short)
  3084                           ;SpeedCalc.c: 122: ((KphMphFactor * (unsigned long)CircumFactor )
  3085                           ;SpeedCalc.c: 123: / (unsigned long)LapTimeTenthMilli);
  3086  000D46  C069  F04E         	movff	_CircumFactor,___lmul@multiplier
  3087  000D4A  C06A  F04F         	movff	_CircumFactor+1,___lmul@multiplier+1
  3088  000D4E  6A50               	clrf	___lmul@multiplier+2,c
  3089  000D50  6A51               	clrf	___lmul@multiplier+3,c
  3090  000D52  C081  F052         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  3091  000D56  C082  F053         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  3092  000D5A  C083  F054         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  3093  000D5E  C084  F055         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  3094  000D62  EC56  F008         	call	___lmul	;wreg free
  3095  000D66  C04E  F05A         	movff	?___lmul,___lldiv@dividend
  3096  000D6A  C04F  F05B         	movff	?___lmul+1,___lldiv@dividend+1
  3097  000D6E  C050  F05C         	movff	?___lmul+2,___lldiv@dividend+2
  3098  000D72  C051  F05D         	movff	?___lmul+3,___lldiv@dividend+3
  3099  000D76  C01F  F05E         	movff	_LapTimeTenthMilli,___lldiv@divisor
  3100  000D7A  C020  F05F         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  3101  000D7E  6A60               	clrf	___lldiv@divisor+2,c
  3102  000D80  6A61               	clrf	___lldiv@divisor+3,c
  3103  000D82  ECB3  F007         	call	___lldiv	;wreg free
  3104  000D86  C05A  F085         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  3105  000D8A  C05B  F086         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  3106  000D8E                     l2193:
  3107                           
  3108                           ;SpeedCalc.c: 124: }
  3109                           ;SpeedCalc.c: 126: if( (unsigned char)64 == HwTimerOVFLcount)
  3110  000D8E  0E40               	movlw	64
  3111  000D90  1828               	xorwf	_HwTimerOVFLcount,w,c	;volatile
  3112  000D92  A4D8               	btfss	status,2,c
  3113  000D94  D005               	goto	l2197
  3114                           
  3115                           ;SpeedCalc.c: 127: {
  3116                           ;SpeedCalc.c: 128: AvgSpeedKphMph = (unsigned short)0;
  3117  000D96  0E00               	movlw	0
  3118  000D98  0100               	movlb	0	; () banked
  3119  000D9A  6F86               	movwf	(GetAvgSpeed@AvgSpeedKphMph+1)& (0+255),b
  3120  000D9C  0E00               	movlw	0
  3121  000D9E  6F85               	movwf	GetAvgSpeed@AvgSpeedKphMph& (0+255),b
  3122  000DA0                     l2197:
  3123                           
  3124                           ;SpeedCalc.c: 129: }
  3125                           ;SpeedCalc.c: 130: return AvgSpeedKphMph;
  3126  000DA0  C085  F067         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  3127  000DA4  C086  F068         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  3128  000DA8  0012               	return	
  3129  000DAA                     __end_of_GetAvgSpeed:
  3130                           	opt stack 0
  3131                           tosu	equ	0xFFF
  3132                           tosh	equ	0xFFE
  3133                           tosl	equ	0xFFD
  3134                           pclath	equ	0xFFA
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           intcon	equ	0xFF2
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           postinc1	equ	0xFE6
  3145                           fsr1h	equ	0xFE2
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function ___lmul *****************
  3155 ;; Defined at:
  3156 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  multiplier      4   19[COMRAM] unsigned long 
  3159 ;;  multiplicand    4   23[COMRAM] unsigned long 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  product         4   27[COMRAM] unsigned long 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  4   19[COMRAM] unsigned long 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3171 ;;      Params:         8       0       0       0       0       0       0
  3172 ;;      Locals:         4       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0
  3174 ;;      Totals:        12       0       0       0       0       0       0
  3175 ;;Total ram usage:       12 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    4
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_GetAvgSpeed
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text18
  3186  0010AC                     __ptext18:
  3187                           	opt stack 0
  3188  0010AC                     ___lmul:
  3189                           	opt stack 21
  3190                           
  3191                           ;incstack = 0
  3192  0010AC  0E00               	movlw	0
  3193  0010AE  6E56               	movwf	___lmul@product,c
  3194  0010B0  0E00               	movlw	0
  3195  0010B2  6E57               	movwf	___lmul@product+1,c
  3196  0010B4  0E00               	movlw	0
  3197  0010B6  6E58               	movwf	___lmul@product+2,c
  3198  0010B8  0E00               	movlw	0
  3199  0010BA  6E59               	movwf	___lmul@product+3,c
  3200  0010BC                     l2127:
  3201  0010BC  A04E               	btfss	___lmul@multiplier,0,c
  3202  0010BE  D008               	goto	l2131
  3203  0010C0  5052               	movf	___lmul@multiplicand,w,c
  3204  0010C2  2656               	addwf	___lmul@product,f,c
  3205  0010C4  5053               	movf	___lmul@multiplicand+1,w,c
  3206  0010C6  2257               	addwfc	___lmul@product+1,f,c
  3207  0010C8  5054               	movf	___lmul@multiplicand+2,w,c
  3208  0010CA  2258               	addwfc	___lmul@product+2,f,c
  3209  0010CC  5055               	movf	___lmul@multiplicand+3,w,c
  3210  0010CE  2259               	addwfc	___lmul@product+3,f,c
  3211  0010D0                     l2131:
  3212  0010D0  90D8               	bcf	status,0,c
  3213  0010D2  3652               	rlcf	___lmul@multiplicand,f,c
  3214  0010D4  3653               	rlcf	___lmul@multiplicand+1,f,c
  3215  0010D6  3654               	rlcf	___lmul@multiplicand+2,f,c
  3216  0010D8  3655               	rlcf	___lmul@multiplicand+3,f,c
  3217  0010DA  90D8               	bcf	status,0,c
  3218  0010DC  3251               	rrcf	___lmul@multiplier+3,f,c
  3219  0010DE  3250               	rrcf	___lmul@multiplier+2,f,c
  3220  0010E0  324F               	rrcf	___lmul@multiplier+1,f,c
  3221  0010E2  324E               	rrcf	___lmul@multiplier,f,c
  3222  0010E4  504E               	movf	___lmul@multiplier,w,c
  3223  0010E6  104F               	iorwf	___lmul@multiplier+1,w,c
  3224  0010E8  1050               	iorwf	___lmul@multiplier+2,w,c
  3225  0010EA  1051               	iorwf	___lmul@multiplier+3,w,c
  3226  0010EC  A4D8               	btfss	status,2,c
  3227  0010EE  D7E6               	goto	l2127
  3228  0010F0  C056  F04E         	movff	___lmul@product,?___lmul
  3229  0010F4  C057  F04F         	movff	___lmul@product+1,?___lmul+1
  3230  0010F8  C058  F050         	movff	___lmul@product+2,?___lmul+2
  3231  0010FC  C059  F051         	movff	___lmul@product+3,?___lmul+3
  3232  001100  0012               	return		;funcret
  3233  001102                     __end_of___lmul:
  3234                           	opt stack 0
  3235                           tosu	equ	0xFFF
  3236                           tosh	equ	0xFFE
  3237                           tosl	equ	0xFFD
  3238                           pclath	equ	0xFFA
  3239                           tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           prodh	equ	0xFF4
  3244                           prodl	equ	0xFF3
  3245                           intcon	equ	0xFF2
  3246                           postinc0	equ	0xFEE
  3247                           wreg	equ	0xFE8
  3248                           postinc1	equ	0xFE6
  3249                           fsr1h	equ	0xFE2
  3250                           fsr1l	equ	0xFE1
  3251                           indf2	equ	0xFDF
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function ___lldiv *****************
  3259 ;; Defined at:
  3260 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  dividend        4   31[COMRAM] unsigned long 
  3263 ;;  divisor         4   35[COMRAM] unsigned long 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  quotient        4   39[COMRAM] unsigned long 
  3266 ;;  counter         1   43[COMRAM] unsigned char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  4   31[COMRAM] unsigned long 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3276 ;;      Params:         8       0       0       0       0       0       0
  3277 ;;      Locals:         5       0       0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0
  3279 ;;      Totals:        13       0       0       0       0       0       0
  3280 ;;Total ram usage:       13 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    4
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_SpeedCalcManage
  3287 ;;		_GetAvgSpeed
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text19
  3292  000F66                     __ptext19:
  3293                           	opt stack 0
  3294  000F66                     ___lldiv:
  3295                           	opt stack 22
  3296                           
  3297                           ;incstack = 0
  3298  000F66  0E00               	movlw	0
  3299  000F68  6E62               	movwf	___lldiv@quotient,c
  3300  000F6A  0E00               	movlw	0
  3301  000F6C  6E63               	movwf	___lldiv@quotient+1,c
  3302  000F6E  0E00               	movlw	0
  3303  000F70  6E64               	movwf	___lldiv@quotient+2,c
  3304  000F72  0E00               	movlw	0
  3305  000F74  6E65               	movwf	___lldiv@quotient+3,c
  3306  000F76  505E               	movf	___lldiv@divisor,w,c
  3307  000F78  105F               	iorwf	___lldiv@divisor+1,w,c
  3308  000F7A  1060               	iorwf	___lldiv@divisor+2,w,c
  3309  000F7C  1061               	iorwf	___lldiv@divisor+3,w,c
  3310  000F7E  B4D8               	btfsc	status,2,c
  3311  000F80  D02A               	goto	l805
  3312  000F82  0E01               	movlw	1
  3313  000F84  6E66               	movwf	___lldiv@counter,c
  3314  000F86  D006               	goto	l2143
  3315  000F88                     l2141:
  3316  000F88  90D8               	bcf	status,0,c
  3317  000F8A  365E               	rlcf	___lldiv@divisor,f,c
  3318  000F8C  365F               	rlcf	___lldiv@divisor+1,f,c
  3319  000F8E  3660               	rlcf	___lldiv@divisor+2,f,c
  3320  000F90  3661               	rlcf	___lldiv@divisor+3,f,c
  3321  000F92  2A66               	incf	___lldiv@counter,f,c
  3322  000F94                     l2143:
  3323  000F94  AE61               	btfss	___lldiv@divisor+3,7,c
  3324  000F96  D7F8               	goto	l2141
  3325  000F98                     l2145:
  3326  000F98  90D8               	bcf	status,0,c
  3327  000F9A  3662               	rlcf	___lldiv@quotient,f,c
  3328  000F9C  3663               	rlcf	___lldiv@quotient+1,f,c
  3329  000F9E  3664               	rlcf	___lldiv@quotient+2,f,c
  3330  000FA0  3665               	rlcf	___lldiv@quotient+3,f,c
  3331  000FA2  505E               	movf	___lldiv@divisor,w,c
  3332  000FA4  5C5A               	subwf	___lldiv@dividend,w,c
  3333  000FA6  505F               	movf	___lldiv@divisor+1,w,c
  3334  000FA8  585B               	subwfb	___lldiv@dividend+1,w,c
  3335  000FAA  5060               	movf	___lldiv@divisor+2,w,c
  3336  000FAC  585C               	subwfb	___lldiv@dividend+2,w,c
  3337  000FAE  5061               	movf	___lldiv@divisor+3,w,c
  3338  000FB0  585D               	subwfb	___lldiv@dividend+3,w,c
  3339  000FB2  A0D8               	btfss	status,0,c
  3340  000FB4  D009               	goto	l2153
  3341  000FB6  505E               	movf	___lldiv@divisor,w,c
  3342  000FB8  5E5A               	subwf	___lldiv@dividend,f,c
  3343  000FBA  505F               	movf	___lldiv@divisor+1,w,c
  3344  000FBC  5A5B               	subwfb	___lldiv@dividend+1,f,c
  3345  000FBE  5060               	movf	___lldiv@divisor+2,w,c
  3346  000FC0  5A5C               	subwfb	___lldiv@dividend+2,f,c
  3347  000FC2  5061               	movf	___lldiv@divisor+3,w,c
  3348  000FC4  5A5D               	subwfb	___lldiv@dividend+3,f,c
  3349  000FC6  8062               	bsf	___lldiv@quotient,0,c
  3350  000FC8                     l2153:
  3351  000FC8  90D8               	bcf	status,0,c
  3352  000FCA  3261               	rrcf	___lldiv@divisor+3,f,c
  3353  000FCC  3260               	rrcf	___lldiv@divisor+2,f,c
  3354  000FCE  325F               	rrcf	___lldiv@divisor+1,f,c
  3355  000FD0  325E               	rrcf	___lldiv@divisor,f,c
  3356  000FD2  2E66               	decfsz	___lldiv@counter,f,c
  3357  000FD4  D7E1               	goto	l2145
  3358  000FD6                     l805:
  3359  000FD6  C062  F05A         	movff	___lldiv@quotient,?___lldiv
  3360  000FDA  C063  F05B         	movff	___lldiv@quotient+1,?___lldiv+1
  3361  000FDE  C064  F05C         	movff	___lldiv@quotient+2,?___lldiv+2
  3362  000FE2  C065  F05D         	movff	___lldiv@quotient+3,?___lldiv+3
  3363  000FE6  0012               	return		;funcret
  3364  000FE8                     __end_of___lldiv:
  3365                           	opt stack 0
  3366                           tosu	equ	0xFFF
  3367                           tosh	equ	0xFFE
  3368                           tosl	equ	0xFFD
  3369                           pclath	equ	0xFFA
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postinc1	equ	0xFE6
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _Eeprom_Write_Block *****************
  3390 ;; Defined at:
  3391 ;;		line 12 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  address         1    wreg     unsigned char 
  3394 ;;  DataPtr         2   19[COMRAM] PTR unsigned char 
  3395 ;;		 -> APP_MANAGE@TravelledDistance(2), 
  3396 ;;  BlockSize       1   21[COMRAM] unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  address         1   23[COMRAM] unsigned char 
  3399 ;;  LoopIndex       1   24[COMRAM] unsigned char 
  3400 ;;  WriteGranted    1   22[COMRAM] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      unsigned char 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3410 ;;      Params:         3       0       0       0       0       0       0
  3411 ;;      Locals:         3       0       0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0
  3413 ;;      Totals:         6       0       0       0       0       0       0
  3414 ;;Total ram usage:        6 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    4
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_APP_MANAGE
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text20
  3425  001102                     __ptext20:
  3426                           	opt stack 0
  3427  001102                     _Eeprom_Write_Block:
  3428                           	opt stack 22
  3429                           
  3430                           ;incstack = 0
  3431                           ;Eeprom_Write_Block@address stored from wreg
  3432  001102  6E52               	movwf	Eeprom_Write_Block@address,c
  3433                           
  3434                           ;Eeprom.c: 19: unsigned char WriteGranted;
  3435                           ;Eeprom.c: 20: unsigned char LoopIndex;
  3436                           ;Eeprom.c: 21: if( (unsigned char)0 == WriteRequest)
  3437  001104  502F               	movf	_WriteRequest,w,c
  3438  001106  A4D8               	btfss	status,2,c
  3439  001108  D023               	goto	l2215
  3440                           
  3441                           ;Eeprom.c: 22: {
  3442                           ;Eeprom.c: 23: WriteRequest = (unsigned char)1;
  3443  00110A  0E01               	movlw	1
  3444  00110C  6E2F               	movwf	_WriteRequest,c
  3445                           
  3446                           ;Eeprom.c: 25: for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
  3447  00110E  0E00               	movlw	0
  3448  001110  6E53               	movwf	Eeprom_Write_Block@LoopIndex,c
  3449  001112  D013               	goto	l2211
  3450  001114                     l2207:
  3451                           
  3452                           ;Eeprom.c: 26: {
  3453                           ;Eeprom.c: 27: DataArray[LoopIndex] = DataPtr[LoopIndex];
  3454  001114  5053               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3455  001116  0D01               	mullw	1
  3456  001118  50F3               	movf	prodl,w,c
  3457  00111A  244E               	addwf	Eeprom_Write_Block@DataPtr,w,c
  3458  00111C  6ED9               	movwf	fsr2l,c
  3459  00111E  50F4               	movf	prodh,w,c
  3460  001120  204F               	addwfc	Eeprom_Write_Block@DataPtr+1,w,c
  3461  001122  6EDA               	movwf	fsr2h,c
  3462  001124  5053               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3463  001126  0D01               	mullw	1
  3464  001128  0E8E               	movlw	low _DataArray
  3465  00112A  24F3               	addwf	prodl,w,c
  3466  00112C  6EE1               	movwf	fsr1l,c
  3467  00112E  0E00               	movlw	high _DataArray
  3468  001130  20F4               	addwfc	prodh,w,c
  3469  001132  6EE2               	movwf	fsr1h,c
  3470  001134  CFDF FFE7          	movff	indf2,indf1
  3471  001138  2A53               	incf	Eeprom_Write_Block@LoopIndex,f,c
  3472  00113A                     l2211:
  3473  00113A  5050               	movf	Eeprom_Write_Block@BlockSize,w,c
  3474  00113C  5C53               	subwf	Eeprom_Write_Block@LoopIndex,w,c
  3475  00113E  A0D8               	btfss	status,0,c
  3476  001140  D7E9               	goto	l2207
  3477                           
  3478                           ;Eeprom.c: 28: }
  3479                           ;Eeprom.c: 29: DataSize = BlockSize;
  3480  001142  C050  F02D         	movff	Eeprom_Write_Block@BlockSize,_DataSize
  3481                           
  3482                           ;Eeprom.c: 30: EEPROMaddr = address;
  3483  001146  C052  F02E         	movff	Eeprom_Write_Block@address,_EEPROMaddr
  3484                           
  3485                           ;Eeprom.c: 31: WriteGranted = (unsigned char)1;
  3486  00114A  0E01               	movlw	1
  3487  00114C  6E51               	movwf	Eeprom_Write_Block@WriteGranted,c
  3488                           
  3489                           ;Eeprom.c: 32: }
  3490  00114E  0012               	return	
  3491  001150                     l2215:
  3492                           
  3493                           ;Eeprom.c: 33: else
  3494                           ;Eeprom.c: 34: {
  3495                           ;Eeprom.c: 35: WriteGranted = (unsigned char)0;
  3496  001150  0E00               	movlw	0
  3497  001152  6E51               	movwf	Eeprom_Write_Block@WriteGranted,c
  3498  001154  0012               	return	
  3499  001156                     __end_of_Eeprom_Write_Block:
  3500                           	opt stack 0
  3501                           tosu	equ	0xFFF
  3502                           tosh	equ	0xFFE
  3503                           tosl	equ	0xFFD
  3504                           pclath	equ	0xFFA
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           indf1	equ	0xFE7
  3515                           postinc1	equ	0xFE6
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _Eeprom_Read_Block *****************
  3526 ;; Defined at:
  3527 ;;		line 39 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  address         1    wreg     unsigned char 
  3530 ;;  DataPtr         2   23[COMRAM] PTR unsigned char 
  3531 ;;		 -> APP_MANAGE@AvgSpeedKph(2), 
  3532 ;;  BlockSize       1   25[COMRAM] unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  address         1   26[COMRAM] unsigned char 
  3535 ;;  LoopIndex       1   28[COMRAM] unsigned char 
  3536 ;;  ReadSuccess     1   27[COMRAM] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3546 ;;      Params:         3       0       0       0       0       0       0
  3547 ;;      Locals:         3       0       0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0
  3549 ;;      Totals:         6       0       0       0       0       0       0
  3550 ;;Total ram usage:        6 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    5
  3553 ;; This function calls:
  3554 ;;		_HWIeeprom_Read
  3555 ;; This function is called by:
  3556 ;;		_APP_MANAGE
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text21
  3561  0012A0                     __ptext21:
  3562                           	opt stack 0
  3563  0012A0                     _Eeprom_Read_Block:
  3564                           	opt stack 21
  3565                           
  3566                           ;incstack = 0
  3567                           ;Eeprom_Read_Block@address stored from wreg
  3568  0012A0  6E55               	movwf	Eeprom_Read_Block@address,c
  3569                           
  3570                           ;Eeprom.c: 46: unsigned char LoopIndex = (unsigned char)0 ;
  3571  0012A2  0E00               	movlw	0
  3572  0012A4  6E57               	movwf	Eeprom_Read_Block@LoopIndex,c
  3573                           
  3574                           ;Eeprom.c: 47: unsigned char ReadSuccess;
  3575                           ;Eeprom.c: 49: while(LoopIndex < BlockSize )
  3576  0012A6  D010               	goto	l2227
  3577  0012A8                     l2221:
  3578                           
  3579                           ;Eeprom.c: 50: {
  3580                           ;Eeprom.c: 51: ReadSuccess = HWIeeprom_Read(address + LoopIndex , &DataPtr[LoopIndex]);
  3581  0012A8  5057               	movf	Eeprom_Read_Block@LoopIndex,w,c
  3582  0012AA  0D01               	mullw	1
  3583  0012AC  50F3               	movf	prodl,w,c
  3584  0012AE  2452               	addwf	Eeprom_Read_Block@DataPtr,w,c
  3585  0012B0  6E4E               	movwf	HWIeeprom_Read@Data,c
  3586  0012B2  50F4               	movf	prodh,w,c
  3587  0012B4  2053               	addwfc	Eeprom_Read_Block@DataPtr+1,w,c
  3588  0012B6  6E4F               	movwf	HWIeeprom_Read@Data+1,c
  3589  0012B8  5055               	movf	Eeprom_Read_Block@address,w,c
  3590  0012BA  2457               	addwf	Eeprom_Read_Block@LoopIndex,w,c
  3591  0012BC  ECF3  F009         	call	_HWIeeprom_Read
  3592  0012C0  6E56               	movwf	Eeprom_Read_Block@ReadSuccess,c
  3593                           
  3594                           ;Eeprom.c: 52: if((unsigned char)1 == ReadSuccess)
  3595  0012C2  0456               	decf	Eeprom_Read_Block@ReadSuccess,w,c
  3596  0012C4  B4D8               	btfsc	status,2,c
  3597                           
  3598                           ;Eeprom.c: 53: {
  3599                           ;Eeprom.c: 54: LoopIndex++;
  3600  0012C6  2A57               	incf	Eeprom_Read_Block@LoopIndex,f,c
  3601  0012C8                     l2227:
  3602  0012C8  5054               	movf	Eeprom_Read_Block@BlockSize,w,c
  3603  0012CA  5C57               	subwf	Eeprom_Read_Block@LoopIndex,w,c
  3604  0012CC  B0D8               	btfsc	status,0,c
  3605  0012CE  0012               	return	
  3606  0012D0  D7EB               	goto	l2221
  3607  0012D2                     __end_of_Eeprom_Read_Block:
  3608                           	opt stack 0
  3609                           tosu	equ	0xFFF
  3610                           tosh	equ	0xFFE
  3611                           tosl	equ	0xFFD
  3612                           pclath	equ	0xFFA
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           indf1	equ	0xFE7
  3623                           postinc1	equ	0xFE6
  3624                           fsr1h	equ	0xFE2
  3625                           fsr1l	equ	0xFE1
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _HWIeeprom_Read *****************
  3634 ;; Defined at:
  3635 ;;		line 31 in file "../../HWIeeprom/HWIeeprom.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  address         1    wreg     unsigned char 
  3638 ;;  Data            2   19[COMRAM] PTR unsigned char 
  3639 ;;		 -> APP_MANAGE@AvgSpeedKph(2), 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  address         1   21[COMRAM] unsigned char 
  3642 ;;  ReadSuccess     1   22[COMRAM] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      unsigned char 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr2l, fsr2h, status,2
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3652 ;;      Params:         2       0       0       0       0       0       0
  3653 ;;      Locals:         2       0       0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0
  3655 ;;      Totals:         4       0       0       0       0       0       0
  3656 ;;Total ram usage:        4 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    4
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_Eeprom_Read_Block
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text22
  3667  0013E6                     __ptext22:
  3668                           	opt stack 0
  3669  0013E6                     _HWIeeprom_Read:
  3670                           	opt stack 21
  3671                           
  3672                           ;incstack = 0
  3673                           ;HWIeeprom_Read@address stored from wreg
  3674  0013E6  6E50               	movwf	HWIeeprom_Read@address,c
  3675                           
  3676                           ;HWIeeprom.c: 33: unsigned char ReadSuccess;
  3677                           ;HWIeeprom.c: 34: if((unsigned char)0 == EECON1bits.WR )
  3678  0013E8  B2A6               	btfsc	4006,1,c	;volatile
  3679  0013EA  D00D               	goto	l2113
  3680                           
  3681                           ;HWIeeprom.c: 35: {
  3682                           ;HWIeeprom.c: 36: EEADR = address;
  3683  0013EC  C050  FFA9         	movff	HWIeeprom_Read@address,4009	;volatile
  3684                           
  3685                           ;HWIeeprom.c: 37: EECON1bits.EEPGD = (unsigned char)0;
  3686  0013F0  9EA6               	bcf	4006,7,c	;volatile
  3687                           
  3688                           ;HWIeeprom.c: 38: EECON1bits.CFGS = (unsigned char)0;
  3689  0013F2  9CA6               	bcf	4006,6,c	;volatile
  3690                           
  3691                           ;HWIeeprom.c: 39: EECON1bits.RD = (unsigned char)1;
  3692  0013F4  80A6               	bsf	4006,0,c	;volatile
  3693                           
  3694                           ;HWIeeprom.c: 40: *Data = EEDATA;
  3695  0013F6  C04E  FFD9         	movff	HWIeeprom_Read@Data,fsr2l
  3696  0013FA  C04F  FFDA         	movff	HWIeeprom_Read@Data+1,fsr2h
  3697  0013FE  CFA8 FFDF          	movff	4008,indf2	;volatile
  3698                           
  3699                           ;HWIeeprom.c: 41: ReadSuccess = (unsigned char)1;
  3700  001402  0E01               	movlw	1
  3701  001404  D001               	goto	L4
  3702  001406                     l2113:
  3703                           
  3704                           ;HWIeeprom.c: 43: else
  3705                           ;HWIeeprom.c: 44: {
  3706                           ;HWIeeprom.c: 45: ReadSuccess = (unsigned char)0;
  3707  001406  0E00               	movlw	0
  3708  001408                     L4:
  3709  001408  6E51               	movwf	HWIeeprom_Read@ReadSuccess,c
  3710                           
  3711                           ;HWIeeprom.c: 46: }
  3712                           ;HWIeeprom.c: 48: return ReadSuccess;
  3713  00140A  5051               	movf	HWIeeprom_Read@ReadSuccess,w,c
  3714  00140C  0012               	return	
  3715  00140E                     __end_of_HWIeeprom_Read:
  3716                           	opt stack 0
  3717                           tosu	equ	0xFFF
  3718                           tosh	equ	0xFFE
  3719                           tosl	equ	0xFFD
  3720                           pclath	equ	0xFFA
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           indf1	equ	0xFE7
  3731                           postinc1	equ	0xFE6
  3732                           fsr1h	equ	0xFE2
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           fsr2h	equ	0xFDA
  3738                           fsr2l	equ	0xFD9
  3739                           status	equ	0xFD8
  3740                           
  3741 ;; *************** function _BlinkDigit *****************
  3742 ;; Defined at:
  3743 ;;		line 121 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;  Index           1    wreg     unsigned char 
  3746 ;;  duration        1   19[COMRAM] unsigned char 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  Index           1   20[COMRAM] unsigned char 
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3758 ;;      Params:         1       0       0       0       0       0       0
  3759 ;;      Locals:         1       0       0       0       0       0       0
  3760 ;;      Temps:          0       0       0       0       0       0       0
  3761 ;;      Totals:         2       0       0       0       0       0       0
  3762 ;;Total ram usage:        2 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    4
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_APP_MANAGE
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text23
  3773  0014B8                     __ptext23:
  3774                           	opt stack 0
  3775  0014B8                     _BlinkDigit:
  3776                           	opt stack 22
  3777                           
  3778                           ;incstack = 0
  3779                           ;BlinkDigit@Index stored from wreg
  3780  0014B8  6E4F               	movwf	BlinkDigit@Index,c
  3781                           
  3782                           ;BCDdisplay.c: 123: BlinkIndex = Index;
  3783  0014BA  C04F  F033         	movff	BlinkDigit@Index,_BlinkIndex
  3784                           
  3785                           ;BCDdisplay.c: 124: BlinkDuration = duration;
  3786  0014BE  C04E  F032         	movff	BlinkDigit@duration,_BlinkDuration
  3787  0014C2  0012               	return		;funcret
  3788  0014C4                     __end_of_BlinkDigit:
  3789                           	opt stack 0
  3790                           tosu	equ	0xFFF
  3791                           tosh	equ	0xFFE
  3792                           tosl	equ	0xFFD
  3793                           pclath	equ	0xFFA
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           postinc0	equ	0xFEE
  3802                           wreg	equ	0xFE8
  3803                           indf1	equ	0xFE7
  3804                           postinc1	equ	0xFE6
  3805                           fsr1h	equ	0xFE2
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function _BCDsendNumber *****************
  3815 ;; Defined at:
  3816 ;;		line 34 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  Number          2   26[COMRAM] unsigned short 
  3819 ;;  DecimalPlace    1   28[COMRAM] unsigned char 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  Buffer          2   35[COMRAM] unsigned short 
  3822 ;;  Output          2   33[COMRAM] unsigned short 
  3823 ;;  Link            2   31[COMRAM] unsigned short 
  3824 ;;  LoopIndex       1   37[COMRAM] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3834 ;;      Params:         3       0       0       0       0       0       0
  3835 ;;      Locals:         7       0       0       0       0       0       0
  3836 ;;      Temps:          2       0       0       0       0       0       0
  3837 ;;      Totals:        12       0       0       0       0       0       0
  3838 ;;Total ram usage:       12 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    5
  3841 ;; This function calls:
  3842 ;;		___lwdiv
  3843 ;;		___wmul
  3844 ;; This function is called by:
  3845 ;;		_APP_MANAGE
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text24
  3850  000B5A                     __ptext24:
  3851                           	opt stack 0
  3852  000B5A                     _BCDsendNumber:
  3853                           	opt stack 21
  3854                           
  3855                           ;BCDdisplay.c: 36: unsigned short Link,Output,Buffer;
  3856                           ;BCDdisplay.c: 37: unsigned char LoopIndex;
  3857                           ;BCDdisplay.c: 39: Buffer = Number;
  3858                           
  3859                           ;incstack = 0
  3860  000B5A  C055  F05E         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  3861  000B5E  C056  F05F         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  3862                           
  3863                           ;BCDdisplay.c: 40: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  3864  000B62  0E00               	movlw	0
  3865  000B64  6E60               	movwf	BCDsendNumber@LoopIndex,c
  3866  000B66                     l2233:
  3867  000B66  0E03               	movlw	3
  3868  000B68  6460               	cpfsgt	BCDsendNumber@LoopIndex,c
  3869  000B6A  D001               	goto	l2237
  3870  000B6C  D05C               	goto	l2257
  3871  000B6E                     l2237:
  3872                           
  3873                           ;BCDdisplay.c: 41: {
  3874                           ;BCDdisplay.c: 42: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  3875  000B6E  505E               	movf	BCDsendNumber@Buffer,w,c
  3876  000B70  105F               	iorwf	BCDsendNumber@Buffer+1,w,c
  3877  000B72  A4D8               	btfss	status,2,c
  3878  000B74  D004               	goto	l59
  3879  000B76  5060               	movf	BCDsendNumber@LoopIndex,w,c
  3880  000B78  5C57               	subwf	BCDsendNumber@DecimalPlace,w,c
  3881  000B7A  A0D8               	btfss	status,0,c
  3882  000B7C  D02D               	goto	l2247
  3883  000B7E                     l59:
  3884                           
  3885                           ;BCDdisplay.c: 43: {
  3886                           ;BCDdisplay.c: 44: Link = Buffer;
  3887  000B7E  C05E  F05A         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  3888  000B82  C05F  F05B         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  3889                           
  3890                           ;BCDdisplay.c: 45: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  3891  000B86  C05E  F04E         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  3892  000B8A  C05F  F04F         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  3893  000B8E  0E00               	movlw	0
  3894  000B90  6E51               	movwf	___lwdiv@divisor+1,c
  3895  000B92  0E0A               	movlw	10
  3896  000B94  6E50               	movwf	___lwdiv@divisor,c
  3897  000B96  ECAB  F008         	call	___lwdiv	;wreg free
  3898  000B9A  C04E  F05E         	movff	?___lwdiv,BCDsendNumber@Buffer
  3899  000B9E  C04F  F05F         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  3900                           
  3901                           ;BCDdisplay.c: 46: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  3902  000BA2  C05E  F04E         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  3903  000BA6  C05F  F04F         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  3904  000BAA  0E00               	movlw	0
  3905  000BAC  6E51               	movwf	___wmul@multiplicand+1,c
  3906  000BAE  0E0A               	movlw	10
  3907  000BB0  6E50               	movwf	___wmul@multiplicand,c
  3908  000BB2  EC07  F00A         	call	___wmul	;wreg free
  3909  000BB6  1E4E               	comf	?___wmul,f,c
  3910  000BB8  1E4F               	comf	?___wmul+1,f,c
  3911  000BBA  4A4E               	infsnz	?___wmul,f,c
  3912  000BBC  2A4F               	incf	?___wmul+1,f,c
  3913  000BBE  505A               	movf	BCDsendNumber@Link,w,c
  3914  000BC0  244E               	addwf	?___wmul,w,c
  3915  000BC2  6E5C               	movwf	BCDsendNumber@Output,c
  3916  000BC4  505B               	movf	BCDsendNumber@Link+1,w,c
  3917  000BC6  204F               	addwfc	?___wmul+1,w,c
  3918  000BC8  6E5D               	movwf	BCDsendNumber@Output+1,c
  3919                           
  3920                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  3921  000BCA  0E11               	movlw	low _SevenSegmentMAP
  3922  000BCC  245C               	addwf	BCDsendNumber@Output,w,c
  3923  000BCE  6EF6               	movwf	tblptrl,c
  3924  000BD0  0E06               	movlw	high _SevenSegmentMAP
  3925  000BD2  205D               	addwfc	BCDsendNumber@Output+1,w,c
  3926  000BD4  6EF7               	movwf	tblptrh,c
  3927  000BD6                     	if	0	;There are less than 3 active tblptr bytes
  3928  000BD6  D008               	goto	L5
  3929  000BD8                     l2247:
  3930                           
  3931                           ;BCDdisplay.c: 50: else if (LoopIndex <= DecimalPlace)
  3932  000BD8  5060               	movf	BCDsendNumber@LoopIndex,w,c
  3933  000BDA  5C57               	subwf	BCDsendNumber@DecimalPlace,w,c
  3934  000BDC  A0D8               	btfss	status,0,c
  3935  000BDE  D015               	goto	l2251
  3936                           
  3937                           ;BCDdisplay.c: 51: {
  3938                           ;BCDdisplay.c: 52: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  3939  000BE0  0E11               	movlw	low _SevenSegmentMAP
  3940  000BE2  6EF6               	movwf	tblptrl,c
  3941  000BE4                     	if	1	;There is more than 1 active tblptr byte
  3942  000BE4  0E06               	movlw	high _SevenSegmentMAP
  3943  000BE6  6EF7               	movwf	tblptrh,c
  3944  000BE8                     	endif
  3945  000BE8                     	if	0	;There are less than 3 active tblptr bytes
  3946  000BE8                     L5:
  3947  000BE8                     	endif
  3948  000BE8  0008               	tblrd		*
  3949  000BEA  50F5               	movf	tablat,w,c
  3950  000BEC  6E58               	movwf	??_BCDsendNumber& (0+255),c
  3951  000BEE  6A59               	clrf	(??_BCDsendNumber+1)& (0+255),c
  3952  000BF0  5060               	movf	BCDsendNumber@LoopIndex,w,c
  3953  000BF2  0D02               	mullw	2
  3954  000BF4  0E11               	movlw	low _BCDNumber
  3955  000BF6  24F3               	addwf	prodl,w,c
  3956  000BF8  6ED9               	movwf	fsr2l,c
  3957  000BFA  0E00               	movlw	high _BCDNumber
  3958  000BFC  20F4               	addwfc	prodh,w,c
  3959  000BFE  6EDA               	movwf	fsr2h,c
  3960  000C00  C058  FFDE         	movff	??_BCDsendNumber,postinc2
  3961  000C04  C059  FFDD         	movff	??_BCDsendNumber+1,postdec2
  3962                           
  3963                           ;BCDdisplay.c: 53: }
  3964  000C08  D00C               	goto	l2253
  3965  000C0A                     l2251:
  3966                           
  3967                           ;BCDdisplay.c: 54: else
  3968                           ;BCDdisplay.c: 55: {
  3969                           ;BCDdisplay.c: 56: BCDNumber[LoopIndex] = 0x0;
  3970  000C0A  5060               	movf	BCDsendNumber@LoopIndex,w,c
  3971  000C0C  0D02               	mullw	2
  3972  000C0E  0E11               	movlw	low _BCDNumber
  3973  000C10  24F3               	addwf	prodl,w,c
  3974  000C12  6ED9               	movwf	fsr2l,c
  3975  000C14  0E00               	movlw	high _BCDNumber
  3976  000C16  20F4               	addwfc	prodh,w,c
  3977  000C18  6EDA               	movwf	fsr2h,c
  3978  000C1A  0E00               	movlw	0
  3979  000C1C  6EDE               	movwf	postinc2,c
  3980  000C1E  0E00               	movlw	0
  3981  000C20  6EDD               	movwf	postdec2,c
  3982  000C22                     l2253:
  3983  000C22  2A60               	incf	BCDsendNumber@LoopIndex,f,c
  3984  000C24  D7A0               	goto	l2233
  3985  000C26                     l2257:
  3986                           
  3987                           ;BCDdisplay.c: 57: }
  3988                           ;BCDdisplay.c: 58: }
  3989                           ;BCDdisplay.c: 59: if(DecimalPlace != (unsigned char)0)
  3990  000C26  5057               	movf	BCDsendNumber@DecimalPlace,w,c
  3991  000C28  B4D8               	btfsc	status,2,c
  3992  000C2A  0012               	return	
  3993                           
  3994                           ;BCDdisplay.c: 60: {
  3995                           ;BCDdisplay.c: 61: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  3996  000C2C  5057               	movf	BCDsendNumber@DecimalPlace,w,c
  3997  000C2E  0D02               	mullw	2
  3998  000C30  0E11               	movlw	low _BCDNumber
  3999  000C32  24F3               	addwf	prodl,w,c
  4000  000C34  6ED9               	movwf	fsr2l,c
  4001  000C36  0E00               	movlw	high _BCDNumber
  4002  000C38  20F4               	addwfc	prodh,w,c
  4003  000C3A  6EDA               	movwf	fsr2h,c
  4004  000C3C  0E1B               	movlw	low (_SevenSegmentMAP+10)
  4005  000C3E  6EF6               	movwf	tblptrl,c
  4006  000C40  0E06               	movlw	high (_SevenSegmentMAP+10)
  4007  000C42  6EF7               	movwf	tblptrh,c
  4008  000C44                     	if	0	;tblptru may be non-zero
  4009  000C44                     	endif
  4010  000C44                     	if	0	;tblptru may be non-zero
  4011  000C44                     	endif
  4012  000C44  0008               	tblrd		*
  4013  000C46  50F5               	movf	tablat,w,c
  4014  000C48  12DE               	iorwf	postinc2,f,c
  4015  000C4A  0E00               	movlw	0
  4016  000C4C  12DD               	iorwf	postdec2,f,c
  4017  000C4E  0012               	return	
  4018  000C50                     __end_of_BCDsendNumber:
  4019                           	opt stack 0
  4020                           tosu	equ	0xFFF
  4021                           tosh	equ	0xFFE
  4022                           tosl	equ	0xFFD
  4023                           pclath	equ	0xFFA
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           indf1	equ	0xFE7
  4034                           postinc1	equ	0xFE6
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function ___wmul *****************
  4045 ;; Defined at:
  4046 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  multiplier      2   19[COMRAM] unsigned int 
  4049 ;;  multiplicand    2   21[COMRAM] unsigned int 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  product         2   23[COMRAM] unsigned int 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  2   19[COMRAM] unsigned int 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, prodl, prodh
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4061 ;;      Params:         4       0       0       0       0       0       0
  4062 ;;      Locals:         2       0       0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0
  4064 ;;      Totals:         6       0       0       0       0       0       0
  4065 ;;Total ram usage:        6 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    4
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_APP_MANAGE
  4072 ;;		_BCDsendNumber
  4073 ;;		_SpeedCalcManage
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text25
  4078  00140E                     __ptext25:
  4079                           	opt stack 0
  4080  00140E                     ___wmul:
  4081                           	opt stack 22
  4082                           
  4083                           ;incstack = 0
  4084  00140E  504E               	movf	___wmul@multiplier,w,c
  4085  001410  0250               	mulwf	___wmul@multiplicand,c
  4086  001412  CFF3 F052          	movff	prodl,___wmul@product
  4087  001416  CFF4 F053          	movff	prodh,___wmul@product+1
  4088  00141A  504E               	movf	___wmul@multiplier,w,c
  4089  00141C  0251               	mulwf	___wmul@multiplicand+1,c
  4090  00141E  50F3               	movf	prodl,w,c
  4091  001420  2653               	addwf	___wmul@product+1,f,c
  4092  001422  504F               	movf	___wmul@multiplier+1,w,c
  4093  001424  0250               	mulwf	___wmul@multiplicand,c
  4094  001426  50F3               	movf	prodl,w,c
  4095  001428  2653               	addwf	___wmul@product+1,f,c
  4096  00142A  C052  F04E         	movff	___wmul@product,?___wmul
  4097  00142E  C053  F04F         	movff	___wmul@product+1,?___wmul+1
  4098  001432  0012               	return	
  4099  001434                     __end_of___wmul:
  4100                           	opt stack 0
  4101                           tosu	equ	0xFFF
  4102                           tosh	equ	0xFFE
  4103                           tosl	equ	0xFFD
  4104                           pclath	equ	0xFFA
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           postinc0	equ	0xFEE
  4113                           wreg	equ	0xFE8
  4114                           indf1	equ	0xFE7
  4115                           postinc1	equ	0xFE6
  4116                           fsr1h	equ	0xFE2
  4117                           fsr1l	equ	0xFE1
  4118                           indf2	equ	0xFDF
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function ___lwdiv *****************
  4126 ;; Defined at:
  4127 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  dividend        2   19[COMRAM] unsigned int 
  4130 ;;  divisor         2   21[COMRAM] unsigned int 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  quotient        2   24[COMRAM] unsigned int 
  4133 ;;  counter         1   23[COMRAM] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  2   19[COMRAM] unsigned int 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4143 ;;      Params:         4       0       0       0       0       0       0
  4144 ;;      Locals:         3       0       0       0       0       0       0
  4145 ;;      Temps:          0       0       0       0       0       0       0
  4146 ;;      Totals:         7       0       0       0       0       0       0
  4147 ;;Total ram usage:        7 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    4
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_BCDsendNumber
  4154 ;;		_SpeedCalcManage
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text26
  4159  001156                     __ptext26:
  4160                           	opt stack 0
  4161  001156                     ___lwdiv:
  4162                           	opt stack 22
  4163                           
  4164                           ;incstack = 0
  4165  001156  0E00               	movlw	0
  4166  001158  6E54               	movwf	___lwdiv@quotient+1,c
  4167  00115A  0E00               	movlw	0
  4168  00115C  6E53               	movwf	___lwdiv@quotient,c
  4169  00115E  5050               	movf	___lwdiv@divisor,w,c
  4170  001160  1051               	iorwf	___lwdiv@divisor+1,w,c
  4171  001162  B4D8               	btfsc	status,2,c
  4172  001164  D01C               	goto	l858
  4173  001166  0E01               	movlw	1
  4174  001168  6E52               	movwf	___lwdiv@counter,c
  4175  00116A  D004               	goto	l2165
  4176  00116C                     l2163:
  4177  00116C  90D8               	bcf	status,0,c
  4178  00116E  3650               	rlcf	___lwdiv@divisor,f,c
  4179  001170  3651               	rlcf	___lwdiv@divisor+1,f,c
  4180  001172  2A52               	incf	___lwdiv@counter,f,c
  4181  001174                     l2165:
  4182  001174  AE51               	btfss	___lwdiv@divisor+1,7,c
  4183  001176  D7FA               	goto	l2163
  4184  001178                     l2167:
  4185  001178  90D8               	bcf	status,0,c
  4186  00117A  3653               	rlcf	___lwdiv@quotient,f,c
  4187  00117C  3654               	rlcf	___lwdiv@quotient+1,f,c
  4188  00117E  5050               	movf	___lwdiv@divisor,w,c
  4189  001180  5C4E               	subwf	___lwdiv@dividend,w,c
  4190  001182  5051               	movf	___lwdiv@divisor+1,w,c
  4191  001184  584F               	subwfb	___lwdiv@dividend+1,w,c
  4192  001186  A0D8               	btfss	status,0,c
  4193  001188  D005               	goto	l2175
  4194  00118A  5050               	movf	___lwdiv@divisor,w,c
  4195  00118C  5E4E               	subwf	___lwdiv@dividend,f,c
  4196  00118E  5051               	movf	___lwdiv@divisor+1,w,c
  4197  001190  5A4F               	subwfb	___lwdiv@dividend+1,f,c
  4198  001192  8053               	bsf	___lwdiv@quotient,0,c
  4199  001194                     l2175:
  4200  001194  90D8               	bcf	status,0,c
  4201  001196  3251               	rrcf	___lwdiv@divisor+1,f,c
  4202  001198  3250               	rrcf	___lwdiv@divisor,f,c
  4203  00119A  2E52               	decfsz	___lwdiv@counter,f,c
  4204  00119C  D7ED               	goto	l2167
  4205  00119E                     l858:
  4206  00119E  C053  F04E         	movff	___lwdiv@quotient,?___lwdiv
  4207  0011A2  C054  F04F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4208  0011A6  0012               	return		;funcret
  4209  0011A8                     __end_of___lwdiv:
  4210                           	opt stack 0
  4211                           tosu	equ	0xFFF
  4212                           tosh	equ	0xFFE
  4213                           tosl	equ	0xFFD
  4214                           pclath	equ	0xFFA
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           indf1	equ	0xFE7
  4225                           postinc1	equ	0xFE6
  4226                           fsr1h	equ	0xFE2
  4227                           fsr1l	equ	0xFE1
  4228                           indf2	equ	0xFDF
  4229                           postinc2	equ	0xFDE
  4230                           postdec2	equ	0xFDD
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _BCDManage7segment *****************
  4236 ;; Defined at:
  4237 ;;		line 65 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  BCD             1   24[COMRAM] unsigned char 
  4242 ;;  Index           1   23[COMRAM] unsigned char 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4252 ;;      Params:         0       0       0       0       0       0       0
  4253 ;;      Locals:         2       0       0       0       0       0       0
  4254 ;;      Temps:          2       0       0       0       0       0       0
  4255 ;;      Totals:         4       0       0       0       0       0       0
  4256 ;;Total ram usage:        4 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    5
  4259 ;; This function calls:
  4260 ;;		_HWI_4Digit_WRITE
  4261 ;;		_HWI_8Digit_WRITE
  4262 ;; This function is called by:
  4263 ;;		_DisplayAlphaNumeric
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text27
  4268  000E42                     __ptext27:
  4269                           	opt stack 0
  4270  000E42                     _BCDManage7segment:
  4271                           	opt stack 22
  4272                           
  4273                           ;BCDdisplay.c: 67: static unsigned char DigitIndex = (unsigned char)0;
  4274                           ;BCDdisplay.c: 68: static unsigned char BlinkCounter = (unsigned char)0;
  4275                           ;BCDdisplay.c: 69: unsigned char Index;
  4276                           ;BCDdisplay.c: 70: unsigned char BCD = (unsigned char)0;
  4277                           
  4278                           ;incstack = 0
  4279  000E42  0E00               	movlw	0
  4280  000E44  6E53               	movwf	BCDManage7segment@BCD,c
  4281                           
  4282                           ;BCDdisplay.c: 73: if( BlinkDuration != (unsigned char)0)
  4283  000E46  5032               	movf	_BlinkDuration,w,c
  4284  000E48  B4D8               	btfsc	status,2,c
  4285  000E4A  D00A               	goto	l1927
  4286                           
  4287                           ;BCDdisplay.c: 74: {
  4288                           ;BCDdisplay.c: 75: BlinkCounter++;
  4289  000E4C  2A30               	incf	BCDManage7segment@BlinkCounter,f,c
  4290                           
  4291                           ;BCDdisplay.c: 76: if(BlinkCounter == BlinkDuration)
  4292  000E4E  5032               	movf	_BlinkDuration,w,c
  4293  000E50  1830               	xorwf	BCDManage7segment@BlinkCounter,w,c
  4294  000E52  A4D8               	btfss	status,2,c
  4295  000E54  D007               	goto	l1929
  4296                           
  4297                           ;BCDdisplay.c: 77: {
  4298                           ;BCDdisplay.c: 78: BlinkFlag ^= (unsigned char)1;
  4299  000E56  0E01               	movlw	1
  4300  000E58  1A31               	xorwf	_BlinkFlag,f,c
  4301                           
  4302                           ;BCDdisplay.c: 79: BlinkCounter = (unsigned char)0;
  4303  000E5A  0E00               	movlw	0
  4304  000E5C  6E30               	movwf	BCDManage7segment@BlinkCounter,c
  4305                           
  4306                           ;BCDdisplay.c: 80: }
  4307                           ;BCDdisplay.c: 81: }
  4308  000E5E  D002               	goto	l1929
  4309  000E60                     l1927:
  4310                           
  4311                           ;BCDdisplay.c: 82: else
  4312                           ;BCDdisplay.c: 83: {
  4313                           ;BCDdisplay.c: 84: BlinkFlag = (unsigned char)0;
  4314  000E60  0E00               	movlw	0
  4315  000E62  6E31               	movwf	_BlinkFlag,c
  4316  000E64                     l1929:
  4317                           
  4318                           ;BCDdisplay.c: 85: }
  4319                           ;BCDdisplay.c: 87: if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex))
  4320  000E64  0431               	decf	_BlinkFlag,w,c
  4321  000E66  A4D8               	btfss	status,2,c
  4322  000E68  D007               	goto	l1935
  4323  000E6A  5033               	movf	_BlinkIndex,w,c
  4324  000E6C  183A               	xorwf	BCDManage7segment@DigitIndex,w,c
  4325  000E6E  A4D8               	btfss	status,2,c
  4326  000E70  D003               	goto	l1935
  4327                           
  4328                           ;BCDdisplay.c: 88: {
  4329                           ;BCDdisplay.c: 89: Index = (unsigned char)0xF;
  4330  000E72  0E0F               	movlw	15
  4331  000E74  6E52               	movwf	BCDManage7segment@Index,c
  4332                           
  4333                           ;BCDdisplay.c: 90: }
  4334  000E76  D01A               	goto	l1939
  4335  000E78                     l1935:
  4336                           
  4337                           ;BCDdisplay.c: 91: else
  4338                           ;BCDdisplay.c: 92: {
  4339                           ;BCDdisplay.c: 93: Index = (~(((unsigned char) 0x1 << ((4 - DigitIndex)
  4340                           ;BCDdisplay.c: 94: - (unsigned char)1))));
  4341  000E78  283A               	incf	BCDManage7segment@DigitIndex,w,c
  4342  000E7A  0800               	sublw	0
  4343  000E7C  6E50               	movwf	??_BCDManage7segment& (0+255),c
  4344  000E7E  0E04               	movlw	4
  4345  000E80  2650               	addwf	??_BCDManage7segment,f,c
  4346  000E82  0E01               	movlw	1
  4347  000E84  6E51               	movwf	(??_BCDManage7segment+1)& (0+255),c
  4348  000E86  2A50               	incf	??_BCDManage7segment,f,c
  4349  000E88  D002               	goto	u1014
  4350  000E8A                     u1015:
  4351  000E8A  90D8               	bcf	status,0,c
  4352  000E8C  3651               	rlcf	??_BCDManage7segment+1,f,c
  4353  000E8E                     u1014:
  4354  000E8E  2E50               	decfsz	??_BCDManage7segment,f,c
  4355  000E90  D7FC               	goto	u1015
  4356  000E92  5051               	movf	??_BCDManage7segment+1,w,c
  4357  000E94  0AFF               	xorlw	255
  4358  000E96  6E52               	movwf	BCDManage7segment@Index,c
  4359                           
  4360                           ;BCDdisplay.c: 95: BCD = BCDNumber[DigitIndex];
  4361  000E98  503A               	movf	BCDManage7segment@DigitIndex,w,c
  4362  000E9A  0D02               	mullw	2
  4363  000E9C  0E11               	movlw	low _BCDNumber
  4364  000E9E  24F3               	addwf	prodl,w,c
  4365  000EA0  6ED9               	movwf	fsr2l,c
  4366  000EA2  0E00               	movlw	high _BCDNumber
  4367  000EA4  20F4               	addwfc	prodh,w,c
  4368  000EA6  6EDA               	movwf	fsr2h,c
  4369  000EA8  50DF               	movf	indf2,w,c
  4370  000EAA  6E53               	movwf	BCDManage7segment@BCD,c
  4371  000EAC                     l1939:
  4372                           
  4373                           ;BCDdisplay.c: 96: }
  4374                           ;BCDdisplay.c: 98: if( (unsigned char)1 == bIsAnodeUsed)
  4375  000EAC  046B               	decf	_bIsAnodeUsed,w,c
  4376  000EAE  A4D8               	btfss	status,2,c
  4377  000EB0  D002               	goto	l1943
  4378                           
  4379                           ;BCDdisplay.c: 99: {
  4380                           ;BCDdisplay.c: 100: Index = (unsigned char)~Index;
  4381  000EB2  1E52               	comf	BCDManage7segment@Index,f,c
  4382                           
  4383                           ;BCDdisplay.c: 101: BCD = (unsigned char)~BCD;
  4384  000EB4  1E53               	comf	BCDManage7segment@BCD,f,c
  4385  000EB6                     l1943:
  4386                           
  4387                           ;BCDdisplay.c: 102: }
  4388                           ;BCDdisplay.c: 104: HWI_4Digit_WRITE(0,Index);
  4389  000EB6  C052  F04E         	movff	BCDManage7segment@Index,HWI_4Digit_WRITE@value
  4390  000EBA  0E00               	movlw	0
  4391  000EBC  EC69  F009         	call	_HWI_4Digit_WRITE
  4392                           
  4393                           ;BCDdisplay.c: 105: HWI_8Digit_WRITE(1,BCD);
  4394  000EC0  C053  F04E         	movff	BCDManage7segment@BCD,HWI_8Digit_WRITE@value
  4395  000EC4  0E01               	movlw	1
  4396  000EC6  EC1A  F00A         	call	_HWI_8Digit_WRITE
  4397                           
  4398                           ;BCDdisplay.c: 112: DigitIndex ++;
  4399  000ECA  2A3A               	incf	BCDManage7segment@DigitIndex,f,c
  4400                           
  4401                           ;BCDdisplay.c: 113: if(DigitIndex == 4)
  4402  000ECC  0E04               	movlw	4
  4403  000ECE  183A               	xorwf	BCDManage7segment@DigitIndex,w,c
  4404  000ED0  A4D8               	btfss	status,2,c
  4405  000ED2  0012               	return	
  4406                           
  4407                           ;BCDdisplay.c: 114: {
  4408                           ;BCDdisplay.c: 115: DigitIndex = (unsigned char)0;
  4409  000ED4  0E00               	movlw	0
  4410  000ED6  6E3A               	movwf	BCDManage7segment@DigitIndex,c
  4411  000ED8  0012               	return	
  4412  000EDA                     __end_of_BCDManage7segment:
  4413                           	opt stack 0
  4414                           tosu	equ	0xFFF
  4415                           tosh	equ	0xFFE
  4416                           tosl	equ	0xFFD
  4417                           pclath	equ	0xFFA
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           prodh	equ	0xFF4
  4423                           prodl	equ	0xFF3
  4424                           intcon	equ	0xFF2
  4425                           postinc0	equ	0xFEE
  4426                           wreg	equ	0xFE8
  4427                           indf1	equ	0xFE7
  4428                           postinc1	equ	0xFE6
  4429                           fsr1h	equ	0xFE2
  4430                           fsr1l	equ	0xFE1
  4431                           indf2	equ	0xFDF
  4432                           postinc2	equ	0xFDE
  4433                           postdec2	equ	0xFDD
  4434                           fsr2h	equ	0xFDA
  4435                           fsr2l	equ	0xFD9
  4436                           status	equ	0xFD8
  4437                           
  4438 ;; *************** function _HWI_8Digit_WRITE *****************
  4439 ;; Defined at:
  4440 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  port            1    wreg     unsigned char 
  4443 ;;  value           1   19[COMRAM] unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  port            1   20[COMRAM] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4455 ;;      Params:         1       0       0       0       0       0       0
  4456 ;;      Locals:         1       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0
  4458 ;;      Totals:         2       0       0       0       0       0       0
  4459 ;;Total ram usage:        2 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_BCDManage7segment
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text28
  4470  001434                     __ptext28:
  4471                           	opt stack 0
  4472  001434                     _HWI_8Digit_WRITE:
  4473                           	opt stack 22
  4474                           
  4475                           ;incstack = 0
  4476                           ;HWI_8Digit_WRITE@port stored from wreg
  4477  001434  6E4F               	movwf	HWI_8Digit_WRITE@port,c
  4478                           
  4479                           ;HWI_DIGITAL.c: 43: switch (port)
  4480  001436  D009               	goto	l1841
  4481  001438                     l355:
  4482                           
  4483                           ;HWI_DIGITAL.c: 46: PORTC = value;
  4484  001438  C04E  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  4485                           
  4486                           ;HWI_DIGITAL.c: 47: break;
  4487  00143C  0012               	return	
  4488  00143E                     l357:
  4489                           
  4490                           ;HWI_DIGITAL.c: 49: PORTD = value;
  4491  00143E  C04E  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4492                           
  4493                           ;HWI_DIGITAL.c: 50: break;
  4494  001442  0012               	return	
  4495  001444                     l358:
  4496                           
  4497                           ;HWI_DIGITAL.c: 52: PORTD = value;
  4498  001444  C04E  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4499                           
  4500                           ;HWI_DIGITAL.c: 53: }
  4501  001448  0012               	return	
  4502  00144A                     l1841:
  4503  00144A  504F               	movf	HWI_8Digit_WRITE@port,w,c
  4504                           
  4505                           ; Switch size 1, requested type "space"
  4506                           ; Number of cases is 2, Range of values is 0 to 1
  4507                           ; switch strategies available:
  4508                           ; Name         Instructions Cycles
  4509                           ; simple_byte            7     4 (average)
  4510                           ;	Chosen strategy is simple_byte
  4511  00144C  0A00               	xorlw	0	; case 0
  4512  00144E  B4D8               	btfsc	status,2,c
  4513  001450  D7F3               	goto	l355
  4514  001452  0A01               	xorlw	1	; case 1
  4515  001454  B4D8               	btfsc	status,2,c
  4516  001456  D7F3               	goto	l357
  4517  001458  D7F5               	goto	l358
  4518  00145A                     __end_of_HWI_8Digit_WRITE:
  4519                           	opt stack 0
  4520                           tosu	equ	0xFFF
  4521                           tosh	equ	0xFFE
  4522                           tosl	equ	0xFFD
  4523                           pclath	equ	0xFFA
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           indf1	equ	0xFE7
  4534                           postinc1	equ	0xFE6
  4535                           fsr1h	equ	0xFE2
  4536                           fsr1l	equ	0xFE1
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _HWI_4Digit_WRITE *****************
  4545 ;; Defined at:
  4546 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  port            1    wreg     unsigned char 
  4549 ;;  value           1   19[COMRAM] unsigned char 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  port            1   20[COMRAM] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4561 ;;      Params:         1       0       0       0       0       0       0
  4562 ;;      Locals:         1       0       0       0       0       0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0
  4564 ;;      Totals:         2       0       0       0       0       0       0
  4565 ;;Total ram usage:        2 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    4
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_BCDManage7segment
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text29
  4576  0012D2                     __ptext29:
  4577                           	opt stack 0
  4578  0012D2                     _HWI_4Digit_WRITE:
  4579                           	opt stack 22
  4580                           
  4581                           ;incstack = 0
  4582                           ;HWI_4Digit_WRITE@port stored from wreg
  4583  0012D2  6E4F               	movwf	HWI_4Digit_WRITE@port,c
  4584                           
  4585                           ;HWI_DIGITAL.c: 10: switch (port)
  4586  0012D4  D00F               	goto	l1837
  4587  0012D6                     l1831:
  4588                           
  4589                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  4590  0012D6  508B               	movf	3979,w,c	;volatile
  4591  0012D8  0BF0               	andlw	240
  4592  0012DA  104E               	iorwf	HWI_4Digit_WRITE@value,w,c
  4593  0012DC  6E82               	movwf	3970,c	;volatile
  4594                           
  4595                           ;HWI_DIGITAL.c: 14: break;
  4596  0012DE  0012               	return	
  4597  0012E0                     l1833:
  4598                           
  4599                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  4600  0012E0  508C               	movf	3980,w,c	;volatile
  4601  0012E2  0BF0               	andlw	240
  4602  0012E4  104E               	iorwf	HWI_4Digit_WRITE@value,w,c
  4603  0012E6  6E83               	movwf	3971,c	;volatile
  4604                           
  4605                           ;HWI_DIGITAL.c: 17: break;
  4606  0012E8  0012               	return	
  4607  0012EA                     l1835:
  4608                           
  4609                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  4610  0012EA  508C               	movf	3980,w,c	;volatile
  4611  0012EC  0BF0               	andlw	240
  4612  0012EE  104E               	iorwf	HWI_4Digit_WRITE@value,w,c
  4613  0012F0  6E83               	movwf	3971,c	;volatile
  4614                           
  4615                           ;HWI_DIGITAL.c: 20: }
  4616  0012F2  0012               	return	
  4617  0012F4                     l1837:
  4618  0012F4  504F               	movf	HWI_4Digit_WRITE@port,w,c
  4619                           
  4620                           ; Switch size 1, requested type "space"
  4621                           ; Number of cases is 2, Range of values is 0 to 1
  4622                           ; switch strategies available:
  4623                           ; Name         Instructions Cycles
  4624                           ; simple_byte            7     4 (average)
  4625                           ;	Chosen strategy is simple_byte
  4626  0012F6  0A00               	xorlw	0	; case 0
  4627  0012F8  B4D8               	btfsc	status,2,c
  4628  0012FA  D7ED               	goto	l1831
  4629  0012FC  0A01               	xorlw	1	; case 1
  4630  0012FE  B4D8               	btfsc	status,2,c
  4631  001300  D7EF               	goto	l1833
  4632  001302  D7F3               	goto	l1835
  4633  001304                     __end_of_HWI_4Digit_WRITE:
  4634                           	opt stack 0
  4635                           tosu	equ	0xFFF
  4636                           tosh	equ	0xFFE
  4637                           tosl	equ	0xFFD
  4638                           pclath	equ	0xFFA
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf1	equ	0xFE7
  4649                           postinc1	equ	0xFE6
  4650                           fsr1h	equ	0xFE2
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  4660 ;; Defined at:
  4661 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  1    wreg      void 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4675 ;;      Params:         0       0       0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0
  4678 ;;      Totals:         0       0       0       0       0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    4
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_Start_App
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text30
  4690  001226                     __ptext30:
  4691                           	opt stack 0
  4692  001226                     _HWI_INTERRUPTS_INTITALIZE:
  4693                           	opt stack 25
  4694                           
  4695                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  4696                           
  4697                           ;incstack = 0
  4698  001226  8093               	bsf	3987,0,c	;volatile
  4699                           
  4700                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  4701  001228  8293               	bsf	3987,1,c	;volatile
  4702                           
  4703                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  4704  00122A  0EF0               	movlw	240
  4705  00122C  6EF2               	movwf	intcon,c	;volatile
  4706                           
  4707                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  4708  00122E  0E08               	movlw	8
  4709  001230  6EF0               	movwf	intcon3,c	;volatile
  4710                           
  4711                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  4712  001232  0ED1               	movlw	209
  4713  001234  6ED5               	movwf	4053,c	;volatile
  4714                           
  4715                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  4716  001236  0E85               	movlw	133
  4717  001238  6ECD               	movwf	4045,c	;volatile
  4718                           
  4719                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  4720  00123A  0E9D               	movlw	157
  4721  00123C  6EB1               	movwf	4017,c	;volatile
  4722                           
  4723                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  4724  00123E  8CF1               	bsf	intcon2,6,c	;volatile
  4725                           
  4726                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  4727  001240  8AF1               	bsf	intcon2,5,c	;volatile
  4728                           
  4729                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  4730  001242  94F2               	bcf	intcon,2,c	;volatile
  4731                           
  4732                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  4733  001244  8AF2               	bsf	intcon,5,c	;volatile
  4734                           
  4735                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  4736  001246  909E               	bcf	3998,0,c	;volatile
  4737                           
  4738                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  4739  001248  809D               	bsf	3997,0,c	;volatile
  4740                           
  4741                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  4742  00124A  92A1               	bcf	4001,1,c	;volatile
  4743                           
  4744                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  4745  00124C  82A0               	bsf	4000,1,c	;volatile
  4746                           
  4747                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  4748  00124E  0E13               	movlw	19
  4749  001250  6ED6               	movwf	4054,c	;volatile
  4750                           
  4751                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  4752  001252  0E00               	movlw	0
  4753  001254  6ECF               	movwf	4047,c	;volatile
  4754  001256  0E00               	movlw	0
  4755  001258  6ECE               	movwf	4046,c	;volatile
  4756                           
  4757                           ;HWI_Interrupts.c: 47: TMR3L=0;
  4758  00125A  0E00               	movlw	0
  4759  00125C  6EB2               	movwf	4018,c	;volatile
  4760                           
  4761                           ;HWI_Interrupts.c: 48: TMR3H=0;
  4762  00125E  0E00               	movlw	0
  4763  001260  6EB3               	movwf	4019,c	;volatile
  4764  001262  0012               	return		;funcret
  4765  001264                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  4766                           	opt stack 0
  4767                           tosu	equ	0xFFF
  4768                           tosh	equ	0xFFE
  4769                           tosl	equ	0xFFD
  4770                           pclath	equ	0xFFA
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           intcon2	equ	0xFF1
  4779                           intcon3	equ	0xFF0
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           indf1	equ	0xFE7
  4783                           postinc1	equ	0xFE6
  4784                           fsr1h	equ	0xFE2
  4785                           fsr1l	equ	0xFE1
  4786                           indf2	equ	0xFDF
  4787                           postinc2	equ	0xFDE
  4788                           postdec2	equ	0xFDD
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  4794 ;; Defined at:
  4795 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4809 ;;      Params:         0       0       0       0       0       0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    4
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_Start_App
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text31
  4824  001476                     __ptext31:
  4825                           	opt stack 0
  4826  001476                     _HWI_DIGITAL_INITIALIZE:
  4827                           	opt stack 25
  4828                           
  4829                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  4830                           
  4831                           ;incstack = 0
  4832  001476  0E00               	movlw	0
  4833  001478  6E95               	movwf	3989,c	;volatile
  4834                           
  4835                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  4836  00147A  0E00               	movlw	0
  4837  00147C  6E83               	movwf	3971,c	;volatile
  4838                           
  4839                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  4840  00147E  0E00               	movlw	0
  4841  001480  6E94               	movwf	3988,c	;volatile
  4842                           
  4843                           ;HWI_DIGITAL.c: 81: TRISBbits.RB2 = 1;
  4844  001482  8493               	bsf	3987,2,c	;volatile
  4845                           
  4846                           ;HWI_DIGITAL.c: 82: TRISBbits.RB3 = 1;
  4847  001484  8693               	bsf	3987,3,c	;volatile
  4848                           
  4849                           ;HWI_DIGITAL.c: 85: TRISBbits.RB4 =0;
  4850  001486  9893               	bcf	3987,4,c	;volatile
  4851                           
  4852                           ;HWI_DIGITAL.c: 86: TRISBbits.RB5 =0;
  4853  001488  9A93               	bcf	3987,5,c	;volatile
  4854                           
  4855                           ;HWI_DIGITAL.c: 87: TRISBbits.RB6 =0;
  4856  00148A  9C93               	bcf	3987,6,c	;volatile
  4857                           
  4858                           ;HWI_DIGITAL.c: 88: TRISBbits.RB7 =0;
  4859  00148C  9E93               	bcf	3987,7,c	;volatile
  4860  00148E  0012               	return		;funcret
  4861  001490                     __end_of_HWI_DIGITAL_INITIALIZE:
  4862                           	opt stack 0
  4863                           tosu	equ	0xFFF
  4864                           tosh	equ	0xFFE
  4865                           tosl	equ	0xFFD
  4866                           pclath	equ	0xFFA
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           intcon2	equ	0xFF1
  4875                           intcon3	equ	0xFF0
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           indf1	equ	0xFE7
  4879                           postinc1	equ	0xFE6
  4880                           fsr1h	equ	0xFE2
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _CreateTask *****************
  4890 ;; Defined at:
  4891 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  4894 ;;		 -> ManageDrivers(1), DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  4895 ;;  TaskId          1   21[COMRAM] unsigned char 
  4896 ;;  Period          1   22[COMRAM] unsigned char 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4908 ;;      Params:         4       0       0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0
  4911 ;;      Totals:         4       0       0       0       0       0       0
  4912 ;;Total ram usage:        4 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    4
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_Start_App
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text32
  4923  001054                     __ptext32:
  4924                           	opt stack 0
  4925  001054                     _CreateTask:
  4926                           	opt stack 25
  4927                           
  4928                           ;Scheduler.c: 8: if(TaskId < 4)
  4929                           
  4930                           ;incstack = 0
  4931  001054  0E04               	movlw	4
  4932  001056  6050               	cpfslt	CreateTask@TaskId,c
  4933  001058  0012               	return	
  4934                           
  4935                           ;Scheduler.c: 9: {
  4936                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  4937  00105A  5050               	movf	CreateTask@TaskId,w,c
  4938  00105C  0D04               	mullw	4
  4939  00105E  0E01               	movlw	low _ArrayTask
  4940  001060  24F3               	addwf	prodl,w,c
  4941  001062  6ED9               	movwf	fsr2l,c
  4942  001064  0E00               	movlw	high _ArrayTask
  4943  001066  20F4               	addwfc	prodh,w,c
  4944  001068  6EDA               	movwf	fsr2h,c
  4945  00106A  C04E  FFDE         	movff	CreateTask@MangeFunction,postinc2
  4946  00106E  C04F  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  4947                           
  4948                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  4949  001072  5050               	movf	CreateTask@TaskId,w,c
  4950  001074  0D04               	mullw	4
  4951  001076  0E02               	movlw	2
  4952  001078  26F3               	addwf	prodl,f,c
  4953  00107A  0E00               	movlw	0
  4954  00107C  22F4               	addwfc	prodh,f,c
  4955  00107E  0E01               	movlw	low _ArrayTask
  4956  001080  24F3               	addwf	prodl,w,c
  4957  001082  6ED9               	movwf	fsr2l,c
  4958  001084  0E00               	movlw	high _ArrayTask
  4959  001086  20F4               	addwfc	prodh,w,c
  4960  001088  6EDA               	movwf	fsr2h,c
  4961  00108A  C051  FFDF         	movff	CreateTask@Period,indf2
  4962                           
  4963                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  4964  00108E  5050               	movf	CreateTask@TaskId,w,c
  4965  001090  0D04               	mullw	4
  4966  001092  0E03               	movlw	3
  4967  001094  26F3               	addwf	prodl,f,c
  4968  001096  0E00               	movlw	0
  4969  001098  22F4               	addwfc	prodh,f,c
  4970  00109A  0E01               	movlw	low _ArrayTask
  4971  00109C  24F3               	addwf	prodl,w,c
  4972  00109E  6ED9               	movwf	fsr2l,c
  4973  0010A0  0E00               	movlw	high _ArrayTask
  4974  0010A2  20F4               	addwfc	prodh,w,c
  4975  0010A4  6EDA               	movwf	fsr2h,c
  4976  0010A6  0E00               	movlw	0
  4977  0010A8  6EDF               	movwf	indf2,c
  4978  0010AA  0012               	return	
  4979  0010AC                     __end_of_CreateTask:
  4980                           	opt stack 0
  4981                           tosu	equ	0xFFF
  4982                           tosh	equ	0xFFE
  4983                           tosl	equ	0xFFD
  4984                           pclath	equ	0xFFA
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           intcon	equ	0xFF2
  4992                           intcon2	equ	0xFF1
  4993                           intcon3	equ	0xFF0
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           indf1	equ	0xFE7
  4997                           postinc1	equ	0xFE6
  4998                           fsr1h	equ	0xFE2
  4999                           fsr1l	equ	0xFE1
  5000                           indf2	equ	0xFDF
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _BCDInitialize *****************
  5008 ;; Defined at:
  5009 ;;		line 29 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  bIsCommonAno    1    wreg     unsigned char 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  bIsCommonAno    1   19[COMRAM] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5023 ;;      Params:         0       0       0       0       0       0       0
  5024 ;;      Locals:         1       0       0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0
  5026 ;;      Totals:         1       0       0       0       0       0       0
  5027 ;;Total ram usage:        1 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    4
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_Start_App
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text33
  5038  0014E0                     __ptext33:
  5039                           	opt stack 0
  5040  0014E0                     _BCDInitialize:
  5041                           	opt stack 25
  5042                           
  5043                           ;incstack = 0
  5044                           ;BCDInitialize@bIsCommonAnode stored from wreg
  5045  0014E0  6E4E               	movwf	BCDInitialize@bIsCommonAnode,c
  5046                           
  5047                           ;BCDdisplay.c: 31: bIsAnodeUsed = bIsCommonAnode;
  5048  0014E2  C04E  F06B         	movff	BCDInitialize@bIsCommonAnode,_bIsAnodeUsed
  5049  0014E6  0012               	return		;funcret
  5050  0014E8                     __end_of_BCDInitialize:
  5051                           	opt stack 0
  5052                           tosu	equ	0xFFF
  5053                           tosh	equ	0xFFE
  5054                           tosl	equ	0xFFD
  5055                           pclath	equ	0xFFA
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           intcon2	equ	0xFF1
  5064                           intcon3	equ	0xFF0
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           indf1	equ	0xFE7
  5068                           postinc1	equ	0xFE6
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _APP_INITIALIZE *****************
  5079 ;; Defined at:
  5080 ;;		line 13 in file "../../../../Common/App/APP.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		None
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5094 ;;      Params:         0       0       0       0       0       0       0
  5095 ;;      Locals:         0       0       0       0       0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0
  5097 ;;      Totals:         0       0       0       0       0       0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    4
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_Start_App
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text34
  5109  001510                     __ptext34:
  5110                           	opt stack 0
  5111  001510                     _APP_INITIALIZE:
  5112                           	opt stack 25
  5113                           
  5114                           ;incstack = 0
  5115  001510  0012               	return		;funcret
  5116  001512                     __end_of_APP_INITIALIZE:
  5117                           	opt stack 0
  5118                           tosu	equ	0xFFF
  5119                           tosh	equ	0xFFE
  5120                           tosl	equ	0xFFD
  5121                           pclath	equ	0xFFA
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           intcon2	equ	0xFF1
  5130                           intcon3	equ	0xFF0
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           indf1	equ	0xFE7
  5134                           postinc1	equ	0xFE6
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _ISR *****************
  5145 ;; Defined at:
  5146 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      void 
  5153 ;; Registers used:
  5154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5160 ;;      Params:         0       0       0       0       0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0
  5162 ;;      Temps:         14       0       0       0       0       0       0
  5163 ;;      Totals:        14       0       0       0       0       0       0
  5164 ;;Total ram usage:       14 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    3
  5167 ;; This function calls:
  5168 ;;		_APP_ISR1
  5169 ;;		_APP_ISR2
  5170 ;;		_APP_ISR3
  5171 ;;		_SchedulerTick
  5172 ;; This function is called by:
  5173 ;;		Interrupt level 2
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	intcode
  5178  000008                     __pintcode:
  5179                           	opt stack 0
  5180  000008                     _ISR:
  5181                           	opt stack 21
  5182                           
  5183                           ;incstack = 0
  5184  000008  826C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5185  00000A  ED28  F006         	call	int_func,f	;refresh shadow registers
  5186                           tosu	equ	0xFFF
  5187                           tosh	equ	0xFFE
  5188                           tosl	equ	0xFFD
  5189                           pclath	equ	0xFFA
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           intcon2	equ	0xFF1
  5198                           intcon3	equ	0xFF0
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           indf1	equ	0xFE7
  5202                           postinc1	equ	0xFE6
  5203                           fsr1h	equ	0xFE2
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212                           	psect	intcode_body
  5213  000C50                     __pintcode_body:
  5214                           	opt stack 21
  5215  000C50                     int_func:
  5216                           	opt stack 21
  5217  000C50  0006               	pop		; remove dummy address from shadow register refresh
  5218  000C52  CFFA F040          	movff	pclath,??_ISR
  5219  000C56  CFFB F041          	movff	pclatu,??_ISR+1
  5220  000C5A  CFE9 F042          	movff	fsr0l,??_ISR+2
  5221  000C5E  CFEA F043          	movff	fsr0h,??_ISR+3
  5222  000C62  CFE1 F044          	movff	fsr1l,??_ISR+4
  5223  000C66  CFE2 F045          	movff	fsr1h,??_ISR+5
  5224  000C6A  CFD9 F046          	movff	fsr2l,??_ISR+6
  5225  000C6E  CFDA F047          	movff	fsr2h,??_ISR+7
  5226  000C72  CFF3 F048          	movff	prodl,??_ISR+8
  5227  000C76  CFF4 F049          	movff	prodh,??_ISR+9
  5228  000C7A  CFF6 F04A          	movff	tblptrl,??_ISR+10
  5229  000C7E  CFF7 F04B          	movff	tblptrh,??_ISR+11
  5230  000C82  CFF8 F04C          	movff	tblptru,??_ISR+12
  5231  000C86  CFF5 F04D          	movff	tablat,??_ISR+13
  5232                           
  5233                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  5234  000C8A  A4F2               	btfss	intcon,2,c	;volatile
  5235  000C8C  D005               	goto	i2l2067
  5236                           
  5237                           ;HWI_Interrupts.c: 55: {
  5238                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  5239  000C8E  94F2               	bcf	intcon,2,c	;volatile
  5240                           
  5241                           ;HWI_Interrupts.c: 57: TMR0L=18;
  5242  000C90  0E12               	movlw	18
  5243  000C92  6ED6               	movwf	4054,c	;volatile
  5244                           
  5245                           ;HWI_Interrupts.c: 58: SchedulerTick();
  5246  000C94  ECDE  F009         	call	_SchedulerTick	;wreg free
  5247  000C98                     i2l2067:
  5248                           
  5249                           ;HWI_Interrupts.c: 59: }
  5250                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  5251  000C98  A2A1               	btfss	4001,1,c	;volatile
  5252  000C9A  D005               	goto	i2l2073
  5253                           
  5254                           ;HWI_Interrupts.c: 61: {
  5255                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  5256  000C9C  92A1               	bcf	4001,1,c	;volatile
  5257                           
  5258                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  5259  000C9E  0EEF               	movlw	239
  5260  000CA0  6EB3               	movwf	4019,c	;volatile
  5261                           
  5262                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  5263  000CA2  0E00               	movlw	0
  5264  000CA4  6EB2               	movwf	4018,c	;volatile
  5265  000CA6                     i2l2073:
  5266                           
  5267                           ;HWI_Interrupts.c: 65: }
  5268                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  5269  000CA6  A09E               	btfss	3998,0,c	;volatile
  5270  000CA8  D007               	goto	i2l2081
  5271                           
  5272                           ;HWI_Interrupts.c: 67: {
  5273                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  5274  000CAA  909E               	bcf	3998,0,c	;volatile
  5275                           
  5276                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  5277  000CAC  0E00               	movlw	0
  5278  000CAE  6ECF               	movwf	4047,c	;volatile
  5279  000CB0  0E00               	movlw	0
  5280  000CB2  6ECE               	movwf	4046,c	;volatile
  5281                           
  5282                           ;HWI_Interrupts.c: 70: APP_ISR3();
  5283  000CB4  EC7D  F00A         	call	_APP_ISR3	;wreg free
  5284  000CB8                     i2l2081:
  5285                           
  5286                           ;HWI_Interrupts.c: 71: }
  5287                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  5288  000CB8  B29E               	btfsc	3998,1,c	;volatile
  5289                           
  5290                           ;HWI_Interrupts.c: 73: {
  5291                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  5292  000CBA  929E               	bcf	3998,1,c	;volatile
  5293                           
  5294                           ;HWI_Interrupts.c: 76: }
  5295                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  5296  000CBC  A2F2               	btfss	intcon,1,c	;volatile
  5297  000CBE  D003               	goto	i2l2089
  5298                           
  5299                           ;HWI_Interrupts.c: 79: {
  5300                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  5301  000CC0  92F2               	bcf	intcon,1,c	;volatile
  5302                           
  5303                           ;HWI_Interrupts.c: 81: APP_ISR1();
  5304  000CC2  EC83  F00A         	call	_APP_ISR1	;wreg free
  5305  000CC6                     i2l2089:
  5306                           
  5307                           ;HWI_Interrupts.c: 82: }
  5308                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  5309  000CC6  A0F0               	btfss	intcon3,0,c	;volatile
  5310  000CC8  D003               	goto	i2l441
  5311                           
  5312                           ;HWI_Interrupts.c: 85: {
  5313                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  5314  000CCA  90F0               	bcf	intcon3,0,c	;volatile
  5315                           
  5316                           ;HWI_Interrupts.c: 87: APP_ISR2();
  5317  000CCC  EC80  F00A         	call	_APP_ISR2	;wreg free
  5318  000CD0                     i2l441:
  5319  000CD0  C04D  FFF5         	movff	??_ISR+13,tablat
  5320  000CD4  C04C  FFF8         	movff	??_ISR+12,tblptru
  5321  000CD8  C04B  FFF7         	movff	??_ISR+11,tblptrh
  5322  000CDC  C04A  FFF6         	movff	??_ISR+10,tblptrl
  5323  000CE0  C049  FFF4         	movff	??_ISR+9,prodh
  5324  000CE4  C048  FFF3         	movff	??_ISR+8,prodl
  5325  000CE8  C047  FFDA         	movff	??_ISR+7,fsr2h
  5326  000CEC  C046  FFD9         	movff	??_ISR+6,fsr2l
  5327  000CF0  C045  FFE2         	movff	??_ISR+5,fsr1h
  5328  000CF4  C044  FFE1         	movff	??_ISR+4,fsr1l
  5329  000CF8  C043  FFEA         	movff	??_ISR+3,fsr0h
  5330  000CFC  C042  FFE9         	movff	??_ISR+2,fsr0l
  5331  000D00  C041  FFFB         	movff	??_ISR+1,pclatu
  5332  000D04  C040  FFFA         	movff	??_ISR,pclath
  5333  000D08  926C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5334  000D0A  0011               	retfie		f
  5335  000D0C                     __end_of_ISR:
  5336                           	opt stack 0
  5337                           tosu	equ	0xFFF
  5338                           tosh	equ	0xFFE
  5339                           tosl	equ	0xFFD
  5340                           pclatu	equ	0xFFB
  5341                           pclath	equ	0xFFA
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           intcon2	equ	0xFF1
  5350                           intcon3	equ	0xFF0
  5351                           postinc0	equ	0xFEE
  5352                           fsr0h	equ	0xFEA
  5353                           fsr0l	equ	0xFE9
  5354                           wreg	equ	0xFE8
  5355                           indf1	equ	0xFE7
  5356                           postinc1	equ	0xFE6
  5357                           fsr1h	equ	0xFE2
  5358                           fsr1l	equ	0xFE1
  5359                           indf2	equ	0xFDF
  5360                           postinc2	equ	0xFDE
  5361                           postdec2	equ	0xFDD
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _SchedulerTick *****************
  5367 ;; Defined at:
  5368 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5382 ;;      Params:         0       0       0       0       0       0       0
  5383 ;;      Locals:         1       0       0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0
  5385 ;;      Totals:         1       0       0       0       0       0       0
  5386 ;;Total ram usage:        1 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; This function calls:
  5389 ;;		Nothing
  5390 ;; This function is called by:
  5391 ;;		_ISR
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text36
  5396  0013BC                     __ptext36:
  5397                           	opt stack 0
  5398  0013BC                     _SchedulerTick:
  5399                           	opt stack 23
  5400                           
  5401                           ;Scheduler.c: 18: unsigned char TaskIndex;
  5402                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 4 ; TaskIndex++)
  5403                           
  5404                           ;incstack = 0
  5405  0013BC  0E00               	movlw	0
  5406  0013BE  6E3B               	movwf	SchedulerTick@TaskIndex,c
  5407  0013C0                     i2l1591:
  5408  0013C0  0E03               	movlw	3
  5409  0013C2  643B               	cpfsgt	SchedulerTick@TaskIndex,c
  5410  0013C4  D001               	goto	i2l1595
  5411  0013C6  0012               	return	
  5412  0013C8                     i2l1595:
  5413                           
  5414                           ;Scheduler.c: 20: {
  5415                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  5416  0013C8  503B               	movf	SchedulerTick@TaskIndex,w,c
  5417  0013CA  0D04               	mullw	4
  5418  0013CC  0E03               	movlw	3
  5419  0013CE  26F3               	addwf	prodl,f,c
  5420  0013D0  0E00               	movlw	0
  5421  0013D2  22F4               	addwfc	prodh,f,c
  5422  0013D4  0E01               	movlw	low _ArrayTask
  5423  0013D6  24F3               	addwf	prodl,w,c
  5424  0013D8  6ED9               	movwf	fsr2l,c
  5425  0013DA  0E00               	movlw	high _ArrayTask
  5426  0013DC  20F4               	addwfc	prodh,w,c
  5427  0013DE  6EDA               	movwf	fsr2h,c
  5428  0013E0  2ADF               	incf	indf2,f,c
  5429  0013E2  2A3B               	incf	SchedulerTick@TaskIndex,f,c
  5430  0013E4  D7ED               	goto	i2l1591
  5431  0013E6                     __end_of_SchedulerTick:
  5432                           	opt stack 0
  5433                           tosu	equ	0xFFF
  5434                           tosh	equ	0xFFE
  5435                           tosl	equ	0xFFD
  5436                           pclatu	equ	0xFFB
  5437                           pclath	equ	0xFFA
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           prodh	equ	0xFF4
  5443                           prodl	equ	0xFF3
  5444                           intcon	equ	0xFF2
  5445                           intcon2	equ	0xFF1
  5446                           intcon3	equ	0xFF0
  5447                           postinc0	equ	0xFEE
  5448                           fsr0h	equ	0xFEA
  5449                           fsr0l	equ	0xFE9
  5450                           wreg	equ	0xFE8
  5451                           indf1	equ	0xFE7
  5452                           postinc1	equ	0xFE6
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _APP_ISR3 *****************
  5463 ;; Defined at:
  5464 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5478 ;;      Params:         0       0       0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0
  5481 ;;      Totals:         0       0       0       0       0       0       0
  5482 ;;Total ram usage:        0 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    1
  5485 ;; This function calls:
  5486 ;;		_HWtimerCallback
  5487 ;; This function is called by:
  5488 ;;		_ISR
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text37
  5493  0014FA                     __ptext37:
  5494                           	opt stack 0
  5495  0014FA                     _APP_ISR3:
  5496                           	opt stack 22
  5497                           
  5498                           ;AppInterrupts.c: 20: HWtimerCallback();
  5499                           
  5500                           ;incstack = 0
  5501  0014FA  EC67  F00A         	call	_HWtimerCallback	;wreg free
  5502  0014FE  0012               	return		;funcret
  5503  001500                     __end_of_APP_ISR3:
  5504                           	opt stack 0
  5505                           tosu	equ	0xFFF
  5506                           tosh	equ	0xFFE
  5507                           tosl	equ	0xFFD
  5508                           pclatu	equ	0xFFB
  5509                           pclath	equ	0xFFA
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           intcon2	equ	0xFF1
  5518                           intcon3	equ	0xFF0
  5519                           postinc0	equ	0xFEE
  5520                           fsr0h	equ	0xFEA
  5521                           fsr0l	equ	0xFE9
  5522                           wreg	equ	0xFE8
  5523                           indf1	equ	0xFE7
  5524                           postinc1	equ	0xFE6
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _HWtimerCallback *****************
  5535 ;; Defined at:
  5536 ;;		line 133 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5550 ;;      Params:         0       0       0       0       0       0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0
  5553 ;;      Totals:         0       0       0       0       0       0       0
  5554 ;;Total ram usage:        0 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_APP_ISR3
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text38
  5564  0014CE                     __ptext38:
  5565                           	opt stack 0
  5566  0014CE                     _HWtimerCallback:
  5567                           	opt stack 22
  5568                           
  5569                           ;SpeedCalc.c: 135: if(HwTimerOVFLcount < 64)
  5570                           
  5571                           ;incstack = 0
  5572  0014CE  0E40               	movlw	64
  5573  0014D0  6028               	cpfslt	_HwTimerOVFLcount,c	;volatile
  5574  0014D2  0012               	return	
  5575                           
  5576                           ;SpeedCalc.c: 136: {
  5577                           ;SpeedCalc.c: 137: HwTimerOVFLcount++;
  5578  0014D4  2A28               	incf	_HwTimerOVFLcount,f,c	;volatile
  5579  0014D6  0012               	return	
  5580  0014D8                     __end_of_HWtimerCallback:
  5581                           	opt stack 0
  5582                           tosu	equ	0xFFF
  5583                           tosh	equ	0xFFE
  5584                           tosl	equ	0xFFD
  5585                           pclatu	equ	0xFFB
  5586                           pclath	equ	0xFFA
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           intcon2	equ	0xFF1
  5595                           intcon3	equ	0xFF0
  5596                           postinc0	equ	0xFEE
  5597                           fsr0h	equ	0xFEA
  5598                           fsr0l	equ	0xFE9
  5599                           wreg	equ	0xFE8
  5600                           indf1	equ	0xFE7
  5601                           postinc1	equ	0xFE6
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _APP_ISR2 *****************
  5612 ;; Defined at:
  5613 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;		None
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      void 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, status,0, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5627 ;;      Params:         0       0       0       0       0       0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0
  5630 ;;      Totals:         0       0       0       0       0       0       0
  5631 ;;Total ram usage:        0 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    2
  5634 ;; This function calls:
  5635 ;;		_SensorTwoNotify
  5636 ;; This function is called by:
  5637 ;;		_ISR
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text39
  5642  001500                     __ptext39:
  5643                           	opt stack 0
  5644  001500                     _APP_ISR2:
  5645                           	opt stack 21
  5646                           
  5647                           ;AppInterrupts.c: 15: SensorTwoNotify();
  5648                           
  5649                           ;incstack = 0
  5650  001500  ECC7  F009         	call	_SensorTwoNotify	;wreg free
  5651  001504  0012               	return		;funcret
  5652  001506                     __end_of_APP_ISR2:
  5653                           	opt stack 0
  5654                           tosu	equ	0xFFF
  5655                           tosh	equ	0xFFE
  5656                           tosl	equ	0xFFD
  5657                           pclatu	equ	0xFFB
  5658                           pclath	equ	0xFFA
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           intcon2	equ	0xFF1
  5667                           intcon3	equ	0xFF0
  5668                           postinc0	equ	0xFEE
  5669                           fsr0h	equ	0xFEA
  5670                           fsr0l	equ	0xFE9
  5671                           wreg	equ	0xFE8
  5672                           indf1	equ	0xFE7
  5673                           postinc1	equ	0xFE6
  5674                           fsr1h	equ	0xFE2
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _SensorTwoNotify *****************
  5684 ;; Defined at:
  5685 ;;		line 44 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;		None
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5699 ;;      Params:         0       0       0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0
  5702 ;;      Totals:         0       0       0       0       0       0       0
  5703 ;;Total ram usage:        0 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    1
  5706 ;; This function calls:
  5707 ;;		_ReloadHWtimer
  5708 ;; This function is called by:
  5709 ;;		_APP_ISR2
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text40
  5714  00138E                     __ptext40:
  5715                           	opt stack 0
  5716  00138E                     _SensorTwoNotify:
  5717                           	opt stack 21
  5718                           
  5719                           ;SpeedCalc.c: 46: if( (unsigned char)0 == NotifyFlag )
  5720                           
  5721                           ;incstack = 0
  5722  00138E  502B               	movf	_NotifyFlag,w,c	;volatile
  5723  001390  A4D8               	btfss	status,2,c
  5724  001392  D00F               	goto	i2l2015
  5725                           
  5726                           ;SpeedCalc.c: 47: {
  5727                           ;SpeedCalc.c: 48: NotifyFlag = (unsigned char)1;
  5728  001394  0E01               	movlw	1
  5729  001396  6E2B               	movwf	_NotifyFlag,c	;volatile
  5730                           
  5731                           ;SpeedCalc.c: 49: LapCounter++;
  5732  001398  2A2A               	incf	_LapCounter,f,c	;volatile
  5733                           
  5734                           ;SpeedCalc.c: 50: HWtimerCount = ReloadHWtimer((unsigned char)1);
  5735  00139A  0E01               	movlw	1
  5736  00139C  EC32  F009         	call	_ReloadHWtimer
  5737  0013A0  C03B  F01D         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  5738  0013A4  C03C  F01E         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  5739                           
  5740                           ;SpeedCalc.c: 51: TimerOVFLcount = HwTimerOVFLcount;
  5741  0013A8  C028  F029         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  5742                           
  5743                           ;SpeedCalc.c: 52: HwTimerOVFLcount = (unsigned char)0;
  5744  0013AC  0E00               	movlw	0
  5745  0013AE  6E28               	movwf	_HwTimerOVFLcount,c	;volatile
  5746                           
  5747                           ;SpeedCalc.c: 53: }
  5748  0013B0  0012               	return	
  5749  0013B2                     i2l2015:
  5750                           
  5751                           ;SpeedCalc.c: 54: else
  5752                           ;SpeedCalc.c: 55: {
  5753                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  5754  0013B2  502A               	movf	_LapCounter,w,c	;volatile
  5755  0013B4  B4D8               	btfsc	status,2,c
  5756  0013B6  0012               	return	
  5757                           
  5758                           ;SpeedCalc.c: 57: {
  5759                           ;SpeedCalc.c: 58: LapCounter--;
  5760  0013B8  062A               	decf	_LapCounter,f,c	;volatile
  5761  0013BA  0012               	return	
  5762  0013BC                     __end_of_SensorTwoNotify:
  5763                           	opt stack 0
  5764                           tosu	equ	0xFFF
  5765                           tosh	equ	0xFFE
  5766                           tosl	equ	0xFFD
  5767                           pclatu	equ	0xFFB
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           intcon2	equ	0xFF1
  5777                           intcon3	equ	0xFF0
  5778                           postinc0	equ	0xFEE
  5779                           fsr0h	equ	0xFEA
  5780                           fsr0l	equ	0xFE9
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postinc1	equ	0xFE6
  5784                           fsr1h	equ	0xFE2
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _ReloadHWtimer *****************
  5794 ;; Defined at:
  5795 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  TimerId         1    wreg     unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  TimerId         1    2[COMRAM] unsigned char 
  5800 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  2    0[COMRAM] unsigned short 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5810 ;;      Params:         2       0       0       0       0       0       0
  5811 ;;      Locals:         3       0       0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0
  5813 ;;      Totals:         5       0       0       0       0       0       0
  5814 ;;Total ram usage:        5 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_SensorTwoNotify
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text41
  5824  001264                     __ptext41:
  5825                           	opt stack 0
  5826  001264                     _ReloadHWtimer:
  5827                           	opt stack 21
  5828                           
  5829                           ;incstack = 0
  5830                           ;ReloadHWtimer@TimerId stored from wreg
  5831  001264  6E3D               	movwf	ReloadHWtimer@TimerId,c
  5832                           
  5833                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  5834  001266  0E00               	movlw	0
  5835  001268  6E3F               	movwf	ReloadHWtimer@ElapsedTime+1,c
  5836  00126A  0E00               	movlw	0
  5837  00126C  6E3E               	movwf	ReloadHWtimer@ElapsedTime,c
  5838                           
  5839                           ;HWI_Interrupts.c: 95: switch(TimerId)
  5840  00126E  D009               	goto	i2l1981
  5841  001270                     i2l447:
  5842                           
  5843                           ;HWI_Interrupts.c: 98: case 1:
  5844                           ;HWI_Interrupts.c: 99: case 2:
  5845                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  5846  001270  CFCE F03E          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  5847  001274  CFCF F03F          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  5848                           
  5849                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  5850  001278  0E00               	movlw	0
  5851  00127A  6ECF               	movwf	4047,c	;volatile
  5852  00127C  0E00               	movlw	0
  5853  00127E  6ECE               	movwf	4046,c	;volatile
  5854                           
  5855                           ;HWI_Interrupts.c: 105: }
  5856                           
  5857                           ;HWI_Interrupts.c: 104: break;
  5858                           
  5859                           ;HWI_Interrupts.c: 103: default:
  5860                           
  5861                           ;HWI_Interrupts.c: 102: break;
  5862  001280  D00A               	goto	i2l448
  5863  001282                     i2l1981:
  5864  001282  503D               	movf	ReloadHWtimer@TimerId,w,c
  5865                           
  5866                           ; Switch size 1, requested type "space"
  5867                           ; Number of cases is 3, Range of values is 0 to 2
  5868                           ; switch strategies available:
  5869                           ; Name         Instructions Cycles
  5870                           ; simple_byte           10     6 (average)
  5871                           ;	Chosen strategy is simple_byte
  5872  001284  0A00               	xorlw	0	; case 0
  5873  001286  B4D8               	btfsc	status,2,c
  5874  001288  D7F3               	goto	i2l447
  5875  00128A  0A01               	xorlw	1	; case 1
  5876  00128C  B4D8               	btfsc	status,2,c
  5877  00128E  D7F0               	goto	i2l447
  5878  001290  0A03               	xorlw	3	; case 2
  5879  001292  B4D8               	btfsc	status,2,c
  5880  001294  D7ED               	goto	i2l447
  5881  001296                     i2l448:
  5882                           
  5883                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  5884  001296  C03E  F03B         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  5885  00129A  C03F  F03C         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  5886  00129E  0012               	return		;funcret
  5887  0012A0                     __end_of_ReloadHWtimer:
  5888                           	opt stack 0
  5889                           tosu	equ	0xFFF
  5890                           tosh	equ	0xFFE
  5891                           tosl	equ	0xFFD
  5892                           pclatu	equ	0xFFB
  5893                           pclath	equ	0xFFA
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           intcon2	equ	0xFF1
  5902                           intcon3	equ	0xFF0
  5903                           postinc0	equ	0xFEE
  5904                           fsr0h	equ	0xFEA
  5905                           fsr0l	equ	0xFE9
  5906                           wreg	equ	0xFE8
  5907                           indf1	equ	0xFE7
  5908                           postinc1	equ	0xFE6
  5909                           fsr1h	equ	0xFE2
  5910                           fsr1l	equ	0xFE1
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           postdec2	equ	0xFDD
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function _APP_ISR1 *****************
  5919 ;; Defined at:
  5920 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         0       0       0       0       0       0       0
  5935 ;;      Locals:         0       0       0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0
  5937 ;;      Totals:         0       0       0       0       0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    1
  5941 ;; This function calls:
  5942 ;;		_SensorOneNotify
  5943 ;; This function is called by:
  5944 ;;		_ISR
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text42
  5949  001506                     __ptext42:
  5950                           	opt stack 0
  5951  001506                     _APP_ISR1:
  5952                           	opt stack 22
  5953                           
  5954                           ;AppInterrupts.c: 10: SensorOneNotify();
  5955                           
  5956                           ;incstack = 0
  5957  001506  EC48  F00A         	call	_SensorOneNotify	;wreg free
  5958  00150A  0012               	return		;funcret
  5959  00150C                     __end_of_APP_ISR1:
  5960                           	opt stack 0
  5961                           tosu	equ	0xFFF
  5962                           tosh	equ	0xFFE
  5963                           tosl	equ	0xFFD
  5964                           pclatu	equ	0xFFB
  5965                           pclath	equ	0xFFA
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon2	equ	0xFF1
  5974                           intcon3	equ	0xFF0
  5975                           postinc0	equ	0xFEE
  5976                           fsr0h	equ	0xFEA
  5977                           fsr0l	equ	0xFE9
  5978                           wreg	equ	0xFE8
  5979                           indf1	equ	0xFE7
  5980                           postinc1	equ	0xFE6
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _SensorOneNotify *****************
  5991 ;; Defined at:
  5992 ;;		line 29 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6006 ;;      Params:         0       0       0       0       0       0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0
  6009 ;;      Totals:         0       0       0       0       0       0       0
  6010 ;;Total ram usage:        0 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_APP_ISR1
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text43
  6020  001490                     __ptext43:
  6021                           	opt stack 0
  6022  001490                     _SensorOneNotify:
  6023                           	opt stack 22
  6024                           
  6025                           ;SpeedCalc.c: 31: if( (unsigned char)1 == NotifyFlag )
  6026                           
  6027                           ;incstack = 0
  6028  001490  042B               	decf	_NotifyFlag,w,c	;volatile
  6029  001492  A4D8               	btfss	status,2,c
  6030  001494  D003               	goto	i2l1487
  6031                           
  6032                           ;SpeedCalc.c: 32: {
  6033                           ;SpeedCalc.c: 33: NotifyFlag = (unsigned char)0;
  6034  001496  0E00               	movlw	0
  6035  001498  6E2B               	movwf	_NotifyFlag,c	;volatile
  6036                           
  6037                           ;SpeedCalc.c: 34: }
  6038  00149A  0012               	return	
  6039  00149C                     i2l1487:
  6040                           
  6041                           ;SpeedCalc.c: 35: else
  6042                           ;SpeedCalc.c: 36: {
  6043                           ;SpeedCalc.c: 37: if(LapCounter != (unsigned char)0)
  6044  00149C  502A               	movf	_LapCounter,w,c	;volatile
  6045  00149E  B4D8               	btfsc	status,2,c
  6046  0014A0  0012               	return	
  6047                           
  6048                           ;SpeedCalc.c: 38: {
  6049                           ;SpeedCalc.c: 39: LapCounter--;
  6050  0014A2  062A               	decf	_LapCounter,f,c	;volatile
  6051  0014A4  0012               	return	
  6052  0014A6                     __end_of_SensorOneNotify:
  6053                           	opt stack 0
  6054                           tosu	equ	0xFFF
  6055                           tosh	equ	0xFFE
  6056                           tosl	equ	0xFFD
  6057                           pclatu	equ	0xFFB
  6058                           pclath	equ	0xFFA
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           intcon2	equ	0xFF1
  6067                           intcon3	equ	0xFF0
  6068                           postinc0	equ	0xFEE
  6069                           fsr0h	equ	0xFEA
  6070                           fsr0l	equ	0xFE9
  6071                           wreg	equ	0xFE8
  6072                           indf1	equ	0xFE7
  6073                           postinc1	equ	0xFE6
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           fsr2h	equ	0xFDA
  6080                           fsr2l	equ	0xFD9
  6081                           status	equ	0xFD8
  6082                           tosu	equ	0xFFF
  6083                           tosh	equ	0xFFE
  6084                           tosl	equ	0xFFD
  6085                           pclatu	equ	0xFFB
  6086                           pclath	equ	0xFFA
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           intcon	equ	0xFF2
  6094                           intcon2	equ	0xFF1
  6095                           intcon3	equ	0xFF0
  6096                           postinc0	equ	0xFEE
  6097                           fsr0h	equ	0xFEA
  6098                           fsr0l	equ	0xFE9
  6099                           wreg	equ	0xFE8
  6100                           indf1	equ	0xFE7
  6101                           postinc1	equ	0xFE6
  6102                           fsr1h	equ	0xFE2
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111                           	psect	text44
  6112  000000                     __ptext44:
  6113                           	opt stack 0
  6114                           tosu	equ	0xFFF
  6115                           tosh	equ	0xFFE
  6116                           tosl	equ	0xFFD
  6117                           pclatu	equ	0xFFB
  6118                           pclath	equ	0xFFA
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           intcon	equ	0xFF2
  6126                           intcon2	equ	0xFF1
  6127                           intcon3	equ	0xFF0
  6128                           postinc0	equ	0xFEE
  6129                           fsr0h	equ	0xFEA
  6130                           fsr0l	equ	0xFE9
  6131                           wreg	equ	0xFE8
  6132                           indf1	equ	0xFE7
  6133                           postinc1	equ	0xFE6
  6134                           fsr1h	equ	0xFE2
  6135                           fsr1l	equ	0xFE1
  6136                           indf2	equ	0xFDF
  6137                           postinc2	equ	0xFDE
  6138                           postdec2	equ	0xFDD
  6139                           fsr2h	equ	0xFDA
  6140                           fsr2l	equ	0xFD9
  6141                           status	equ	0xFD8
  6142                           
  6143                           	psect	rparam
  6144  0000                     tosu	equ	0xFFF
  6145                           tosh	equ	0xFFE
  6146                           tosl	equ	0xFFD
  6147                           pclatu	equ	0xFFB
  6148                           pclath	equ	0xFFA
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           intcon2	equ	0xFF1
  6157                           intcon3	equ	0xFF0
  6158                           postinc0	equ	0xFEE
  6159                           fsr0h	equ	0xFEA
  6160                           fsr0l	equ	0xFE9
  6161                           wreg	equ	0xFE8
  6162                           indf1	equ	0xFE7
  6163                           postinc1	equ	0xFE6
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173                           	psect	temp
  6174  00006C                     btemp:
  6175                           	opt stack 0
  6176  00006C                     	ds	1
  6177  0000                     int$flags	set	btemp
  6178                           tosu	equ	0xFFF
  6179                           tosh	equ	0xFFE
  6180                           tosl	equ	0xFFD
  6181                           pclatu	equ	0xFFB
  6182                           pclath	equ	0xFFA
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           intcon	equ	0xFF2
  6190                           intcon2	equ	0xFF1
  6191                           intcon3	equ	0xFF0
  6192                           postinc0	equ	0xFEE
  6193                           fsr0h	equ	0xFEA
  6194                           fsr0l	equ	0xFE9
  6195                           wreg	equ	0xFE8
  6196                           indf1	equ	0xFE7
  6197                           postinc1	equ	0xFE6
  6198                           fsr1h	equ	0xFE2
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         68
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     46     107
    BANK0           128     14      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    HWIeeprom_Read@Data	PTR unsigned char  size(2) Largest target is 2
		 -> APP_MANAGE@AvgSpeedKph(BANK0[2]), 

    S274$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 6
		 -> KeyInternalData(COMRAM[6]), 

    Eeprom_Read_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> APP_MANAGE@AvgSpeedKph(BANK0[2]), 

    Eeprom_Write_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> APP_MANAGE@TravelledDistance(BANK0[2]), 


Critical Paths under _main in COMRAM

    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageDrivers->_MangeKeys
    _MangeKeys->_HWI_DIGI_READ
    _EepromManage->_HWIeeprom_Write
    _APP_MANAGE->_GetAvgSpeed
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _Eeprom_Read_Block->_HWIeeprom_Read
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    _Start_App->_RunScheduler
    _ManageSpeedCalc->_SpeedCalcManage
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9320
                          _Start_App
 ---------------------------------------------------------------------------------
 (1) _Start_App                                            0     0      0    9320
                     _APP_INITIALIZE
                      _BCDInitialize
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (2) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunScheduler                                         2     2      0    8405
                                             12 BANK0      2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                      _ManageDrivers *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (3) _ManageSpeedCalc                                      0     0      0    1857
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (4) _SpeedCalcManage                                      4     4      0    1857
                                             44 COMRAM     2     2      0
                                              0 BANK0      2     2      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ManageDrivers                                        1     1      0     838
                                             26 COMRAM     1     1      0
                       _EepromManage
                          _MangeKeys
 ---------------------------------------------------------------------------------
 (4) _MangeKeys                                            5     5      0     615
                                             21 COMRAM     5     5      0
                      _HWI_DIGI_READ
 ---------------------------------------------------------------------------------
 (5) _HWI_DIGI_READ                                        2     2      0      30
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _EepromManage                                         1     1      0     155
                                             22 COMRAM     1     1      0
                    _HWIeeprom_Write
 ---------------------------------------------------------------------------------
 (5) _HWIeeprom_Write                                      3     2      1     132
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ManageApplication                                    0     0      0    5312
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (4) _APP_MANAGE                                           5     5      0    5312
                                              7 BANK0      5     5      0
                      _BCDsendNumber
                         _BlinkDigit
                  _Eeprom_Read_Block
                 _Eeprom_Write_Block
                        _GetAvgSpeed
                        _GetDistance
                       _GetKeyStatus
                   _SetCircumfirunce
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _SetCircumfirunce                                     2     0      2     108
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _GetKeyStatus                                         2     2      0      67
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _GetAvgSpeed                                          9     7      2    1061
                                             44 COMRAM     2     0      2
                                              0 BANK0      7     7      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     404
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Write_Block                                   6     3      3     390
                                             19 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Read_Block                                    6     3      3     556
                                             23 COMRAM     6     3      3
                     _HWIeeprom_Read
 ---------------------------------------------------------------------------------
 (6) _HWIeeprom_Read                                       4     2      2     176
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _BlinkDigit                                           2     1      1     216
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _BCDsendNumber                                       12     9      3    1973
                                             26 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     694
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     549
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _DisplayAlphaNumeric                                  0     0      0     398
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (4) _BCDManage7segment                                    4     4      0     398
                                             21 COMRAM     4     4      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (5) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateTask                                           4     0      4     900
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _BCDInitialize                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_INITIALIZE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0      91
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (8) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (9) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (9) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (10) _ReloadHWtimer                                       5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (9) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Start_App
     _APP_INITIALIZE
     _BCDInitialize
     _CreateTask
     _HWI_DIGITAL_INITIALIZE
     _HWI_INTERRUPTS_INTITALIZE
     _RunScheduler
       _DisplayAlphaNumeric *
         _BCDManage7segment
           _HWI_4Digit_WRITE
           _HWI_8Digit_WRITE
       _ManageApplication *
         _APP_MANAGE
           _BCDsendNumber
             ___lwdiv
             ___wmul
           _BlinkDigit
           _Eeprom_Read_Block
             _HWIeeprom_Read
           _Eeprom_Write_Block
           _GetAvgSpeed
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _GetDistance
           _GetKeyStatus
           _SetCircumfirunce
           ___wmul
       _ManageDrivers *
         _EepromManage
           _HWIeeprom_Write
         _MangeKeys
           _HWI_DIGI_READ
       _ManageSpeedCalc *
         _SpeedCalcManage
           ___lldiv
             ___lmul (ARG)
           ___lwdiv
           ___wmul
     _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      18       5       18.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2E      6B       1       84.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83      15        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Jun 25 08:11:31 2017

                                  l59 0B7E                   __end_of_GetAvgSpeed 0DAA  
                 ___wmul@multiplicand 0050                           __CFG_BORV$3 000000  
                   GetAvgSpeed@bIsKph 0080                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                   __end_of_GetDistance 14B8  
                         __CFG_OSC$XT 000000                           __CFG_LVP$ON 000000  
                                 l355 1438                                   l357 143E  
                                 l358 1444                                   l374 1308  
                                 l375 132E                                   l376 1310  
                                 l805 0FD6                                   l858 119E  
                        __CFG_CPB$OFF 000000                                   u401 06D2  
                                 u431 0808           Eeprom_Write_Block@LoopIndex 0053  
                        __CFG_CPD$OFF 000000                                   _ISR 0008  
         HWIeeprom_Write@WriteSuccess 0050                BCDManage7segment@Index 0052  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                                  ?_ISR 003B  
                        __CFG_WDT$OFF 000000                                  l2001 1470  
                                l2113 1406                                  l2211 113A  
                                l2131 10D0                                  l1403 0726  
                                l2221 12A8                                  l2141 0F88  
                                l1405 0748                                  l2207 1114  
                                l2215 1150                                  l2143 0F94  
                                l2127 10BC                                  l1431 09CC  
                                l1423 0918                                  l2233 0B66  
                                l2153 0FC8                                  l2145 0F98  
                                l1417 085C                                  l2163 116C  
                                l2251 0C0A                                  l2227 12C8  
                                l2307 0B32                                  l1435 0A20  
                                l1427 096C                                  l1419 089A  
                                l2331 0EDA                                  l2165 1174  
                                l2253 0C22                                  l2237 0B6E  
                                l1293 1318                                  l2341 0F46  
                                l2333 0EDE                                  l2175 1194  
                                l2167 1178                                  l2247 0BD8  
                                l1439 0A36                                  l2343 0F62  
                                l2257 0C26                                  l2193 0D8E  
                                l1297 131E                                  l1393 0652  
                                l2337 0EE6                                  l2187 0D2C  
                                l2197 0DA0                                  l1831 12D6  
                                l2295 0AFC                                  l1833 12E0  
                                l1841 144A                                  l1835 12EA  
                                l1837 12F4                                  l1943 0EB6  
                                l1935 0E78                                  l1927 0E60  
                                l1929 0E64                                  l1939 0EAC  
                                l1867 1358                                  l1957 11C0  
                                l1991 145E                                  l1995 1466  
                                u1014 0E8E                                  u1015 0E8A  
                                _LATC 000F8B                                  _LATD 000F8C  
                                u1538 0F32                                  _TMR1 000FCE  
                                _main 14D8                  __end_of_GetKeyStatus 138E  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 006C                                  prodh 000FF4  
                                prodl 000FF3                     _BCDManage7segment 0E42  
                                start 000E                         __CFG_IESO$OFF 000000  
                          _BlinkDigit 14B8                            _BlinkIndex 0033  
                  ?_BCDManage7segment 003B              __size_of_SpeedCalcManage 0098  
                        ___param_bank 000000                      __end_of_APP_ISR1 150C  
                    __end_of_APP_ISR2 1506                      __end_of_APP_ISR3 1500  
                               ??_ISR 0040                       ??_ManageDrivers 0055  
                 BCDsendNumber@Buffer 005E             _SpeedCalcNotifyInitialize 150E  
                 BCDsendNumber@Number 0055                  APP_MANAGE@blinkIndex 0025  
                 __size_of_APP_MANAGE 010E                   ??_BCDManage7segment 0050  
                 BCDsendNumber@Output 005C                                 ?_main 003B  
                          _CreateTask 1054                                 _EEADR 000FA9  
                HWI_DIGI_READ@HWIread 004F                       __end_of___lldiv 0FE8  
                          _LapCounter 002A                                 _T0CON 000FD5  
                               _T1CON 000FCD                                 _T3CON 000FB1  
                     __end_of___lwdiv 11A8                                 i2l441 0CD0  
                               i2l447 1270                                 i2l448 1296  
                               _TMR0L 000FD6                                 _TMR3H 000FB3  
                               _TMR3L 000FB2                     _ManageApplication 14EE  
                               _PORTC 000F82                                 _PORTD 000F83  
                               _TRISC 000F94                                 _TRISD 000F95  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                 ___lmul@multiplicand 0052                         __CFG_WRT3$OFF 000000  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
                      __CFG_EBTR1$OFF 000000                        __CFG_EBTR2$OFF 000000  
                      __CFG_EBTR3$OFF 000000                          _WriteRequest 002F  
                  ?_ManageApplication 003B                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                      __CFG_EBTRB$OFF 000000                    _Eeprom_Write_Block 1102  
             CreateTask@MangeFunction 004E             BCDsendNumber@DecimalPlace 0057  
                               pclath 000FFA                                 tablat 000FF5  
                 ??_ManageApplication 0069                     ?_HWI_8Digit_WRITE 004E  
           __end_of_BCDManage7segment 0EDA                  __end_of_EepromManage 11E8  
                               status 000FD8                 __end_of_BCDsendNumber 0C50  
                 ?_Eeprom_Write_Block 004E       __size_of_HWI_DIGITAL_INITIALIZE 001A  
                  ??_HWI_8Digit_WRITE 004F                           _GetAvgSpeed 0D0C  
                      __CFG_MCLRE$OFF 000000                       __initialization 11E8  
                         _GetDistance 14A6                          __end_of_main 14E0  
             __size_of_HWIeeprom_Read 0028             __end_of_ManageApplication 14F4  
                              ??_main 0069                  ??_Eeprom_Write_Block 0051  
                      MangeKeys@KeyID 0054                         __activetblptr 000002  
                              _EEDATA 000FA8                                _EECON2 000FA7  
           HWIeeprom_Read@ReadSuccess 0051                    __size_of_MangeKeys 042E  
                              _INT0IF 007F91                                _INT1IF 007F80  
                              i2l2015 13B2                                i2l2081 0CB8  
                              i2l2073 0CA6                                i2l2067 0C98  
                              i2l2089 0CC6                                i2l1487 149C  
                              i2l1591 13C0                                i2l1595 13C8  
         BCDManage7segment@DigitIndex 003A                                i2l1981 1282  
                              _INTCON 000FF2              __size_of_SensorOneNotify 0016  
            __size_of_ManageSpeedCalc 0006                  HWI_8Digit_WRITE@port 004F  
                              _TMR0IE 007F95                                _TMR0IF 007F92  
                              _TMR1IE 007CE8                                _TMR1IF 007CF0  
                              _TMR2IF 007CF1                                _TMR3IE 007D01  
                              _TMR3IF 007D09                __size_of_BCDInitialize 0008  
                     BlinkDigit@Index 004F                   _DisplayAlphaNumeric 14E8  
                         ?_BlinkDigit 004E                        __CFG_XINST$OFF 000000  
                          _NotifyFlag 002B                                ___lmul 10AC  
                              ___wmul 140E                        __CFG_STVREN$ON 000000  
                           ??___lldiv 0062                             ??___lwdiv 0052  
                        _HWtimerCount 001D                EepromManage@WriteIndex 002C  
                              clear_0 1206                                clear_1 1212  
                   ??_SpeedCalcManage 0067                           ?_CreateTask 004E  
              _HWI_DIGITAL_INITIALIZE 1476                      CreateTask@Period 0051  
                    CreateTask@TaskId 0050                          __pdataCOMRAM 0069  
              __size_of_HWI_DIGI_READ 002E                  ?_DisplayAlphaNumeric 003B  
                        __mediumconst 0000              __size_of_SensorTwoNotify 002E  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                    __size_of_Start_App 006C  
               __size_of_GetKeyStatus 002E                          ??_APP_MANAGE 0069  
                           ?_APP_ISR1 003B                             ?_APP_ISR2 003B  
                           ?_APP_ISR3 003B                __size_of_SchedulerTick 002A  
            ReloadHWtimer@ElapsedTime 003E            __size_of_BCDManage7segment 0098  
                          __accesstop 0080               __end_of__initialization 1218  
                     __CFG_PBADEN$OFF 000000                     MangeKeys@KeyState 0052  
                   ?_SetCircumfirunce 004E                         ___rparam_used 000001  
                  ??_SetCircumfirunce 0050                        _TimerOVFLcount 0029  
                      __pcstackCOMRAM 003B                     BCDsendNumber@Link 005A  
           GetAvgSpeed@AvgSpeedKphMph 0085                     __end_of_MangeKeys 0A4C  
           __size_of_HWI_4Digit_WRITE 0032            __size_of_ManageApplication 0006  
                  __end_of_APP_MANAGE 0B5A                          _GetKeyStatus 1360  
                       _BCDInitialize 14E0                 ??_DisplayAlphaNumeric 0054  
SpeedCalcManage@HundredMeterReference 0080              __size_of_HWtimerCallback 000A  
  __size_of_SpeedCalcNotifyInitialize 0002              __size_of_HWIeeprom_Write 002E  
                 __size_of_BlinkDigit 000C                 __size_of_EepromManage 0040  
              __size_of_ReloadHWtimer 003C                            ??_APP_ISR1 003B  
                          ??_APP_ISR2 0040                            ??_APP_ISR3 003B  
                          __pbssBANK0 008E         BCDManage7segment@BlinkCounter 0030  
                        _CircumFactor 0069                            __pnvCOMRAM 006B  
                 __size_of_CreateTask 0058                         _HWI_DIGI_READ 1304  
                   ??_SensorOneNotify 003B                     ??_ManageSpeedCalc 0069  
             __size_of_APP_INITIALIZE 0002                               ?___lmul 004E  
              SetCircumfirunce@Circum 004E                     __end_of_Start_App 1054  
                             ?___wmul 004E                         _SchedulerTick 13BC  
                      _HWIeeprom_Read 13E6                        ___lmul@product 0056  
  __size_of_HWI_INTERRUPTS_INTITALIZE 003E            ?_HWI_INTERRUPTS_INTITALIZE 003B  
                        _EepromManage 11A8                        ?_BCDInitialize 003B  
                             _INTCON3 000FF0                 HWI_8Digit_WRITE@value 004E  
      Eeprom_Write_Block@WriteGranted 0051                     ??_SensorTwoNotify 0040  
                    HWI_DIGI_READ@pin 004E                        ?_HWI_DIGI_READ 003B  
                             __Hparam 0000                          ?_GetAvgSpeed 0067  
                           _BCDNumber 0011                               __Lparam 0000  
                        ?_GetDistance 004E                __end_of_HWIeeprom_Read 140E  
                     __size_of___lmul 0056                         _ReloadHWtimer 1264  
                      ?_SchedulerTick 003B                               ___lldiv 0F66  
                     __size_of___wmul 0026                               ___lwdiv 1156  
                        __psmallconst 0600             __size_of_HWI_8Digit_WRITE 0026  
               __end_of_ManageDrivers 1476                               __pcinit 11E8  
                   _Eeprom_Read_Block 12A0                               __ramtop 0600  
                             __ptext0 14D8                               __ptext1 0FE8  
                             __ptext2 150E                               __ptext3 0EDA  
                             __ptext4 145A                               __ptext5 14E8  
                             __ptext6 14EE                               __ptext7 14F4  
                             __ptext8 0DAA                               __ptext9 061E  
   __end_of_HWI_INTERRUPTS_INTITALIZE 1264                          __size_of_ISR 0D04  
                  ?_Eeprom_Read_Block 0052                         ?_RunScheduler 003B  
              SchedulerTick@TaskIndex 003B                   ??_Eeprom_Read_Block 0055  
                      __pintcode_body 0C50                  end_of_initialization 1218  
                   ??_HWtimerCallback 003B                         __Lmediumconst 0000  
                   ??_HWIeeprom_Write 004F                               int_func 0C50  
                     _SevenSegmentMAP 0611                       ___lldiv@divisor 005E  
                     _SpeedCalcManage 0DAA                          ??_BlinkDigit 004F  
                     ___lldiv@counter 0066                        ?_ReloadHWtimer 003B  
                             postdec2 000FDD                       ?_HWIeeprom_Read 004E  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE             __end_of_Eeprom_Read_Block 12D2  
             ?_HWI_DIGITAL_INITIALIZE 003B           APP_MANAGE@TravelledDistance 0089  
                    _HWI_4Digit_WRITE 12D2                       ??_BCDInitialize 004E  
                        ??_CreateTask 0052                             _PORTBbits 000F81  
         __size_of_Eeprom_Write_Block 0054                __size_of_BCDsendNumber 00F6  
                      ??_RunScheduler 008C                             _TRISBbits 000F93  
                BCDManage7segment@BCD 0053                    __end_of_BlinkDigit 14C4  
                     ??_HWI_DIGI_READ 004E                             _DataArray 008E  
                   __size_of_APP_ISR1 0006                     __size_of_APP_ISR2 0006  
                   __size_of_APP_ISR3 0006                    __end_of_CreateTask 10AC  
         BCDInitialize@bIsCommonAnode 004E                             _BlinkFlag 0031  
                      _APP_INITIALIZE 1510                        _DistTravelCntr 0019  
                     ??_SchedulerTick 003B                         _BlinkDuration 0032  
                   _LapTimeTenthMilli 001F        __end_of_HWI_DIGITAL_INITIALIZE 1490  
                      __end_of___lmul 1102                        __end_of___wmul 1434  
                       __pidataCOMRAM 150C                             _ArrayTask 0001  
           __size_of_SetCircumfirunce 000A                             _MangeKeys 061E  
                 start_initialization 11E8                           __end_of_ISR 0D0C  
                 HWIeeprom_Write@Data 004E                       _SensorOneNotify 1490  
             __end_of_SevenSegmentMAP 061C                       _ManageSpeedCalc 14F4  
             __end_of_SpeedCalcManage 0E42                   APP_MANAGE@keystatus 008B  
              __end_of_APP_INITIALIZE 1512                         _BCDsendNumber 0B5A  
                     ??_ReloadHWtimer 003D            Eeprom_Read_Block@BlockSize 0054  
            Eeprom_Read_Block@DataPtr 0052                              ??___lmul 0056  
                            ??___wmul 0052                  __size_of_GetAvgSpeed 009E  
          __size_of_Eeprom_Read_Block 0032           __end_of_DisplayAlphaNumeric 14EE  
                    __CFG_LPT1OSC$OFF 000000                  __size_of_GetDistance 0012  
                    _HWI_8Digit_WRITE 1434                HWIeeprom_Write@address 004F  
                           _Start_App 0FE8                    BlinkDigit@duration 004E  
         ??_HWI_INTERRUPTS_INTITALIZE 004E                            ?_MangeKeys 003B  
                     _SensorTwoNotify 138E                           __pbssCOMRAM 0001  
              BCDsendNumber@LoopIndex 0060                         __pcstackBANK0 0080  
            Eeprom_Read_Block@address 0055                 APP_MANAGE@AvgSpeedKph 0087  
          Eeprom_Read_Block@LoopIndex 0057                 RunScheduler@TaskIndex 0027  
                      ?_BCDsendNumber 0055                       ?_APP_INITIALIZE 003B  
                    ___lwdiv@dividend 004E                  __end_of_RunScheduler 0F66  
                   __CFG_CCP2MX$PORTC 000000                APP_MANAGE@bIsBlinkMode 0023  
                           __pintcode 0008                              ?___lldiv 005A  
                            ?___lwdiv 004E                            ?_Start_App 003B  
                    _HwTimerOVFLcount 0028                          _bIsAnodeUsed 006B  
                     _HWtimerCallback 14CE                           __smallconst 0600  
             __end_of_SensorOneNotify 14A6               __end_of_ManageSpeedCalc 14FA  
                     _HWIeeprom_Write 1332                 HWI_4Digit_WRITE@value 004E  
                    ___lwdiv@quotient 0053              __end_of_HWI_4Digit_WRITE 1304  
                            _APP_ISR1 1506                              _APP_ISR2 1500  
                            _APP_ISR3 14FA            ?_SpeedCalcNotifyInitialize 003B  
                  HWIeeprom_Read@Data 004E                      ?_SpeedCalcManage 003B  
           _HWI_INTERRUPTS_INTITALIZE 1226                  ReloadHWtimer@TimerId 003D  
                      ___wmul@product 0052                      ??_HWIeeprom_Read 0050  
        Eeprom_Read_Block@ReadSuccess 0056                      __CFG_WDTPS$32768 000000  
               HWIeeprom_Read@address 0050               __end_of_SensorTwoNotify 13BC  
                    _SetCircumfirunce 14C4                     ___wmul@multiplier 004E  
                         ??_MangeKeys 0050                              _DataSize 002D  
                   ___lmul@multiplier 004E                           _INTCON2bits 000FF1  
                     ??_BCDsendNumber 0058     __end_of_SpeedCalcNotifyInitialize 1510  
              __size_of_ManageDrivers 001C                            _EECON1bits 000FA6  
                      _KeyArrayConfig 0601                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
             __end_of_HWtimerCallback 14D8                     GetKeyStatus@KeyID 004F  
                    __size_of___lldiv 0082            __end_of_Eeprom_Write_Block 1156  
             __end_of_HWIeeprom_Write 1360                      __size_of___lwdiv 0052  
                         ??_Start_App 0069                 __end_of_BCDInitialize 14E8  
                       ?_GetKeyStatus 003B                      ?_SensorOneNotify 003B  
                          _EEPROMaddr 002E                      ?_ManageSpeedCalc 003B  
                     ___lwdiv@divisor 0050                       ___lwdiv@counter 0052  
                            __ptext10 1304                              __ptext11 11A8  
                            __ptext20 1102                              __ptext12 1332  
                            __ptext21 12A0                              __ptext13 0A4C  
                            __ptext30 1226                              __ptext22 13E6  
                            __ptext14 14C4                              __ptext31 1476  
                            __ptext23 14B8                              __ptext15 1360  
                            __ptext40 138E                              __ptext32 1054  
                            __ptext24 0B5A                              __ptext16 14A6  
                            __ptext41 1264                              __ptext33 14E0  
                            __ptext25 140E                              __ptext17 0D0C  
                            __ptext42 1506                              __ptext34 1510  
                            __ptext26 1156                              __ptext18 10AC  
                            __ptext43 1490                              __ptext27 0E42  
                            __ptext19 0F66                              __ptext44 0000  
                            __ptext36 13BC                              __ptext28 1434  
                            __ptext37 14FA                              __ptext29 12D2  
                            __ptext38 14CE                              __ptext39 1500  
           Eeprom_Write_Block@DataPtr 004E                            _APP_MANAGE 0A4C  
                     _KeyInternalData 0034              __end_of_HWI_8Digit_WRITE 145A  
                  _LapDistanceCounter 0021                 __size_of_RunScheduler 008C  
                HWI_4Digit_WRITE@port 004F                         __size_of_main 0008  
              __end_of_KeyArrayConfig 0611                   MangeKeys@HWIreading 0053  
               __end_of_HWI_DIGI_READ 1332              EepromManage@WriteSuccess 0051  
                            int$flags 006C             Eeprom_Write_Block@address 0052  
               __end_of_SchedulerTick 13E6                      ?_SensorTwoNotify 003B  
             GetAvgSpeed@KphMphFactor 0081                        ??_GetKeyStatus 004E  
                       ?_EepromManage 003B                         _ManageDrivers 145A  
                          _INTCONbits 000FF2                          _RunScheduler 0EDA  
                    ??_APP_INITIALIZE 004E                              intlevel2 0000  
                    ___lldiv@dividend 005A                         ??_GetAvgSpeed 0069  
                       ??_GetDistance 0052                 __end_of_ReloadHWtimer 12A0  
                    ?_HWtimerCallback 003B                        ??_EepromManage 0051  
                      ?_ManageDrivers 003B                      ?_HWIeeprom_Write 004E  
                    ___lldiv@quotient 0062          __size_of_DisplayAlphaNumeric 0006  
         Eeprom_Write_Block@BlockSize 0050                           ?_APP_MANAGE 003B  
         ??_SpeedCalcNotifyInitialize 004E                     ?_HWI_4Digit_WRITE 004E  
            __end_of_SetCircumfirunce 14CE              ??_HWI_DIGITAL_INITIALIZE 004E  
                  ??_HWI_4Digit_WRITE 004F                ManageDrivers@LoopIndex 0055  
               GetKeyStatus@KeyStatus 004E  
