

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Aug 07 22:44:53 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           ; Version 1.41
    77                           ; Generated 25/01/2017 GMT
    78                           ; 
    79                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F4520 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  001D76                     __pidataCOMRAM:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _CircumFactor
   116  001D76  00C8               	dw	200
   117                           
   118                           	psect	smallconst
   119  000600                     __psmallconst:
   120                           	opt stack 0
   121  000600  00                 	db	0
   122  000601                     _Segment7ASCIItable:
   123                           	opt stack 0
   124  000601  EE                 	db	238
   125  000602  3E                 	db	62
   126  000603  9C                 	db	156
   127  000604  7A                 	db	122
   128  000605  9E                 	db	158
   129  000606  8E                 	db	142
   130  000607  F6                 	db	246
   131  000608  2E                 	db	46
   132  000609  0C                 	db	12
   133  00060A  78                 	db	120
   134  00060B  00                 	db	0
   135  00060C  00                 	db	0
   136  00060D  00                 	db	0
   137  00060E  00                 	db	0
   138  00060F  00                 	db	0
   139  000610  00                 	db	0
   140  000611  00                 	db	0
   141  000612  00                 	db	0
   142  000613  B6                 	db	182
   143  000614  00                 	db	0
   144  000615  00                 	db	0
   145  000616  7C                 	db	124
   146  000617  00                 	db	0
   147  000618  00                 	db	0
   148  000619  00                 	db	0
   149  00061A  00                 	db	0
   150  00061B                     __end_of_Segment7ASCIItable:
   151                           	opt stack 0
   152  00061B                     _KeyArrayConfig:
   153                           	opt stack 0
   154  00061B  0F                 	db	15
   155  00061C  00                 	db	0
   156  00061D  0006               	dw	6
   157  00061F  0006               	dw	6
   158  000621  0064               	dw	100
   159  000623  10                 	db	16
   160  000624  00                 	db	0
   161  000625  0006               	dw	6
   162  000627  0006               	dw	6
   163  000629  0064               	dw	100
   164  00062B                     __end_of_KeyArrayConfig:
   165                           	opt stack 0
   166  00062B                     _SevenSegmentMAP:
   167                           	opt stack 0
   168  00062B  FC                 	db	252
   169  00062C  60                 	db	96
   170  00062D  DA                 	db	218
   171  00062E  F2                 	db	242
   172  00062F  66                 	db	102
   173  000630  B6                 	db	182
   174  000631  BE                 	db	190
   175  000632  E0                 	db	224
   176  000633  FE                 	db	254
   177  000634  F6                 	db	246
   178  000635  01                 	db	1
   179  000636                     __end_of_SevenSegmentMAP:
   180                           	opt stack 0
   181  0000                     _TMR1	set	4046
   182  0000                     _TMR3H	set	4019
   183  0000                     _TMR3L	set	4018
   184  0000                     _TMR0L	set	4054
   185  0000                     _INTCON2bits	set	4081
   186  0000                     _T3CON	set	4017
   187  0000                     _T1CON	set	4045
   188  0000                     _T0CON	set	4053
   189  0000                     _INTCON3	set	4080
   190  0000                     _INTCON	set	4082
   191  0000                     _PORTBbits	set	3969
   192  0000                     _TRISBbits	set	3987
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISD	set	3989
   195  0000                     _LATD	set	3980
   196  0000                     _PORTD	set	3971
   197  0000                     _LATC	set	3979
   198  0000                     _PORTC	set	3970
   199  0000                     _EECON2	set	4007
   200  0000                     _INTCONbits	set	4082
   201  0000                     _EEDATA	set	4008
   202  0000                     _EEADR	set	4009
   203  0000                     _EECON1bits	set	4006
   204  0000                     _INT1IF	set	32640
   205  0000                     _INT0IF	set	32657
   206  0000                     _TMR2IF	set	31985
   207  0000                     _TMR3IE	set	32001
   208  0000                     _TMR3IF	set	32009
   209  0000                     _TMR1IE	set	31976
   210  0000                     _TMR1IF	set	31984
   211  0000                     _TMR0IE	set	32661
   212  0000                     _TMR0IF	set	32658
   213                           
   214                           ; #config settings
   215  000636  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  0019D4                     __pcinit:
   219                           	opt stack 0
   220  0019D4                     start_initialization:
   221                           	opt stack 0
   222  0019D4                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to COMRAM (2 bytes)
   226                           ; load TBLPTR registers with __pidataCOMRAM
   227  0019D4  0E76               	movlw	low __pidataCOMRAM
   228  0019D6  6EF6               	movwf	tblptrl,c
   229  0019D8  0E1D               	movlw	high __pidataCOMRAM
   230  0019DA  6EF7               	movwf	tblptrh,c
   231  0019DC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   232  0019DE  6EF8               	movwf	tblptru,c
   233  0019E0  0009               	tblrd		*+	;fetch initializer
   234  0019E2  CFF5 F06A          	movff	tablat,__pdataCOMRAM
   235  0019E6  0009               	tblrd		*+	;fetch initializer
   236  0019E8  CFF5 F06B          	movff	tablat,__pdataCOMRAM+1
   237                           
   238                           ; Clear objects allocated to BANK0 (94 bytes)
   239  0019EC  EE00  F080         	lfsr	0,__pbssBANK0
   240  0019F0  0E5E               	movlw	94
   241  0019F2                     clear_0:
   242  0019F2  6AEE               	clrf	postinc0,c
   243  0019F4  06E8               	decf	wreg,f,c
   244  0019F6  E1FD               	bnz	clear_0
   245                           
   246                           ; Clear objects allocated to COMRAM (48 bytes)
   247  0019F8  EE00  F03A         	lfsr	0,__pbssCOMRAM
   248  0019FC  0E30               	movlw	48
   249  0019FE                     clear_1:
   250  0019FE  6AEE               	clrf	postinc0,c
   251  001A00  06E8               	decf	wreg,f,c
   252  001A02  E1FD               	bnz	clear_1
   253  001A04                     end_of_initialization:
   254                           	opt stack 0
   255  001A04                     __end_of__initialization:
   256                           	opt stack 0
   257  001A04  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   258  001A06  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   259  001A08  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  001A0A  6EF8               	movwf	tblptru,c
   261  001A0C  0100               	movlb	0
   262  001A0E  EF9D  F00E         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bssCOMRAM
   271  00003A                     __pbssCOMRAM:
   272                           	opt stack 0
   273  00003A                     _CalcMaxSpeed:
   274                           	opt stack 0
   275  00003A                     	ds	2
   276  00003C                     _HWtimerCount:
   277                           	opt stack 0
   278  00003C                     	ds	2
   279  00003E                     _LapTimeTenthMilli:
   280                           	opt stack 0
   281  00003E                     	ds	2
   282  000040                     _WriteFnCallback:
   283                           	opt stack 0
   284  000040                     	ds	2
   285  000042                     APP_HMImanage@DisplayState:
   286                           	opt stack 0
   287  000042                     	ds	1
   288  000043                     RunScheduler@TaskIndex:
   289                           	opt stack 0
   290  000043                     	ds	1
   291  000044                     _HwTimerOVFLcount:
   292                           	opt stack 0
   293  000044                     	ds	1
   294  000045                     _DistTravelCntrDisable:
   295                           	opt stack 0
   296  000045                     	ds	1
   297  000046                     _TimerOVFLcount:
   298                           	opt stack 0
   299  000046                     	ds	1
   300  000047                     _LapCounter:
   301                           	opt stack 0
   302  000047                     	ds	1
   303  000048                     _NotifyFlag:
   304                           	opt stack 0
   305  000048                     	ds	1
   306  000049                     EepromManage@WriteIndex:
   307                           	opt stack 0
   308  000049                     	ds	1
   309  00004A                     _DataSize:
   310                           	opt stack 0
   311  00004A                     	ds	1
   312  00004B                     _EEPROMaddr:
   313                           	opt stack 0
   314  00004B                     	ds	1
   315  00004C                     _WriteRequest:
   316                           	opt stack 0
   317  00004C                     	ds	1
   318  00004D                     BCDManage7segment@LineIndex:
   319                           	opt stack 0
   320  00004D                     	ds	1
   321  00004E                     BCDManage7segment@BlinkCounter:
   322                           	opt stack 0
   323  00004E                     	ds	1
   324  00004F                     BCDManage7segment@DigitIndex:
   325                           	opt stack 0
   326  00004F                     	ds	1
   327  000050                     _BlinkFlag:
   328                           	opt stack 0
   329  000050                     	ds	1
   330  000051                     _LineBlinkIndex:
   331                           	opt stack 0
   332  000051                     	ds	1
   333  000052                     _BlinkDuration:
   334                           	opt stack 0
   335  000052                     	ds	1
   336  000053                     _BlinkIndex:
   337                           	opt stack 0
   338  000053                     	ds	1
   339  000054                     _bIsAnodeUsed:
   340                           	opt stack 0
   341  000054                     	ds	1
   342  000055                     _APP_DATA:
   343                           	opt stack 0
   344  000055                     	ds	15
   345  000064                     _KeyInternalData:
   346                           	opt stack 0
   347  000064                     	ds	6
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	dataCOMRAM
   356  00006A                     __pdataCOMRAM:
   357                           	opt stack 0
   358  00006A                     _CircumFactor:
   359                           	opt stack 0
   360  00006A                     	ds	2
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368                           	psect	bssBANK0
   369  000080                     __pbssBANK0:
   370                           	opt stack 0
   371  000080                     _DataArray:
   372                           	opt stack 0
   373  000080                     	ds	50
   374  0000B2                     _ArrayTask:
   375                           	opt stack 0
   376  0000B2                     	ds	16
   377  0000C2                     _BCDAlpha:
   378                           	opt stack 0
   379  0000C2                     	ds	16
   380  0000D2                     _ElapsedTimeMinutes:
   381                           	opt stack 0
   382  0000D2                     	ds	4
   383  0000D6                     _DistTravelCntr:
   384                           	opt stack 0
   385  0000D6                     	ds	4
   386  0000DA                     _ElapsedTimePeriod:
   387                           	opt stack 0
   388  0000DA                     	ds	2
   389  0000DC                     _LapDistanceCounter:
   390                           	opt stack 0
   391  0000DC                     	ds	2
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackBANK0
   400  0000DE                     __pcstackBANK0:
   401                           	opt stack 0
   402  0000DE                     BCDsendNumber@Link:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x0
   406  0000DE                     	ds	4
   407  0000E2                     BCDsendNumber@Output:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0x4
   411  0000E2                     	ds	4
   412  0000E6                     BCDsendNumber@Buffer:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x8
   416  0000E6                     	ds	4
   417  0000EA                     BCDsendNumber@LoopIndex:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xC
   421  0000EA                     	ds	1
   422  0000EB                     APP_MANAGE@AvgSpeed:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0xD
   426  0000EB                     	ds	2
   427  0000ED                     APP_MANAGE@CurrentSpeed:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0xF
   431  0000ED                     	ds	2
   432  0000EF                     APP_MANAGE@StatusByte:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x11
   436  0000EF                     	ds	2
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           
   444                           	psect	cstackCOMRAM
   445  000001                     __pcstackCOMRAM:
   446                           	opt stack 0
   447  000001                     ?_ReloadHWtimer:
   448                           	opt stack 0
   449  000001                     SchedulerTick@TaskIndex:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x0
   453  000001                     	ds	2
   454  000003                     ReloadHWtimer@TimerId:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x2
   458  000003                     	ds	1
   459  000004                     ReloadHWtimer@ElapsedTime:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x3
   463  000004                     	ds	2
   464  000006                     ??_ISR:
   465                           
   466                           ; 1 bytes @ 0x5
   467  000006                     	ds	14
   468  000014                     ?_APP_CALC_AVGSPDmanage:
   469                           	opt stack 0
   470  000014                     ?_APP_CALC_MAXSPDmanage:
   471                           	opt stack 0
   472  000014                     ?___wmul:
   473                           	opt stack 0
   474  000014                     ?___lwdiv:
   475                           	opt stack 0
   476  000014                     ?_GetDistance:
   477                           	opt stack 0
   478  000014                     ?_APP_CALC_TIMEmanage:
   479                           	opt stack 0
   480  000014                     ?___lmul:
   481                           	opt stack 0
   482  000014                     BCDInitialize@bIsCommonAnode:
   483                           	opt stack 0
   484  000014                     BlinkDigit@Line:
   485                           	opt stack 0
   486  000014                     GetKeyStatus@KeyStatus:
   487                           	opt stack 0
   488  000014                     DisableDistanceCntr@bIsDisabled:
   489                           	opt stack 0
   490  000014                     HWIeeprom_Write@Data:
   491                           	opt stack 0
   492  000014                     HWI_4Digit_WRITE@value:
   493                           	opt stack 0
   494  000014                     HWI_8Digit_WRITE@value:
   495                           	opt stack 0
   496  000014                     HWI_DIGI_READ@pin:
   497                           	opt stack 0
   498  000014                     Eeprom_Write_Block@DataPtr:
   499                           	opt stack 0
   500  000014                     SetCircumfirunce@Circum:
   501                           	opt stack 0
   502  000014                     CreateTask@MangeFunction:
   503                           	opt stack 0
   504  000014                     HWIeeprom_Read@Data:
   505                           	opt stack 0
   506  000014                     APP_CALC_AVGSPDmanage@StatusByte:
   507                           	opt stack 0
   508  000014                     APP_CALC_MAXSPDmanage_Set@MaxSpeed:
   509                           	opt stack 0
   510  000014                     APP_CALC_MAXSPDmanage@CurrentSpeed:
   511                           	opt stack 0
   512  000014                     APP_CALC_TIMEmanage@StatusByte:
   513                           	opt stack 0
   514  000014                     APP_SLEEPmanage@StatusByte:
   515                           	opt stack 0
   516  000014                     ___wmul@multiplier:
   517                           	opt stack 0
   518  000014                     ___lwdiv@dividend:
   519                           	opt stack 0
   520  000014                     memcpy@d1:
   521                           	opt stack 0
   522  000014                     memset@p1:
   523                           	opt stack 0
   524  000014                     SetDistance@Distance:
   525                           	opt stack 0
   526  000014                     APP_CALC_TIMEsetTravelTime@TravelTime:
   527                           	opt stack 0
   528  000014                     ___lmul@multiplier:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x13
   532  000014                     	ds	1
   533  000015                     BlinkDigit@duration:
   534                           	opt stack 0
   535  000015                     GetKeyStatus@KeyID:
   536                           	opt stack 0
   537  000015                     HWIeeprom_Write@address:
   538                           	opt stack 0
   539  000015                     HWI_4Digit_WRITE@port:
   540                           	opt stack 0
   541  000015                     HWI_8Digit_WRITE@port:
   542                           	opt stack 0
   543  000015                     HWI_DIGI_READ@HWIread:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x14
   547  000015                     	ds	1
   548  000016                     ??_BCDManage7segment:
   549  000016                     BlinkDigit@Index:
   550                           	opt stack 0
   551  000016                     Eeprom_Write_Block@BlockSize:
   552                           	opt stack 0
   553  000016                     CreateTask@TaskId:
   554                           	opt stack 0
   555  000016                     HWIeeprom_Write@WriteSuccess:
   556                           	opt stack 0
   557  000016                     HWIeeprom_Read@address:
   558                           	opt stack 0
   559  000016                     ___wmul@multiplicand:
   560                           	opt stack 0
   561  000016                     ___lwdiv@divisor:
   562                           	opt stack 0
   563  000016                     memcpy@s1:
   564                           	opt stack 0
   565  000016                     memset@c:
   566                           	opt stack 0
   567  000016                     APP_CALC_AVGSPDmanage@TravelTime:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x15
   571  000016                     	ds	1
   572  000017                     EepromManage@WriteSuccess:
   573                           	opt stack 0
   574  000017                     CreateTask@Period:
   575                           	opt stack 0
   576  000017                     HWIeeprom_Read@ReadSuccess:
   577                           	opt stack 0
   578  000017                     Eeprom_Write_Block@ptrFnCallback:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	1
   583  000018                     BCDManage7segment@Index:
   584                           	opt stack 0
   585  000018                     MangeKeys@KeyState:
   586                           	opt stack 0
   587  000018                     ___lwdiv@counter:
   588                           	opt stack 0
   589  000018                     Eeprom_Read_Block@DataPtr:
   590                           	opt stack 0
   591  000018                     ___wmul@product:
   592                           	opt stack 0
   593  000018                     memcpy@n:
   594                           	opt stack 0
   595  000018                     memset@n:
   596                           	opt stack 0
   597  000018                     ___lmul@multiplicand:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x17
   601  000018                     	ds	1
   602  000019                     BCDManage7segment@BCD:
   603                           	opt stack 0
   604  000019                     Eeprom_Write_Block@address:
   605                           	opt stack 0
   606  000019                     MangeKeys@HWIreading:
   607                           	opt stack 0
   608  000019                     ___lwdiv@quotient:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x18
   612  000019                     	ds	1
   613  00001A                     Eeprom_Read_Block@BlockSize:
   614                           	opt stack 0
   615  00001A                     MangeKeys@KeyID:
   616                           	opt stack 0
   617  00001A                     Eeprom_Write_Block@LocDataPtr:
   618                           	opt stack 0
   619  00001A                     memcpy@d:
   620                           	opt stack 0
   621  00001A                     memset@p:
   622                           	opt stack 0
   623  00001A                     APP_CALC_AVGSPDmanage@Distance:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x19
   627  00001A                     	ds	1
   628  00001B                     ?_IncrementDecrementSingleDigit:
   629                           	opt stack 0
   630  00001B                     Eeprom_Read_Block@ReadGranted:
   631                           	opt stack 0
   632  00001B                     ManageDrivers@LoopIndex:
   633                           	opt stack 0
   634  00001B                     IncrementDecrementSingleDigit@Number:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	1
   639  00001C                     Eeprom_Write_Block@WriteGranted:
   640                           	opt stack 0
   641  00001C                     Eeprom_Read_Block@LocDataPtr:
   642                           	opt stack 0
   643  00001C                     APP_HMImanage@StatusByte:
   644                           	opt stack 0
   645  00001C                     memcpy@s:
   646                           	opt stack 0
   647  00001C                     ___lmul@product:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x1B
   651  00001C                     	ds	1
   652  00001D                     IncrementDecrementSingleDigit@Index:
   653                           	opt stack 0
   654  00001D                     Eeprom_Write_Block@LoopIndex:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x1C
   658  00001D                     	ds	1
   659  00001E                     ??_APP_HMImanage:
   660  00001E                     IncrementDecrementSingleDigit@bIsincrement:
   661                           	opt stack 0
   662  00001E                     Eeprom_Read_Block@address:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1D
   666  00001E                     	ds	1
   667  00001F                     ??_IncrementDecrementSingleDigit:
   668  00001F                     Eeprom_Read_Block@ReadSuccess:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x1E
   672  00001F                     	ds	1
   673  000020                     ?___lldiv:
   674                           	opt stack 0
   675  000020                     Eeprom_Read_Block@LoopIndex:
   676                           	opt stack 0
   677  000020                     APP_HMImanage@TempVar:
   678                           	opt stack 0
   679  000020                     IncrementDecrementSingleDigit@Link:
   680                           	opt stack 0
   681  000020                     ___lldiv@dividend:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x1F
   685  000020                     	ds	1
   686  000021                     APP_HMImanage@KeyStatusLeft:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x20
   690  000021                     	ds	1
   691  000022                     APP_HMImanage@KeyStatusRight:
   692                           	opt stack 0
   693  000022                     IncrementDecrementSingleDigit@NumberReturned:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x21
   697  000022                     	ds	2
   698  000024                     IncrementDecrementSingleDigit@PowIndex:
   699                           	opt stack 0
   700  000024                     ___lldiv@divisor:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x23
   704  000024                     	ds	1
   705  000025                     IncrementDecrementSingleDigit@unitPosition:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x24
   709  000025                     	ds	2
   710  000027                     IncrementDecrementSingleDigit@Output:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x26
   714  000027                     	ds	1
   715  000028                     ___lldiv@quotient:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x27
   719  000028                     	ds	3
   720  00002B                     IncrementDecrementSingleDigit@LoopIndex:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2A
   724  00002B                     	ds	1
   725  00002C                     ___lldiv@counter:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x2B
   729  00002C                     	ds	1
   730  00002D                     ??_SpeedCalcManage:
   731  00002D                     ?_GetAvgSpeed:
   732                           	opt stack 0
   733  00002D                     BCDsendNumber@Number:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x2C
   737  00002D                     	ds	2
   738  00002F                     GetAvgSpeed@bIsKph:
   739                           	opt stack 0
   740  00002F                     SpeedCalcManage@HundredMeterReference:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x2E
   744  00002F                     	ds	1
   745  000030                     GetAvgSpeed@KphMphFactor:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x2F
   749  000030                     	ds	1
   750  000031                     BCDsendNumber@Line:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x30
   754  000031                     	ds	1
   755  000032                     BCDsendNumber@DecimalPlace:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x31
   759  000032                     	ds	1
   760  000033                     BCDsendNumber@EnableTranc:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x32
   764  000033                     	ds	1
   765  000034                     ??_BCDsendNumber:
   766  000034                     GetAvgSpeed@AvgSpeedKphMph:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x33
   770  000034                     	ds	4
   771  000038                     
   772                           ; 1 bytes @ 0x37
   773  000038                     	ds	2
   774  00003A                     tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           
   781                           ; 1 bytes @ 0x39
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 78 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   801 ;;      Params:         0       0       0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0       0       0
   803 ;;      Temps:          0       0       0       0       0       0       0
   804 ;;      Totals:         0       0       0       0       0       0       0
   805 ;;Total ram usage:        0 bytes
   806 ;; Hardware stack levels required when called:   10
   807 ;; This function calls:
   808 ;;		_Start_App
   809 ;; This function is called by:
   810 ;;		Startup code after reset
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text0
   815  001D3A                     __ptext0:
   816                           	opt stack 0
   817  001D3A                     _main:
   818                           	opt stack 21
   819                           
   820                           ;main.c: 80: Start_App();
   821                           
   822                           ;incstack = 0
   823  001D3A  EC98  F00B         	call	_Start_App	;wreg free
   824                           
   825                           ;main.c: 81: return;
   826  001D3E  EF07  F000         	goto	start
   827  001D42                     __end_of_main:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           postinc0	equ	0xFEE
   834                           wreg	equ	0xFE8
   835                           
   836 ;; *************** function _Start_App *****************
   837 ;; Defined at:
   838 ;;		line 21 in file "../../../../OS/OS_manage/OS_manage.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   852 ;;      Params:         0       0       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0
   855 ;;      Totals:         0       0       0       0       0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    9
   859 ;; This function calls:
   860 ;;		_APP_INITIALIZE
   861 ;;		_BCDInitialize
   862 ;;		_CreateTask
   863 ;;		_HWI_DIGITAL_INITIALIZE
   864 ;;		_HWI_INTERRUPTS_INTITALIZE
   865 ;;		_HWI_InitOscilatorCalib
   866 ;;		_RunScheduler
   867 ;;		_SpeedCalcNotifyInitialize
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text1
   874  001730                     __ptext1:
   875                           	opt stack 0
   876  001730                     _Start_App:
   877                           	opt stack 21
   878                           
   879                           ;OS_manage.c: 23: HWI_InitOscilatorCalib();
   880                           
   881                           ;incstack = 0
   882  001730  ECBE  F00E         	call	_HWI_InitOscilatorCalib	;wreg free
   883                           
   884                           ;OS_manage.c: 24: HWI_INTERRUPTS_INTITALIZE();
   885  001734  EC09  F00D         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   886                           
   887                           ;OS_manage.c: 25: HWI_DIGITAL_INITIALIZE();
   888  001738  EC60  F00E         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   889                           
   890                           ;OS_manage.c: 26: SpeedCalcNotifyInitialize();
   891  00173C  ECBC  F00E         	call	_SpeedCalcNotifyInitialize	;wreg free
   892                           
   893                           ;OS_manage.c: 27: APP_INITIALIZE();
   894  001740  EC23  F009         	call	_APP_INITIALIZE	;wreg free
   895                           
   896                           ;OS_manage.c: 28: BCDInitialize(1);
   897  001744  0E01               	movlw	1
   898  001746  ECA5  F00E         	call	_BCDInitialize
   899                           
   900                           ;OS_manage.c: 30: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   901  00174A  0E5E               	movlw	low _ManageSpeedCalc
   902  00174C  6E14               	movwf	CreateTask@MangeFunction,c
   903  00174E  0E1D               	movlw	high _ManageSpeedCalc
   904  001750  6E15               	movwf	CreateTask@MangeFunction+1,c
   905  001752  0E00               	movlw	0
   906  001754  6E16               	movwf	CreateTask@TaskId,c
   907  001756  0E14               	movlw	20
   908  001758  6E17               	movwf	CreateTask@Period,c
   909  00175A  EC05  F00C         	call	_CreateTask	;wreg free
   910                           
   911                           ;OS_manage.c: 32: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 50);
   912  00175E  0E58               	movlw	low _ManageApplication
   913  001760  6E14               	movwf	CreateTask@MangeFunction,c
   914  001762  0E1D               	movlw	high _ManageApplication
   915  001764  6E15               	movwf	CreateTask@MangeFunction+1,c
   916  001766  0E02               	movlw	2
   917  001768  6E16               	movwf	CreateTask@TaskId,c
   918  00176A  0E32               	movlw	50
   919  00176C  6E17               	movwf	CreateTask@Period,c
   920  00176E  EC05  F00C         	call	_CreateTask	;wreg free
   921                           
   922                           ;OS_manage.c: 34: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 2)
      +                          ;
   923  001772  0E52               	movlw	low _DisplayAlphaNumeric
   924  001774  6E14               	movwf	CreateTask@MangeFunction,c
   925  001776  0E1D               	movlw	high _DisplayAlphaNumeric
   926  001778  6E15               	movwf	CreateTask@MangeFunction+1,c
   927  00177A  0E01               	movlw	1
   928  00177C  6E16               	movwf	CreateTask@TaskId,c
   929  00177E  0E02               	movlw	2
   930  001780  6E17               	movwf	CreateTask@Period,c
   931  001782  EC05  F00C         	call	_CreateTask	;wreg free
   932                           
   933                           ;OS_manage.c: 36: CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
   934  001786  0E6C               	movlw	low _ManageDrivers
   935  001788  6E14               	movwf	CreateTask@MangeFunction,c
   936  00178A  0E1C               	movlw	high _ManageDrivers
   937  00178C  6E15               	movwf	CreateTask@MangeFunction+1,c
   938  00178E  0E03               	movlw	3
   939  001790  6E16               	movwf	CreateTask@TaskId,c
   940  001792  0E0A               	movlw	10
   941  001794  6E17               	movwf	CreateTask@Period,c
   942  001796  EC05  F00C         	call	_CreateTask	;wreg free
   943                           
   944                           ;OS_manage.c: 38: RunScheduler();
   945  00179A  ECCC  F00A         	call	_RunScheduler	;wreg free
   946  00179E  0012               	return		;funcret
   947  0017A0                     __end_of_Start_App:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           
   956 ;; *************** function _SpeedCalcNotifyInitialize *****************
   957 ;; Defined at:
   958 ;;		line 25 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		None
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   972 ;;      Params:         0       0       0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    4
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_Start_App
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text2
   987  001D78                     __ptext2:
   988                           	opt stack 0
   989  001D78                     _SpeedCalcNotifyInitialize:
   990                           	opt stack 25
   991                           
   992                           ;incstack = 0
   993  001D78  0012               	return		;funcret
   994  001D7A                     __end_of_SpeedCalcNotifyInitialize:
   995                           	opt stack 0
   996                           tblptru	equ	0xFF8
   997                           tblptrh	equ	0xFF7
   998                           tblptrl	equ	0xFF6
   999                           tablat	equ	0xFF5
  1000                           postinc0	equ	0xFEE
  1001                           wreg	equ	0xFE8
  1002                           
  1003 ;; *************** function _RunScheduler *****************
  1004 ;; Defined at:
  1005 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1019 ;;      Params:         0       0       0       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0       0       0
  1021 ;;      Temps:          2       0       0       0       0       0       0
  1022 ;;      Totals:         2       0       0       0       0       0       0
  1023 ;;Total ram usage:        2 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    8
  1026 ;; This function calls:
  1027 ;;		_DisplayAlphaNumeric
  1028 ;;		_ManageApplication
  1029 ;;		_ManageDrivers
  1030 ;;		_ManageSpeedCalc
  1031 ;; This function is called by:
  1032 ;;		_Start_App
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text3
  1037  001598                     __ptext3:
  1038                           	opt stack 0
  1039  001598                     _RunScheduler:
  1040                           	opt stack 21
  1041  001598                     
  1042                           ;Scheduler.c: 29: {
  1043                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 4 ; TaskIndex++)
  1044  001598  0E00               	movlw	0
  1045  00159A  6E43               	movwf	RunScheduler@TaskIndex,c
  1046  00159C                     l3421:
  1047  00159C  0E03               	movlw	3
  1048  00159E  6443               	cpfsgt	RunScheduler@TaskIndex,c
  1049  0015A0  D001               	goto	l3425
  1050  0015A2  D7FA               	goto	l3419
  1051  0015A4                     l3425:
  1052                           
  1053                           ;Scheduler.c: 31: {
  1054                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
  1055  0015A4  5043               	movf	RunScheduler@TaskIndex,w,c
  1056  0015A6  0D04               	mullw	4
  1057  0015A8  0E02               	movlw	2
  1058  0015AA  26F3               	addwf	prodl,f,c
  1059  0015AC  0E00               	movlw	0
  1060  0015AE  22F4               	addwfc	prodh,f,c
  1061  0015B0  0EB2               	movlw	low _ArrayTask
  1062  0015B2  24F3               	addwf	prodl,w,c
  1063  0015B4  6ED9               	movwf	fsr2l,c
  1064  0015B6  0E00               	movlw	high _ArrayTask
  1065  0015B8  20F4               	addwfc	prodh,w,c
  1066  0015BA  6EDA               	movwf	fsr2h,c
  1067  0015BC  5043               	movf	RunScheduler@TaskIndex,w,c
  1068  0015BE  0D04               	mullw	4
  1069  0015C0  0E03               	movlw	3
  1070  0015C2  26F3               	addwf	prodl,f,c
  1071  0015C4  0E00               	movlw	0
  1072  0015C6  22F4               	addwfc	prodh,f,c
  1073  0015C8  0EB2               	movlw	low _ArrayTask
  1074  0015CA  24F3               	addwf	prodl,w,c
  1075  0015CC  6EE1               	movwf	fsr1l,c
  1076  0015CE  0E00               	movlw	high _ArrayTask
  1077  0015D0  20F4               	addwfc	prodh,w,c
  1078  0015D2  6EE2               	movwf	fsr1h,c
  1079  0015D4  50DE               	movf	postinc2,w,c
  1080  0015D6  5CE6               	subwf	postinc1,w,c
  1081  0015D8  A0D8               	btfss	status,0,c
  1082  0015DA  D022               	goto	l3431
  1083                           
  1084                           ;Scheduler.c: 33: {
  1085                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
  1086  0015DC  5043               	movf	RunScheduler@TaskIndex,w,c
  1087  0015DE  0D04               	mullw	4
  1088  0015E0  0EB2               	movlw	low _ArrayTask
  1089  0015E2  24F3               	addwf	prodl,w,c
  1090  0015E4  6ED9               	movwf	fsr2l,c
  1091  0015E6  0E00               	movlw	high _ArrayTask
  1092  0015E8  20F4               	addwfc	prodh,w,c
  1093  0015EA  6EDA               	movwf	fsr2h,c
  1094  0015EC  D801               	call	u3138
  1095  0015EE  D00A               	goto	l3429
  1096  0015F0                     u3138:
  1097  0015F0  0005               	push	
  1098  0015F2  6EFA               	movwf	pclath,c
  1099  0015F4  50DE               	movf	postinc2,w,c
  1100  0015F6  6EFD               	movwf	tosl,c
  1101  0015F8  50DE               	movf	postinc2,w,c
  1102  0015FA  6EFE               	movwf	tosh,c
  1103  0015FC  50F8               	movf	tblptru,w,c
  1104  0015FE  6EFF               	movwf	tosu,c
  1105  001600  50FA               	movf	pclath,w,c
  1106  001602  0012               	return		;indir
  1107  001604                     l3429:
  1108                           
  1109                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
  1110  001604  5043               	movf	RunScheduler@TaskIndex,w,c
  1111  001606  0D04               	mullw	4
  1112  001608  0E03               	movlw	3
  1113  00160A  26F3               	addwf	prodl,f,c
  1114  00160C  0E00               	movlw	0
  1115  00160E  22F4               	addwfc	prodh,f,c
  1116  001610  0EB2               	movlw	low _ArrayTask
  1117  001612  24F3               	addwf	prodl,w,c
  1118  001614  6ED9               	movwf	fsr2l,c
  1119  001616  0E00               	movlw	high _ArrayTask
  1120  001618  20F4               	addwfc	prodh,w,c
  1121  00161A  6EDA               	movwf	fsr2h,c
  1122  00161C  0E00               	movlw	0
  1123  00161E  6EDF               	movwf	indf2,c
  1124  001620                     l3431:
  1125  001620  2A43               	incf	RunScheduler@TaskIndex,f,c
  1126  001622  D7BC               	goto	l3421
  1127  001624                     __end_of_RunScheduler:
  1128                           	opt stack 0
  1129                           tosu	equ	0xFFF
  1130                           tosh	equ	0xFFE
  1131                           tosl	equ	0xFFD
  1132                           pclath	equ	0xFFA
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           prodh	equ	0xFF4
  1138                           prodl	equ	0xFF3
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postinc1	equ	0xFE6
  1142                           fsr1h	equ	0xFE2
  1143                           fsr1l	equ	0xFE1
  1144                           indf2	equ	0xFDF
  1145                           postinc2	equ	0xFDE
  1146                           fsr2h	equ	0xFDA
  1147                           fsr2l	equ	0xFD9
  1148                           status	equ	0xFD8
  1149                           
  1150 ;; *************** function _ManageDrivers *****************
  1151 ;; Defined at:
  1152 ;;		line 55 in file "../../../../OS/OS_manage/OS_manage.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1166 ;;      Params:         0       0       0       0       0       0       0
  1167 ;;      Locals:         1       0       0       0       0       0       0
  1168 ;;      Temps:          0       0       0       0       0       0       0
  1169 ;;      Totals:         1       0       0       0       0       0       0
  1170 ;;Total ram usage:        1 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    6
  1173 ;; This function calls:
  1174 ;;		_EepromManage
  1175 ;;		_MangeKeys
  1176 ;; This function is called by:
  1177 ;;		_Start_App
  1178 ;;		_RunScheduler
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text4
  1183  001C6C                     __ptext4:
  1184                           	opt stack 0
  1185  001C6C                     _ManageDrivers:
  1186                           	opt stack 22
  1187                           
  1188                           ;OS_manage.c: 57: unsigned char LoopIndex;
  1189                           ;OS_manage.c: 58: for(LoopIndex = (unsigned char)0 ; LoopIndex < (unsigned char)2 ; Loop
      +                          Index++)
  1190                           
  1191                           ;incstack = 0
  1192  001C6C  0E00               	movlw	0
  1193  001C6E  6E1B               	movwf	ManageDrivers@LoopIndex,c
  1194  001C70                     l2799:
  1195  001C70  0E01               	movlw	1
  1196  001C72  641B               	cpfsgt	ManageDrivers@LoopIndex,c
  1197  001C74  D001               	goto	l2803
  1198  001C76  D005               	goto	l2809
  1199  001C78                     l2803:
  1200                           
  1201                           ;OS_manage.c: 59: {
  1202                           ;OS_manage.c: 60: MangeKeys(LoopIndex);
  1203  001C78  501B               	movf	ManageDrivers@LoopIndex,w,c
  1204  001C7A  EC1C  F003         	call	_MangeKeys
  1205  001C7E  2A1B               	incf	ManageDrivers@LoopIndex,f,c
  1206  001C80  D7F7               	goto	l2799
  1207  001C82                     l2809:
  1208                           
  1209                           ;OS_manage.c: 61: }
  1210                           ;OS_manage.c: 62: EepromManage();
  1211  001C82  ECAA  F00C         	call	_EepromManage	;wreg free
  1212  001C86  0012               	return		;funcret
  1213  001C88                     __end_of_ManageDrivers:
  1214                           	opt stack 0
  1215                           tosu	equ	0xFFF
  1216                           tosh	equ	0xFFE
  1217                           tosl	equ	0xFFD
  1218                           pclath	equ	0xFFA
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           prodh	equ	0xFF4
  1224                           prodl	equ	0xFF3
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postinc1	equ	0xFE6
  1228                           fsr1h	equ	0xFE2
  1229                           fsr1l	equ	0xFE1
  1230                           indf2	equ	0xFDF
  1231                           postinc2	equ	0xFDE
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _DisplayAlphaNumeric *****************
  1237 ;; Defined at:
  1238 ;;		line 42 in file "../../../../OS/OS_manage/OS_manage.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;		None
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1252 ;;      Params:         0       0       0       0       0       0       0
  1253 ;;      Locals:         0       0       0       0       0       0       0
  1254 ;;      Temps:          0       0       0       0       0       0       0
  1255 ;;      Totals:         0       0       0       0       0       0       0
  1256 ;;Total ram usage:        0 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    6
  1259 ;; This function calls:
  1260 ;;		_BCDManage7segment
  1261 ;; This function is called by:
  1262 ;;		_Start_App
  1263 ;;		_RunScheduler
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text5
  1268  001D52                     __ptext5:
  1269                           	opt stack 0
  1270  001D52                     _DisplayAlphaNumeric:
  1271                           	opt stack 22
  1272                           
  1273                           ;OS_manage.c: 44: BCDManage7segment();
  1274                           
  1275                           ;incstack = 0
  1276  001D52  EC32  F00A         	call	_BCDManage7segment	;wreg free
  1277  001D56  0012               	return		;funcret
  1278  001D58                     __end_of_DisplayAlphaNumeric:
  1279                           	opt stack 0
  1280                           tosu	equ	0xFFF
  1281                           tosh	equ	0xFFE
  1282                           tosl	equ	0xFFD
  1283                           pclath	equ	0xFFA
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postinc1	equ	0xFE6
  1293                           fsr1h	equ	0xFE2
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           postinc2	equ	0xFDE
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _ManageApplication *****************
  1302 ;; Defined at:
  1303 ;;		line 46 in file "../../../../OS/OS_manage/OS_manage.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:         0       0       0       0       0       0       0
  1318 ;;      Locals:         0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0
  1320 ;;      Totals:         0       0       0       0       0       0       0
  1321 ;;Total ram usage:        0 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    7
  1324 ;; This function calls:
  1325 ;;		_APP_MANAGE
  1326 ;; This function is called by:
  1327 ;;		_Start_App
  1328 ;;		_RunScheduler
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text6
  1333  001D58                     __ptext6:
  1334                           	opt stack 0
  1335  001D58                     _ManageApplication:
  1336                           	opt stack 21
  1337                           
  1338                           ;OS_manage.c: 48: APP_MANAGE();
  1339                           
  1340                           ;incstack = 0
  1341  001D58  EC33  F005         	call	_APP_MANAGE	;wreg free
  1342  001D5C  0012               	return		;funcret
  1343  001D5E                     __end_of_ManageApplication:
  1344                           	opt stack 0
  1345                           tosu	equ	0xFFF
  1346                           tosh	equ	0xFFE
  1347                           tosl	equ	0xFFD
  1348                           pclath	equ	0xFFA
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           prodh	equ	0xFF4
  1354                           prodl	equ	0xFF3
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           postinc1	equ	0xFE6
  1358                           fsr1h	equ	0xFE2
  1359                           fsr1l	equ	0xFE1
  1360                           indf2	equ	0xFDF
  1361                           postinc2	equ	0xFDE
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;; *************** function _ManageSpeedCalc *****************
  1367 ;; Defined at:
  1368 ;;		line 50 in file "../../../../OS/OS_manage/OS_manage.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1382 ;;      Params:         0       0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    6
  1389 ;; This function calls:
  1390 ;;		_SpeedCalcManage
  1391 ;; This function is called by:
  1392 ;;		_Start_App
  1393 ;;		_RunScheduler
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text7
  1398  001D5E                     __ptext7:
  1399                           	opt stack 0
  1400  001D5E                     _ManageSpeedCalc:
  1401                           	opt stack 22
  1402                           
  1403                           ;OS_manage.c: 52: SpeedCalcManage();
  1404                           
  1405                           ;incstack = 0
  1406  001D5E  ECE1  F009         	call	_SpeedCalcManage	;wreg free
  1407  001D62  0012               	return		;funcret
  1408  001D64                     __end_of_ManageSpeedCalc:
  1409                           	opt stack 0
  1410                           tosu	equ	0xFFF
  1411                           tosh	equ	0xFFE
  1412                           tosl	equ	0xFFD
  1413                           pclath	equ	0xFFA
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           prodh	equ	0xFF4
  1419                           prodl	equ	0xFF3
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postinc1	equ	0xFE6
  1423                           fsr1h	equ	0xFE2
  1424                           fsr1l	equ	0xFE1
  1425                           indf2	equ	0xFDF
  1426                           postinc2	equ	0xFDE
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _SpeedCalcManage *****************
  1432 ;; Defined at:
  1433 ;;		line 64 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  HundredMeter    2   46[COMRAM] unsigned short 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1447 ;;      Params:         0       0       0       0       0       0       0
  1448 ;;      Locals:         2       0       0       0       0       0       0
  1449 ;;      Temps:          2       0       0       0       0       0       0
  1450 ;;      Totals:         4       0       0       0       0       0       0
  1451 ;;Total ram usage:        4 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    5
  1454 ;; This function calls:
  1455 ;;		___lldiv
  1456 ;;		___lwdiv
  1457 ;;		___wmul
  1458 ;; This function is called by:
  1459 ;;		_ManageSpeedCalc
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text8
  1464  0013C2                     __ptext8:
  1465                           	opt stack 0
  1466  0013C2                     _SpeedCalcManage:
  1467                           	opt stack 22
  1468                           
  1469                           ;SpeedCalc.c: 66: unsigned short HundredMeterReference;
  1470                           ;SpeedCalc.c: 68: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
  1471                           ;SpeedCalc.c: 69: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  1472                           
  1473                           ;incstack = 0
  1474  0013C2  C03C  F014         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
  1475  0013C6  C03D  F015         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
  1476  0013CA  0E00               	movlw	0
  1477  0013CC  6E17               	movwf	___lwdiv@divisor+1,c
  1478  0013CE  0E64               	movlw	100
  1479  0013D0  6E16               	movwf	___lwdiv@divisor,c
  1480  0013D2  EC5C  F00C         	call	___lwdiv	;wreg free
  1481  0013D6  C014  F02D         	movff	?___lwdiv,??_SpeedCalcManage
  1482  0013DA  C015  F02E         	movff	?___lwdiv+1,??_SpeedCalcManage+1
  1483  0013DE  C046  F014         	movff	_TimerOVFLcount,___wmul@multiplier
  1484  0013E2  6A15               	clrf	___wmul@multiplier+1,c
  1485  0013E4  0E02               	movlw	2
  1486  0013E6  6E17               	movwf	___wmul@multiplicand+1,c
  1487  0013E8  0E8F               	movlw	143
  1488  0013EA  6E16               	movwf	___wmul@multiplicand,c
  1489  0013EC  EC01  F00E         	call	___wmul	;wreg free
  1490  0013F0  5014               	movf	?___wmul,w,c
  1491  0013F2  242D               	addwf	??_SpeedCalcManage,w,c
  1492  0013F4  6E3E               	movwf	_LapTimeTenthMilli,c
  1493  0013F6  5015               	movf	?___wmul+1,w,c
  1494  0013F8  202E               	addwfc	??_SpeedCalcManage+1,w,c
  1495  0013FA  6E3F               	movwf	_LapTimeTenthMilli+1,c
  1496                           
  1497                           ;SpeedCalc.c: 71: LapDistanceCounter += LapCounter;
  1498  0013FC  5047               	movf	_LapCounter,w,c	;volatile
  1499  0013FE  0100               	movlb	0	; () banked
  1500  001400  27DC               	addwf	_LapDistanceCounter& (0+255),f,b
  1501  001402  0E00               	movlw	0
  1502  001404  23DD               	addwfc	(_LapDistanceCounter+1)& (0+255),f,b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;SpeedCalc.c: 73: LapCounter = (unsigned char)0;
  1506  001406  0E00               	movlw	0
  1507  001408  6E47               	movwf	_LapCounter,c	;volatile
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;SpeedCalc.c: 75: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1511                           ;SpeedCalc.c: 76: (unsigned long)CircumFactor);
  1512  00140A  0EA0               	movlw	160
  1513  00140C  6E20               	movwf	___lldiv@dividend,c
  1514  00140E  0E86               	movlw	134
  1515  001410  6E21               	movwf	___lldiv@dividend+1,c
  1516  001412  0E01               	movlw	1
  1517  001414  6E22               	movwf	___lldiv@dividend+2,c
  1518  001416  0E00               	movlw	0
  1519  001418  6E23               	movwf	___lldiv@dividend+3,c
  1520  00141A  C06A  F024         	movff	_CircumFactor,___lldiv@divisor
  1521  00141E  C06B  F025         	movff	_CircumFactor+1,___lldiv@divisor+1
  1522  001422  6A26               	clrf	___lldiv@divisor+2,c
  1523  001424  6A27               	clrf	___lldiv@divisor+3,c
  1524  001426  EC57  F00B         	call	___lldiv	;wreg free
  1525  00142A  C020  F02F         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1526  00142E  C021  F030         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1527                           
  1528                           ;SpeedCalc.c: 79: if((unsigned char)0 == DistTravelCntrDisable)
  1529  001432  5045               	movf	_DistTravelCntrDisable,w,c
  1530  001434  A4D8               	btfss	status,2,c
  1531  001436  0012               	return	
  1532                           
  1533                           ;SpeedCalc.c: 80: {
  1534                           ;SpeedCalc.c: 81: if(LapDistanceCounter >= HundredMeterReference)
  1535  001438  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1536  00143A  0100               	movlb	0	; () banked
  1537  00143C  5DDC               	subwf	_LapDistanceCounter& (0+255),w,b
  1538  00143E  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1539  001440  0100               	movlb	0	; () banked
  1540  001442  59DD               	subwfb	(_LapDistanceCounter+1)& (0+255),w,b
  1541  001444  A0D8               	btfss	status,0,c
  1542  001446  0012               	return	
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;SpeedCalc.c: 82: {
  1546                           ;SpeedCalc.c: 83: DistTravelCntr ++;
  1547  001448  0E01               	movlw	1
  1548  00144A  0100               	movlb	0	; () banked
  1549  00144C  27D6               	addwf	_DistTravelCntr& (0+255),f,b
  1550  00144E  0E00               	movlw	0
  1551  001450  23D7               	addwfc	(_DistTravelCntr+1)& (0+255),f,b
  1552  001452  23D8               	addwfc	(_DistTravelCntr+2)& (0+255),f,b
  1553  001454  23D9               	addwfc	(_DistTravelCntr+3)& (0+255),f,b
  1554                           
  1555                           ;SpeedCalc.c: 84: LapDistanceCounter -= HundredMeterReference;
  1556  001456  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1557  001458  0100               	movlb	0	; () banked
  1558  00145A  5FDC               	subwf	_LapDistanceCounter& (0+255),f,b
  1559  00145C  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1560  00145E  0100               	movlb	0	; () banked
  1561  001460  5BDD               	subwfb	(_LapDistanceCounter+1)& (0+255),f,b
  1562                           
  1563                           ; BSR set to: 0
  1564                           
  1565                           ;SpeedCalc.c: 86: else
  1566                           ;SpeedCalc.c: 87: {
  1567                           
  1568                           ; BSR set to: 0
  1569                           
  1570                           ;SpeedCalc.c: 85: }
  1571  001462  0012               	return	
  1572  001464                     __end_of_SpeedCalcManage:
  1573                           	opt stack 0
  1574                           tosu	equ	0xFFF
  1575                           tosh	equ	0xFFE
  1576                           tosl	equ	0xFFD
  1577                           pclath	equ	0xFFA
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           prodh	equ	0xFF4
  1583                           prodl	equ	0xFF3
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postinc1	equ	0xFE6
  1587                           fsr1h	equ	0xFE2
  1588                           fsr1l	equ	0xFE1
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _MangeKeys *****************
  1596 ;; Defined at:
  1597 ;;		line 29 in file "../../../../Common/Driver/Key/Key.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  KeyID           1    wreg     unsigned char 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  KeyID           1   25[COMRAM] unsigned char 
  1602 ;;  HWIreading      1   24[COMRAM] unsigned char 
  1603 ;;  KeyState        1   23[COMRAM] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1613 ;;      Params:         0       0       0       0       0       0       0
  1614 ;;      Locals:         3       0       0       0       0       0       0
  1615 ;;      Temps:          2       0       0       0       0       0       0
  1616 ;;      Totals:         5       0       0       0       0       0       0
  1617 ;;Total ram usage:        5 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    5
  1620 ;; This function calls:
  1621 ;;		_HWI_DIGI_READ
  1622 ;; This function is called by:
  1623 ;;		_ManageDrivers
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text9
  1628  000638                     __ptext9:
  1629                           	opt stack 0
  1630  000638                     _MangeKeys:
  1631                           	opt stack 22
  1632                           
  1633                           ;incstack = 0
  1634                           ;MangeKeys@KeyID stored from wreg
  1635  000638  6E1A               	movwf	MangeKeys@KeyID,c
  1636                           
  1637                           ;Key.c: 31: unsigned char HWIreading;
  1638                           ;Key.c: 32: unsigned char KeyState;
  1639                           ;Key.c: 34: KeyState = KeyInternalData[KeyID].KeyState & (unsigned char)0x3F;
  1640  00063A  501A               	movf	MangeKeys@KeyID,w,c
  1641  00063C  0D03               	mullw	3
  1642  00063E  0E64               	movlw	low _KeyInternalData
  1643  000640  24F3               	addwf	prodl,w,c
  1644  000642  6ED9               	movwf	fsr2l,c
  1645  000644  0E00               	movlw	high _KeyInternalData
  1646  000646  20F4               	addwfc	prodh,w,c
  1647  000648  6EDA               	movwf	fsr2h,c
  1648  00064A  50DF               	movf	indf2,w,c
  1649  00064C  0B3F               	andlw	63
  1650  00064E  6E18               	movwf	MangeKeys@KeyState,c
  1651                           
  1652                           ;Key.c: 35: HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
  1653  000650  501A               	movf	MangeKeys@KeyID,w,c
  1654  000652  0D08               	mullw	8
  1655  000654  0E1B               	movlw	low _KeyArrayConfig
  1656  000656  24F3               	addwf	prodl,w,c
  1657  000658  6EF6               	movwf	tblptrl,c
  1658  00065A  0E06               	movlw	high _KeyArrayConfig
  1659  00065C  20F4               	addwfc	prodh,w,c
  1660  00065E  6EF7               	movwf	tblptrh,c
  1661  000660                     	if	0	;There are less than 3 active tblptr bytes
  1662  000660                     	endif
  1663  000660  0008               	tblrd		*
  1664  000662  50F5               	movf	tablat,w,c
  1665  000664  EC28  F00D         	call	_HWI_DIGI_READ
  1666  000668  6E19               	movwf	MangeKeys@HWIreading,c
  1667                           
  1668                           ;Key.c: 37: switch(KeyState)
  1669  00066A  D1F2               	goto	l2739
  1670  00066C                     l2693:
  1671                           
  1672                           ;Key.c: 40: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1673  00066C  501A               	movf	MangeKeys@KeyID,w,c
  1674  00066E  0D08               	mullw	8
  1675  000670  0E01               	movlw	1
  1676  000672  26F3               	addwf	prodl,f,c
  1677  000674  0E00               	movlw	0
  1678  000676  22F4               	addwfc	prodh,f,c
  1679  000678  0E1B               	movlw	low _KeyArrayConfig
  1680  00067A  24F3               	addwf	prodl,w,c
  1681  00067C  6EF6               	movwf	tblptrl,c
  1682  00067E  0E06               	movlw	high _KeyArrayConfig
  1683  000680  20F4               	addwfc	prodh,w,c
  1684  000682  6EF7               	movwf	tblptrh,c
  1685  000684                     	if	0	;There are less than 3 active tblptr bytes
  1686  000684                     	endif
  1687  000684  0008               	tblrd		*
  1688  000686  50F5               	movf	tablat,w,c
  1689  000688  1819               	xorwf	MangeKeys@HWIreading,w,c
  1690  00068A  A4D8               	btfss	status,2,c
  1691  00068C  D059               	goto	l2703
  1692                           
  1693                           ;Key.c: 41: {
  1694                           ;Key.c: 42: KeyInternalData[KeyID].KeyCounter++;
  1695  00068E  501A               	movf	MangeKeys@KeyID,w,c
  1696  000690  0D03               	mullw	3
  1697  000692  0E01               	movlw	1
  1698  000694  26F3               	addwf	prodl,f,c
  1699  000696  0E00               	movlw	0
  1700  000698  22F4               	addwfc	prodh,f,c
  1701  00069A  0E64               	movlw	low _KeyInternalData
  1702  00069C  24F3               	addwf	prodl,w,c
  1703  00069E  6ED9               	movwf	fsr2l,c
  1704  0006A0  0E00               	movlw	high _KeyInternalData
  1705  0006A2  20F4               	addwfc	prodh,w,c
  1706  0006A4  6EDA               	movwf	fsr2h,c
  1707  0006A6  2ADE               	incf	postinc2,f,c
  1708  0006A8  0E00               	movlw	0
  1709  0006AA  22DD               	addwfc	postdec2,f,c
  1710                           
  1711                           ;Key.c: 43: if(KeyArrayConfig[KeyID].ShortPress ==
  1712                           ;Key.c: 44: KeyInternalData[KeyID].KeyCounter)
  1713  0006AC  501A               	movf	MangeKeys@KeyID,w,c
  1714  0006AE  0D03               	mullw	3
  1715  0006B0  0E01               	movlw	1
  1716  0006B2  26F3               	addwf	prodl,f,c
  1717  0006B4  0E00               	movlw	0
  1718  0006B6  22F4               	addwfc	prodh,f,c
  1719  0006B8  0E64               	movlw	low _KeyInternalData
  1720  0006BA  24F3               	addwf	prodl,w,c
  1721  0006BC  6ED9               	movwf	fsr2l,c
  1722  0006BE  0E00               	movlw	high _KeyInternalData
  1723  0006C0  20F4               	addwfc	prodh,w,c
  1724  0006C2  6EDA               	movwf	fsr2h,c
  1725  0006C4  501A               	movf	MangeKeys@KeyID,w,c
  1726  0006C6  0D08               	mullw	8
  1727  0006C8  0E04               	movlw	4
  1728  0006CA  26F3               	addwf	prodl,f,c
  1729  0006CC  0E00               	movlw	0
  1730  0006CE  22F4               	addwfc	prodh,f,c
  1731  0006D0  0E1B               	movlw	low _KeyArrayConfig
  1732  0006D2  24F3               	addwf	prodl,w,c
  1733  0006D4  6EF6               	movwf	tblptrl,c
  1734  0006D6  0E06               	movlw	high _KeyArrayConfig
  1735  0006D8  20F4               	addwfc	prodh,w,c
  1736  0006DA  6EF7               	movwf	tblptrh,c
  1737  0006DC                     	if	0	;There are less than 3 active tblptr bytes
  1738  0006DC                     	endif
  1739  0006DC  50DE               	movf	postinc2,w,c
  1740  0006DE  0009               	tblrd		*+
  1741  0006E0  18F5               	xorwf	tablat,w,c
  1742  0006E2  E104               	bnz	u2011
  1743  0006E4  50DE               	movf	postinc2,w,c
  1744  0006E6  0009               	tblrd		*+
  1745  0006E8  18F5               	xorwf	tablat,w,c
  1746  0006EA  A4D8               	btfss	status,2,c
  1747  0006EC                     u2011:
  1748  0006EC  0012               	return	
  1749                           
  1750                           ;Key.c: 45: {
  1751                           ;Key.c: 46: KeyInternalData[KeyID].KeyState = (unsigned char)0x81;
  1752  0006EE  501A               	movf	MangeKeys@KeyID,w,c
  1753  0006F0  0D03               	mullw	3
  1754  0006F2  0E64               	movlw	low _KeyInternalData
  1755  0006F4  24F3               	addwf	prodl,w,c
  1756  0006F6  6ED9               	movwf	fsr2l,c
  1757  0006F8  0E00               	movlw	high _KeyInternalData
  1758  0006FA  20F4               	addwfc	prodh,w,c
  1759  0006FC  6EDA               	movwf	fsr2h,c
  1760  0006FE  0E81               	movlw	129
  1761  000700  6EDF               	movwf	indf2,c
  1762                           
  1763                           ;Key.c: 47: KeyInternalData[KeyID].KeyCounter =
  1764                           ;Key.c: 48: KeyArrayConfig[KeyID].ReleaseTicks;
  1765  000702  501A               	movf	MangeKeys@KeyID,w,c
  1766  000704  0D08               	mullw	8
  1767  000706  0E02               	movlw	2
  1768  000708  26F3               	addwf	prodl,f,c
  1769  00070A  0E00               	movlw	0
  1770  00070C  22F4               	addwfc	prodh,f,c
  1771  00070E  0E1B               	movlw	low _KeyArrayConfig
  1772  000710  24F3               	addwf	prodl,w,c
  1773  000712  6EF6               	movwf	tblptrl,c
  1774  000714  0E06               	movlw	high _KeyArrayConfig
  1775  000716  20F4               	addwfc	prodh,w,c
  1776  000718  6EF7               	movwf	tblptrh,c
  1777  00071A                     	if	0	;There are less than 3 active tblptr bytes
  1778  00071A                     	endif
  1779  00071A  501A               	movf	MangeKeys@KeyID,w,c
  1780  00071C  0D03               	mullw	3
  1781  00071E  0E01               	movlw	1
  1782  000720  26F3               	addwf	prodl,f,c
  1783  000722  0E00               	movlw	0
  1784  000724  22F4               	addwfc	prodh,f,c
  1785  000726  0E64               	movlw	low _KeyInternalData
  1786  000728  24F3               	addwf	prodl,w,c
  1787  00072A  6ED9               	movwf	fsr2l,c
  1788  00072C  0E00               	movlw	high _KeyInternalData
  1789  00072E  20F4               	addwfc	prodh,w,c
  1790  000730  6EDA               	movwf	fsr2h,c
  1791  000732  0009               	tblrd		*+
  1792  000734  CFF5 FFDE          	movff	tablat,postinc2
  1793  000738  0008               	tblrd		*
  1794  00073A  CFF5 FFDD          	movff	tablat,postdec2
  1795                           
  1796                           ;Key.c: 49: }
  1797                           ;Key.c: 50: }
  1798  00073E  0012               	return	
  1799  000740                     l2703:
  1800                           
  1801                           ;Key.c: 51: else
  1802                           ;Key.c: 52: {
  1803                           ;Key.c: 53: KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
  1804  000740  501A               	movf	MangeKeys@KeyID,w,c
  1805  000742  0D03               	mullw	3
  1806  000744  0E01               	movlw	1
  1807  000746  26F3               	addwf	prodl,f,c
  1808  000748  0E00               	movlw	0
  1809  00074A  22F4               	addwfc	prodh,f,c
  1810  00074C  0E64               	movlw	low _KeyInternalData
  1811  00074E  24F3               	addwf	prodl,w,c
  1812  000750  6ED9               	movwf	fsr2l,c
  1813  000752  0E00               	movlw	high _KeyInternalData
  1814  000754  20F4               	addwfc	prodh,w,c
  1815  000756  6EDA               	movwf	fsr2h,c
  1816  000758  0E00               	movlw	0
  1817  00075A  6EDE               	movwf	postinc2,c
  1818  00075C  0E00               	movlw	0
  1819  00075E  6EDD               	movwf	postdec2,c
  1820                           
  1821                           ;Key.c: 54: }
  1822                           ;Key.c: 55: break;
  1823  000760  0012               	return	
  1824  000762                     l2705:
  1825                           
  1826                           ;Key.c: 57: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1827  000762  501A               	movf	MangeKeys@KeyID,w,c
  1828  000764  0D08               	mullw	8
  1829  000766  0E01               	movlw	1
  1830  000768  26F3               	addwf	prodl,f,c
  1831  00076A  0E00               	movlw	0
  1832  00076C  22F4               	addwfc	prodh,f,c
  1833  00076E  0E1B               	movlw	low _KeyArrayConfig
  1834  000770  24F3               	addwf	prodl,w,c
  1835  000772  6EF6               	movwf	tblptrl,c
  1836  000774  0E06               	movlw	high _KeyArrayConfig
  1837  000776  20F4               	addwfc	prodh,w,c
  1838  000778  6EF7               	movwf	tblptrh,c
  1839  00077A                     	if	0	;There are less than 3 active tblptr bytes
  1840  00077A                     	endif
  1841  00077A  0008               	tblrd		*
  1842  00077C  50F5               	movf	tablat,w,c
  1843  00077E  1819               	xorwf	MangeKeys@HWIreading,w,c
  1844  000780  A4D8               	btfss	status,2,c
  1845  000782  D098               	goto	l2719
  1846                           
  1847                           ;Key.c: 58: {
  1848                           ;Key.c: 59: if ( KeyInternalData[KeyID].KeyCounter >=
  1849                           ;Key.c: 60: KeyArrayConfig[KeyID].ReleaseTicks)
  1850  000784  501A               	movf	MangeKeys@KeyID,w,c
  1851  000786  0D08               	mullw	8
  1852  000788  0E02               	movlw	2
  1853  00078A  26F3               	addwf	prodl,f,c
  1854  00078C  0E00               	movlw	0
  1855  00078E  22F4               	addwfc	prodh,f,c
  1856  000790  0E1B               	movlw	low _KeyArrayConfig
  1857  000792  24F3               	addwf	prodl,w,c
  1858  000794  6EF6               	movwf	tblptrl,c
  1859  000796  0E06               	movlw	high _KeyArrayConfig
  1860  000798  20F4               	addwfc	prodh,w,c
  1861  00079A  6EF7               	movwf	tblptrh,c
  1862  00079C                     	if	0	;There are less than 3 active tblptr bytes
  1863  00079C                     	endif
  1864  00079C  501A               	movf	MangeKeys@KeyID,w,c
  1865  00079E  0D03               	mullw	3
  1866  0007A0  0E01               	movlw	1
  1867  0007A2  26F3               	addwf	prodl,f,c
  1868  0007A4  0E00               	movlw	0
  1869  0007A6  22F4               	addwfc	prodh,f,c
  1870  0007A8  0E64               	movlw	low _KeyInternalData
  1871  0007AA  24F3               	addwf	prodl,w,c
  1872  0007AC  6ED9               	movwf	fsr2l,c
  1873  0007AE  0E00               	movlw	high _KeyInternalData
  1874  0007B0  20F4               	addwfc	prodh,w,c
  1875  0007B2  6EDA               	movwf	fsr2h,c
  1876  0007B4  0009               	tblrd		*+
  1877  0007B6  50F5               	movf	tablat,w,c
  1878  0007B8  5CDE               	subwf	postinc2,w,c
  1879  0007BA  0009               	tblrd		*+
  1880  0007BC  50F5               	movf	tablat,w,c
  1881  0007BE  58DE               	subwfb	postinc2,w,c
  1882  0007C0  A0D8               	btfss	status,0,c
  1883  0007C2  D059               	goto	l2717
  1884                           
  1885                           ;Key.c: 61: {
  1886                           ;Key.c: 62: KeyInternalData[KeyID].KeyCounter++;
  1887  0007C4  501A               	movf	MangeKeys@KeyID,w,c
  1888  0007C6  0D03               	mullw	3
  1889  0007C8  0E01               	movlw	1
  1890  0007CA  26F3               	addwf	prodl,f,c
  1891  0007CC  0E00               	movlw	0
  1892  0007CE  22F4               	addwfc	prodh,f,c
  1893  0007D0  0E64               	movlw	low _KeyInternalData
  1894  0007D2  24F3               	addwf	prodl,w,c
  1895  0007D4  6ED9               	movwf	fsr2l,c
  1896  0007D6  0E00               	movlw	high _KeyInternalData
  1897  0007D8  20F4               	addwfc	prodh,w,c
  1898  0007DA  6EDA               	movwf	fsr2h,c
  1899  0007DC  2ADE               	incf	postinc2,f,c
  1900  0007DE  0E00               	movlw	0
  1901  0007E0  22DD               	addwfc	postdec2,f,c
  1902                           
  1903                           ;Key.c: 63: if(KeyArrayConfig[KeyID].LongPress ==
  1904                           ;Key.c: 64: KeyInternalData[KeyID].KeyCounter)
  1905  0007E2  501A               	movf	MangeKeys@KeyID,w,c
  1906  0007E4  0D03               	mullw	3
  1907  0007E6  0E01               	movlw	1
  1908  0007E8  26F3               	addwf	prodl,f,c
  1909  0007EA  0E00               	movlw	0
  1910  0007EC  22F4               	addwfc	prodh,f,c
  1911  0007EE  0E64               	movlw	low _KeyInternalData
  1912  0007F0  24F3               	addwf	prodl,w,c
  1913  0007F2  6ED9               	movwf	fsr2l,c
  1914  0007F4  0E00               	movlw	high _KeyInternalData
  1915  0007F6  20F4               	addwfc	prodh,w,c
  1916  0007F8  6EDA               	movwf	fsr2h,c
  1917  0007FA  501A               	movf	MangeKeys@KeyID,w,c
  1918  0007FC  0D08               	mullw	8
  1919  0007FE  0E06               	movlw	6
  1920  000800  26F3               	addwf	prodl,f,c
  1921  000802  0E00               	movlw	0
  1922  000804  22F4               	addwfc	prodh,f,c
  1923  000806  0E1B               	movlw	low _KeyArrayConfig
  1924  000808  24F3               	addwf	prodl,w,c
  1925  00080A  6EF6               	movwf	tblptrl,c
  1926  00080C  0E06               	movlw	high _KeyArrayConfig
  1927  00080E  20F4               	addwfc	prodh,w,c
  1928  000810  6EF7               	movwf	tblptrh,c
  1929  000812                     	if	0	;There are less than 3 active tblptr bytes
  1930  000812                     	endif
  1931  000812  50DE               	movf	postinc2,w,c
  1932  000814  0009               	tblrd		*+
  1933  000816  18F5               	xorwf	tablat,w,c
  1934  000818  E104               	bnz	u2041
  1935  00081A  50DE               	movf	postinc2,w,c
  1936  00081C  0009               	tblrd		*+
  1937  00081E  18F5               	xorwf	tablat,w,c
  1938  000820  A4D8               	btfss	status,2,c
  1939  000822                     u2041:
  1940  000822  0012               	return	
  1941                           
  1942                           ;Key.c: 65: {
  1943                           ;Key.c: 66: KeyInternalData[KeyID].KeyState = (unsigned char)0x82;
  1944  000824  501A               	movf	MangeKeys@KeyID,w,c
  1945  000826  0D03               	mullw	3
  1946  000828  0E64               	movlw	low _KeyInternalData
  1947  00082A  24F3               	addwf	prodl,w,c
  1948  00082C  6ED9               	movwf	fsr2l,c
  1949  00082E  0E00               	movlw	high _KeyInternalData
  1950  000830  20F4               	addwfc	prodh,w,c
  1951  000832  6EDA               	movwf	fsr2h,c
  1952  000834  0E82               	movlw	130
  1953  000836  6EDF               	movwf	indf2,c
  1954                           
  1955                           ;Key.c: 67: KeyInternalData[KeyID].KeyCounter =
  1956                           ;Key.c: 68: KeyArrayConfig[KeyID].ReleaseTicks;
  1957  000838  501A               	movf	MangeKeys@KeyID,w,c
  1958  00083A  0D08               	mullw	8
  1959  00083C  0E02               	movlw	2
  1960  00083E  26F3               	addwf	prodl,f,c
  1961  000840  0E00               	movlw	0
  1962  000842  22F4               	addwfc	prodh,f,c
  1963  000844  0E1B               	movlw	low _KeyArrayConfig
  1964  000846  24F3               	addwf	prodl,w,c
  1965  000848  6EF6               	movwf	tblptrl,c
  1966  00084A  0E06               	movlw	high _KeyArrayConfig
  1967  00084C  20F4               	addwfc	prodh,w,c
  1968  00084E  6EF7               	movwf	tblptrh,c
  1969  000850                     	if	0	;There are less than 3 active tblptr bytes
  1970  000850                     	endif
  1971  000850  501A               	movf	MangeKeys@KeyID,w,c
  1972  000852  0D03               	mullw	3
  1973  000854  0E01               	movlw	1
  1974  000856  26F3               	addwf	prodl,f,c
  1975  000858  0E00               	movlw	0
  1976  00085A  22F4               	addwfc	prodh,f,c
  1977  00085C  0E64               	movlw	low _KeyInternalData
  1978  00085E  24F3               	addwf	prodl,w,c
  1979  000860  6ED9               	movwf	fsr2l,c
  1980  000862  0E00               	movlw	high _KeyInternalData
  1981  000864  20F4               	addwfc	prodh,w,c
  1982  000866  6EDA               	movwf	fsr2h,c
  1983  000868  0009               	tblrd		*+
  1984  00086A  CFF5 FFDE          	movff	tablat,postinc2
  1985  00086E  0008               	tblrd		*
  1986  000870  CFF5 FFDD          	movff	tablat,postdec2
  1987                           
  1988                           ;Key.c: 69: }
  1989                           ;Key.c: 70: }
  1990  000874  0012               	return	
  1991  000876                     l2717:
  1992                           
  1993                           ;Key.c: 71: else
  1994                           ;Key.c: 72: {
  1995                           ;Key.c: 73: KeyInternalData[KeyID].KeyCounter =
  1996                           ;Key.c: 74: KeyArrayConfig[KeyID].ReleaseTicks;
  1997  000876  501A               	movf	MangeKeys@KeyID,w,c
  1998  000878  0D08               	mullw	8
  1999  00087A  0E02               	movlw	2
  2000  00087C  26F3               	addwf	prodl,f,c
  2001  00087E  0E00               	movlw	0
  2002  000880  22F4               	addwfc	prodh,f,c
  2003  000882  0E1B               	movlw	low _KeyArrayConfig
  2004  000884  24F3               	addwf	prodl,w,c
  2005  000886  6EF6               	movwf	tblptrl,c
  2006  000888  0E06               	movlw	high _KeyArrayConfig
  2007  00088A  20F4               	addwfc	prodh,w,c
  2008  00088C  6EF7               	movwf	tblptrh,c
  2009  00088E                     	if	0	;There are less than 3 active tblptr bytes
  2010  00088E                     	endif
  2011  00088E  501A               	movf	MangeKeys@KeyID,w,c
  2012  000890  0D03               	mullw	3
  2013  000892  0E01               	movlw	1
  2014  000894  26F3               	addwf	prodl,f,c
  2015  000896  0E00               	movlw	0
  2016  000898  22F4               	addwfc	prodh,f,c
  2017  00089A  0E64               	movlw	low _KeyInternalData
  2018  00089C  24F3               	addwf	prodl,w,c
  2019  00089E  6ED9               	movwf	fsr2l,c
  2020  0008A0  0E00               	movlw	high _KeyInternalData
  2021  0008A2  20F4               	addwfc	prodh,w,c
  2022  0008A4  6EDA               	movwf	fsr2h,c
  2023  0008A6  0009               	tblrd		*+
  2024  0008A8  CFF5 FFDE          	movff	tablat,postinc2
  2025  0008AC  0008               	tblrd		*
  2026  0008AE  CFF5 FFDD          	movff	tablat,postdec2
  2027                           
  2028                           ;Key.c: 75: }
  2029                           ;Key.c: 76: }
  2030  0008B2  0012               	return	
  2031  0008B4                     l2719:
  2032                           
  2033                           ;Key.c: 77: else
  2034                           ;Key.c: 78: {
  2035                           ;Key.c: 79: if ( KeyInternalData[KeyID].KeyCounter >
  2036                           ;Key.c: 80: KeyArrayConfig[KeyID].ReleaseTicks)
  2037  0008B4  501A               	movf	MangeKeys@KeyID,w,c
  2038  0008B6  0D03               	mullw	3
  2039  0008B8  0E01               	movlw	1
  2040  0008BA  26F3               	addwf	prodl,f,c
  2041  0008BC  0E00               	movlw	0
  2042  0008BE  22F4               	addwfc	prodh,f,c
  2043  0008C0  0E64               	movlw	low _KeyInternalData
  2044  0008C2  24F3               	addwf	prodl,w,c
  2045  0008C4  6ED9               	movwf	fsr2l,c
  2046  0008C6  0E00               	movlw	high _KeyInternalData
  2047  0008C8  20F4               	addwfc	prodh,w,c
  2048  0008CA  6EDA               	movwf	fsr2h,c
  2049  0008CC  501A               	movf	MangeKeys@KeyID,w,c
  2050  0008CE  0D08               	mullw	8
  2051  0008D0  0E02               	movlw	2
  2052  0008D2  26F3               	addwf	prodl,f,c
  2053  0008D4  0E00               	movlw	0
  2054  0008D6  22F4               	addwfc	prodh,f,c
  2055  0008D8  0E1B               	movlw	low _KeyArrayConfig
  2056  0008DA  24F3               	addwf	prodl,w,c
  2057  0008DC  6EF6               	movwf	tblptrl,c
  2058  0008DE  0E06               	movlw	high _KeyArrayConfig
  2059  0008E0  20F4               	addwfc	prodh,w,c
  2060  0008E2  6EF7               	movwf	tblptrh,c
  2061  0008E4                     	if	0	;There are less than 3 active tblptr bytes
  2062  0008E4                     	endif
  2063  0008E4  50DE               	movf	postinc2,w,c
  2064  0008E6  0009               	tblrd		*+
  2065  0008E8  5CF5               	subwf	tablat,w,c
  2066  0008EA  50DE               	movf	postinc2,w,c
  2067  0008EC  0009               	tblrd		*+
  2068  0008EE  58F5               	subwfb	tablat,w,c
  2069  0008F0  B0D8               	btfsc	status,0,c
  2070  0008F2  D01F               	goto	l2723
  2071                           
  2072                           ;Key.c: 81: {
  2073                           ;Key.c: 82: KeyInternalData[KeyID].KeyCounter =
  2074                           ;Key.c: 83: KeyArrayConfig[KeyID].ReleaseTicks;
  2075  0008F4  501A               	movf	MangeKeys@KeyID,w,c
  2076  0008F6  0D08               	mullw	8
  2077  0008F8  0E02               	movlw	2
  2078  0008FA  26F3               	addwf	prodl,f,c
  2079  0008FC  0E00               	movlw	0
  2080  0008FE  22F4               	addwfc	prodh,f,c
  2081  000900  0E1B               	movlw	low _KeyArrayConfig
  2082  000902  24F3               	addwf	prodl,w,c
  2083  000904  6EF6               	movwf	tblptrl,c
  2084  000906  0E06               	movlw	high _KeyArrayConfig
  2085  000908  20F4               	addwfc	prodh,w,c
  2086  00090A  6EF7               	movwf	tblptrh,c
  2087  00090C                     	if	0	;There are less than 3 active tblptr bytes
  2088  00090C                     	endif
  2089  00090C  501A               	movf	MangeKeys@KeyID,w,c
  2090  00090E  0D03               	mullw	3
  2091  000910  0E01               	movlw	1
  2092  000912  26F3               	addwf	prodl,f,c
  2093  000914  0E00               	movlw	0
  2094  000916  22F4               	addwfc	prodh,f,c
  2095  000918  0E64               	movlw	low _KeyInternalData
  2096  00091A  24F3               	addwf	prodl,w,c
  2097  00091C  6ED9               	movwf	fsr2l,c
  2098  00091E  0E00               	movlw	high _KeyInternalData
  2099  000920  20F4               	addwfc	prodh,w,c
  2100  000922  6EDA               	movwf	fsr2h,c
  2101  000924  0009               	tblrd		*+
  2102  000926  CFF5 FFDE          	movff	tablat,postinc2
  2103  00092A  0008               	tblrd		*
  2104  00092C  CFF5 FFDD          	movff	tablat,postdec2
  2105                           
  2106                           ;Key.c: 84: }
  2107  000930  0012               	return	
  2108  000932                     l2723:
  2109                           
  2110                           ;Key.c: 85: else
  2111                           ;Key.c: 86: {
  2112                           ;Key.c: 87: KeyInternalData[KeyID].KeyCounter--;
  2113  000932  501A               	movf	MangeKeys@KeyID,w,c
  2114  000934  0D03               	mullw	3
  2115  000936  0E01               	movlw	1
  2116  000938  26F3               	addwf	prodl,f,c
  2117  00093A  0E00               	movlw	0
  2118  00093C  22F4               	addwfc	prodh,f,c
  2119  00093E  0E64               	movlw	low _KeyInternalData
  2120  000940  24F3               	addwf	prodl,w,c
  2121  000942  6ED9               	movwf	fsr2l,c
  2122  000944  0E00               	movlw	high _KeyInternalData
  2123  000946  20F4               	addwfc	prodh,w,c
  2124  000948  6EDA               	movwf	fsr2h,c
  2125  00094A  06DE               	decf	postinc2,f,c
  2126  00094C  0E00               	movlw	0
  2127  00094E  5ADD               	subwfb	postdec2,f,c
  2128                           
  2129                           ;Key.c: 88: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2130  000950  501A               	movf	MangeKeys@KeyID,w,c
  2131  000952  0D03               	mullw	3
  2132  000954  0E01               	movlw	1
  2133  000956  26F3               	addwf	prodl,f,c
  2134  000958  0E00               	movlw	0
  2135  00095A  22F4               	addwfc	prodh,f,c
  2136  00095C  0E64               	movlw	low _KeyInternalData
  2137  00095E  24F3               	addwf	prodl,w,c
  2138  000960  6ED9               	movwf	fsr2l,c
  2139  000962  0E00               	movlw	high _KeyInternalData
  2140  000964  20F4               	addwfc	prodh,w,c
  2141  000966  6EDA               	movwf	fsr2h,c
  2142  000968  50DE               	movf	postinc2,w,c
  2143  00096A  10DE               	iorwf	postinc2,w,c
  2144  00096C  A4D8               	btfss	status,2,c
  2145  00096E  0012               	return	
  2146                           
  2147                           ;Key.c: 89: {
  2148                           ;Key.c: 90: KeyInternalData[KeyID].KeyState = (unsigned char)0x40;
  2149  000970  501A               	movf	MangeKeys@KeyID,w,c
  2150  000972  0D03               	mullw	3
  2151  000974  0E64               	movlw	low _KeyInternalData
  2152  000976  24F3               	addwf	prodl,w,c
  2153  000978  6ED9               	movwf	fsr2l,c
  2154  00097A  0E00               	movlw	high _KeyInternalData
  2155  00097C  20F4               	addwfc	prodh,w,c
  2156  00097E  6EDA               	movwf	fsr2h,c
  2157  000980  0E40               	movlw	64
  2158  000982  6EDF               	movwf	indf2,c
  2159                           
  2160                           ;Key.c: 91: }
  2161                           ;Key.c: 92: }
  2162                           ;Key.c: 93: }
  2163                           ;Key.c: 94: break;
  2164  000984  0012               	return	
  2165  000986                     l2727:
  2166                           
  2167                           ;Key.c: 96: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  2168  000986  501A               	movf	MangeKeys@KeyID,w,c
  2169  000988  0D08               	mullw	8
  2170  00098A  0E01               	movlw	1
  2171  00098C  26F3               	addwf	prodl,f,c
  2172  00098E  0E00               	movlw	0
  2173  000990  22F4               	addwfc	prodh,f,c
  2174  000992  0E1B               	movlw	low _KeyArrayConfig
  2175  000994  24F3               	addwf	prodl,w,c
  2176  000996  6EF6               	movwf	tblptrl,c
  2177  000998  0E06               	movlw	high _KeyArrayConfig
  2178  00099A  20F4               	addwfc	prodh,w,c
  2179  00099C  6EF7               	movwf	tblptrh,c
  2180  00099E                     	if	0	;There are less than 3 active tblptr bytes
  2181  00099E                     	endif
  2182  00099E  0008               	tblrd		*
  2183  0009A0  50F5               	movf	tablat,w,c
  2184  0009A2  1819               	xorwf	MangeKeys@HWIreading,w,c
  2185  0009A4  A4D8               	btfss	status,2,c
  2186  0009A6  D01F               	goto	l2731
  2187                           
  2188                           ;Key.c: 97: {
  2189                           ;Key.c: 98: KeyInternalData[KeyID].KeyCounter =
  2190                           ;Key.c: 99: KeyArrayConfig[KeyID].ReleaseTicks;
  2191  0009A8  501A               	movf	MangeKeys@KeyID,w,c
  2192  0009AA  0D08               	mullw	8
  2193  0009AC  0E02               	movlw	2
  2194  0009AE  26F3               	addwf	prodl,f,c
  2195  0009B0  0E00               	movlw	0
  2196  0009B2  22F4               	addwfc	prodh,f,c
  2197  0009B4  0E1B               	movlw	low _KeyArrayConfig
  2198  0009B6  24F3               	addwf	prodl,w,c
  2199  0009B8  6EF6               	movwf	tblptrl,c
  2200  0009BA  0E06               	movlw	high _KeyArrayConfig
  2201  0009BC  20F4               	addwfc	prodh,w,c
  2202  0009BE  6EF7               	movwf	tblptrh,c
  2203  0009C0                     	if	0	;There are less than 3 active tblptr bytes
  2204  0009C0                     	endif
  2205  0009C0  501A               	movf	MangeKeys@KeyID,w,c
  2206  0009C2  0D03               	mullw	3
  2207  0009C4  0E01               	movlw	1
  2208  0009C6  26F3               	addwf	prodl,f,c
  2209  0009C8  0E00               	movlw	0
  2210  0009CA  22F4               	addwfc	prodh,f,c
  2211  0009CC  0E64               	movlw	low _KeyInternalData
  2212  0009CE  24F3               	addwf	prodl,w,c
  2213  0009D0  6ED9               	movwf	fsr2l,c
  2214  0009D2  0E00               	movlw	high _KeyInternalData
  2215  0009D4  20F4               	addwfc	prodh,w,c
  2216  0009D6  6EDA               	movwf	fsr2h,c
  2217  0009D8  0009               	tblrd		*+
  2218  0009DA  CFF5 FFDE          	movff	tablat,postinc2
  2219  0009DE  0008               	tblrd		*
  2220  0009E0  CFF5 FFDD          	movff	tablat,postdec2
  2221                           
  2222                           ;Key.c: 100: }
  2223  0009E4  0012               	return	
  2224  0009E6                     l2731:
  2225                           
  2226                           ;Key.c: 101: else
  2227                           ;Key.c: 102: {
  2228                           ;Key.c: 103: KeyInternalData[KeyID].KeyCounter--;
  2229  0009E6  501A               	movf	MangeKeys@KeyID,w,c
  2230  0009E8  0D03               	mullw	3
  2231  0009EA  0E01               	movlw	1
  2232  0009EC  26F3               	addwf	prodl,f,c
  2233  0009EE  0E00               	movlw	0
  2234  0009F0  22F4               	addwfc	prodh,f,c
  2235  0009F2  0E64               	movlw	low _KeyInternalData
  2236  0009F4  24F3               	addwf	prodl,w,c
  2237  0009F6  6ED9               	movwf	fsr2l,c
  2238  0009F8  0E00               	movlw	high _KeyInternalData
  2239  0009FA  20F4               	addwfc	prodh,w,c
  2240  0009FC  6EDA               	movwf	fsr2h,c
  2241  0009FE  06DE               	decf	postinc2,f,c
  2242  000A00  0E00               	movlw	0
  2243  000A02  5ADD               	subwfb	postdec2,f,c
  2244                           
  2245                           ;Key.c: 104: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2246  000A04  501A               	movf	MangeKeys@KeyID,w,c
  2247  000A06  0D03               	mullw	3
  2248  000A08  0E01               	movlw	1
  2249  000A0A  26F3               	addwf	prodl,f,c
  2250  000A0C  0E00               	movlw	0
  2251  000A0E  22F4               	addwfc	prodh,f,c
  2252  000A10  0E64               	movlw	low _KeyInternalData
  2253  000A12  24F3               	addwf	prodl,w,c
  2254  000A14  6ED9               	movwf	fsr2l,c
  2255  000A16  0E00               	movlw	high _KeyInternalData
  2256  000A18  20F4               	addwfc	prodh,w,c
  2257  000A1A  6EDA               	movwf	fsr2h,c
  2258  000A1C  50DE               	movf	postinc2,w,c
  2259  000A1E  10DE               	iorwf	postinc2,w,c
  2260  000A20  A4D8               	btfss	status,2,c
  2261  000A22  0012               	return	
  2262                           
  2263                           ;Key.c: 105: {
  2264                           ;Key.c: 106: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  2265  000A24  501A               	movf	MangeKeys@KeyID,w,c
  2266  000A26  0D03               	mullw	3
  2267  000A28  0E64               	movlw	low _KeyInternalData
  2268  000A2A  24F3               	addwf	prodl,w,c
  2269  000A2C  6ED9               	movwf	fsr2l,c
  2270  000A2E  0E00               	movlw	high _KeyInternalData
  2271  000A30  20F4               	addwfc	prodh,w,c
  2272  000A32  6EDA               	movwf	fsr2h,c
  2273  000A34  0E80               	movlw	128
  2274  000A36  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;Key.c: 107: }
  2277                           ;Key.c: 108: }
  2278                           ;Key.c: 109: break;
  2279  000A38  0012               	return	
  2280  000A3A                     l2735:
  2281                           
  2282                           ;Key.c: 111: KeyInternalData[KeyID].KeyState = (unsigned char)0x00;
  2283  000A3A  501A               	movf	MangeKeys@KeyID,w,c
  2284  000A3C  0D03               	mullw	3
  2285  000A3E  0E64               	movlw	low _KeyInternalData
  2286  000A40  24F3               	addwf	prodl,w,c
  2287  000A42  6ED9               	movwf	fsr2l,c
  2288  000A44  0E00               	movlw	high _KeyInternalData
  2289  000A46  20F4               	addwfc	prodh,w,c
  2290  000A48  6EDA               	movwf	fsr2h,c
  2291  000A4A  0E00               	movlw	0
  2292  000A4C  6EDF               	movwf	indf2,c
  2293                           
  2294                           ;Key.c: 113: }
  2295                           
  2296                           ;Key.c: 112: break;
  2297  000A4E  0012               	return	
  2298  000A50                     l2739:
  2299  000A50  5018               	movf	MangeKeys@KeyState,w,c
  2300                           
  2301                           ; Switch size 1, requested type "space"
  2302                           ; Number of cases is 3, Range of values is 0 to 2
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte           10     6 (average)
  2306                           ;	Chosen strategy is simple_byte
  2307  000A52  0A00               	xorlw	0	; case 0
  2308  000A54  B4D8               	btfsc	status,2,c
  2309  000A56  D60A               	goto	l2693
  2310  000A58  0A01               	xorlw	1	; case 1
  2311  000A5A  B4D8               	btfsc	status,2,c
  2312  000A5C  D682               	goto	l2705
  2313  000A5E  0A03               	xorlw	3	; case 2
  2314  000A60  B4D8               	btfsc	status,2,c
  2315  000A62  D791               	goto	l2727
  2316  000A64  D7EA               	goto	l2735
  2317  000A66                     __end_of_MangeKeys:
  2318                           	opt stack 0
  2319                           tosu	equ	0xFFF
  2320                           tosh	equ	0xFFE
  2321                           tosl	equ	0xFFD
  2322                           pclath	equ	0xFFA
  2323                           tblptru	equ	0xFF8
  2324                           tblptrh	equ	0xFF7
  2325                           tblptrl	equ	0xFF6
  2326                           tablat	equ	0xFF5
  2327                           prodh	equ	0xFF4
  2328                           prodl	equ	0xFF3
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postinc1	equ	0xFE6
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function _HWI_DIGI_READ *****************
  2342 ;; Defined at:
  2343 ;;		line 92 in file "../../HWIsource/HWI_DIGITAL.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  pin             1    wreg     unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  pin             1   19[COMRAM] unsigned char 
  2348 ;;  HWIread         1   20[COMRAM] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      unsigned char 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2358 ;;      Params:         0       0       0       0       0       0       0
  2359 ;;      Locals:         2       0       0       0       0       0       0
  2360 ;;      Temps:          0       0       0       0       0       0       0
  2361 ;;      Totals:         2       0       0       0       0       0       0
  2362 ;;Total ram usage:        2 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    4
  2365 ;; This function calls:
  2366 ;;		Nothing
  2367 ;; This function is called by:
  2368 ;;		_MangeKeys
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text10
  2373  001A50                     __ptext10:
  2374                           	opt stack 0
  2375  001A50                     _HWI_DIGI_READ:
  2376                           	opt stack 22
  2377                           
  2378                           ;incstack = 0
  2379                           ;HWI_DIGI_READ@pin stored from wreg
  2380  001A50  6E14               	movwf	HWI_DIGI_READ@pin,c
  2381                           
  2382                           ;HWI_DIGITAL.c: 94: unsigned char HWIread;
  2383                           ;HWI_DIGITAL.c: 96: switch (pin)
  2384  001A52  D00F               	goto	l2539
  2385  001A54                     l473:
  2386                           
  2387                           ;HWI_DIGITAL.c: 99: HWIread = PORTBbits.RB2;
  2388  001A54  0E00               	movlw	0
  2389  001A56  B481               	btfsc	3969,2,c	;volatile
  2390  001A58  0E01               	movlw	1
  2391  001A5A  D009               	goto	L1
  2392  001A5C                     l475:
  2393                           
  2394                           ;HWI_DIGITAL.c: 102: HWIread = PORTBbits.RB3;
  2395  001A5C  0E00               	movlw	0
  2396  001A5E  B681               	btfsc	3969,3,c	;volatile
  2397  001A60  0E01               	movlw	1
  2398  001A62  D005               	goto	L1
  2399  001A64                     l476:
  2400                           
  2401                           ;HWI_DIGITAL.c: 105: HWIread = PORTBbits.RB4;
  2402  001A64  0E00               	movlw	0
  2403  001A66  B881               	btfsc	3969,4,c	;volatile
  2404  001A68  0E01               	movlw	1
  2405  001A6A  D001               	goto	L1
  2406  001A6C                     l2535:
  2407                           
  2408                           ;HWI_DIGITAL.c: 108: HWIread = (unsigned char)0;
  2409  001A6C  0E00               	movlw	0
  2410  001A6E                     L1:
  2411  001A6E  6E15               	movwf	HWI_DIGI_READ@HWIread,c
  2412                           
  2413                           ;HWI_DIGITAL.c: 110: }
  2414                           
  2415                           ;HWI_DIGITAL.c: 109: break;
  2416  001A70  D00B               	goto	l474
  2417  001A72                     l2539:
  2418  001A72  5014               	movf	HWI_DIGI_READ@pin,w,c
  2419                           
  2420                           ; Switch size 1, requested type "space"
  2421                           ; Number of cases is 3, Range of values is 15 to 17
  2422                           ; switch strategies available:
  2423                           ; Name         Instructions Cycles
  2424                           ; simple_byte           10     6 (average)
  2425                           ;	Chosen strategy is simple_byte
  2426  001A74  0A0F               	xorlw	15	; case 15
  2427  001A76  B4D8               	btfsc	status,2,c
  2428  001A78  D7ED               	goto	l473
  2429  001A7A  0A1F               	xorlw	31	; case 16
  2430  001A7C  B4D8               	btfsc	status,2,c
  2431  001A7E  D7EE               	goto	l475
  2432  001A80  0A01               	xorlw	1	; case 17
  2433  001A82  B4D8               	btfsc	status,2,c
  2434  001A84  D7EF               	goto	l476
  2435  001A86  D7F2               	goto	l2535
  2436  001A88                     l474:
  2437                           
  2438                           ;HWI_DIGITAL.c: 111: return HWIread;
  2439  001A88  5015               	movf	HWI_DIGI_READ@HWIread,w,c
  2440  001A8A  0012               	return		;funcret
  2441  001A8C                     __end_of_HWI_DIGI_READ:
  2442                           	opt stack 0
  2443                           tosu	equ	0xFFF
  2444                           tosh	equ	0xFFE
  2445                           tosl	equ	0xFFD
  2446                           pclath	equ	0xFFA
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postinc1	equ	0xFE6
  2456                           fsr1h	equ	0xFE2
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8
  2464                           
  2465 ;; *************** function _EepromManage *****************
  2466 ;; Defined at:
  2467 ;;		line 82 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;		None
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  WriteSuccess    1   22[COMRAM] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2481 ;;      Params:         0       0       0       0       0       0       0
  2482 ;;      Locals:         1       0       0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0
  2484 ;;      Totals:         1       0       0       0       0       0       0
  2485 ;;Total ram usage:        1 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    5
  2488 ;; This function calls:
  2489 ;;		_HWIeeprom_Write
  2490 ;; This function is called by:
  2491 ;;		_ManageDrivers
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text11
  2496  001954                     __ptext11:
  2497                           	opt stack 0
  2498  001954                     _EepromManage:
  2499                           	opt stack 22
  2500                           
  2501                           ;Eeprom.c: 84: static unsigned char WriteIndex = ((unsigned char)0);
  2502                           ;Eeprom.c: 85: unsigned char WriteSuccess;
  2503                           ;Eeprom.c: 87: if((unsigned char)1 == WriteRequest )
  2504                           
  2505                           ;incstack = 0
  2506  001954  044C               	decf	_WriteRequest,w,c
  2507  001956  A4D8               	btfss	status,2,c
  2508  001958  0012               	return	
  2509                           
  2510                           ;Eeprom.c: 88: {
  2511                           ;Eeprom.c: 89: if(WriteIndex == DataSize)
  2512  00195A  504A               	movf	_DataSize,w,c
  2513  00195C  1849               	xorwf	EepromManage@WriteIndex,w,c
  2514  00195E  A4D8               	btfss	status,2,c
  2515  001960  D005               	goto	l2683
  2516                           
  2517                           ;Eeprom.c: 90: {
  2518                           ;Eeprom.c: 91: WriteIndex = (unsigned char)0;
  2519  001962  0E00               	movlw	0
  2520  001964  6E49               	movwf	EepromManage@WriteIndex,c
  2521                           
  2522                           ;Eeprom.c: 92: WriteRequest = (unsigned char)0;
  2523  001966  0E00               	movlw	0
  2524  001968  6E4C               	movwf	_WriteRequest,c
  2525                           
  2526                           ;Eeprom.c: 96: }
  2527                           ;Eeprom.c: 97: }
  2528  00196A  0012               	return	
  2529  00196C                     l2683:
  2530                           
  2531                           ;Eeprom.c: 98: else
  2532                           ;Eeprom.c: 99: {
  2533                           ;Eeprom.c: 100: WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[Wri
      +                          teIndex]);
  2534  00196C  5049               	movf	EepromManage@WriteIndex,w,c
  2535  00196E  0D01               	mullw	1
  2536  001970  0E80               	movlw	low _DataArray
  2537  001972  24F3               	addwf	prodl,w,c
  2538  001974  6ED9               	movwf	fsr2l,c
  2539  001976  0E00               	movlw	high _DataArray
  2540  001978  20F4               	addwfc	prodh,w,c
  2541  00197A  6EDA               	movwf	fsr2h,c
  2542  00197C  50DF               	movf	indf2,w,c
  2543  00197E  6E14               	movwf	HWIeeprom_Write@Data,c
  2544  001980  504B               	movf	_EEPROMaddr,w,c
  2545  001982  2449               	addwf	EepromManage@WriteIndex,w,c
  2546  001984  EC7D  F00D         	call	_HWIeeprom_Write
  2547  001988  6E17               	movwf	EepromManage@WriteSuccess,c
  2548                           
  2549                           ;Eeprom.c: 101: if( (unsigned char)1 == WriteSuccess )
  2550  00198A  0417               	decf	EepromManage@WriteSuccess,w,c
  2551  00198C  A4D8               	btfss	status,2,c
  2552  00198E  0012               	return	
  2553                           
  2554                           ;Eeprom.c: 102: {
  2555                           ;Eeprom.c: 103: WriteIndex++;
  2556  001990  2A49               	incf	EepromManage@WriteIndex,f,c
  2557  001992  0012               	return	
  2558  001994                     __end_of_EepromManage:
  2559                           	opt stack 0
  2560                           tosu	equ	0xFFF
  2561                           tosh	equ	0xFFE
  2562                           tosl	equ	0xFFD
  2563                           pclath	equ	0xFFA
  2564                           tblptru	equ	0xFF8
  2565                           tblptrh	equ	0xFF7
  2566                           tblptrl	equ	0xFF6
  2567                           tablat	equ	0xFF5
  2568                           prodh	equ	0xFF4
  2569                           prodl	equ	0xFF3
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           postinc1	equ	0xFE6
  2573                           fsr1h	equ	0xFE2
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _HWIeeprom_Write *****************
  2583 ;; Defined at:
  2584 ;;		line 6 in file "../../HWIeeprom/HWIeeprom.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  address         1    wreg     unsigned char 
  2587 ;;  Data            1   19[COMRAM] unsigned char 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  address         1   20[COMRAM] unsigned char 
  2590 ;;  WriteSuccess    1   21[COMRAM] unsigned char 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      unsigned char 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2600 ;;      Params:         1       0       0       0       0       0       0
  2601 ;;      Locals:         2       0       0       0       0       0       0
  2602 ;;      Temps:          0       0       0       0       0       0       0
  2603 ;;      Totals:         3       0       0       0       0       0       0
  2604 ;;Total ram usage:        3 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    4
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_EepromManage
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text12
  2615  001AFA                     __ptext12:
  2616                           	opt stack 0
  2617  001AFA                     _HWIeeprom_Write:
  2618                           	opt stack 22
  2619                           
  2620                           ;incstack = 0
  2621                           ;HWIeeprom_Write@address stored from wreg
  2622  001AFA  6E15               	movwf	HWIeeprom_Write@address,c
  2623                           
  2624                           ;HWIeeprom.c: 8: unsigned char WriteSuccess;
  2625                           ;HWIeeprom.c: 9: if((unsigned char)0 == EECON1bits.WR )
  2626  001AFC  B2A6               	btfsc	4006,1,c	;volatile
  2627  001AFE  D010               	goto	l2527
  2628                           
  2629                           ;HWIeeprom.c: 10: {
  2630                           ;HWIeeprom.c: 11: EEADR = address;
  2631  001B00  C015  FFA9         	movff	HWIeeprom_Write@address,4009	;volatile
  2632                           
  2633                           ;HWIeeprom.c: 12: EEDATA = Data;
  2634  001B04  C014  FFA8         	movff	HWIeeprom_Write@Data,4008	;volatile
  2635                           
  2636                           ;HWIeeprom.c: 13: EECON1bits.EEPGD = (unsigned char)0;
  2637  001B08  9EA6               	bcf	4006,7,c	;volatile
  2638                           
  2639                           ;HWIeeprom.c: 14: EECON1bits.CFGS = (unsigned char)0;
  2640  001B0A  9CA6               	bcf	4006,6,c	;volatile
  2641                           
  2642                           ;HWIeeprom.c: 15: EECON1bits.WREN = (unsigned char)1;
  2643  001B0C  84A6               	bsf	4006,2,c	;volatile
  2644                           
  2645                           ;HWIeeprom.c: 17: INTCONbits.GIE = (unsigned char)0;
  2646  001B0E  9EF2               	bcf	intcon,7,c	;volatile
  2647                           
  2648                           ;HWIeeprom.c: 18: EECON2 = (unsigned char)0x55;
  2649  001B10  0E55               	movlw	85
  2650  001B12  6EA7               	movwf	4007,c	;volatile
  2651                           
  2652                           ;HWIeeprom.c: 19: EECON2 = (unsigned char)0xAA;
  2653  001B14  0EAA               	movlw	170
  2654  001B16  6EA7               	movwf	4007,c	;volatile
  2655                           
  2656                           ;HWIeeprom.c: 20: EECON1bits.WR = (unsigned char)1;
  2657  001B18  82A6               	bsf	4006,1,c	;volatile
  2658                           
  2659                           ;HWIeeprom.c: 21: INTCONbits.GIE = (unsigned char)1;
  2660  001B1A  8EF2               	bsf	intcon,7,c	;volatile
  2661                           
  2662                           ;HWIeeprom.c: 22: WriteSuccess = (unsigned char)1;
  2663  001B1C  0E01               	movlw	1
  2664  001B1E  D001               	goto	L2
  2665  001B20                     l2527:
  2666                           
  2667                           ;HWIeeprom.c: 24: else
  2668                           ;HWIeeprom.c: 25: {
  2669                           ;HWIeeprom.c: 26: WriteSuccess = (unsigned char)0;
  2670  001B20  0E00               	movlw	0
  2671  001B22                     L2:
  2672  001B22  6E16               	movwf	HWIeeprom_Write@WriteSuccess,c
  2673                           
  2674                           ;HWIeeprom.c: 27: }
  2675                           ;HWIeeprom.c: 29: return WriteSuccess;
  2676  001B24  5016               	movf	HWIeeprom_Write@WriteSuccess,w,c
  2677  001B26  0012               	return	
  2678  001B28                     __end_of_HWIeeprom_Write:
  2679                           	opt stack 0
  2680                           tosu	equ	0xFFF
  2681                           tosh	equ	0xFFE
  2682                           tosl	equ	0xFFD
  2683                           pclath	equ	0xFFA
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           intcon	equ	0xFF2
  2691                           postinc0	equ	0xFEE
  2692                           wreg	equ	0xFE8
  2693                           postinc1	equ	0xFE6
  2694                           fsr1h	equ	0xFE2
  2695                           fsr1l	equ	0xFE1
  2696                           indf2	equ	0xFDF
  2697                           postinc2	equ	0xFDE
  2698                           postdec2	equ	0xFDD
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _APP_MANAGE *****************
  2704 ;; Defined at:
  2705 ;;		line 66 in file "../../../../Common/App/APP.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  StatusByte      2   17[BANK0 ] struct .
  2710 ;;  CurrentSpeed    2   15[BANK0 ] unsigned short 
  2711 ;;  AvgSpeed        2   13[BANK0 ] unsigned short 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2721 ;;      Params:         0       0       0       0       0       0       0
  2722 ;;      Locals:         0       6       0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0       0       0
  2724 ;;      Totals:         0       6       0       0       0       0       0
  2725 ;;Total ram usage:        6 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    6
  2728 ;; This function calls:
  2729 ;;		_APP_CALC_AVGSPDmanage
  2730 ;;		_APP_CALC_MAXSPDmanage
  2731 ;;		_APP_CALC_TIMEmanage
  2732 ;;		_APP_CALC_TIMEsetTravelTime
  2733 ;;		_APP_HMImanage
  2734 ;;		_APP_SLEEPmanage
  2735 ;;		_BCDsendNumber
  2736 ;;		_BlinkDigit
  2737 ;;		_DisableDistanceCntr
  2738 ;;		_Eeprom_Write_Block
  2739 ;;		_GetAvgSpeed
  2740 ;;		_GetDistance
  2741 ;;		_IncrementDecrementSingleDigit
  2742 ;;		_SetCircumfirunce
  2743 ;;		_memcpy
  2744 ;;		_memset
  2745 ;; This function is called by:
  2746 ;;		_ManageApplication
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text13
  2751  000A66                     __ptext13:
  2752                           	opt stack 0
  2753  000A66                     _APP_MANAGE:
  2754                           	opt stack 21
  2755                           
  2756                           ;APP.c: 68: unsigned short AvgSpeed;
  2757                           ;APP.c: 69: unsigned short CurrentSpeed;
  2758                           ;APP.c: 70: APP_INFOR_BYTE StatusByte;
  2759                           ;APP.c: 72: memcpy(&StatusByte,&APP_DATA.StatusByte,sizeof(APP_INFOR_BYTE));
  2760                           
  2761                           ;incstack = 0
  2762  000A66  0EEF               	movlw	low APP_MANAGE@StatusByte
  2763  000A68  6E14               	movwf	memcpy@d1,c
  2764  000A6A  0E00               	movlw	high APP_MANAGE@StatusByte
  2765  000A6C  6E15               	movwf	memcpy@d1+1,c
  2766  000A6E  0E58               	movlw	low (_APP_DATA+3)
  2767  000A70  6E16               	movwf	memcpy@s1,c
  2768  000A72  0E00               	movlw	high (_APP_DATA+3)
  2769  000A74  6E17               	movwf	memcpy@s1+1,c
  2770  000A76  0E00               	movlw	0
  2771  000A78  6E19               	movwf	memcpy@n+1,c
  2772  000A7A  0E02               	movlw	2
  2773  000A7C  6E18               	movwf	memcpy@n,c
  2774  000A7E  ECCA  F00C         	call	_memcpy	;wreg free
  2775                           
  2776                           ;APP.c: 74: APP_DATA.TravelledDistance = GetDistance();
  2777  000A82  EC78  F00E         	call	_GetDistance	;wreg free
  2778  000A86  C014  F05A         	movff	?_GetDistance,_APP_DATA+5
  2779  000A8A  C015  F05B         	movff	?_GetDistance+1,_APP_DATA+6
  2780  000A8E  C016  F05C         	movff	?_GetDistance+2,_APP_DATA+7
  2781  000A92  C017  F05D         	movff	?_GetDistance+3,_APP_DATA+8
  2782                           
  2783                           ;APP.c: 76: APP_HMImanage(&StatusByte);
  2784  000A96  0EEF               	movlw	low APP_MANAGE@StatusByte
  2785  000A98  6E1C               	movwf	APP_HMImanage@StatusByte,c
  2786  000A9A  0E00               	movlw	high APP_MANAGE@StatusByte
  2787  000A9C  6E1D               	movwf	APP_HMImanage@StatusByte+1,c
  2788  000A9E  EC95  F006         	call	_APP_HMImanage	;wreg free
  2789                           
  2790                           ;APP.c: 77: APP_DATA.TravelTime = APP_CALC_TIMEmanage(&StatusByte);
  2791  000AA2  0EEF               	movlw	low APP_MANAGE@StatusByte
  2792  000AA4  6E14               	movwf	APP_CALC_TIMEmanage@StatusByte,c
  2793  000AA6  0E00               	movlw	high APP_MANAGE@StatusByte
  2794  000AA8  6E15               	movwf	APP_CALC_TIMEmanage@StatusByte+1,c
  2795  000AAA  EC12  F00B         	call	_APP_CALC_TIMEmanage	;wreg free
  2796  000AAE  C014  F05E         	movff	?_APP_CALC_TIMEmanage,_APP_DATA+9
  2797  000AB2  C015  F05F         	movff	?_APP_CALC_TIMEmanage+1,_APP_DATA+10
  2798  000AB6  C016  F060         	movff	?_APP_CALC_TIMEmanage+2,_APP_DATA+11
  2799  000ABA  C017  F061         	movff	?_APP_CALC_TIMEmanage+3,_APP_DATA+12
  2800                           
  2801                           ;APP.c: 78: AvgSpeed = APP_CALC_AVGSPDmanage(&StatusByte , APP_DATA.TravelTime , APP_DAT
      +                          A.TravelledDistance);
  2802  000ABE  0EEF               	movlw	low APP_MANAGE@StatusByte
  2803  000AC0  6E14               	movwf	APP_CALC_AVGSPDmanage@StatusByte,c
  2804  000AC2  0E00               	movlw	high APP_MANAGE@StatusByte
  2805  000AC4  6E15               	movwf	APP_CALC_AVGSPDmanage@StatusByte+1,c
  2806  000AC6  C05E  F016         	movff	_APP_DATA+9,APP_CALC_AVGSPDmanage@TravelTime
  2807  000ACA  C05F  F017         	movff	_APP_DATA+10,APP_CALC_AVGSPDmanage@TravelTime+1
  2808  000ACE  C060  F018         	movff	_APP_DATA+11,APP_CALC_AVGSPDmanage@TravelTime+2
  2809  000AD2  C061  F019         	movff	_APP_DATA+12,APP_CALC_AVGSPDmanage@TravelTime+3
  2810  000AD6  C05A  F01A         	movff	_APP_DATA+5,APP_CALC_AVGSPDmanage@Distance
  2811  000ADA  C05B  F01B         	movff	_APP_DATA+6,APP_CALC_AVGSPDmanage@Distance+1
  2812  000ADE  C05C  F01C         	movff	_APP_DATA+7,APP_CALC_AVGSPDmanage@Distance+2
  2813  000AE2  C05D  F01D         	movff	_APP_DATA+8,APP_CALC_AVGSPDmanage@Distance+3
  2814  000AE6  EC89  F00E         	call	_APP_CALC_AVGSPDmanage	;wreg free
  2815  000AEA  C014  F0EB         	movff	?_APP_CALC_AVGSPDmanage,APP_MANAGE@AvgSpeed
  2816  000AEE  C015  F0EC         	movff	?_APP_CALC_AVGSPDmanage+1,APP_MANAGE@AvgSpeed+1
  2817                           
  2818                           ;APP.c: 79: APP_SLEEPmanage(&StatusByte);
  2819  000AF2  0EEF               	movlw	low APP_MANAGE@StatusByte
  2820  000AF4  6E14               	movwf	APP_SLEEPmanage@StatusByte,c
  2821  000AF6  0E00               	movlw	high APP_MANAGE@StatusByte
  2822  000AF8  6E15               	movwf	APP_SLEEPmanage@StatusByte+1,c
  2823  000AFA  ECBD  F00E         	call	_APP_SLEEPmanage	;wreg free
  2824                           
  2825                           ;APP.c: 81: CurrentSpeed = GetAvgSpeed(1);
  2826  000AFE  0E01               	movlw	1
  2827  000B00  EC83  F00A         	call	_GetAvgSpeed
  2828  000B04  C02D  F0ED         	movff	?_GetAvgSpeed,APP_MANAGE@CurrentSpeed
  2829  000B08  C02E  F0EE         	movff	?_GetAvgSpeed+1,APP_MANAGE@CurrentSpeed+1
  2830                           
  2831                           ;APP.c: 82: APP_DATA.MaxSpeed = APP_CALC_MAXSPDmanage(CurrentSpeed);
  2832  000B0C  C0ED  F014         	movff	APP_MANAGE@CurrentSpeed,APP_CALC_MAXSPDmanage@CurrentSpeed
  2833  000B10  C0EE  F015         	movff	APP_MANAGE@CurrentSpeed+1,APP_CALC_MAXSPDmanage@CurrentSpeed+1
  2834  000B14  EC27  F00E         	call	_APP_CALC_MAXSPDmanage	;wreg free
  2835  000B18  C014  F062         	movff	?_APP_CALC_MAXSPDmanage,_APP_DATA+13
  2836  000B1C  C015  F063         	movff	?_APP_CALC_MAXSPDmanage+1,_APP_DATA+14
  2837                           
  2838                           ;APP.c: 83: DisableDistanceCntr(StatusByte.StopMeasureFlag);
  2839  000B20  0100               	movlb	0	; () banked
  2840  000B22  A9F0               	btfss	(APP_MANAGE@StatusByte+1)& (0+255),4,b
  2841  000B24  D002               	goto	u2940
  2842  000B26  0E01               	movlw	1
  2843  000B28  D001               	goto	u2946
  2844  000B2A                     u2940:
  2845  000B2A  0E00               	movlw	0
  2846  000B2C                     u2946:
  2847  000B2C  ECA1  F00E         	call	_DisableDistanceCntr
  2848                           
  2849                           ;APP.c: 85: BCDsendNumber(CurrentSpeed,0,1,1);
  2850  000B30  C0ED  F02D         	movff	APP_MANAGE@CurrentSpeed,BCDsendNumber@Number
  2851  000B34  C0EE  F02E         	movff	APP_MANAGE@CurrentSpeed+1,BCDsendNumber@Number+1
  2852  000B38  6A2F               	clrf	BCDsendNumber@Number+2,c
  2853  000B3A  6A30               	clrf	BCDsendNumber@Number+3,c
  2854  000B3C  0E00               	movlw	0
  2855  000B3E  6E31               	movwf	BCDsendNumber@Line,c
  2856  000B40  0E01               	movlw	1
  2857  000B42  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  2858  000B44  0E01               	movlw	1
  2859  000B46  6E33               	movwf	BCDsendNumber@EnableTranc,c
  2860  000B48  EC8C  F007         	call	_BCDsendNumber	;wreg free
  2861                           
  2862                           ;APP.c: 87: switch(StatusByte.CurrentState)
  2863  000B4C  D0B8               	goto	l3369
  2864  000B4E                     l3329:
  2865                           
  2866                           ;APP.c: 90: BCDsendNumber(APP_DATA.TravelledDistance ,1 ,1 ,1);
  2867  000B4E  C05A  F02D         	movff	_APP_DATA+5,BCDsendNumber@Number
  2868  000B52  C05B  F02E         	movff	_APP_DATA+6,BCDsendNumber@Number+1
  2869  000B56  C05C  F02F         	movff	_APP_DATA+7,BCDsendNumber@Number+2
  2870  000B5A  C05D  F030         	movff	_APP_DATA+8,BCDsendNumber@Number+3
  2871  000B5E  0E01               	movlw	1
  2872  000B60  6E31               	movwf	BCDsendNumber@Line,c
  2873  000B62  0E01               	movlw	1
  2874  000B64  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  2875  000B66  0E01               	movlw	1
  2876  000B68  6E33               	movwf	BCDsendNumber@EnableTranc,c
  2877  000B6A  EC8C  F007         	call	_BCDsendNumber	;wreg free
  2878                           
  2879                           ;APP.c: 91: break;
  2880  000B6E  D0BA               	goto	l3371
  2881  000B70                     l53:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;APP.c: 95: if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
  2885  000B70  0100               	movlb	0	; () banked
  2886  000B72  ADEF               	btfss	APP_MANAGE@StatusByte& (0+255),6,b
  2887  000B74  D00A               	goto	l3333
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;APP.c: 96: {
  2891                           ;APP.c: 97: APP_CALC_TIMEsetTravelTime((unsigned long)0);
  2892  000B76  0E00               	movlw	0
  2893  000B78  6E14               	movwf	APP_CALC_TIMEsetTravelTime@TravelTime,c
  2894  000B7A  0E00               	movlw	0
  2895  000B7C  6E15               	movwf	APP_CALC_TIMEsetTravelTime@TravelTime+1,c
  2896  000B7E  0E00               	movlw	0
  2897  000B80  6E16               	movwf	APP_CALC_TIMEsetTravelTime@TravelTime+2,c
  2898  000B82  0E00               	movlw	0
  2899  000B84  6E17               	movwf	APP_CALC_TIMEsetTravelTime@TravelTime+3,c
  2900  000B86  EC52  F00E         	call	_APP_CALC_TIMEsetTravelTime	;wreg free
  2901  000B8A                     l3333:
  2902                           
  2903                           ;APP.c: 98: }
  2904                           ;APP.c: 99: BCDsendNumber(APP_DATA.TravelTime ,1 ,0 ,1);
  2905  000B8A  C05E  F02D         	movff	_APP_DATA+9,BCDsendNumber@Number
  2906  000B8E  C05F  F02E         	movff	_APP_DATA+10,BCDsendNumber@Number+1
  2907  000B92  C060  F02F         	movff	_APP_DATA+11,BCDsendNumber@Number+2
  2908  000B96  C061  F030         	movff	_APP_DATA+12,BCDsendNumber@Number+3
  2909  000B9A  0E01               	movlw	1
  2910  000B9C  6E31               	movwf	BCDsendNumber@Line,c
  2911  000B9E  0E00               	movlw	0
  2912  000BA0  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  2913  000BA2  0E01               	movlw	1
  2914  000BA4  6E33               	movwf	BCDsendNumber@EnableTranc,c
  2915  000BA6  EC8C  F007         	call	_BCDsendNumber	;wreg free
  2916                           
  2917                           ;APP.c: 101: break;
  2918  000BAA  D09C               	goto	l3371
  2919  000BAC                     l3335:
  2920                           
  2921                           ;APP.c: 104: BCDsendNumber(AvgSpeed,1,1,1);
  2922  000BAC  C0EB  F02D         	movff	APP_MANAGE@AvgSpeed,BCDsendNumber@Number
  2923  000BB0  C0EC  F02E         	movff	APP_MANAGE@AvgSpeed+1,BCDsendNumber@Number+1
  2924  000BB4  6A2F               	clrf	BCDsendNumber@Number+2,c
  2925  000BB6  6A30               	clrf	BCDsendNumber@Number+3,c
  2926  000BB8  0E01               	movlw	1
  2927  000BBA  6E31               	movwf	BCDsendNumber@Line,c
  2928  000BBC  0E01               	movlw	1
  2929  000BBE  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  2930  000BC0  0E01               	movlw	1
  2931  000BC2  6E33               	movwf	BCDsendNumber@EnableTranc,c
  2932  000BC4  EC8C  F007         	call	_BCDsendNumber	;wreg free
  2933                           
  2934                           ;APP.c: 105: break;
  2935  000BC8  D08D               	goto	l3371
  2936  000BCA                     l3337:
  2937                           
  2938                           ;APP.c: 108: BCDsendNumber(APP_DATA.MaxSpeed , 1 ,1 ,1);
  2939  000BCA  C062  F02D         	movff	_APP_DATA+13,BCDsendNumber@Number
  2940  000BCE  C063  F02E         	movff	_APP_DATA+14,BCDsendNumber@Number+1
  2941  000BD2  6A2F               	clrf	BCDsendNumber@Number+2,c
  2942  000BD4  6A30               	clrf	BCDsendNumber@Number+3,c
  2943  000BD6  0E01               	movlw	1
  2944  000BD8  6E31               	movwf	BCDsendNumber@Line,c
  2945  000BDA  0E01               	movlw	1
  2946  000BDC  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  2947  000BDE  0E01               	movlw	1
  2948  000BE0  6E33               	movwf	BCDsendNumber@EnableTranc,c
  2949  000BE2  EC8C  F007         	call	_BCDsendNumber	;wreg free
  2950                           
  2951                           ;APP.c: 109: break;
  2952  000BE6  D07E               	goto	l3371
  2953  000BE8                     l57:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;APP.c: 113: if(StatusByte.DisplayState == (unsigned char)0x1)
  2957  000BE8  0100               	movlb	0	; () banked
  2958  000BEA  A7F0               	btfss	(APP_MANAGE@StatusByte+1)& (0+255),3,b
  2959  000BEC  D03D               	goto	l3359
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;APP.c: 114: {
  2963                           ;APP.c: 115: if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
  2964  000BEE  0100               	movlb	0	; () banked
  2965  000BF0  ADEF               	btfss	APP_MANAGE@StatusByte& (0+255),6,b
  2966  000BF2  D008               	goto	l59
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;APP.c: 116: {
  2970                           ;APP.c: 117: if(APP_DATA.CircumBlinkIndex == (4 - (unsigned char)1))
  2971  000BF4  0E03               	movlw	3
  2972  000BF6  1857               	xorwf	_APP_DATA+2,w,c
  2973  000BF8  A4D8               	btfss	status,2,c
  2974  000BFA  D002               	goto	l3345
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;APP.c: 118: {
  2978                           ;APP.c: 119: APP_DATA.CircumBlinkIndex = (unsigned char)0;
  2979  000BFC  0E00               	movlw	0
  2980  000BFE  D009               	goto	L3
  2981  000C00                     l3345:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;APP.c: 121: else
  2985                           ;APP.c: 122: {
  2986                           ;APP.c: 123: APP_DATA.CircumBlinkIndex ++;
  2987  000C00  2A57               	incf	_APP_DATA+2,f,c
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;APP.c: 124: }
  2991                           ;APP.c: 126: }
  2992  000C02  D02A               	goto	l3357
  2993  000C04                     l59:
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;APP.c: 127: else if((unsigned char)1 == StatusByte.ExtraDecrementFlag)
  2997  000C04  0100               	movlb	0	; () banked
  2998  000C06  AFEF               	btfss	APP_MANAGE@StatusByte& (0+255),7,b
  2999  000C08  D008               	goto	l63
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;APP.c: 128: {
  3003                           ;APP.c: 129: if(APP_DATA.CircumBlinkIndex == (unsigned char)0)
  3004  000C0A  5057               	movf	_APP_DATA+2,w,c
  3005  000C0C  A4D8               	btfss	status,2,c
  3006  000C0E  D003               	goto	l3351
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;APP.c: 130: {
  3010                           ;APP.c: 131: APP_DATA.CircumBlinkIndex = 4 - (unsigned char)1;
  3011  000C10  0E03               	movlw	3
  3012  000C12                     L3:
  3013  000C12  6E57               	movwf	_APP_DATA+2,c
  3014                           
  3015                           ;APP.c: 132: }
  3016  000C14  D021               	goto	l3357
  3017  000C16                     l3351:
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;APP.c: 133: else
  3021                           ;APP.c: 134: {
  3022                           ;APP.c: 135: APP_DATA.CircumBlinkIndex --;
  3023  000C16  0657               	decf	_APP_DATA+2,f,c
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;APP.c: 136: }
  3027                           ;APP.c: 137: }
  3028  000C18  D01F               	goto	l3357
  3029  000C1A                     l63:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;APP.c: 138: else if((unsigned char)1 == StatusByte.IncrementFlag )
  3033  000C1A  0100               	movlb	0	; () banked
  3034  000C1C  A9EF               	btfss	APP_MANAGE@StatusByte& (0+255),4,b
  3035  000C1E  D00B               	goto	l67
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;APP.c: 139: {
  3039                           ;APP.c: 140: APP_DATA.Circum = IncrementDecrementSingleDigit(
  3040                           ;APP.c: 141: APP_DATA.Circum,APP_DATA.CircumBlinkIndex,(unsigned char)0);
  3041  000C20  C055  F01B         	movff	_APP_DATA,IncrementDecrementSingleDigit@Number
  3042  000C24  C056  F01C         	movff	_APP_DATA+1,IncrementDecrementSingleDigit@Number+1
  3043  000C28  C057  F01D         	movff	_APP_DATA+2,IncrementDecrementSingleDigit@Index
  3044  000C2C  0E00               	movlw	0
  3045  000C2E  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  3046  000C30  EC65  F008         	call	_IncrementDecrementSingleDigit	;wreg free
  3047  000C34  D00D               	goto	L4
  3048  000C36                     l67:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;APP.c: 143: else if ((unsigned char)1 == StatusByte.DecrementFlag)
  3052  000C36  0100               	movlb	0	; () banked
  3053  000C38  ABEF               	btfss	APP_MANAGE@StatusByte& (0+255),5,b
  3054  000C3A  D00E               	goto	l3357
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;APP.c: 144: {
  3058                           ;APP.c: 145: APP_DATA.Circum = IncrementDecrementSingleDigit(
  3059                           ;APP.c: 146: APP_DATA.Circum,APP_DATA.CircumBlinkIndex,(unsigned char)1);
  3060  000C3C  C055  F01B         	movff	_APP_DATA,IncrementDecrementSingleDigit@Number
  3061  000C40  C056  F01C         	movff	_APP_DATA+1,IncrementDecrementSingleDigit@Number+1
  3062  000C44  C057  F01D         	movff	_APP_DATA+2,IncrementDecrementSingleDigit@Index
  3063  000C48  0E01               	movlw	1
  3064  000C4A  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  3065  000C4C  EC65  F008         	call	_IncrementDecrementSingleDigit	;wreg free
  3066  000C50                     L4:
  3067  000C50  C01B  F055         	movff	?_IncrementDecrementSingleDigit,_APP_DATA
  3068  000C54  C01C  F056         	movff	?_IncrementDecrementSingleDigit+1,_APP_DATA+1
  3069  000C58                     l3357:
  3070                           
  3071                           ;APP.c: 152: }
  3072                           ;APP.c: 153: BlinkDigit(APP_DATA.CircumBlinkIndex,1,(unsigned char)100);
  3073  000C58  0E01               	movlw	1
  3074  000C5A  6E14               	movwf	BlinkDigit@Line,c
  3075  000C5C  0E64               	movlw	100
  3076  000C5E  6E15               	movwf	BlinkDigit@duration,c
  3077  000C60  5057               	movf	_APP_DATA+2,w,c
  3078  000C62  EC81  F00E         	call	_BlinkDigit
  3079                           
  3080                           ;APP.c: 154: }
  3081  000C66  D007               	goto	l3361
  3082  000C68                     l3359:
  3083                           
  3084                           ;APP.c: 155: else
  3085                           ;APP.c: 156: {
  3086                           ;APP.c: 157: BlinkDigit(APP_DATA.CircumBlinkIndex,1,0);
  3087  000C68  0E01               	movlw	1
  3088  000C6A  6E14               	movwf	BlinkDigit@Line,c
  3089  000C6C  0E00               	movlw	0
  3090  000C6E  6E15               	movwf	BlinkDigit@duration,c
  3091  000C70  5057               	movf	_APP_DATA+2,w,c
  3092  000C72  EC81  F00E         	call	_BlinkDigit
  3093  000C76                     l3361:
  3094                           
  3095                           ;APP.c: 158: }
  3096                           ;APP.c: 160: BCDsendNumber(APP_DATA.Circum ,1, 0,0);
  3097  000C76  C055  F02D         	movff	_APP_DATA,BCDsendNumber@Number
  3098  000C7A  C056  F02E         	movff	_APP_DATA+1,BCDsendNumber@Number+1
  3099  000C7E  6A2F               	clrf	BCDsendNumber@Number+2,c
  3100  000C80  6A30               	clrf	BCDsendNumber@Number+3,c
  3101  000C82  0E01               	movlw	1
  3102  000C84  6E31               	movwf	BCDsendNumber@Line,c
  3103  000C86  0E00               	movlw	0
  3104  000C88  6E32               	movwf	BCDsendNumber@DecimalPlace,c
  3105  000C8A  0E00               	movlw	0
  3106  000C8C  6E33               	movwf	BCDsendNumber@EnableTranc,c
  3107  000C8E  EC8C  F007         	call	_BCDsendNumber	;wreg free
  3108                           
  3109                           ;APP.c: 161: SetCircumfirunce(APP_DATA.Circum);
  3110  000C92  C055  F014         	movff	_APP_DATA,SetCircumfirunce@Circum
  3111  000C96  C056  F015         	movff	_APP_DATA+1,SetCircumfirunce@Circum+1
  3112  000C9A  EC8E  F00E         	call	_SetCircumfirunce	;wreg free
  3113                           
  3114                           ;APP.c: 162: break;
  3115  000C9E  D022               	goto	l3371
  3116  000CA0                     l3365:
  3117                           
  3118                           ;APP.c: 165: memset(&StatusByte,0,sizeof(StatusByte));
  3119  000CA0  0EEF               	movlw	low APP_MANAGE@StatusByte
  3120  000CA2  6E14               	movwf	memset@p1,c
  3121  000CA4  0E00               	movlw	high APP_MANAGE@StatusByte
  3122  000CA6  6E15               	movwf	memset@p1+1,c
  3123  000CA8  0E00               	movlw	0
  3124  000CAA  6E17               	movwf	memset@c+1,c
  3125  000CAC  0E00               	movlw	0
  3126  000CAE  6E16               	movwf	memset@c,c
  3127  000CB0  0E00               	movlw	0
  3128  000CB2  6E19               	movwf	memset@n+1,c
  3129  000CB4  0E02               	movlw	2
  3130  000CB6  6E18               	movwf	memset@n,c
  3131  000CB8  ECC2  F00D         	call	_memset	;wreg free
  3132                           
  3133                           ;APP.c: 167: }
  3134                           
  3135                           ;APP.c: 166: break;
  3136  000CBC  D013               	goto	l3371
  3137  000CBE                     l3369:
  3138  000CBE  0100               	movlb	0	; () banked
  3139  000CC0  51EF               	movf	APP_MANAGE@StatusByte& (0+255),w,b
  3140  000CC2  0B07               	andlw	7
  3141                           
  3142                           ; Switch size 1, requested type "space"
  3143                           ; Number of cases is 5, Range of values is 0 to 4
  3144                           ; switch strategies available:
  3145                           ; Name         Instructions Cycles
  3146                           ; simple_byte           16     9 (average)
  3147                           ;	Chosen strategy is simple_byte
  3148  000CC4  0A00               	xorlw	0	; case 0
  3149  000CC6  B4D8               	btfsc	status,2,c
  3150  000CC8  D742               	goto	l3329
  3151  000CCA  0A01               	xorlw	1	; case 1
  3152  000CCC  B4D8               	btfsc	status,2,c
  3153  000CCE  D750               	goto	l53
  3154  000CD0  0A03               	xorlw	3	; case 2
  3155  000CD2  B4D8               	btfsc	status,2,c
  3156  000CD4  D76B               	goto	l3335
  3157  000CD6  0A01               	xorlw	1	; case 3
  3158  000CD8  B4D8               	btfsc	status,2,c
  3159  000CDA  D777               	goto	l3337
  3160  000CDC  0A07               	xorlw	7	; case 4
  3161  000CDE  B4D8               	btfsc	status,2,c
  3162  000CE0  D783               	goto	l57
  3163  000CE2  D7DE               	goto	l3365
  3164  000CE4                     l3371:
  3165                           
  3166                           ;APP.c: 169: memcpy(&APP_DATA.StatusByte,&StatusByte,sizeof(APP_INFOR_BYTE));
  3167  000CE4  0E58               	movlw	low (_APP_DATA+3)
  3168  000CE6  6E14               	movwf	memcpy@d1,c
  3169  000CE8  0E00               	movlw	high (_APP_DATA+3)
  3170  000CEA  6E15               	movwf	memcpy@d1+1,c
  3171  000CEC  0EEF               	movlw	low APP_MANAGE@StatusByte
  3172  000CEE  6E16               	movwf	memcpy@s1,c
  3173  000CF0  0E00               	movlw	high APP_MANAGE@StatusByte
  3174  000CF2  6E17               	movwf	memcpy@s1+1,c
  3175  000CF4  0E00               	movlw	0
  3176  000CF6  6E19               	movwf	memcpy@n+1,c
  3177  000CF8  0E02               	movlw	2
  3178  000CFA  6E18               	movwf	memcpy@n,c
  3179  000CFC  ECCA  F00C         	call	_memcpy	;wreg free
  3180                           
  3181                           ;APP.c: 171: if(StatusByte.EEPsaveFlag == (unsigned char)1)
  3182  000D00  0100               	movlb	0	; () banked
  3183  000D02  A7EF               	btfss	APP_MANAGE@StatusByte& (0+255),3,b
  3184  000D04  0012               	return	
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;APP.c: 172: {
  3188                           ;APP.c: 173: if((unsigned char)1 ==
  3189                           ;APP.c: 174: Eeprom_Write_Block(1,&APP_DATA,(unsigned char)sizeof(APP_DATA),(0)))
  3190  000D06  0E55               	movlw	low _APP_DATA
  3191  000D08  6E14               	movwf	Eeprom_Write_Block@DataPtr,c
  3192  000D0A  0E00               	movlw	high _APP_DATA
  3193  000D0C  6E15               	movwf	Eeprom_Write_Block@DataPtr+1,c
  3194  000D0E  0E0F               	movlw	15
  3195  000D10  6E16               	movwf	Eeprom_Write_Block@BlockSize,c
  3196  000D12  0E00               	movlw	0
  3197  000D14  6E17               	movwf	Eeprom_Write_Block@ptrFnCallback,c
  3198  000D16  0E00               	movlw	0
  3199  000D18  6E18               	movwf	Eeprom_Write_Block@ptrFnCallback+1,c
  3200  000D1A  0E01               	movlw	1
  3201  000D1C  ECD0  F00B         	call	_Eeprom_Write_Block
  3202  000D20  06E8               	decf	wreg,f,c
  3203  000D22  A4D8               	btfss	status,2,c
  3204  000D24  0012               	return	
  3205                           
  3206                           ;APP.c: 175: {
  3207                           ;APP.c: 176: APP_DATA.StatusByte.EEPsaveFlag = (unsigned char)0;
  3208  000D26  9658               	bcf	_APP_DATA+3,3,c
  3209  000D28  0012               	return	
  3210  000D2A                     __end_of_APP_MANAGE:
  3211                           	opt stack 0
  3212                           tosu	equ	0xFFF
  3213                           tosh	equ	0xFFE
  3214                           tosl	equ	0xFFD
  3215                           pclath	equ	0xFFA
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           postinc0	equ	0xFEE
  3224                           wreg	equ	0xFE8
  3225                           postinc1	equ	0xFE6
  3226                           fsr1h	equ	0xFE2
  3227                           fsr1l	equ	0xFE1
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _memcpy *****************
  3236 ;; Defined at:
  3237 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memcpy.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  d1              2   19[COMRAM] PTR void 
  3240 ;;		 -> APP_MANAGE@StatusByte(2), APP_DATA(15), 
  3241 ;;  s1              2   21[COMRAM] PTR const void 
  3242 ;;		 -> APP_DATA.StatusByte(2), APP_MANAGE@StatusByte(2), APP_DATA(15), 
  3243 ;;  n               2   23[COMRAM] unsigned int 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  s               2   27[COMRAM] PTR const unsigned char 
  3246 ;;		 -> APP_DATA.StatusByte(2), APP_MANAGE@StatusByte(2), APP_DATA(15), 
  3247 ;;  d               2   25[COMRAM] PTR unsigned char 
  3248 ;;		 -> APP_MANAGE@StatusByte(2), APP_DATA(15), 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  2   19[COMRAM] PTR void 
  3251 ;; Registers used:
  3252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3258 ;;      Params:         6       0       0       0       0       0       0
  3259 ;;      Locals:         4       0       0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0
  3261 ;;      Totals:        10       0       0       0       0       0       0
  3262 ;;Total ram usage:       10 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    4
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_APP_MANAGE
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text14
  3273  001994                     __ptext14:
  3274                           	opt stack 0
  3275  001994                     _memcpy:
  3276                           	opt stack 22
  3277                           
  3278                           ;incstack = 0
  3279  001994  C016  F01C         	movff	memcpy@s1,memcpy@s
  3280  001998  C017  F01D         	movff	memcpy@s1+1,memcpy@s+1
  3281  00199C  C014  F01A         	movff	memcpy@d1,memcpy@d
  3282  0019A0  C015  F01B         	movff	memcpy@d1+1,memcpy@d+1
  3283  0019A4  D00E               	goto	l3061
  3284  0019A6                     l3055:
  3285  0019A6  C01C  FFD9         	movff	memcpy@s,fsr2l
  3286  0019AA  C01D  FFDA         	movff	memcpy@s+1,fsr2h
  3287  0019AE  C01A  FFE1         	movff	memcpy@d,fsr1l
  3288  0019B2  C01B  FFE2         	movff	memcpy@d+1,fsr1h
  3289  0019B6  CFDF FFE7          	movff	indf2,indf1
  3290  0019BA  4A1C               	infsnz	memcpy@s,f,c
  3291  0019BC  2A1D               	incf	memcpy@s+1,f,c
  3292  0019BE  4A1A               	infsnz	memcpy@d,f,c
  3293  0019C0  2A1B               	incf	memcpy@d+1,f,c
  3294  0019C2                     l3061:
  3295  0019C2  0618               	decf	memcpy@n,f,c
  3296  0019C4  A0D8               	btfss	status,0,c
  3297  0019C6  0619               	decf	memcpy@n+1,f,c
  3298  0019C8  2818               	incf	memcpy@n,w,c
  3299  0019CA  E1ED               	bnz	l3055
  3300  0019CC  2819               	incf	memcpy@n+1,w,c
  3301  0019CE  B4D8               	btfsc	status,2,c
  3302  0019D0  0012               	return	
  3303  0019D2  D7E9               	goto	l3055
  3304  0019D4                     __end_of_memcpy:
  3305                           	opt stack 0
  3306                           tosu	equ	0xFFF
  3307                           tosh	equ	0xFFE
  3308                           tosl	equ	0xFFD
  3309                           pclath	equ	0xFFA
  3310                           tblptru	equ	0xFF8
  3311                           tblptrh	equ	0xFF7
  3312                           tblptrl	equ	0xFF6
  3313                           tablat	equ	0xFF5
  3314                           prodh	equ	0xFF4
  3315                           prodl	equ	0xFF3
  3316                           intcon	equ	0xFF2
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           indf1	equ	0xFE7
  3320                           postinc1	equ	0xFE6
  3321                           fsr1h	equ	0xFE2
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _IncrementDecrementSingleDigit *****************
  3331 ;; Defined at:
  3332 ;;		line 182 in file "../../../../Common/App/APP.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  Number          2   26[COMRAM] unsigned short 
  3335 ;;  Index           1   28[COMRAM] unsigned char 
  3336 ;;  bIsincrement    1   29[COMRAM] unsigned char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  Output          4   38[COMRAM] unsigned char [4]
  3339 ;;  unitPosition    2   36[COMRAM] unsigned short 
  3340 ;;  NumberReturn    2   33[COMRAM] unsigned short 
  3341 ;;  Link            2   31[COMRAM] unsigned short 
  3342 ;;  LoopIndex       1   42[COMRAM] unsigned char 
  3343 ;;  PowIndex        1   35[COMRAM] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  2   26[COMRAM] unsigned short 
  3346 ;; Registers used:
  3347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3353 ;;      Params:         4       0       0       0       0       0       0
  3354 ;;      Locals:        12       0       0       0       0       0       0
  3355 ;;      Temps:          1       0       0       0       0       0       0
  3356 ;;      Totals:        17       0       0       0       0       0       0
  3357 ;;Total ram usage:       17 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    5
  3360 ;; This function calls:
  3361 ;;		___lwdiv
  3362 ;;		___wmul
  3363 ;; This function is called by:
  3364 ;;		_APP_MANAGE
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text15
  3369  0010CA                     __ptext15:
  3370                           	opt stack 0
  3371  0010CA                     _IncrementDecrementSingleDigit:
  3372                           	opt stack 21
  3373                           
  3374                           ;APP.c: 189: unsigned short NumberReturned = (unsigned short)0;
  3375                           
  3376                           ;incstack = 0
  3377  0010CA  0E00               	movlw	0
  3378  0010CC  6E23               	movwf	IncrementDecrementSingleDigit@NumberReturned+1,c
  3379  0010CE  0E00               	movlw	0
  3380  0010D0  6E22               	movwf	IncrementDecrementSingleDigit@NumberReturned,c
  3381                           
  3382                           ;APP.c: 190: unsigned short Link;
  3383                           ;APP.c: 191: unsigned char LoopIndex;
  3384                           ;APP.c: 192: unsigned char PowIndex;
  3385                           ;APP.c: 193: unsigned char Output[4];
  3386                           ;APP.c: 194: unsigned short unitPosition = (unsigned short)1;
  3387  0010D2  0E00               	movlw	0
  3388  0010D4  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3389  0010D6  0E01               	movlw	1
  3390  0010D8  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3391                           
  3392                           ;APP.c: 197: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  3393  0010DA  0E00               	movlw	0
  3394  0010DC  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3395  0010DE                     l3227:
  3396  0010DE  0E03               	movlw	3
  3397  0010E0  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3398  0010E2  D001               	goto	l3231
  3399  0010E4  D030               	goto	l3245
  3400  0010E6                     l3231:
  3401                           
  3402                           ;APP.c: 198: {
  3403                           ;APP.c: 199: if((Number != (unsigned short)0) )
  3404  0010E6  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3405  0010E8  101C               	iorwf	IncrementDecrementSingleDigit@Number+1,w,c
  3406  0010EA  B4D8               	btfsc	status,2,c
  3407  0010EC  D020               	goto	l3239
  3408                           
  3409                           ;APP.c: 200: {
  3410                           ;APP.c: 201: Link = Number;
  3411  0010EE  C01B  F020         	movff	IncrementDecrementSingleDigit@Number,IncrementDecrementSingleDigit@Link
  3412  0010F2  C01C  F021         	movff	IncrementDecrementSingleDigit@Number+1,IncrementDecrementSingleDigit@Link+1
  3413                           
  3414                           ;APP.c: 202: Number = (unsigned short)(Number/(unsigned short)10);
  3415  0010F6  C01B  F014         	movff	IncrementDecrementSingleDigit@Number,___lwdiv@dividend
  3416  0010FA  C01C  F015         	movff	IncrementDecrementSingleDigit@Number+1,___lwdiv@dividend+1
  3417  0010FE  0E00               	movlw	0
  3418  001100  6E17               	movwf	___lwdiv@divisor+1,c
  3419  001102  0E0A               	movlw	10
  3420  001104  6E16               	movwf	___lwdiv@divisor,c
  3421  001106  EC5C  F00C         	call	___lwdiv	;wreg free
  3422  00110A  C014  F01B         	movff	?___lwdiv,IncrementDecrementSingleDigit@Number
  3423  00110E  C015  F01C         	movff	?___lwdiv+1,IncrementDecrementSingleDigit@Number+1
  3424                           
  3425                           ;APP.c: 203: Output[LoopIndex] = Link -
  3426                           ;APP.c: 204: (unsigned short)(Number * (unsigned short)10);
  3427  001112  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3428  001114  0D01               	mullw	1
  3429  001116  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3430  001118  24F3               	addwf	prodl,w,c
  3431  00111A  6ED9               	movwf	fsr2l,c
  3432  00111C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3433  00111E  20F4               	addwfc	prodh,w,c
  3434  001120  6EDA               	movwf	fsr2h,c
  3435  001122  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3436  001124  0D0A               	mullw	10
  3437  001126  50F3               	movf	prodl,w,c
  3438  001128  0800               	sublw	0
  3439  00112A  2420               	addwf	IncrementDecrementSingleDigit@Link,w,c
  3440  00112C  D009               	goto	L5
  3441  00112E                     l3239:
  3442                           
  3443                           ;APP.c: 206: else
  3444                           ;APP.c: 207: {
  3445                           ;APP.c: 208: Output[LoopIndex] = (unsigned short)0;
  3446  00112E  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3447  001130  0D01               	mullw	1
  3448  001132  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3449  001134  24F3               	addwf	prodl,w,c
  3450  001136  6ED9               	movwf	fsr2l,c
  3451  001138  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3452  00113A  20F4               	addwfc	prodh,w,c
  3453  00113C  6EDA               	movwf	fsr2h,c
  3454  00113E  0E00               	movlw	0
  3455  001140                     L5:
  3456  001140  6EDF               	movwf	indf2,c
  3457  001142  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3458  001144  D7CC               	goto	l3227
  3459  001146                     l3245:
  3460                           
  3461                           ;APP.c: 209: }
  3462                           ;APP.c: 210: }
  3463                           ;APP.c: 212: if((unsigned char)0 == bIsincrement)
  3464  001146  501E               	movf	IncrementDecrementSingleDigit@bIsincrement,w,c
  3465  001148  A4D8               	btfss	status,2,c
  3466  00114A  D01F               	goto	l3253
  3467                           
  3468                           ;APP.c: 213: {
  3469                           ;APP.c: 214: if((unsigned char)0 == Output[Index])
  3470  00114C  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3471  00114E  0D01               	mullw	1
  3472  001150  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3473  001152  24F3               	addwf	prodl,w,c
  3474  001154  6ED9               	movwf	fsr2l,c
  3475  001156  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3476  001158  20F4               	addwfc	prodh,w,c
  3477  00115A  6EDA               	movwf	fsr2h,c
  3478  00115C  50DF               	movf	indf2,w,c
  3479  00115E  A4D8               	btfss	status,2,c
  3480  001160  D00A               	goto	l3251
  3481                           
  3482                           ;APP.c: 215: {
  3483                           ;APP.c: 216: Output[Index] =(unsigned char)9;
  3484  001162  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3485  001164  0D01               	mullw	1
  3486  001166  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3487  001168  24F3               	addwf	prodl,w,c
  3488  00116A  6ED9               	movwf	fsr2l,c
  3489  00116C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3490  00116E  20F4               	addwfc	prodh,w,c
  3491  001170  6EDA               	movwf	fsr2h,c
  3492  001172  0E09               	movlw	9
  3493  001174  D01F               	goto	L6
  3494  001176                     l3251:
  3495                           
  3496                           ;APP.c: 218: else
  3497                           ;APP.c: 219: {
  3498                           ;APP.c: 220: Output[Index]--;
  3499  001176  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3500  001178  0D01               	mullw	1
  3501  00117A  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3502  00117C  24F3               	addwf	prodl,w,c
  3503  00117E  6ED9               	movwf	fsr2l,c
  3504  001180  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3505  001182  20F4               	addwfc	prodh,w,c
  3506  001184  6EDA               	movwf	fsr2h,c
  3507  001186  06DF               	decf	indf2,f,c
  3508                           
  3509                           ;APP.c: 221: }
  3510                           ;APP.c: 222: }
  3511  001188  D020               	goto	l3259
  3512  00118A                     l3253:
  3513                           
  3514                           ;APP.c: 223: else
  3515                           ;APP.c: 224: {
  3516                           ;APP.c: 225: if( (unsigned char)9 == Output[Index])
  3517  00118A  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3518  00118C  0D01               	mullw	1
  3519  00118E  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3520  001190  24F3               	addwf	prodl,w,c
  3521  001192  6ED9               	movwf	fsr2l,c
  3522  001194  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3523  001196  20F4               	addwfc	prodh,w,c
  3524  001198  6EDA               	movwf	fsr2h,c
  3525  00119A  0E09               	movlw	9
  3526  00119C  18DE               	xorwf	postinc2,w,c
  3527  00119E  A4D8               	btfss	status,2,c
  3528  0011A0  D00B               	goto	l3257
  3529                           
  3530                           ;APP.c: 226: {
  3531                           ;APP.c: 227: Output[Index] = (unsigned char)0;
  3532  0011A2  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3533  0011A4  0D01               	mullw	1
  3534  0011A6  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3535  0011A8  24F3               	addwf	prodl,w,c
  3536  0011AA  6ED9               	movwf	fsr2l,c
  3537  0011AC  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3538  0011AE  20F4               	addwfc	prodh,w,c
  3539  0011B0  6EDA               	movwf	fsr2h,c
  3540  0011B2  0E00               	movlw	0
  3541  0011B4                     L6:
  3542  0011B4  6EDF               	movwf	indf2,c
  3543                           
  3544                           ;APP.c: 228: }
  3545  0011B6  D009               	goto	l3259
  3546  0011B8                     l3257:
  3547                           
  3548                           ;APP.c: 229: else
  3549                           ;APP.c: 230: {
  3550                           ;APP.c: 231: Output[Index]++;
  3551  0011B8  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3552  0011BA  0D01               	mullw	1
  3553  0011BC  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3554  0011BE  24F3               	addwf	prodl,w,c
  3555  0011C0  6ED9               	movwf	fsr2l,c
  3556  0011C2  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3557  0011C4  20F4               	addwfc	prodh,w,c
  3558  0011C6  6EDA               	movwf	fsr2h,c
  3559  0011C8  2ADF               	incf	indf2,f,c
  3560  0011CA                     l3259:
  3561                           
  3562                           ;APP.c: 232: }
  3563                           ;APP.c: 233: }
  3564                           ;APP.c: 235: for(LoopIndex=(unsigned char)0;LoopIndex < 4; LoopIndex++)
  3565  0011CA  0E00               	movlw	0
  3566  0011CC  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3567  0011CE                     l3261:
  3568  0011CE  0E03               	movlw	3
  3569  0011D0  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3570  0011D2  D001               	goto	l3265
  3571  0011D4  D033               	goto	l89
  3572  0011D6                     l3265:
  3573                           
  3574                           ;APP.c: 236: {
  3575                           ;APP.c: 237: for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
  3576  0011D6  0E00               	movlw	0
  3577  0011D8  6E24               	movwf	IncrementDecrementSingleDigit@PowIndex,c
  3578                           
  3579                           ;APP.c: 238: PowIndex++ )
  3580  0011DA  D00F               	goto	l3271
  3581  0011DC                     l3267:
  3582                           
  3583                           ;APP.c: 239: {
  3584                           ;APP.c: 240: unitPosition *=(unsigned short)10;
  3585  0011DC  C025  F014         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplier
  3586  0011E0  C026  F015         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplier+1
  3587  0011E4  0E00               	movlw	0
  3588  0011E6  6E17               	movwf	___wmul@multiplicand+1,c
  3589  0011E8  0E0A               	movlw	10
  3590  0011EA  6E16               	movwf	___wmul@multiplicand,c
  3591  0011EC  EC01  F00E         	call	___wmul	;wreg free
  3592  0011F0  C014  F025         	movff	?___wmul,IncrementDecrementSingleDigit@unitPosition
  3593  0011F4  C015  F026         	movff	?___wmul+1,IncrementDecrementSingleDigit@unitPosition+1
  3594  0011F8  2A24               	incf	IncrementDecrementSingleDigit@PowIndex,f,c
  3595  0011FA                     l3271:
  3596  0011FA  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3597  0011FC  5C24               	subwf	IncrementDecrementSingleDigit@PowIndex,w,c
  3598  0011FE  A0D8               	btfss	status,0,c
  3599  001200  D7ED               	goto	l3267
  3600                           
  3601                           ;APP.c: 241: }
  3602                           ;APP.c: 242: NumberReturned +=
  3603                           ;APP.c: 243: (((unsigned short)Output[LoopIndex]) * unitPosition);
  3604  001202  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3605  001204  0D01               	mullw	1
  3606  001206  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3607  001208  24F3               	addwf	prodl,w,c
  3608  00120A  6ED9               	movwf	fsr2l,c
  3609  00120C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3610  00120E  20F4               	addwfc	prodh,w,c
  3611  001210  6EDA               	movwf	fsr2h,c
  3612  001212  50DF               	movf	indf2,w,c
  3613  001214  6E1F               	movwf	??_IncrementDecrementSingleDigit& (0+255),c
  3614  001216  501F               	movf	??_IncrementDecrementSingleDigit,w,c
  3615  001218  6E14               	movwf	___wmul@multiplier,c
  3616  00121A  6A15               	clrf	___wmul@multiplier+1,c
  3617  00121C  C025  F016         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplicand
  3618  001220  C026  F017         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplicand+1
  3619  001224  EC01  F00E         	call	___wmul	;wreg free
  3620  001228  5014               	movf	?___wmul,w,c
  3621  00122A  2622               	addwf	IncrementDecrementSingleDigit@NumberReturned,f,c
  3622  00122C  5015               	movf	?___wmul+1,w,c
  3623  00122E  2223               	addwfc	IncrementDecrementSingleDigit@NumberReturned+1,f,c
  3624                           
  3625                           ;APP.c: 244: unitPosition = (unsigned short)1;
  3626  001230  0E00               	movlw	0
  3627  001232  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3628  001234  0E01               	movlw	1
  3629  001236  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3630  001238  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3631  00123A  D7C9               	goto	l3261
  3632  00123C                     l89:
  3633                           
  3634                           ;APP.c: 245: }
  3635                           ;APP.c: 247: return NumberReturned;
  3636  00123C  C022  F01B         	movff	IncrementDecrementSingleDigit@NumberReturned,?_IncrementDecrementSingleDigit
  3637  001240  C023  F01C         	movff	IncrementDecrementSingleDigit@NumberReturned+1,?_IncrementDecrementSingleDigit+1
  3638  001244  0012               	return		;funcret
  3639  001246                     __end_of_IncrementDecrementSingleDigit:
  3640                           	opt stack 0
  3641                           tosu	equ	0xFFF
  3642                           tosh	equ	0xFFE
  3643                           tosl	equ	0xFFD
  3644                           pclath	equ	0xFFA
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           postinc0	equ	0xFEE
  3653                           wreg	equ	0xFE8
  3654                           indf1	equ	0xFE7
  3655                           postinc1	equ	0xFE6
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function ___wmul *****************
  3666 ;; Defined at:
  3667 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  multiplier      2   19[COMRAM] unsigned int 
  3670 ;;  multiplicand    2   21[COMRAM] unsigned int 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  product         2   23[COMRAM] unsigned int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  2   19[COMRAM] unsigned int 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0, prodl, prodh
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3682 ;;      Params:         4       0       0       0       0       0       0
  3683 ;;      Locals:         2       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0
  3685 ;;      Totals:         6       0       0       0       0       0       0
  3686 ;;Total ram usage:        6 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    4
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_IncrementDecrementSingleDigit
  3693 ;;		_SpeedCalcManage
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text16
  3698  001C02                     __ptext16:
  3699                           	opt stack 0
  3700  001C02                     ___wmul:
  3701                           	opt stack 22
  3702                           
  3703                           ;incstack = 0
  3704  001C02  5014               	movf	___wmul@multiplier,w,c
  3705  001C04  0216               	mulwf	___wmul@multiplicand,c
  3706  001C06  CFF3 F018          	movff	prodl,___wmul@product
  3707  001C0A  CFF4 F019          	movff	prodh,___wmul@product+1
  3708  001C0E  5014               	movf	___wmul@multiplier,w,c
  3709  001C10  0217               	mulwf	___wmul@multiplicand+1,c
  3710  001C12  50F3               	movf	prodl,w,c
  3711  001C14  2619               	addwf	___wmul@product+1,f,c
  3712  001C16  5015               	movf	___wmul@multiplier+1,w,c
  3713  001C18  0216               	mulwf	___wmul@multiplicand,c
  3714  001C1A  50F3               	movf	prodl,w,c
  3715  001C1C  2619               	addwf	___wmul@product+1,f,c
  3716  001C1E  C018  F014         	movff	___wmul@product,?___wmul
  3717  001C22  C019  F015         	movff	___wmul@product+1,?___wmul+1
  3718  001C26  0012               	return	
  3719  001C28                     __end_of___wmul:
  3720                           	opt stack 0
  3721                           tosu	equ	0xFFF
  3722                           tosh	equ	0xFFE
  3723                           tosl	equ	0xFFD
  3724                           pclath	equ	0xFFA
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           postinc0	equ	0xFEE
  3733                           wreg	equ	0xFE8
  3734                           indf1	equ	0xFE7
  3735                           postinc1	equ	0xFE6
  3736                           fsr1h	equ	0xFE2
  3737                           fsr1l	equ	0xFE1
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function ___lwdiv *****************
  3746 ;; Defined at:
  3747 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  dividend        2   19[COMRAM] unsigned int 
  3750 ;;  divisor         2   21[COMRAM] unsigned int 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  quotient        2   24[COMRAM] unsigned int 
  3753 ;;  counter         1   23[COMRAM] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  2   19[COMRAM] unsigned int 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         4       0       0       0       0       0       0
  3764 ;;      Locals:         3       0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0
  3766 ;;      Totals:         7       0       0       0       0       0       0
  3767 ;;Total ram usage:        7 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    4
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_IncrementDecrementSingleDigit
  3774 ;;		_SpeedCalcManage
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text17
  3779  0018B8                     __ptext17:
  3780                           	opt stack 0
  3781  0018B8                     ___lwdiv:
  3782                           	opt stack 22
  3783                           
  3784                           ;incstack = 0
  3785  0018B8  0E00               	movlw	0
  3786  0018BA  6E1A               	movwf	___lwdiv@quotient+1,c
  3787  0018BC  0E00               	movlw	0
  3788  0018BE  6E19               	movwf	___lwdiv@quotient,c
  3789  0018C0  5016               	movf	___lwdiv@divisor,w,c
  3790  0018C2  1017               	iorwf	___lwdiv@divisor+1,w,c
  3791  0018C4  B4D8               	btfsc	status,2,c
  3792  0018C6  D01C               	goto	l1036
  3793  0018C8  0E01               	movlw	1
  3794  0018CA  6E18               	movwf	___lwdiv@counter,c
  3795  0018CC  D004               	goto	l3033
  3796  0018CE                     l3031:
  3797  0018CE  90D8               	bcf	status,0,c
  3798  0018D0  3616               	rlcf	___lwdiv@divisor,f,c
  3799  0018D2  3617               	rlcf	___lwdiv@divisor+1,f,c
  3800  0018D4  2A18               	incf	___lwdiv@counter,f,c
  3801  0018D6                     l3033:
  3802  0018D6  AE17               	btfss	___lwdiv@divisor+1,7,c
  3803  0018D8  D7FA               	goto	l3031
  3804  0018DA                     l3035:
  3805  0018DA  90D8               	bcf	status,0,c
  3806  0018DC  3619               	rlcf	___lwdiv@quotient,f,c
  3807  0018DE  361A               	rlcf	___lwdiv@quotient+1,f,c
  3808  0018E0  5016               	movf	___lwdiv@divisor,w,c
  3809  0018E2  5C14               	subwf	___lwdiv@dividend,w,c
  3810  0018E4  5017               	movf	___lwdiv@divisor+1,w,c
  3811  0018E6  5815               	subwfb	___lwdiv@dividend+1,w,c
  3812  0018E8  A0D8               	btfss	status,0,c
  3813  0018EA  D005               	goto	l3043
  3814  0018EC  5016               	movf	___lwdiv@divisor,w,c
  3815  0018EE  5E14               	subwf	___lwdiv@dividend,f,c
  3816  0018F0  5017               	movf	___lwdiv@divisor+1,w,c
  3817  0018F2  5A15               	subwfb	___lwdiv@dividend+1,f,c
  3818  0018F4  8019               	bsf	___lwdiv@quotient,0,c
  3819  0018F6                     l3043:
  3820  0018F6  90D8               	bcf	status,0,c
  3821  0018F8  3217               	rrcf	___lwdiv@divisor+1,f,c
  3822  0018FA  3216               	rrcf	___lwdiv@divisor,f,c
  3823  0018FC  2E18               	decfsz	___lwdiv@counter,f,c
  3824  0018FE  D7ED               	goto	l3035
  3825  001900                     l1036:
  3826  001900  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  3827  001904  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3828  001908  0012               	return		;funcret
  3829  00190A                     __end_of___lwdiv:
  3830                           	opt stack 0
  3831                           tosu	equ	0xFFF
  3832                           tosh	equ	0xFFE
  3833                           tosl	equ	0xFFD
  3834                           pclath	equ	0xFFA
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon	equ	0xFF2
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           indf1	equ	0xFE7
  3845                           postinc1	equ	0xFE6
  3846                           fsr1h	equ	0xFE2
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _GetDistance *****************
  3856 ;; Defined at:
  3857 ;;		line 104 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  4   19[COMRAM] unsigned long 
  3864 ;; Registers used:
  3865 ;;		None
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3871 ;;      Params:         4       0       0       0       0       0       0
  3872 ;;      Locals:         0       0       0       0       0       0       0
  3873 ;;      Temps:          0       0       0       0       0       0       0
  3874 ;;      Totals:         4       0       0       0       0       0       0
  3875 ;;Total ram usage:        4 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    4
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_APP_MANAGE
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text18
  3886  001CF0                     __ptext18:
  3887                           	opt stack 0
  3888  001CF0                     _GetDistance:
  3889                           	opt stack 22
  3890                           
  3891                           ;SpeedCalc.c: 106: return DistTravelCntr;
  3892                           
  3893                           ;incstack = 0
  3894  001CF0  C0D6  F014         	movff	_DistTravelCntr,?_GetDistance
  3895  001CF4  C0D7  F015         	movff	_DistTravelCntr+1,?_GetDistance+1
  3896  001CF8  C0D8  F016         	movff	_DistTravelCntr+2,?_GetDistance+2
  3897  001CFC  C0D9  F017         	movff	_DistTravelCntr+3,?_GetDistance+3
  3898  001D00  0012               	return		;funcret
  3899  001D02                     __end_of_GetDistance:
  3900                           	opt stack 0
  3901                           tosu	equ	0xFFF
  3902                           tosh	equ	0xFFE
  3903                           tosl	equ	0xFFD
  3904                           pclath	equ	0xFFA
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           postinc0	equ	0xFEE
  3913                           wreg	equ	0xFE8
  3914                           indf1	equ	0xFE7
  3915                           postinc1	equ	0xFE6
  3916                           fsr1h	equ	0xFE2
  3917                           fsr1l	equ	0xFE1
  3918                           indf2	equ	0xFDF
  3919                           postinc2	equ	0xFDE
  3920                           postdec2	equ	0xFDD
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _GetAvgSpeed *****************
  3926 ;; Defined at:
  3927 ;;		line 116 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  bIsKph          1    wreg     unsigned char 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  bIsKph          1   46[COMRAM] unsigned char 
  3932 ;;  KphMphFactor    4   47[COMRAM] unsigned long 
  3933 ;;  AvgSpeedKphM    2   51[COMRAM] unsigned short 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  2   44[COMRAM] unsigned short 
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         2       0       0       0       0       0       0
  3944 ;;      Locals:         7       0       0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0
  3946 ;;      Totals:         9       0       0       0       0       0       0
  3947 ;;Total ram usage:        9 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    5
  3950 ;; This function calls:
  3951 ;;		___lldiv
  3952 ;;		___lmul
  3953 ;; This function is called by:
  3954 ;;		_APP_MANAGE
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text19
  3959  001506                     __ptext19:
  3960                           	opt stack 0
  3961  001506                     _GetAvgSpeed:
  3962                           	opt stack 21
  3963                           
  3964                           ;incstack = 0
  3965                           ;GetAvgSpeed@bIsKph stored from wreg
  3966  001506  6E2F               	movwf	GetAvgSpeed@bIsKph,c
  3967                           
  3968                           ;SpeedCalc.c: 118: unsigned short AvgSpeedKphMph = (unsigned short)0;
  3969  001508  0E00               	movlw	0
  3970  00150A  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  3971  00150C  0E00               	movlw	0
  3972  00150E  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  3973                           
  3974                           ;SpeedCalc.c: 119: unsigned long KphMphFactor;
  3975                           ;SpeedCalc.c: 121: if( (unsigned char)1 == bIsKph )
  3976  001510  042F               	decf	GetAvgSpeed@bIsKph,w,c
  3977  001512  A4D8               	btfss	status,2,c
  3978  001514  D004               	goto	l3173
  3979                           
  3980                           ;SpeedCalc.c: 122: {
  3981                           ;SpeedCalc.c: 123: KphMphFactor = (unsigned long)360;
  3982  001516  0E68               	movlw	104
  3983  001518  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3984  00151A  0E01               	movlw	1
  3985  00151C  D003               	goto	L7
  3986  00151E                     l3173:
  3987                           
  3988                           ;SpeedCalc.c: 125: else
  3989                           ;SpeedCalc.c: 126: {
  3990                           ;SpeedCalc.c: 127: KphMphFactor = (unsigned long)225;
  3991  00151E  0EE1               	movlw	225
  3992  001520  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3993  001522  0E00               	movlw	0
  3994  001524                     L7:
  3995  001524  6E31               	movwf	GetAvgSpeed@KphMphFactor+1,c
  3996  001526  0E00               	movlw	0
  3997  001528  6E32               	movwf	GetAvgSpeed@KphMphFactor+2,c
  3998  00152A  0E00               	movlw	0
  3999  00152C  6E33               	movwf	GetAvgSpeed@KphMphFactor+3,c
  4000                           
  4001                           ;SpeedCalc.c: 128: }
  4002                           ;SpeedCalc.c: 130: if(LapTimeTenthMilli != (unsigned short)0)
  4003  00152E  503E               	movf	_LapTimeTenthMilli,w,c
  4004  001530  103F               	iorwf	_LapTimeTenthMilli+1,w,c
  4005  001532  B4D8               	btfsc	status,2,c
  4006  001534  D024               	goto	l3179
  4007                           
  4008                           ;SpeedCalc.c: 131: {
  4009                           ;SpeedCalc.c: 132: AvgSpeedKphMph = (unsigned short)
  4010                           ;SpeedCalc.c: 133: ((KphMphFactor * (unsigned long)CircumFactor )
  4011                           ;SpeedCalc.c: 134: / (unsigned long)LapTimeTenthMilli);
  4012  001536  C06A  F014         	movff	_CircumFactor,___lmul@multiplier
  4013  00153A  C06B  F015         	movff	_CircumFactor+1,___lmul@multiplier+1
  4014  00153E  6A16               	clrf	___lmul@multiplier+2,c
  4015  001540  6A17               	clrf	___lmul@multiplier+3,c
  4016  001542  C030  F018         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  4017  001546  C031  F019         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  4018  00154A  C032  F01A         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  4019  00154E  C033  F01B         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  4020  001552  EC31  F00C         	call	___lmul	;wreg free
  4021  001556  C014  F020         	movff	?___lmul,___lldiv@dividend
  4022  00155A  C015  F021         	movff	?___lmul+1,___lldiv@dividend+1
  4023  00155E  C016  F022         	movff	?___lmul+2,___lldiv@dividend+2
  4024  001562  C017  F023         	movff	?___lmul+3,___lldiv@dividend+3
  4025  001566  C03E  F024         	movff	_LapTimeTenthMilli,___lldiv@divisor
  4026  00156A  C03F  F025         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  4027  00156E  6A26               	clrf	___lldiv@divisor+2,c
  4028  001570  6A27               	clrf	___lldiv@divisor+3,c
  4029  001572  EC57  F00B         	call	___lldiv	;wreg free
  4030  001576  C020  F034         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  4031  00157A  C021  F035         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  4032  00157E                     l3179:
  4033                           
  4034                           ;SpeedCalc.c: 135: }
  4035                           ;SpeedCalc.c: 137: if( (unsigned char)64 == HwTimerOVFLcount)
  4036  00157E  0E40               	movlw	64
  4037  001580  1844               	xorwf	_HwTimerOVFLcount,w,c	;volatile
  4038  001582  A4D8               	btfss	status,2,c
  4039  001584  D004               	goto	l3183
  4040                           
  4041                           ;SpeedCalc.c: 138: {
  4042                           ;SpeedCalc.c: 139: AvgSpeedKphMph = (unsigned short)0;
  4043  001586  0E00               	movlw	0
  4044  001588  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  4045  00158A  0E00               	movlw	0
  4046  00158C  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  4047  00158E                     l3183:
  4048                           
  4049                           ;SpeedCalc.c: 140: }
  4050                           ;SpeedCalc.c: 141: return AvgSpeedKphMph;
  4051  00158E  C034  F02D         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  4052  001592  C035  F02E         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  4053  001596  0012               	return	
  4054  001598                     __end_of_GetAvgSpeed:
  4055                           	opt stack 0
  4056                           tosu	equ	0xFFF
  4057                           tosh	equ	0xFFE
  4058                           tosl	equ	0xFFD
  4059                           pclath	equ	0xFFA
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           indf1	equ	0xFE7
  4070                           postinc1	equ	0xFE6
  4071                           fsr1h	equ	0xFE2
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _Eeprom_Write_Block *****************
  4081 ;; Defined at:
  4082 ;;		line 13 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  address         1    wreg     unsigned char 
  4085 ;;  DataPtr         2   19[COMRAM] PTR void 
  4086 ;;		 -> APP_DATA(15), 
  4087 ;;  BlockSize       1   21[COMRAM] unsigned char 
  4088 ;;  ptrFnCallbac    2   22[COMRAM] PTR FTN()void 
  4089 ;;		 -> Absolute function(1), 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  address         1   24[COMRAM] unsigned char 
  4092 ;;  LocDataPtr      2   25[COMRAM] PTR unsigned char 
  4093 ;;		 -> APP_DATA(15), 
  4094 ;;  LoopIndex       1   28[COMRAM] unsigned char 
  4095 ;;  WriteGranted    1   27[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      unsigned char 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4105 ;;      Params:         5       0       0       0       0       0       0
  4106 ;;      Locals:         5       0       0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0
  4108 ;;      Totals:        10       0       0       0       0       0       0
  4109 ;;Total ram usage:       10 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    4
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_APP_MANAGE
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text20
  4120  0017A0                     __ptext20:
  4121                           	opt stack 0
  4122  0017A0                     _Eeprom_Write_Block:
  4123                           	opt stack 22
  4124                           
  4125                           ;incstack = 0
  4126                           ;Eeprom_Write_Block@address stored from wreg
  4127  0017A0  6E19               	movwf	Eeprom_Write_Block@address,c
  4128                           
  4129                           ;Eeprom.c: 21: unsigned char WriteGranted;
  4130                           ;Eeprom.c: 22: unsigned char LoopIndex;
  4131                           ;Eeprom.c: 23: unsigned char *LocDataPtr = (unsigned char*)DataPtr;
  4132  0017A2  C014  F01A         	movff	Eeprom_Write_Block@DataPtr,Eeprom_Write_Block@LocDataPtr
  4133  0017A6  C015  F01B         	movff	Eeprom_Write_Block@DataPtr+1,Eeprom_Write_Block@LocDataPtr+1
  4134                           
  4135                           ;Eeprom.c: 26: if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= 50))
  4136  0017AA  504C               	movf	_WriteRequest,w,c
  4137  0017AC  A4D8               	btfss	status,2,c
  4138  0017AE  D029               	goto	l3305
  4139  0017B0  0E33               	movlw	51
  4140  0017B2  6016               	cpfslt	Eeprom_Write_Block@BlockSize,c
  4141  0017B4  D026               	goto	l3305
  4142                           
  4143                           ;Eeprom.c: 27: {
  4144                           ;Eeprom.c: 28: WriteRequest = (unsigned char)1;
  4145  0017B6  0E01               	movlw	1
  4146  0017B8  6E4C               	movwf	_WriteRequest,c
  4147                           
  4148                           ;Eeprom.c: 30: for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
  4149  0017BA  0E00               	movlw	0
  4150  0017BC  6E1D               	movwf	Eeprom_Write_Block@LoopIndex,c
  4151  0017BE  D013               	goto	l3299
  4152  0017C0                     l3295:
  4153                           
  4154                           ;Eeprom.c: 31: {
  4155                           ;Eeprom.c: 32: DataArray[LoopIndex] = LocDataPtr[LoopIndex];
  4156  0017C0  501D               	movf	Eeprom_Write_Block@LoopIndex,w,c
  4157  0017C2  0D01               	mullw	1
  4158  0017C4  50F3               	movf	prodl,w,c
  4159  0017C6  241A               	addwf	Eeprom_Write_Block@LocDataPtr,w,c
  4160  0017C8  6ED9               	movwf	fsr2l,c
  4161  0017CA  50F4               	movf	prodh,w,c
  4162  0017CC  201B               	addwfc	Eeprom_Write_Block@LocDataPtr+1,w,c
  4163  0017CE  6EDA               	movwf	fsr2h,c
  4164  0017D0  501D               	movf	Eeprom_Write_Block@LoopIndex,w,c
  4165  0017D2  0D01               	mullw	1
  4166  0017D4  0E80               	movlw	low _DataArray
  4167  0017D6  24F3               	addwf	prodl,w,c
  4168  0017D8  6EE1               	movwf	fsr1l,c
  4169  0017DA  0E00               	movlw	high _DataArray
  4170  0017DC  20F4               	addwfc	prodh,w,c
  4171  0017DE  6EE2               	movwf	fsr1h,c
  4172  0017E0  CFDF FFE7          	movff	indf2,indf1
  4173  0017E4  2A1D               	incf	Eeprom_Write_Block@LoopIndex,f,c
  4174  0017E6                     l3299:
  4175  0017E6  5016               	movf	Eeprom_Write_Block@BlockSize,w,c
  4176  0017E8  5C1D               	subwf	Eeprom_Write_Block@LoopIndex,w,c
  4177  0017EA  A0D8               	btfss	status,0,c
  4178  0017EC  D7E9               	goto	l3295
  4179                           
  4180                           ;Eeprom.c: 33: }
  4181                           ;Eeprom.c: 34: DataSize = BlockSize;
  4182  0017EE  C016  F04A         	movff	Eeprom_Write_Block@BlockSize,_DataSize
  4183                           
  4184                           ;Eeprom.c: 35: EEPROMaddr = address;
  4185  0017F2  C019  F04B         	movff	Eeprom_Write_Block@address,_EEPROMaddr
  4186                           
  4187                           ;Eeprom.c: 36: WriteFnCallback = ptrFnCallback;
  4188  0017F6  C017  F040         	movff	Eeprom_Write_Block@ptrFnCallback,_WriteFnCallback
  4189  0017FA  C018  F041         	movff	Eeprom_Write_Block@ptrFnCallback+1,_WriteFnCallback+1
  4190                           
  4191                           ;Eeprom.c: 37: WriteGranted = (unsigned char)1;
  4192  0017FE  0E01               	movlw	1
  4193  001800  D001               	goto	L8
  4194  001802                     l3305:
  4195                           
  4196                           ;Eeprom.c: 39: else
  4197                           ;Eeprom.c: 40: {
  4198                           ;Eeprom.c: 41: WriteGranted = (unsigned char)0;
  4199  001802  0E00               	movlw	0
  4200  001804                     L8:
  4201  001804  6E1C               	movwf	Eeprom_Write_Block@WriteGranted,c
  4202                           
  4203                           ;Eeprom.c: 42: }
  4204                           ;Eeprom.c: 43: return WriteGranted;
  4205  001806  501C               	movf	Eeprom_Write_Block@WriteGranted,w,c
  4206  001808  0012               	return	
  4207  00180A                     __end_of_Eeprom_Write_Block:
  4208                           	opt stack 0
  4209                           tosu	equ	0xFFF
  4210                           tosh	equ	0xFFE
  4211                           tosl	equ	0xFFD
  4212                           pclath	equ	0xFFA
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           intcon	equ	0xFF2
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           indf1	equ	0xFE7
  4223                           postinc1	equ	0xFE6
  4224                           fsr1h	equ	0xFE2
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _DisableDistanceCntr *****************
  4234 ;; Defined at:
  4235 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  bIsDisabled     1    wreg     unsigned char 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  bIsDisabled     1   19[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4249 ;;      Params:         0       0       0       0       0       0       0
  4250 ;;      Locals:         1       0       0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0
  4252 ;;      Totals:         1       0       0       0       0       0       0
  4253 ;;Total ram usage:        1 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    4
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_APP_MANAGE
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text21
  4264  001D42                     __ptext21:
  4265                           	opt stack 0
  4266  001D42                     _DisableDistanceCntr:
  4267                           	opt stack 22
  4268                           
  4269                           ;incstack = 0
  4270                           ;DisableDistanceCntr@bIsDisabled stored from wreg
  4271  001D42  6E14               	movwf	DisableDistanceCntr@bIsDisabled,c
  4272                           
  4273                           ;SpeedCalc.c: 95: DistTravelCntrDisable = bIsDisabled;
  4274  001D44  C014  F045         	movff	DisableDistanceCntr@bIsDisabled,_DistTravelCntrDisable
  4275  001D48  0012               	return		;funcret
  4276  001D4A                     __end_of_DisableDistanceCntr:
  4277                           	opt stack 0
  4278                           tosu	equ	0xFFF
  4279                           tosh	equ	0xFFE
  4280                           tosl	equ	0xFFD
  4281                           pclath	equ	0xFFA
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           indf1	equ	0xFE7
  4292                           postinc1	equ	0xFE6
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _BlinkDigit *****************
  4303 ;; Defined at:
  4304 ;;		line 139 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  Index           1    wreg     unsigned char 
  4307 ;;  Line            1   19[COMRAM] unsigned char 
  4308 ;;  duration        1   20[COMRAM] unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  Index           1   21[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         2       0       0       0       0       0       0
  4321 ;;      Locals:         1       0       0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0
  4323 ;;      Totals:         3       0       0       0       0       0       0
  4324 ;;Total ram usage:        3 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    4
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_APP_MANAGE
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text22
  4335  001D02                     __ptext22:
  4336                           	opt stack 0
  4337  001D02                     _BlinkDigit:
  4338                           	opt stack 22
  4339                           
  4340                           ;incstack = 0
  4341                           ;BlinkDigit@Index stored from wreg
  4342  001D02  6E16               	movwf	BlinkDigit@Index,c
  4343                           
  4344                           ;BCDdisplay.c: 146: BlinkIndex = Index;
  4345  001D04  C016  F053         	movff	BlinkDigit@Index,_BlinkIndex
  4346                           
  4347                           ;BCDdisplay.c: 147: BlinkDuration = duration;
  4348  001D08  C015  F052         	movff	BlinkDigit@duration,_BlinkDuration
  4349                           
  4350                           ;BCDdisplay.c: 148: LineBlinkIndex = Line;
  4351  001D0C  C014  F051         	movff	BlinkDigit@Line,_LineBlinkIndex
  4352  001D10  0012               	return		;funcret
  4353  001D12                     __end_of_BlinkDigit:
  4354                           	opt stack 0
  4355                           tosu	equ	0xFFF
  4356                           tosh	equ	0xFFE
  4357                           tosl	equ	0xFFD
  4358                           pclath	equ	0xFFA
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           intcon	equ	0xFF2
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf1	equ	0xFE7
  4369                           postinc1	equ	0xFE6
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _BCDsendNumber *****************
  4380 ;; Defined at:
  4381 ;;		line 35 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  Number          4   44[COMRAM] unsigned long 
  4384 ;;  Line            1   48[COMRAM] unsigned char 
  4385 ;;  DecimalPlace    1   49[COMRAM] unsigned char 
  4386 ;;  EnableTranc     1   50[COMRAM] unsigned char 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  Buffer          4    8[BANK0 ] unsigned long 
  4389 ;;  Output          4    4[BANK0 ] unsigned long 
  4390 ;;  Link            4    0[BANK0 ] unsigned long 
  4391 ;;  LoopIndex       1   12[BANK0 ] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:         7       0       0       0       0       0       0
  4402 ;;      Locals:         0      13       0       0       0       0       0
  4403 ;;      Temps:          4       0       0       0       0       0       0
  4404 ;;      Totals:        11      13       0       0       0       0       0
  4405 ;;Total ram usage:       24 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    5
  4408 ;; This function calls:
  4409 ;;		___lldiv
  4410 ;;		___lmul
  4411 ;; This function is called by:
  4412 ;;		_APP_MANAGE
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text23
  4417  000F18                     __ptext23:
  4418                           	opt stack 0
  4419  000F18                     _BCDsendNumber:
  4420                           	opt stack 21
  4421                           
  4422                           ;BCDdisplay.c: 43: unsigned long Link,Output,Buffer;
  4423                           ;BCDdisplay.c: 44: unsigned char LoopIndex;
  4424                           ;BCDdisplay.c: 46: Buffer = Number;
  4425                           
  4426                           ;incstack = 0
  4427  000F18  C02D  F0E6         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  4428  000F1C  C02E  F0E7         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  4429  000F20  C02F  F0E8         	movff	BCDsendNumber@Number+2,BCDsendNumber@Buffer+2
  4430  000F24  C030  F0E9         	movff	BCDsendNumber@Number+3,BCDsendNumber@Buffer+3
  4431                           
  4432                           ;BCDdisplay.c: 47: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  4433  000F28  0E00               	movlw	0
  4434  000F2A  0100               	movlb	0	; () banked
  4435  000F2C  6FEA               	movwf	BCDsendNumber@LoopIndex& (0+255),b
  4436  000F2E                     l3197:
  4437                           
  4438                           ; BSR set to: 0
  4439  000F2E  0E03               	movlw	3
  4440  000F30  0100               	movlb	0	; () banked
  4441  000F32  65EA               	cpfsgt	BCDsendNumber@LoopIndex& (0+255),b
  4442  000F34  D001               	goto	l3201
  4443  000F36  D0AA               	goto	l3221
  4444  000F38                     l3201:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;BCDdisplay.c: 48: {
  4448                           ;BCDdisplay.c: 49: if((Buffer != (unsigned long)0)|| (LoopIndex <= DecimalPlace) )
  4449  000F38  0100               	movlb	0	; () banked
  4450  000F3A  51E6               	movf	BCDsendNumber@Buffer& (0+255),w,b
  4451  000F3C  0100               	movlb	0	; () banked
  4452  000F3E  11E7               	iorwf	(BCDsendNumber@Buffer+1)& (0+255),w,b
  4453  000F40  0100               	movlb	0	; () banked
  4454  000F42  11E8               	iorwf	(BCDsendNumber@Buffer+2)& (0+255),w,b
  4455  000F44  0100               	movlb	0	; () banked
  4456  000F46  11E9               	iorwf	(BCDsendNumber@Buffer+3)& (0+255),w,b
  4457  000F48  A4D8               	btfss	status,2,c
  4458  000F4A  D005               	goto	l121
  4459                           
  4460                           ; BSR set to: 0
  4461  000F4C  0100               	movlb	0	; () banked
  4462  000F4E  51EA               	movf	BCDsendNumber@LoopIndex& (0+255),w,b
  4463  000F50  5C32               	subwf	BCDsendNumber@DecimalPlace,w,c
  4464  000F52  A0D8               	btfss	status,0,c
  4465  000F54  D059               	goto	l3209
  4466  000F56                     l121:
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;BCDdisplay.c: 50: {
  4470                           ;BCDdisplay.c: 51: Link = Buffer;
  4471  000F56  C0E6  F0DE         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  4472  000F5A  C0E7  F0DF         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  4473  000F5E  C0E8  F0E0         	movff	BCDsendNumber@Buffer+2,BCDsendNumber@Link+2
  4474  000F62  C0E9  F0E1         	movff	BCDsendNumber@Buffer+3,BCDsendNumber@Link+3
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;BCDdisplay.c: 52: Buffer = (unsigned long)(Buffer/(unsigned long)10);
  4478  000F66  C0E6  F020         	movff	BCDsendNumber@Buffer,___lldiv@dividend
  4479  000F6A  C0E7  F021         	movff	BCDsendNumber@Buffer+1,___lldiv@dividend+1
  4480  000F6E  C0E8  F022         	movff	BCDsendNumber@Buffer+2,___lldiv@dividend+2
  4481  000F72  C0E9  F023         	movff	BCDsendNumber@Buffer+3,___lldiv@dividend+3
  4482  000F76  0E0A               	movlw	10
  4483  000F78  6E24               	movwf	___lldiv@divisor,c
  4484  000F7A  0E00               	movlw	0
  4485  000F7C  6E25               	movwf	___lldiv@divisor+1,c
  4486  000F7E  0E00               	movlw	0
  4487  000F80  6E26               	movwf	___lldiv@divisor+2,c
  4488  000F82  0E00               	movlw	0
  4489  000F84  6E27               	movwf	___lldiv@divisor+3,c
  4490  000F86  EC57  F00B         	call	___lldiv	;wreg free
  4491  000F8A  C020  F0E6         	movff	?___lldiv,BCDsendNumber@Buffer
  4492  000F8E  C021  F0E7         	movff	?___lldiv+1,BCDsendNumber@Buffer+1
  4493  000F92  C022  F0E8         	movff	?___lldiv+2,BCDsendNumber@Buffer+2
  4494  000F96  C023  F0E9         	movff	?___lldiv+3,BCDsendNumber@Buffer+3
  4495                           
  4496                           ;BCDdisplay.c: 53: Output = Link - (unsigned long)(Buffer * (unsigned long)10);
  4497  000F9A  C0E6  F014         	movff	BCDsendNumber@Buffer,___lmul@multiplier
  4498  000F9E  C0E7  F015         	movff	BCDsendNumber@Buffer+1,___lmul@multiplier+1
  4499  000FA2  C0E8  F016         	movff	BCDsendNumber@Buffer+2,___lmul@multiplier+2
  4500  000FA6  C0E9  F017         	movff	BCDsendNumber@Buffer+3,___lmul@multiplier+3
  4501  000FAA  0E0A               	movlw	10
  4502  000FAC  6E18               	movwf	___lmul@multiplicand,c
  4503  000FAE  0E00               	movlw	0
  4504  000FB0  6E19               	movwf	___lmul@multiplicand+1,c
  4505  000FB2  0E00               	movlw	0
  4506  000FB4  6E1A               	movwf	___lmul@multiplicand+2,c
  4507  000FB6  0E00               	movlw	0
  4508  000FB8  6E1B               	movwf	___lmul@multiplicand+3,c
  4509  000FBA  EC31  F00C         	call	___lmul	;wreg free
  4510  000FBE  1E14               	comf	?___lmul,f,c
  4511  000FC0  1E15               	comf	?___lmul+1,f,c
  4512  000FC2  1E16               	comf	?___lmul+2,f,c
  4513  000FC4  1E17               	comf	?___lmul+3,f,c
  4514  000FC6  2A14               	incf	?___lmul,f,c
  4515  000FC8  0E00               	movlw	0
  4516  000FCA  2215               	addwfc	?___lmul+1,f,c
  4517  000FCC  2216               	addwfc	?___lmul+2,f,c
  4518  000FCE  2217               	addwfc	?___lmul+3,f,c
  4519  000FD0  0100               	movlb	0	; () banked
  4520  000FD2  51DE               	movf	BCDsendNumber@Link& (0+255),w,b
  4521  000FD4  2414               	addwf	?___lmul,w,c
  4522  000FD6  0100               	movlb	0	; () banked
  4523  000FD8  6FE2               	movwf	BCDsendNumber@Output& (0+255),b
  4524  000FDA  0100               	movlb	0	; () banked
  4525  000FDC  51DF               	movf	(BCDsendNumber@Link+1)& (0+255),w,b
  4526  000FDE  2015               	addwfc	?___lmul+1,w,c
  4527  000FE0  0100               	movlb	0	; () banked
  4528  000FE2  6FE3               	movwf	(BCDsendNumber@Output+1)& (0+255),b
  4529  000FE4  0100               	movlb	0	; () banked
  4530  000FE6  51E0               	movf	(BCDsendNumber@Link+2)& (0+255),w,b
  4531  000FE8  2016               	addwfc	?___lmul+2,w,c
  4532  000FEA  0100               	movlb	0	; () banked
  4533  000FEC  6FE4               	movwf	(BCDsendNumber@Output+2)& (0+255),b
  4534  000FEE  0100               	movlb	0	; () banked
  4535  000FF0  51E1               	movf	(BCDsendNumber@Link+3)& (0+255),w,b
  4536  000FF2  2017               	addwfc	?___lmul+3,w,c
  4537  000FF4  0100               	movlb	0	; () banked
  4538  000FF6  6FE5               	movwf	(BCDsendNumber@Output+3)& (0+255),b
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;BCDdisplay.c: 55: BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
  4542  000FF8  0E2B               	movlw	low _SevenSegmentMAP
  4543  000FFA  0100               	movlb	0	; () banked
  4544  000FFC  25E2               	addwf	BCDsendNumber@Output& (0+255),w,b
  4545  000FFE  6EF6               	movwf	tblptrl,c
  4546  001000  0E06               	movlw	high _SevenSegmentMAP
  4547  001002  21E3               	addwfc	(BCDsendNumber@Output+1)& (0+255),w,b
  4548  001004  6EF7               	movwf	tblptrh,c
  4549  001006                     	if	0	;There are less than 3 active tblptr bytes
  4550  001006  D00C               	goto	L9
  4551  001008                     l3209:
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;BCDdisplay.c: 57: else if ((LoopIndex <= DecimalPlace)
  4555                           ;BCDdisplay.c: 58: ||( (unsigned char)0) == EnableTranc)
  4556  001008  0100               	movlb	0	; () banked
  4557  00100A  51EA               	movf	BCDsendNumber@LoopIndex& (0+255),w,b
  4558  00100C  5C32               	subwf	BCDsendNumber@DecimalPlace,w,c
  4559  00100E  B0D8               	btfsc	status,0,c
  4560  001010  D003               	goto	l3213
  4561                           
  4562                           ; BSR set to: 0
  4563  001012  5033               	movf	BCDsendNumber@EnableTranc,w,c
  4564  001014  A4D8               	btfss	status,2,c
  4565  001016  D020               	goto	l3215
  4566  001018                     l3213:
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;BCDdisplay.c: 59: {
  4570                           ;BCDdisplay.c: 60: BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[0];
  4571  001018  0E2B               	movlw	low _SevenSegmentMAP
  4572  00101A  6EF6               	movwf	tblptrl,c
  4573  00101C                     	if	1	;There is more than 1 active tblptr byte
  4574  00101C  0E06               	movlw	high _SevenSegmentMAP
  4575  00101E  6EF7               	movwf	tblptrh,c
  4576  001020                     	endif
  4577  001020                     	if	0	;There are less than 3 active tblptr bytes
  4578  001020                     L9:
  4579  001020                     	endif
  4580  001020  0008               	tblrd		*
  4581  001022  50F5               	movf	tablat,w,c
  4582  001024  6E34               	movwf	??_BCDsendNumber& (0+255),c
  4583  001026  6A35               	clrf	(??_BCDsendNumber+1)& (0+255),c
  4584  001028  5031               	movf	BCDsendNumber@Line,w,c
  4585  00102A  0D08               	mullw	8
  4586  00102C  0EC2               	movlw	low _BCDAlpha
  4587  00102E  6E36               	movwf	(??_BCDsendNumber+2)& (0+255),c
  4588  001030  0E00               	movlw	high _BCDAlpha
  4589  001032  6E37               	movwf	(??_BCDsendNumber+3)& (0+255),c
  4590  001034  50F3               	movf	prodl,w,c
  4591  001036  2636               	addwf	??_BCDsendNumber+2,f,c
  4592  001038  50F4               	movf	prodh,w,c
  4593  00103A  2237               	addwfc	??_BCDsendNumber+3,f,c
  4594  00103C  0100               	movlb	0	; () banked
  4595  00103E  51EA               	movf	BCDsendNumber@LoopIndex& (0+255),w,b
  4596  001040  0D02               	mullw	2
  4597  001042  50F3               	movf	prodl,w,c
  4598  001044  2436               	addwf	??_BCDsendNumber+2,w,c
  4599  001046  6ED9               	movwf	fsr2l,c
  4600  001048  50F4               	movf	prodh,w,c
  4601  00104A  2037               	addwfc	??_BCDsendNumber+3,w,c
  4602  00104C  6EDA               	movwf	fsr2h,c
  4603  00104E  C034  FFDE         	movff	??_BCDsendNumber,postinc2
  4604  001052  C035  FFDD         	movff	??_BCDsendNumber+1,postdec2
  4605                           
  4606                           ;BCDdisplay.c: 61: }
  4607  001056  D017               	goto	l3217
  4608  001058                     l3215:
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;BCDdisplay.c: 62: else
  4612                           ;BCDdisplay.c: 63: {
  4613                           ;BCDdisplay.c: 64: BCDAlpha[Line][LoopIndex] = 0x0;
  4614  001058  5031               	movf	BCDsendNumber@Line,w,c
  4615  00105A  0D08               	mullw	8
  4616  00105C  0EC2               	movlw	low _BCDAlpha
  4617  00105E  6E34               	movwf	??_BCDsendNumber& (0+255),c
  4618  001060  0E00               	movlw	high _BCDAlpha
  4619  001062  6E35               	movwf	(??_BCDsendNumber+1)& (0+255),c
  4620  001064  50F3               	movf	prodl,w,c
  4621  001066  2634               	addwf	??_BCDsendNumber,f,c
  4622  001068  50F4               	movf	prodh,w,c
  4623  00106A  2235               	addwfc	??_BCDsendNumber+1,f,c
  4624  00106C  0100               	movlb	0	; () banked
  4625  00106E  51EA               	movf	BCDsendNumber@LoopIndex& (0+255),w,b
  4626  001070  0D02               	mullw	2
  4627  001072  50F3               	movf	prodl,w,c
  4628  001074  2434               	addwf	??_BCDsendNumber,w,c
  4629  001076  6ED9               	movwf	fsr2l,c
  4630  001078  50F4               	movf	prodh,w,c
  4631  00107A  2035               	addwfc	??_BCDsendNumber+1,w,c
  4632  00107C  6EDA               	movwf	fsr2h,c
  4633  00107E  0E00               	movlw	0
  4634  001080  6EDE               	movwf	postinc2,c
  4635  001082  0E00               	movlw	0
  4636  001084  6EDD               	movwf	postdec2,c
  4637  001086                     l3217:
  4638                           
  4639                           ; BSR set to: 0
  4640  001086  0100               	movlb	0	; () banked
  4641  001088  2BEA               	incf	BCDsendNumber@LoopIndex& (0+255),f,b
  4642  00108A  D751               	goto	l3197
  4643  00108C                     l3221:
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;BCDdisplay.c: 65: }
  4647                           ;BCDdisplay.c: 66: }
  4648                           ;BCDdisplay.c: 67: if(DecimalPlace != (unsigned char)0)
  4649  00108C  5032               	movf	BCDsendNumber@DecimalPlace,w,c
  4650  00108E  B4D8               	btfsc	status,2,c
  4651  001090  0012               	return	
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;BCDdisplay.c: 68: {
  4655                           ;BCDdisplay.c: 69: BCDAlpha[Line][DecimalPlace] |= SevenSegmentMAP[10];
  4656  001092  5031               	movf	BCDsendNumber@Line,w,c
  4657  001094  0D08               	mullw	8
  4658  001096  0EC2               	movlw	low _BCDAlpha
  4659  001098  6E34               	movwf	??_BCDsendNumber& (0+255),c
  4660  00109A  0E00               	movlw	high _BCDAlpha
  4661  00109C  6E35               	movwf	(??_BCDsendNumber+1)& (0+255),c
  4662  00109E  50F3               	movf	prodl,w,c
  4663  0010A0  2634               	addwf	??_BCDsendNumber,f,c
  4664  0010A2  50F4               	movf	prodh,w,c
  4665  0010A4  2235               	addwfc	??_BCDsendNumber+1,f,c
  4666  0010A6  5032               	movf	BCDsendNumber@DecimalPlace,w,c
  4667  0010A8  0D02               	mullw	2
  4668  0010AA  50F3               	movf	prodl,w,c
  4669  0010AC  2434               	addwf	??_BCDsendNumber,w,c
  4670  0010AE  6ED9               	movwf	fsr2l,c
  4671  0010B0  50F4               	movf	prodh,w,c
  4672  0010B2  2035               	addwfc	??_BCDsendNumber+1,w,c
  4673  0010B4  6EDA               	movwf	fsr2h,c
  4674  0010B6  0E35               	movlw	low (_SevenSegmentMAP+10)
  4675  0010B8  6EF6               	movwf	tblptrl,c
  4676  0010BA  0E06               	movlw	high (_SevenSegmentMAP+10)
  4677  0010BC  6EF7               	movwf	tblptrh,c
  4678  0010BE                     	if	0	;tblptru may be non-zero
  4679  0010BE                     	endif
  4680  0010BE                     	if	0	;tblptru may be non-zero
  4681  0010BE                     	endif
  4682  0010BE  0008               	tblrd		*
  4683  0010C0  50F5               	movf	tablat,w,c
  4684  0010C2  12DE               	iorwf	postinc2,f,c
  4685  0010C4  0E00               	movlw	0
  4686  0010C6  12DD               	iorwf	postdec2,f,c
  4687  0010C8  0012               	return	
  4688  0010CA                     __end_of_BCDsendNumber:
  4689                           	opt stack 0
  4690                           tosu	equ	0xFFF
  4691                           tosh	equ	0xFFE
  4692                           tosl	equ	0xFFD
  4693                           pclath	equ	0xFFA
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           indf1	equ	0xFE7
  4704                           postinc1	equ	0xFE6
  4705                           fsr1h	equ	0xFE2
  4706                           fsr1l	equ	0xFE1
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function ___lmul *****************
  4715 ;; Defined at:
  4716 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  multiplier      4   19[COMRAM] unsigned long 
  4719 ;;  multiplicand    4   23[COMRAM] unsigned long 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  product         4   27[COMRAM] unsigned long 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  4   19[COMRAM] unsigned long 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4731 ;;      Params:         8       0       0       0       0       0       0
  4732 ;;      Locals:         4       0       0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0
  4734 ;;      Totals:        12       0       0       0       0       0       0
  4735 ;;Total ram usage:       12 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    4
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_BCDsendNumber
  4742 ;;		_GetAvgSpeed
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text24
  4747  001862                     __ptext24:
  4748                           	opt stack 0
  4749  001862                     ___lmul:
  4750                           	opt stack 21
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;incstack = 0
  4754  001862  0E00               	movlw	0
  4755  001864  6E1C               	movwf	___lmul@product,c
  4756  001866  0E00               	movlw	0
  4757  001868  6E1D               	movwf	___lmul@product+1,c
  4758  00186A  0E00               	movlw	0
  4759  00186C  6E1E               	movwf	___lmul@product+2,c
  4760  00186E  0E00               	movlw	0
  4761  001870  6E1F               	movwf	___lmul@product+3,c
  4762  001872                     l2995:
  4763  001872  A014               	btfss	___lmul@multiplier,0,c
  4764  001874  D008               	goto	l2999
  4765  001876  5018               	movf	___lmul@multiplicand,w,c
  4766  001878  261C               	addwf	___lmul@product,f,c
  4767  00187A  5019               	movf	___lmul@multiplicand+1,w,c
  4768  00187C  221D               	addwfc	___lmul@product+1,f,c
  4769  00187E  501A               	movf	___lmul@multiplicand+2,w,c
  4770  001880  221E               	addwfc	___lmul@product+2,f,c
  4771  001882  501B               	movf	___lmul@multiplicand+3,w,c
  4772  001884  221F               	addwfc	___lmul@product+3,f,c
  4773  001886                     l2999:
  4774  001886  90D8               	bcf	status,0,c
  4775  001888  3618               	rlcf	___lmul@multiplicand,f,c
  4776  00188A  3619               	rlcf	___lmul@multiplicand+1,f,c
  4777  00188C  361A               	rlcf	___lmul@multiplicand+2,f,c
  4778  00188E  361B               	rlcf	___lmul@multiplicand+3,f,c
  4779  001890  90D8               	bcf	status,0,c
  4780  001892  3217               	rrcf	___lmul@multiplier+3,f,c
  4781  001894  3216               	rrcf	___lmul@multiplier+2,f,c
  4782  001896  3215               	rrcf	___lmul@multiplier+1,f,c
  4783  001898  3214               	rrcf	___lmul@multiplier,f,c
  4784  00189A  5014               	movf	___lmul@multiplier,w,c
  4785  00189C  1015               	iorwf	___lmul@multiplier+1,w,c
  4786  00189E  1016               	iorwf	___lmul@multiplier+2,w,c
  4787  0018A0  1017               	iorwf	___lmul@multiplier+3,w,c
  4788  0018A2  A4D8               	btfss	status,2,c
  4789  0018A4  D7E6               	goto	l2995
  4790  0018A6  C01C  F014         	movff	___lmul@product,?___lmul
  4791  0018AA  C01D  F015         	movff	___lmul@product+1,?___lmul+1
  4792  0018AE  C01E  F016         	movff	___lmul@product+2,?___lmul+2
  4793  0018B2  C01F  F017         	movff	___lmul@product+3,?___lmul+3
  4794  0018B6  0012               	return		;funcret
  4795  0018B8                     __end_of___lmul:
  4796                           	opt stack 0
  4797                           tosu	equ	0xFFF
  4798                           tosh	equ	0xFFE
  4799                           tosl	equ	0xFFD
  4800                           pclath	equ	0xFFA
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           indf1	equ	0xFE7
  4811                           postinc1	equ	0xFE6
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function ___lldiv *****************
  4822 ;; Defined at:
  4823 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  dividend        4   31[COMRAM] unsigned long 
  4826 ;;  divisor         4   35[COMRAM] unsigned long 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  quotient        4   39[COMRAM] unsigned long 
  4829 ;;  counter         1   43[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  4   31[COMRAM] unsigned long 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4839 ;;      Params:         8       0       0       0       0       0       0
  4840 ;;      Locals:         5       0       0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0
  4842 ;;      Totals:        13       0       0       0       0       0       0
  4843 ;;Total ram usage:       13 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    4
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_BCDsendNumber
  4850 ;;		_SpeedCalcManage
  4851 ;;		_GetAvgSpeed
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text25
  4856  0016AE                     __ptext25:
  4857                           	opt stack 0
  4858  0016AE                     ___lldiv:
  4859                           	opt stack 22
  4860                           
  4861                           ;incstack = 0
  4862  0016AE  0E00               	movlw	0
  4863  0016B0  6E28               	movwf	___lldiv@quotient,c
  4864  0016B2  0E00               	movlw	0
  4865  0016B4  6E29               	movwf	___lldiv@quotient+1,c
  4866  0016B6  0E00               	movlw	0
  4867  0016B8  6E2A               	movwf	___lldiv@quotient+2,c
  4868  0016BA  0E00               	movlw	0
  4869  0016BC  6E2B               	movwf	___lldiv@quotient+3,c
  4870  0016BE  5024               	movf	___lldiv@divisor,w,c
  4871  0016C0  1025               	iorwf	___lldiv@divisor+1,w,c
  4872  0016C2  1026               	iorwf	___lldiv@divisor+2,w,c
  4873  0016C4  1027               	iorwf	___lldiv@divisor+3,w,c
  4874  0016C6  B4D8               	btfsc	status,2,c
  4875  0016C8  D02A               	goto	l983
  4876  0016CA  0E01               	movlw	1
  4877  0016CC  6E2C               	movwf	___lldiv@counter,c
  4878  0016CE  D006               	goto	l3011
  4879  0016D0                     l3009:
  4880  0016D0  90D8               	bcf	status,0,c
  4881  0016D2  3624               	rlcf	___lldiv@divisor,f,c
  4882  0016D4  3625               	rlcf	___lldiv@divisor+1,f,c
  4883  0016D6  3626               	rlcf	___lldiv@divisor+2,f,c
  4884  0016D8  3627               	rlcf	___lldiv@divisor+3,f,c
  4885  0016DA  2A2C               	incf	___lldiv@counter,f,c
  4886  0016DC                     l3011:
  4887  0016DC  AE27               	btfss	___lldiv@divisor+3,7,c
  4888  0016DE  D7F8               	goto	l3009
  4889  0016E0                     l3013:
  4890  0016E0  90D8               	bcf	status,0,c
  4891  0016E2  3628               	rlcf	___lldiv@quotient,f,c
  4892  0016E4  3629               	rlcf	___lldiv@quotient+1,f,c
  4893  0016E6  362A               	rlcf	___lldiv@quotient+2,f,c
  4894  0016E8  362B               	rlcf	___lldiv@quotient+3,f,c
  4895  0016EA  5024               	movf	___lldiv@divisor,w,c
  4896  0016EC  5C20               	subwf	___lldiv@dividend,w,c
  4897  0016EE  5025               	movf	___lldiv@divisor+1,w,c
  4898  0016F0  5821               	subwfb	___lldiv@dividend+1,w,c
  4899  0016F2  5026               	movf	___lldiv@divisor+2,w,c
  4900  0016F4  5822               	subwfb	___lldiv@dividend+2,w,c
  4901  0016F6  5027               	movf	___lldiv@divisor+3,w,c
  4902  0016F8  5823               	subwfb	___lldiv@dividend+3,w,c
  4903  0016FA  A0D8               	btfss	status,0,c
  4904  0016FC  D009               	goto	l3021
  4905  0016FE  5024               	movf	___lldiv@divisor,w,c
  4906  001700  5E20               	subwf	___lldiv@dividend,f,c
  4907  001702  5025               	movf	___lldiv@divisor+1,w,c
  4908  001704  5A21               	subwfb	___lldiv@dividend+1,f,c
  4909  001706  5026               	movf	___lldiv@divisor+2,w,c
  4910  001708  5A22               	subwfb	___lldiv@dividend+2,f,c
  4911  00170A  5027               	movf	___lldiv@divisor+3,w,c
  4912  00170C  5A23               	subwfb	___lldiv@dividend+3,f,c
  4913  00170E  8028               	bsf	___lldiv@quotient,0,c
  4914  001710                     l3021:
  4915  001710  90D8               	bcf	status,0,c
  4916  001712  3227               	rrcf	___lldiv@divisor+3,f,c
  4917  001714  3226               	rrcf	___lldiv@divisor+2,f,c
  4918  001716  3225               	rrcf	___lldiv@divisor+1,f,c
  4919  001718  3224               	rrcf	___lldiv@divisor,f,c
  4920  00171A  2E2C               	decfsz	___lldiv@counter,f,c
  4921  00171C  D7E1               	goto	l3013
  4922  00171E                     l983:
  4923  00171E  C028  F020         	movff	___lldiv@quotient,?___lldiv
  4924  001722  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  4925  001726  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  4926  00172A  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  4927  00172E  0012               	return		;funcret
  4928  001730                     __end_of___lldiv:
  4929                           	opt stack 0
  4930                           tosu	equ	0xFFF
  4931                           tosh	equ	0xFFE
  4932                           tosl	equ	0xFFD
  4933                           pclath	equ	0xFFA
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           postinc1	equ	0xFE6
  4945                           fsr1h	equ	0xFE2
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           fsr2h	equ	0xFDA
  4951                           fsr2l	equ	0xFD9
  4952                           status	equ	0xFD8
  4953                           
  4954 ;; *************** function _APP_SLEEPmanage *****************
  4955 ;; Defined at:
  4956 ;;		line 8 in file "../../../../Common/App/APP_SleepManage/APP_SleepManage.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  StatusByte      2   19[COMRAM] PTR struct .
  4959 ;;		 -> APP_MANAGE@StatusByte(2), 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		None
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4971 ;;      Params:         2       0       0       0       0       0       0
  4972 ;;      Locals:         0       0       0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0
  4974 ;;      Totals:         2       0       0       0       0       0       0
  4975 ;;Total ram usage:        2 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_APP_MANAGE
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text26
  4986  001D7A                     __ptext26:
  4987                           	opt stack 0
  4988  001D7A                     _APP_SLEEPmanage:
  4989                           	opt stack 22
  4990                           
  4991                           ;incstack = 0
  4992  001D7A  0012               	return		;funcret
  4993  001D7C                     __end_of_APP_SLEEPmanage:
  4994                           	opt stack 0
  4995                           tosu	equ	0xFFF
  4996                           tosh	equ	0xFFE
  4997                           tosl	equ	0xFFD
  4998                           pclath	equ	0xFFA
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           postinc0	equ	0xFEE
  5007                           wreg	equ	0xFE8
  5008                           indf1	equ	0xFE7
  5009                           postinc1	equ	0xFE6
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function _APP_HMImanage *****************
  5020 ;; Defined at:
  5021 ;;		line 18 in file "../../../../Common/App/APP_HMI/APP_HMI.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  StatusByte      2   27[COMRAM] PTR struct .
  5024 ;;		 -> APP_MANAGE@StatusByte(2), 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  KeyStatusRig    1   33[COMRAM] unsigned char 
  5027 ;;  KeyStatusLef    1   32[COMRAM] unsigned char 
  5028 ;;  TempVar         1   31[COMRAM] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  1    wreg      void 
  5031 ;; Registers used:
  5032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5038 ;;      Params:         2       0       0       0       0       0       0
  5039 ;;      Locals:         3       0       0       0       0       0       0
  5040 ;;      Temps:          2       0       0       0       0       0       0
  5041 ;;      Totals:         7       0       0       0       0       0       0
  5042 ;;Total ram usage:        7 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    5
  5045 ;; This function calls:
  5046 ;;		_GetKeyStatus
  5047 ;;		_memset
  5048 ;; This function is called by:
  5049 ;;		_APP_MANAGE
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text27
  5054  000D2A                     __ptext27:
  5055                           	opt stack 0
  5056  000D2A                     _APP_HMImanage:
  5057                           	opt stack 21
  5058                           
  5059                           ;APP_HMI.c: 20: unsigned char KeyStatusLeft;
  5060                           ;APP_HMI.c: 21: unsigned char KeyStatusRight;
  5061                           ;APP_HMI.c: 22: unsigned char TempVar;
  5062                           ;APP_HMI.c: 23: static unsigned char DisplayState = (unsigned char)0x0;
  5063                           ;APP_HMI.c: 26: KeyStatusLeft = GetKeyStatus((unsigned char)0);
  5064                           
  5065                           ;incstack = 0
  5066  000D2A  0E00               	movlw	0
  5067  000D2C  EC94  F00D         	call	_GetKeyStatus
  5068  000D30  6E21               	movwf	APP_HMImanage@KeyStatusLeft,c
  5069                           
  5070                           ;APP_HMI.c: 27: KeyStatusRight = GetKeyStatus((unsigned char)1);
  5071  000D32  0E01               	movlw	1
  5072  000D34  EC94  F00D         	call	_GetKeyStatus
  5073  000D38  6E22               	movwf	APP_HMImanage@KeyStatusRight,c
  5074                           
  5075                           ;APP_HMI.c: 29: switch(DisplayState)
  5076  000D3A  D0CD               	goto	l3143
  5077  000D3C                     l3067:
  5078                           
  5079                           ;APP_HMI.c: 32: if(
  5080                           ;APP_HMI.c: 33: (KeyStatusLeft == (unsigned char)0x01)
  5081                           ;APP_HMI.c: 34: &&(KeyStatusRight == (unsigned char)0x01)
  5082                           ;APP_HMI.c: 35: )
  5083  000D3C  0421               	decf	APP_HMImanage@KeyStatusLeft,w,c
  5084  000D3E  A4D8               	btfss	status,2,c
  5085  000D40  D005               	goto	l3073
  5086  000D42  0422               	decf	APP_HMImanage@KeyStatusRight,w,c
  5087  000D44  A4D8               	btfss	status,2,c
  5088  000D46  D002               	goto	l3073
  5089                           
  5090                           ;APP_HMI.c: 36: {
  5091                           ;APP_HMI.c: 37: DisplayState = (unsigned char)0x3;
  5092  000D48  0E03               	movlw	3
  5093  000D4A  D0C3               	goto	L14
  5094  000D4C                     l3073:
  5095                           
  5096                           ;APP_HMI.c: 39: else if(KeyStatusLeft == (unsigned char)0x40)
  5097  000D4C  0E40               	movlw	64
  5098  000D4E  1821               	xorwf	APP_HMImanage@KeyStatusLeft,w,c
  5099  000D50  A4D8               	btfss	status,2,c
  5100  000D52  D01F               	goto	l3081
  5101                           
  5102                           ;APP_HMI.c: 40: {
  5103                           ;APP_HMI.c: 41: if(StatusByte->CurrentState == (unsigned char)0)
  5104  000D54  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5105  000D58  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5106  000D5C  50DF               	movf	indf2,w,c
  5107  000D5E  0B07               	andlw	7
  5108  000D60  0900               	iorlw	0
  5109  000D62  A4D8               	btfss	status,2,c
  5110  000D64  D008               	goto	l3079
  5111                           
  5112                           ;APP_HMI.c: 42: {
  5113                           ;APP_HMI.c: 43: StatusByte->CurrentState = (unsigned char)0x5 - (unsigned char)1;
  5114  000D66  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5115  000D6A  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5116  000D6E  50DF               	movf	indf2,w,c
  5117  000D70  0BF8               	andlw	-8
  5118  000D72  0904               	iorlw	4
  5119  000D74  D00C               	goto	L11
  5120  000D76                     l3079:
  5121                           
  5122                           ;APP_HMI.c: 45: else
  5123                           ;APP_HMI.c: 46: {
  5124                           ;APP_HMI.c: 47: StatusByte->CurrentState--;
  5125  000D76  0E01               	movlw	1
  5126  000D78  6E1E               	movwf	??_APP_HMImanage& (0+255),c
  5127  000D7A  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5128  000D7E  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5129  000D82  50DF               	movf	indf2,w,c
  5130  000D84  0B07               	andlw	7
  5131  000D86  6E1F               	movwf	(??_APP_HMImanage+1)& (0+255),c
  5132  000D88  501E               	movf	??_APP_HMImanage,w,c
  5133  000D8A  5E1F               	subwf	??_APP_HMImanage+1,f,c
  5134  000D8C  D022               	goto	L12
  5135  000D8E                     L11:
  5136  000D8E  6EDF               	movwf	indf2,c
  5137                           
  5138                           ;APP_HMI.c: 48: }
  5139                           ;APP_HMI.c: 49: }
  5140  000D90  D0B0               	goto	l3145
  5141  000D92                     l3081:
  5142                           
  5143                           ;APP_HMI.c: 50: else if(KeyStatusRight == (unsigned char)0x40)
  5144  000D92  0E40               	movlw	64
  5145  000D94  1822               	xorwf	APP_HMImanage@KeyStatusRight,w,c
  5146  000D96  A4D8               	btfss	status,2,c
  5147  000D98  D021               	goto	l3089
  5148                           
  5149                           ;APP_HMI.c: 51: {
  5150                           ;APP_HMI.c: 52: if(StatusByte->CurrentState == ((unsigned char)0x5 - (unsigned char)1))
  5151  000D9A  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5152  000D9E  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5153  000DA2  50DF               	movf	indf2,w,c
  5154  000DA4  0B07               	andlw	7
  5155  000DA6  0A04               	xorlw	4
  5156  000DA8  A4D8               	btfss	status,2,c
  5157  000DAA  D008               	goto	l3087
  5158                           
  5159                           ;APP_HMI.c: 53: {
  5160                           ;APP_HMI.c: 54: StatusByte->CurrentState = (unsigned char)0;
  5161  000DAC  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5162  000DB0  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5163  000DB4  90DF               	bcf	indf2,0,c
  5164  000DB6  92DF               	bcf	indf2,1,c
  5165  000DB8  94DF               	bcf	indf2,2,c
  5166                           
  5167                           ;APP_HMI.c: 55: }
  5168  000DBA  D09B               	goto	l3145
  5169  000DBC                     l3087:
  5170                           
  5171                           ;APP_HMI.c: 56: else
  5172                           ;APP_HMI.c: 57: {
  5173                           ;APP_HMI.c: 58: StatusByte->CurrentState++;
  5174  000DBC  0E01               	movlw	1
  5175  000DBE  6E1E               	movwf	??_APP_HMImanage& (0+255),c
  5176  000DC0  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5177  000DC4  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5178  000DC8  50DF               	movf	indf2,w,c
  5179  000DCA  0B07               	andlw	7
  5180  000DCC  6E1F               	movwf	(??_APP_HMImanage+1)& (0+255),c
  5181  000DCE  501E               	movf	??_APP_HMImanage,w,c
  5182  000DD0  261F               	addwf	??_APP_HMImanage+1,f,c
  5183  000DD2                     L12:
  5184  000DD2  50DF               	movf	indf2,w,c
  5185  000DD4  181F               	xorwf	(??_APP_HMImanage+1)& (0+255),w,c
  5186  000DD6  0BF8               	andlw	-8
  5187  000DD8  181F               	xorwf	(??_APP_HMImanage+1)& (0+255),w,c
  5188  000DDA  D7D9               	goto	L11
  5189  000DDC                     l3089:
  5190                           
  5191                           ;APP_HMI.c: 61: else if(KeyStatusLeft == (unsigned char)0x82)
  5192  000DDC  0E82               	movlw	130
  5193  000DDE  1821               	xorwf	APP_HMImanage@KeyStatusLeft,w,c
  5194  000DE0  A4D8               	btfss	status,2,c
  5195  000DE2  D008               	goto	l3093
  5196                           
  5197                           ;APP_HMI.c: 62: {
  5198                           ;APP_HMI.c: 63: StatusByte->KphFlag ^= (unsigned char)1;
  5199  000DE4  EE20 F001          	lfsr	2,1
  5200  000DE8  501C               	movf	APP_HMImanage@StatusByte,w,c
  5201  000DEA  26D9               	addwf	fsr2l,f,c
  5202  000DEC  501D               	movf	APP_HMImanage@StatusByte+1,w,c
  5203  000DEE  22DA               	addwfc	fsr2h,f,c
  5204  000DF0  74DF               	btg	indf2,2,c
  5205                           
  5206                           ;APP_HMI.c: 64: }
  5207  000DF2  D07F               	goto	l3145
  5208  000DF4                     l3093:
  5209                           
  5210                           ;APP_HMI.c: 65: else if(KeyStatusRight == (unsigned char)0x82)
  5211  000DF4  0E82               	movlw	130
  5212  000DF6  1822               	xorwf	APP_HMImanage@KeyStatusRight,w,c
  5213  000DF8  A4D8               	btfss	status,2,c
  5214  000DFA  D07B               	goto	l3145
  5215                           
  5216                           ;APP_HMI.c: 66: {
  5217                           ;APP_HMI.c: 67: StatusByte->StopMeasureFlag ^= (unsigned char)1;
  5218  000DFC  EE20 F001          	lfsr	2,1
  5219  000E00  501C               	movf	APP_HMImanage@StatusByte,w,c
  5220  000E02  26D9               	addwf	fsr2l,f,c
  5221  000E04  501D               	movf	APP_HMImanage@StatusByte+1,w,c
  5222  000E06  22DA               	addwfc	fsr2h,f,c
  5223  000E08  78DF               	btg	indf2,4,c
  5224                           
  5225                           ;APP_HMI.c: 68: }
  5226                           ;APP_HMI.c: 69: break;
  5227  000E0A  D073               	goto	l3145
  5228  000E0C                     l3097:
  5229                           
  5230                           ;APP_HMI.c: 72: TempVar = StatusByte->CurrentState;
  5231  000E0C  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5232  000E10  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5233  000E14  50DF               	movf	indf2,w,c
  5234  000E16  0B07               	andlw	7
  5235  000E18  6E20               	movwf	APP_HMImanage@TempVar,c
  5236                           
  5237                           ;APP_HMI.c: 73: memset(StatusByte,0,sizeof(APP_INFOR_BYTE));
  5238  000E1A  C01C  F014         	movff	APP_HMImanage@StatusByte,memset@p1
  5239  000E1E  C01D  F015         	movff	APP_HMImanage@StatusByte+1,memset@p1+1
  5240  000E22  0E00               	movlw	0
  5241  000E24  6E17               	movwf	memset@c+1,c
  5242  000E26  0E00               	movlw	0
  5243  000E28  6E16               	movwf	memset@c,c
  5244  000E2A  0E00               	movlw	0
  5245  000E2C  6E19               	movwf	memset@n+1,c
  5246  000E2E  0E02               	movlw	2
  5247  000E30  6E18               	movwf	memset@n,c
  5248  000E32  ECC2  F00D         	call	_memset	;wreg free
  5249                           
  5250                           ;APP_HMI.c: 74: if(
  5251                           ;APP_HMI.c: 75: (KeyStatusLeft == (unsigned char)0x01)
  5252                           ;APP_HMI.c: 76: &&(KeyStatusRight == (unsigned char)0x01)
  5253                           ;APP_HMI.c: 77: )
  5254  000E36  0421               	decf	APP_HMImanage@KeyStatusLeft,w,c
  5255  000E38  A4D8               	btfss	status,2,c
  5256  000E3A  D00B               	goto	l3109
  5257  000E3C  0422               	decf	APP_HMImanage@KeyStatusRight,w,c
  5258  000E3E  A4D8               	btfss	status,2,c
  5259  000E40  D008               	goto	l3109
  5260                           
  5261                           ;APP_HMI.c: 78: {
  5262                           ;APP_HMI.c: 79: DisplayState = (unsigned char)0x2;
  5263  000E42  0E02               	movlw	2
  5264  000E44  6E42               	movwf	APP_HMImanage@DisplayState,c
  5265                           
  5266                           ;APP_HMI.c: 80: StatusByte->EEPsaveFlag = (unsigned char)1;
  5267  000E46  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5268  000E4A  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5269  000E4E  86DF               	bsf	indf2,3,c
  5270                           
  5271                           ;APP_HMI.c: 81: }
  5272  000E50  D027               	goto	l3125
  5273  000E52                     l3109:
  5274                           
  5275                           ;APP_HMI.c: 82: else if(KeyStatusLeft == (unsigned char)0x40)
  5276  000E52  0E40               	movlw	64
  5277  000E54  1821               	xorwf	APP_HMImanage@KeyStatusLeft,w,c
  5278  000E56  A4D8               	btfss	status,2,c
  5279  000E58  D006               	goto	l3113
  5280                           
  5281                           ;APP_HMI.c: 83: {
  5282                           ;APP_HMI.c: 84: StatusByte->DecrementFlag = (unsigned char)1;
  5283  000E5A  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5284  000E5E  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5285  000E62  8ADF               	bsf	indf2,5,c
  5286                           
  5287                           ;APP_HMI.c: 85: }
  5288  000E64  D01D               	goto	l3125
  5289  000E66                     l3113:
  5290                           
  5291                           ;APP_HMI.c: 86: else if(KeyStatusRight == (unsigned char)0x40)
  5292  000E66  0E40               	movlw	64
  5293  000E68  1822               	xorwf	APP_HMImanage@KeyStatusRight,w,c
  5294  000E6A  A4D8               	btfss	status,2,c
  5295  000E6C  D006               	goto	l3117
  5296                           
  5297                           ;APP_HMI.c: 87: {
  5298                           ;APP_HMI.c: 88: StatusByte->IncrementFlag = (unsigned char)1;
  5299  000E6E  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5300  000E72  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5301  000E76  88DF               	bsf	indf2,4,c
  5302                           
  5303                           ;APP_HMI.c: 89: }
  5304  000E78  D013               	goto	l3125
  5305  000E7A                     l3117:
  5306                           
  5307                           ;APP_HMI.c: 90: else if(KeyStatusLeft == (unsigned char)0x82)
  5308  000E7A  0E82               	movlw	130
  5309  000E7C  1821               	xorwf	APP_HMImanage@KeyStatusLeft,w,c
  5310  000E7E  A4D8               	btfss	status,2,c
  5311  000E80  D006               	goto	l3121
  5312                           
  5313                           ;APP_HMI.c: 91: {
  5314                           ;APP_HMI.c: 92: StatusByte->ExtraDecrementFlag = (unsigned char)1;
  5315  000E82  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5316  000E86  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5317  000E8A  8EDF               	bsf	indf2,7,c
  5318                           
  5319                           ;APP_HMI.c: 93: }
  5320  000E8C  D009               	goto	l3125
  5321  000E8E                     l3121:
  5322                           
  5323                           ;APP_HMI.c: 94: else if(KeyStatusRight == (unsigned char)0x82)
  5324  000E8E  0E82               	movlw	130
  5325  000E90  1822               	xorwf	APP_HMImanage@KeyStatusRight,w,c
  5326  000E92  A4D8               	btfss	status,2,c
  5327  000E94  D005               	goto	l3125
  5328                           
  5329                           ;APP_HMI.c: 95: {
  5330                           ;APP_HMI.c: 96: StatusByte->ExtraIncrementFlag = (unsigned char)1;
  5331  000E96  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5332  000E9A  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5333  000E9E  8CDF               	bsf	indf2,6,c
  5334  000EA0                     l3125:
  5335                           
  5336                           ;APP_HMI.c: 101: }
  5337                           ;APP_HMI.c: 102: StatusByte->CurrentState = TempVar;
  5338  000EA0  C01C  FFD9         	movff	APP_HMImanage@StatusByte,fsr2l
  5339  000EA4  C01D  FFDA         	movff	APP_HMImanage@StatusByte+1,fsr2h
  5340  000EA8  50DF               	movf	indf2,w,c
  5341  000EAA  1820               	xorwf	APP_HMImanage@TempVar,w,c
  5342  000EAC  0BF8               	andlw	-8
  5343  000EAE  1820               	xorwf	APP_HMImanage@TempVar,w,c
  5344  000EB0  D76E               	goto	L11
  5345  000EB2                     l3127:
  5346                           
  5347                           ;APP_HMI.c: 106: if(
  5348                           ;APP_HMI.c: 107: ( KeyStatusLeft == (unsigned char)0x00 )
  5349                           ;APP_HMI.c: 108: &&( KeyStatusRight == (unsigned char)0x00 )
  5350                           ;APP_HMI.c: 109: )
  5351  000EB2  5021               	movf	APP_HMImanage@KeyStatusLeft,w,c
  5352  000EB4  A4D8               	btfss	status,2,c
  5353  000EB6  D01D               	goto	l3145
  5354  000EB8  5022               	movf	APP_HMImanage@KeyStatusRight,w,c
  5355  000EBA  A4D8               	btfss	status,2,c
  5356  000EBC  D01A               	goto	l3145
  5357  000EBE  D008               	goto	l3139
  5358  000EC0                     l3133:
  5359                           
  5360                           ;APP_HMI.c: 116: if(
  5361                           ;APP_HMI.c: 117: ( KeyStatusLeft == (unsigned char)0x00 )
  5362                           ;APP_HMI.c: 118: &&( KeyStatusRight == (unsigned char)0x00 )
  5363                           ;APP_HMI.c: 119: )
  5364  000EC0  5021               	movf	APP_HMImanage@KeyStatusLeft,w,c
  5365  000EC2  A4D8               	btfss	status,2,c
  5366  000EC4  D016               	goto	l3145
  5367  000EC6  5022               	movf	APP_HMImanage@KeyStatusRight,w,c
  5368  000EC8  A4D8               	btfss	status,2,c
  5369  000ECA  D013               	goto	l3145
  5370                           
  5371                           ;APP_HMI.c: 120: {
  5372                           ;APP_HMI.c: 121: DisplayState = (unsigned char)0x1;
  5373  000ECC  0E01               	movlw	1
  5374  000ECE  D001               	goto	L14
  5375  000ED0                     l3139:
  5376                           
  5377                           ;APP_HMI.c: 126: DisplayState = (unsigned char)0x0;
  5378  000ED0  0E00               	movlw	0
  5379  000ED2                     L14:
  5380  000ED2  6E42               	movwf	APP_HMImanage@DisplayState,c
  5381                           
  5382                           ;APP_HMI.c: 128: }
  5383                           
  5384                           ;APP_HMI.c: 127: break;
  5385  000ED4  D00E               	goto	l3145
  5386  000ED6                     l3143:
  5387  000ED6  5042               	movf	APP_HMImanage@DisplayState,w,c
  5388                           
  5389                           ; Switch size 1, requested type "space"
  5390                           ; Number of cases is 4, Range of values is 0 to 3
  5391                           ; switch strategies available:
  5392                           ; Name         Instructions Cycles
  5393                           ; simple_byte           13     7 (average)
  5394                           ;	Chosen strategy is simple_byte
  5395  000ED8  0A00               	xorlw	0	; case 0
  5396  000EDA  B4D8               	btfsc	status,2,c
  5397  000EDC  D72F               	goto	l3067
  5398  000EDE  0A01               	xorlw	1	; case 1
  5399  000EE0  B4D8               	btfsc	status,2,c
  5400  000EE2  D794               	goto	l3097
  5401  000EE4  0A03               	xorlw	3	; case 2
  5402  000EE6  B4D8               	btfsc	status,2,c
  5403  000EE8  D7E4               	goto	l3127
  5404  000EEA  0A01               	xorlw	1	; case 3
  5405  000EEC  B4D8               	btfsc	status,2,c
  5406  000EEE  D7E8               	goto	l3133
  5407  000EF0  D7EF               	goto	l3139
  5408  000EF2                     l3145:
  5409                           
  5410                           ;APP_HMI.c: 129: StatusByte->DisplayState = DisplayState & (unsigned char)0x01;
  5411  000EF2  C042  F01E         	movff	APP_HMImanage@DisplayState,??_APP_HMImanage
  5412  000EF6  0E01               	movlw	1
  5413  000EF8  161E               	andwf	??_APP_HMImanage,f,c
  5414  000EFA  EE20 F001          	lfsr	2,1
  5415  000EFE  501C               	movf	APP_HMImanage@StatusByte,w,c
  5416  000F00  26D9               	addwf	fsr2l,f,c
  5417  000F02  501D               	movf	APP_HMImanage@StatusByte+1,w,c
  5418  000F04  22DA               	addwfc	fsr2h,f,c
  5419  000F06  461E               	rlncf	??_APP_HMImanage,f,c
  5420  000F08  461E               	rlncf	??_APP_HMImanage,f,c
  5421  000F0A  461E               	rlncf	??_APP_HMImanage,f,c
  5422  000F0C  50DF               	movf	indf2,w,c
  5423  000F0E  181E               	xorwf	??_APP_HMImanage,w,c
  5424  000F10  0BF7               	andlw	-9
  5425  000F12  181E               	xorwf	??_APP_HMImanage,w,c
  5426  000F14  6EDF               	movwf	indf2,c
  5427  000F16  0012               	return		;funcret
  5428  000F18                     __end_of_APP_HMImanage:
  5429                           	opt stack 0
  5430                           tosu	equ	0xFFF
  5431                           tosh	equ	0xFFE
  5432                           tosl	equ	0xFFD
  5433                           pclath	equ	0xFFA
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodh	equ	0xFF4
  5439                           prodl	equ	0xFF3
  5440                           intcon	equ	0xFF2
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           indf1	equ	0xFE7
  5444                           postinc1	equ	0xFE6
  5445                           fsr1h	equ	0xFE2
  5446                           fsr1l	equ	0xFE1
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _memset *****************
  5455 ;; Defined at:
  5456 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memset.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  p1              2   19[COMRAM] PTR void 
  5459 ;;		 -> KeyInternalData(6), APP_MANAGE@StatusByte(2), 
  5460 ;;  c               2   21[COMRAM] int 
  5461 ;;  n               2   23[COMRAM] unsigned int 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  p               2   25[COMRAM] PTR unsigned char 
  5464 ;;		 -> KeyInternalData(6), APP_MANAGE@StatusByte(2), 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  2   19[COMRAM] PTR void 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5474 ;;      Params:         6       0       0       0       0       0       0
  5475 ;;      Locals:         2       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0
  5477 ;;      Totals:         8       0       0       0       0       0       0
  5478 ;;Total ram usage:        8 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    4
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_APP_MANAGE
  5485 ;;		_APP_HMImanage
  5486 ;;		_KeyInitialize
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text28
  5491  001B84                     __ptext28:
  5492                           	opt stack 0
  5493  001B84                     _memset:
  5494                           	opt stack 22
  5495                           
  5496                           ;incstack = 0
  5497  001B84  C014  F01A         	movff	memset@p1,memset@p
  5498  001B88  C015  F01B         	movff	memset@p1+1,memset@p+1
  5499  001B8C  D008               	goto	l2979
  5500  001B8E                     l2975:
  5501  001B8E  C01A  FFD9         	movff	memset@p,fsr2l
  5502  001B92  C01B  FFDA         	movff	memset@p+1,fsr2h
  5503  001B96  C016  FFDF         	movff	memset@c,indf2
  5504  001B9A  4A1A               	infsnz	memset@p,f,c
  5505  001B9C  2A1B               	incf	memset@p+1,f,c
  5506  001B9E                     l2979:
  5507  001B9E  0618               	decf	memset@n,f,c
  5508  001BA0  A0D8               	btfss	status,0,c
  5509  001BA2  0619               	decf	memset@n+1,f,c
  5510  001BA4  2818               	incf	memset@n,w,c
  5511  001BA6  E1F3               	bnz	l2975
  5512  001BA8  2819               	incf	memset@n+1,w,c
  5513  001BAA  B4D8               	btfsc	status,2,c
  5514  001BAC  0012               	return	
  5515  001BAE  D7EF               	goto	l2975
  5516  001BB0                     __end_of_memset:
  5517                           	opt stack 0
  5518                           tosu	equ	0xFFF
  5519                           tosh	equ	0xFFE
  5520                           tosl	equ	0xFFD
  5521                           pclath	equ	0xFFA
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           prodh	equ	0xFF4
  5527                           prodl	equ	0xFF3
  5528                           intcon	equ	0xFF2
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           indf1	equ	0xFE7
  5532                           postinc1	equ	0xFE6
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _GetKeyStatus *****************
  5543 ;; Defined at:
  5544 ;;		line 19 in file "../../../../Common/Driver/Key/Key.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  KeyID           1    wreg     unsigned char 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  KeyID           1   20[COMRAM] unsigned char 
  5549 ;;  KeyStatus       1   19[COMRAM] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      unsigned char 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5559 ;;      Params:         0       0       0       0       0       0       0
  5560 ;;      Locals:         2       0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0
  5562 ;;      Totals:         2       0       0       0       0       0       0
  5563 ;;Total ram usage:        2 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    4
  5566 ;; This function calls:
  5567 ;;		Nothing
  5568 ;; This function is called by:
  5569 ;;		_APP_HMImanage
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text29
  5574  001B28                     __ptext29:
  5575                           	opt stack 0
  5576  001B28                     _GetKeyStatus:
  5577                           	opt stack 21
  5578                           
  5579                           ;incstack = 0
  5580                           ;GetKeyStatus@KeyID stored from wreg
  5581  001B28  6E15               	movwf	GetKeyStatus@KeyID,c
  5582                           
  5583                           ;Key.c: 21: unsigned char KeyStatus;
  5584                           ;Key.c: 23: KeyStatus = KeyInternalData[KeyID].KeyState;
  5585  001B2A  5015               	movf	GetKeyStatus@KeyID,w,c
  5586  001B2C  0D03               	mullw	3
  5587  001B2E  0E64               	movlw	low _KeyInternalData
  5588  001B30  24F3               	addwf	prodl,w,c
  5589  001B32  6ED9               	movwf	fsr2l,c
  5590  001B34  0E00               	movlw	high _KeyInternalData
  5591  001B36  20F4               	addwfc	prodh,w,c
  5592  001B38  6EDA               	movwf	fsr2h,c
  5593  001B3A  50DF               	movf	indf2,w,c
  5594  001B3C  6E14               	movwf	GetKeyStatus@KeyStatus,c
  5595                           
  5596                           ;Key.c: 24: KeyInternalData[KeyID].KeyState &= (unsigned char)0x3F;
  5597  001B3E  5015               	movf	GetKeyStatus@KeyID,w,c
  5598  001B40  0D03               	mullw	3
  5599  001B42  0E64               	movlw	low _KeyInternalData
  5600  001B44  24F3               	addwf	prodl,w,c
  5601  001B46  6ED9               	movwf	fsr2l,c
  5602  001B48  0E00               	movlw	high _KeyInternalData
  5603  001B4A  20F4               	addwfc	prodh,w,c
  5604  001B4C  6EDA               	movwf	fsr2h,c
  5605  001B4E  0E3F               	movlw	63
  5606  001B50  16DF               	andwf	indf2,f,c
  5607                           
  5608                           ;Key.c: 26: return KeyStatus;
  5609  001B52  5014               	movf	GetKeyStatus@KeyStatus,w,c
  5610  001B54  0012               	return	
  5611  001B56                     __end_of_GetKeyStatus:
  5612                           	opt stack 0
  5613                           tosu	equ	0xFFF
  5614                           tosh	equ	0xFFE
  5615                           tosl	equ	0xFFD
  5616                           pclath	equ	0xFFA
  5617                           tblptru	equ	0xFF8
  5618                           tblptrh	equ	0xFF7
  5619                           tblptrl	equ	0xFF6
  5620                           tablat	equ	0xFF5
  5621                           prodh	equ	0xFF4
  5622                           prodl	equ	0xFF3
  5623                           intcon	equ	0xFF2
  5624                           postinc0	equ	0xFEE
  5625                           wreg	equ	0xFE8
  5626                           indf1	equ	0xFE7
  5627                           postinc1	equ	0xFE6
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _APP_CALC_TIMEmanage *****************
  5638 ;; Defined at:
  5639 ;;		line 20 in file "../../../../Common/App/APP_Calculations/APP_CalcTime.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  StatusByte      2   19[COMRAM] PTR struct .
  5642 ;;		 -> APP_MANAGE@StatusByte(2), 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  4   19[COMRAM] unsigned long 
  5647 ;; Registers used:
  5648 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5654 ;;      Params:         4       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0
  5657 ;;      Totals:         4       0       0       0       0       0       0
  5658 ;;Total ram usage:        4 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    4
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_APP_MANAGE
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text30
  5669  001624                     __ptext30:
  5670                           	opt stack 0
  5671  001624                     _APP_CALC_TIMEmanage:
  5672                           	opt stack 22
  5673                           
  5674                           ;APP_CalcTime.c: 23: if((unsigned char)1 == StatusByte->ClearFlag)
  5675                           
  5676                           ;incstack = 0
  5677  001624  EE20 F001          	lfsr	2,1
  5678  001628  5014               	movf	APP_CALC_TIMEmanage@StatusByte,w,c
  5679  00162A  26D9               	addwf	fsr2l,f,c
  5680  00162C  5015               	movf	APP_CALC_TIMEmanage@StatusByte+1,w,c
  5681  00162E  22DA               	addwfc	fsr2h,f,c
  5682  001630  A0DF               	btfss	indf2,0,c
  5683  001632  D00F               	goto	l3151
  5684                           
  5685                           ;APP_CalcTime.c: 24: {
  5686                           ;APP_CalcTime.c: 25: ElapsedTimePeriod = (unsigned short)0;
  5687  001634  0E00               	movlw	0
  5688  001636  0100               	movlb	0	; () banked
  5689  001638  6FDB               	movwf	(_ElapsedTimePeriod+1)& (0+255),b
  5690  00163A  0E00               	movlw	0
  5691  00163C  6FDA               	movwf	_ElapsedTimePeriod& (0+255),b
  5692                           
  5693                           ;APP_CalcTime.c: 26: ElapsedTimeMinutes = (unsigned long)0;
  5694  00163E  0E00               	movlw	0
  5695  001640  0100               	movlb	0	; () banked
  5696  001642  6FD2               	movwf	_ElapsedTimeMinutes& (0+255),b
  5697  001644  0E00               	movlw	0
  5698  001646  6FD3               	movwf	(_ElapsedTimeMinutes+1)& (0+255),b
  5699  001648  0E00               	movlw	0
  5700  00164A  6FD4               	movwf	(_ElapsedTimeMinutes+2)& (0+255),b
  5701  00164C  0E00               	movlw	0
  5702  00164E  6FD5               	movwf	(_ElapsedTimeMinutes+3)& (0+255),b
  5703                           
  5704                           ;APP_CalcTime.c: 27: }
  5705  001650  D025               	goto	l578
  5706  001652                     l3151:
  5707                           
  5708                           ;APP_CalcTime.c: 28: else if(ElapsedTimePeriod >= (unsigned short)((unsigned short)60000
      +                          /(unsigned short)50))
  5709  001652  0EB0               	movlw	176
  5710  001654  0100               	movlb	0	; () banked
  5711  001656  5DDA               	subwf	_ElapsedTimePeriod& (0+255),w,b
  5712  001658  0E04               	movlw	4
  5713  00165A  0100               	movlb	0	; () banked
  5714  00165C  59DB               	subwfb	(_ElapsedTimePeriod+1)& (0+255),w,b
  5715  00165E  A0D8               	btfss	status,0,c
  5716  001660  D012               	goto	l3159
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;APP_CalcTime.c: 29: {
  5720                           ;APP_CalcTime.c: 30: ElapsedTimePeriod = (unsigned short)0;
  5721  001662  0E00               	movlw	0
  5722  001664  0100               	movlb	0	; () banked
  5723  001666  6FDB               	movwf	(_ElapsedTimePeriod+1)& (0+255),b
  5724  001668  0E00               	movlw	0
  5725  00166A  6FDA               	movwf	_ElapsedTimePeriod& (0+255),b
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;APP_CalcTime.c: 31: ElapsedTimeMinutes++;
  5729  00166C  0E01               	movlw	1
  5730  00166E  0100               	movlb	0	; () banked
  5731  001670  27D2               	addwf	_ElapsedTimeMinutes& (0+255),f,b
  5732  001672  0E00               	movlw	0
  5733  001674  23D3               	addwfc	(_ElapsedTimeMinutes+1)& (0+255),f,b
  5734  001676  23D4               	addwfc	(_ElapsedTimeMinutes+2)& (0+255),f,b
  5735  001678  23D5               	addwfc	(_ElapsedTimeMinutes+3)& (0+255),f,b
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;APP_CalcTime.c: 32: StatusByte->EEPsaveFlag = (unsigned char)1;
  5739  00167A  C014  FFD9         	movff	APP_CALC_TIMEmanage@StatusByte,fsr2l
  5740  00167E  C015  FFDA         	movff	APP_CALC_TIMEmanage@StatusByte+1,fsr2h
  5741  001682  86DF               	bsf	indf2,3,c
  5742                           
  5743                           ;APP_CalcTime.c: 33: }
  5744  001684  D00B               	goto	l578
  5745  001686                     l3159:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;APP_CalcTime.c: 34: else if(StatusByte->StopMeasureFlag != (unsigned char)1)
  5749  001686  EE20 F001          	lfsr	2,1
  5750  00168A  5014               	movf	APP_CALC_TIMEmanage@StatusByte,w,c
  5751  00168C  26D9               	addwf	fsr2l,f,c
  5752  00168E  5015               	movf	APP_CALC_TIMEmanage@StatusByte+1,w,c
  5753  001690  22DA               	addwfc	fsr2h,f,c
  5754  001692  B8DF               	btfsc	indf2,4,c
  5755  001694  D003               	goto	l578
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;APP_CalcTime.c: 35: {
  5759                           ;APP_CalcTime.c: 36: ElapsedTimePeriod++;
  5760  001696  0100               	movlb	0	; () banked
  5761  001698  4BDA               	infsnz	_ElapsedTimePeriod& (0+255),f,b
  5762  00169A  2BDB               	incf	(_ElapsedTimePeriod+1)& (0+255),f,b
  5763  00169C                     l578:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;APP_CalcTime.c: 41: }
  5767                           ;APP_CalcTime.c: 43: return ElapsedTimeMinutes;
  5768  00169C  C0D2  F014         	movff	_ElapsedTimeMinutes,?_APP_CALC_TIMEmanage
  5769  0016A0  C0D3  F015         	movff	_ElapsedTimeMinutes+1,?_APP_CALC_TIMEmanage+1
  5770  0016A4  C0D4  F016         	movff	_ElapsedTimeMinutes+2,?_APP_CALC_TIMEmanage+2
  5771  0016A8  C0D5  F017         	movff	_ElapsedTimeMinutes+3,?_APP_CALC_TIMEmanage+3
  5772                           
  5773                           ; BSR set to: 0
  5774  0016AC  0012               	return		;funcret
  5775  0016AE                     __end_of_APP_CALC_TIMEmanage:
  5776                           	opt stack 0
  5777                           tosu	equ	0xFFF
  5778                           tosh	equ	0xFFE
  5779                           tosl	equ	0xFFD
  5780                           pclath	equ	0xFFA
  5781                           tblptru	equ	0xFF8
  5782                           tblptrh	equ	0xFF7
  5783                           tblptrl	equ	0xFF6
  5784                           tablat	equ	0xFF5
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           intcon	equ	0xFF2
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           indf1	equ	0xFE7
  5791                           postinc1	equ	0xFE6
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801 ;; *************** function _APP_CALC_MAXSPDmanage *****************
  5802 ;; Defined at:
  5803 ;;		line 24 in file "../../../../Common/App/APP_Calculations/APP_CalcSpeed.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  CurrentSpeed    2   19[COMRAM] unsigned short 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  2   19[COMRAM] unsigned short 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5817 ;;      Params:         2       0       0       0       0       0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0
  5820 ;;      Totals:         2       0       0       0       0       0       0
  5821 ;;Total ram usage:        2 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    4
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		_APP_MANAGE
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text31
  5832  001C4E                     __ptext31:
  5833                           	opt stack 0
  5834  001C4E                     _APP_CALC_MAXSPDmanage:
  5835                           	opt stack 22
  5836                           
  5837                           ;APP_CalcSpeed.c: 26: if(CalcMaxSpeed < CurrentSpeed)
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;incstack = 0
  5841  001C4E  5014               	movf	APP_CALC_MAXSPDmanage@CurrentSpeed,w,c
  5842  001C50  5C3A               	subwf	_CalcMaxSpeed,w,c
  5843  001C52  5015               	movf	APP_CALC_MAXSPDmanage@CurrentSpeed+1,w,c
  5844  001C54  583B               	subwfb	_CalcMaxSpeed+1,w,c
  5845  001C56  B0D8               	btfsc	status,0,c
  5846  001C58  D004               	goto	l566
  5847                           
  5848                           ;APP_CalcSpeed.c: 27: {
  5849                           ;APP_CalcSpeed.c: 28: CalcMaxSpeed = CurrentSpeed;
  5850  001C5A  C014  F03A         	movff	APP_CALC_MAXSPDmanage@CurrentSpeed,_CalcMaxSpeed
  5851  001C5E  C015  F03B         	movff	APP_CALC_MAXSPDmanage@CurrentSpeed+1,_CalcMaxSpeed+1
  5852  001C62                     l566:
  5853                           
  5854                           ;APP_CalcSpeed.c: 29: }
  5855                           ;APP_CalcSpeed.c: 30: return CalcMaxSpeed;
  5856  001C62  C03A  F014         	movff	_CalcMaxSpeed,?_APP_CALC_MAXSPDmanage
  5857  001C66  C03B  F015         	movff	_CalcMaxSpeed+1,?_APP_CALC_MAXSPDmanage+1
  5858  001C6A  0012               	return		;funcret
  5859  001C6C                     __end_of_APP_CALC_MAXSPDmanage:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           postinc0	equ	0xFEE
  5873                           wreg	equ	0xFE8
  5874                           indf1	equ	0xFE7
  5875                           postinc1	equ	0xFE6
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _APP_CALC_AVGSPDmanage *****************
  5886 ;; Defined at:
  5887 ;;		line 8 in file "../../../../Common/App/APP_Calculations/APP_CalcSpeed.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  StatusByte      2   19[COMRAM] PTR struct .
  5890 ;;		 -> APP_MANAGE@StatusByte(2), 
  5891 ;;  TravelTime      4   21[COMRAM] unsigned long 
  5892 ;;  Distance        4   25[COMRAM] unsigned long 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  2   19[COMRAM] unsigned short 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:        10       0       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0
  5907 ;;      Totals:        10       0       0       0       0       0       0
  5908 ;;Total ram usage:       10 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    4
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_APP_MANAGE
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text32
  5919  001D12                     __ptext32:
  5920                           	opt stack 0
  5921  001D12                     _APP_CALC_AVGSPDmanage:
  5922                           	opt stack 22
  5923                           
  5924                           ;APP_CalcSpeed.c: 15: return 4321;
  5925                           
  5926                           ;incstack = 0
  5927  001D12  0E10               	movlw	16
  5928  001D14  6E15               	movwf	?_APP_CALC_AVGSPDmanage+1,c
  5929  001D16  0EE1               	movlw	225
  5930  001D18  6E14               	movwf	?_APP_CALC_AVGSPDmanage,c
  5931  001D1A  0012               	return	
  5932  001D1C                     __end_of_APP_CALC_AVGSPDmanage:
  5933                           	opt stack 0
  5934                           tosu	equ	0xFFF
  5935                           tosh	equ	0xFFE
  5936                           tosl	equ	0xFFD
  5937                           pclath	equ	0xFFA
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           intcon	equ	0xFF2
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           indf1	equ	0xFE7
  5948                           postinc1	equ	0xFE6
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           indf2	equ	0xFDF
  5952                           postinc2	equ	0xFDE
  5953                           postdec2	equ	0xFDD
  5954                           fsr2h	equ	0xFDA
  5955                           fsr2l	equ	0xFD9
  5956                           status	equ	0xFD8
  5957                           
  5958 ;; *************** function _BCDManage7segment *****************
  5959 ;; Defined at:
  5960 ;;		line 73 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;		None
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  BCD             1   24[COMRAM] unsigned char 
  5965 ;;  Index           1   23[COMRAM] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5975 ;;      Params:         0       0       0       0       0       0       0
  5976 ;;      Locals:         2       0       0       0       0       0       0
  5977 ;;      Temps:          2       0       0       0       0       0       0
  5978 ;;      Totals:         4       0       0       0       0       0       0
  5979 ;;Total ram usage:        4 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    5
  5982 ;; This function calls:
  5983 ;;		_HWI_4Digit_WRITE
  5984 ;;		_HWI_8Digit_WRITE
  5985 ;; This function is called by:
  5986 ;;		_DisplayAlphaNumeric
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text33
  5991  001464                     __ptext33:
  5992                           	opt stack 0
  5993  001464                     _BCDManage7segment:
  5994                           	opt stack 22
  5995                           
  5996                           ;BCDdisplay.c: 75: static unsigned char DigitIndex = (unsigned char)0;
  5997                           ;BCDdisplay.c: 76: static unsigned char BlinkCounter = (unsigned char)0;
  5998                           ;BCDdisplay.c: 77: static unsigned char LineIndex = (unsigned char)0;
  5999                           ;BCDdisplay.c: 79: unsigned char Index;
  6000                           ;BCDdisplay.c: 80: unsigned char BCD;
  6001                           ;BCDdisplay.c: 83: if( BlinkDuration != (unsigned char)0)
  6002                           
  6003                           ;incstack = 0
  6004  001464  5052               	movf	_BlinkDuration,w,c
  6005  001466  B4D8               	btfsc	status,2,c
  6006  001468  D00A               	goto	l2621
  6007                           
  6008                           ;BCDdisplay.c: 84: {
  6009                           ;BCDdisplay.c: 85: BlinkCounter++;
  6010  00146A  2A4E               	incf	BCDManage7segment@BlinkCounter,f,c
  6011                           
  6012                           ;BCDdisplay.c: 86: if(BlinkCounter == BlinkDuration)
  6013  00146C  5052               	movf	_BlinkDuration,w,c
  6014  00146E  184E               	xorwf	BCDManage7segment@BlinkCounter,w,c
  6015  001470  A4D8               	btfss	status,2,c
  6016  001472  D007               	goto	l2623
  6017                           
  6018                           ;BCDdisplay.c: 87: {
  6019                           ;BCDdisplay.c: 88: BlinkFlag ^= (unsigned char)1;
  6020  001474  0E01               	movlw	1
  6021  001476  1A50               	xorwf	_BlinkFlag,f,c
  6022                           
  6023                           ;BCDdisplay.c: 89: BlinkCounter = (unsigned char)0;
  6024  001478  0E00               	movlw	0
  6025  00147A  6E4E               	movwf	BCDManage7segment@BlinkCounter,c
  6026                           
  6027                           ;BCDdisplay.c: 90: }
  6028                           ;BCDdisplay.c: 91: }
  6029  00147C  D002               	goto	l2623
  6030  00147E                     l2621:
  6031                           
  6032                           ;BCDdisplay.c: 92: else
  6033                           ;BCDdisplay.c: 93: {
  6034                           ;BCDdisplay.c: 94: BlinkFlag = (unsigned char)0;
  6035  00147E  0E00               	movlw	0
  6036  001480  6E50               	movwf	_BlinkFlag,c
  6037  001482                     l2623:
  6038                           
  6039                           ;BCDdisplay.c: 95: }
  6040                           ;BCDdisplay.c: 97: if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex)
  6041                           ;BCDdisplay.c: 98: && (LineBlinkIndex == LineIndex))
  6042  001482  0450               	decf	_BlinkFlag,w,c
  6043  001484  A4D8               	btfss	status,2,c
  6044  001486  D00A               	goto	l2631
  6045  001488  5053               	movf	_BlinkIndex,w,c
  6046  00148A  184F               	xorwf	BCDManage7segment@DigitIndex,w,c
  6047  00148C  A4D8               	btfss	status,2,c
  6048  00148E  D006               	goto	l2631
  6049  001490  504D               	movf	BCDManage7segment@LineIndex,w,c
  6050  001492  1851               	xorwf	_LineBlinkIndex,w,c
  6051  001494  A4D8               	btfss	status,2,c
  6052  001496  D002               	goto	l2631
  6053                           
  6054                           ;BCDdisplay.c: 99: {
  6055                           ;BCDdisplay.c: 100: BCD = (unsigned char)0;
  6056  001498  0E00               	movlw	0
  6057  00149A  D013               	goto	L15
  6058  00149C                     l2631:
  6059                           
  6060                           ;BCDdisplay.c: 102: else
  6061                           ;BCDdisplay.c: 103: {
  6062                           ;BCDdisplay.c: 104: BCD = BCDAlpha[LineIndex][DigitIndex];
  6063  00149C  504D               	movf	BCDManage7segment@LineIndex,w,c
  6064  00149E  0D08               	mullw	8
  6065  0014A0  0EC2               	movlw	low _BCDAlpha
  6066  0014A2  6E16               	movwf	??_BCDManage7segment& (0+255),c
  6067  0014A4  0E00               	movlw	high _BCDAlpha
  6068  0014A6  6E17               	movwf	(??_BCDManage7segment+1)& (0+255),c
  6069  0014A8  50F3               	movf	prodl,w,c
  6070  0014AA  2616               	addwf	??_BCDManage7segment,f,c
  6071  0014AC  50F4               	movf	prodh,w,c
  6072  0014AE  2217               	addwfc	??_BCDManage7segment+1,f,c
  6073  0014B0  504F               	movf	BCDManage7segment@DigitIndex,w,c
  6074  0014B2  0D02               	mullw	2
  6075  0014B4  50F3               	movf	prodl,w,c
  6076  0014B6  2416               	addwf	??_BCDManage7segment,w,c
  6077  0014B8  6ED9               	movwf	fsr2l,c
  6078  0014BA  50F4               	movf	prodh,w,c
  6079  0014BC  2017               	addwfc	??_BCDManage7segment+1,w,c
  6080  0014BE  6EDA               	movwf	fsr2h,c
  6081  0014C0  50DF               	movf	indf2,w,c
  6082  0014C2                     L15:
  6083  0014C2  6E19               	movwf	BCDManage7segment@BCD,c
  6084                           
  6085                           ;BCDdisplay.c: 105: }
  6086                           ;BCDdisplay.c: 107: if( (unsigned char)1 == bIsAnodeUsed)
  6087  0014C4  0454               	decf	_bIsAnodeUsed,w,c
  6088  0014C6  B4D8               	btfsc	status,2,c
  6089                           
  6090                           ;BCDdisplay.c: 108: {
  6091                           ;BCDdisplay.c: 110: BCD = (unsigned char)~BCD;
  6092  0014C8  1E19               	comf	BCDManage7segment@BCD,f,c
  6093                           
  6094                           ;BCDdisplay.c: 111: }
  6095                           ;BCDdisplay.c: 114: Index = (unsigned char)(LineIndex * (unsigned char)4 )
  6096                           ;BCDdisplay.c: 115: + DigitIndex;
  6097  0014CA  504D               	movf	BCDManage7segment@LineIndex,w,c
  6098  0014CC  0D04               	mullw	4
  6099  0014CE  50F3               	movf	prodl,w,c
  6100  0014D0  244F               	addwf	BCDManage7segment@DigitIndex,w,c
  6101  0014D2  6E18               	movwf	BCDManage7segment@Index,c
  6102                           
  6103                           ;BCDdisplay.c: 117: HWI_4Digit_WRITE(0,Index);
  6104  0014D4  C018  F014         	movff	BCDManage7segment@Index,HWI_4Digit_WRITE@value
  6105  0014D8  0E00               	movlw	0
  6106  0014DA  EC64  F00D         	call	_HWI_4Digit_WRITE
  6107                           
  6108                           ;BCDdisplay.c: 118: HWI_8Digit_WRITE(1,BCD);
  6109  0014DE  C019  F014         	movff	BCDManage7segment@BCD,HWI_8Digit_WRITE@value
  6110  0014E2  0E01               	movlw	1
  6111  0014E4  EC14  F00E         	call	_HWI_8Digit_WRITE
  6112                           
  6113                           ;BCDdisplay.c: 125: DigitIndex ++;
  6114  0014E8  2A4F               	incf	BCDManage7segment@DigitIndex,f,c
  6115                           
  6116                           ;BCDdisplay.c: 126: if(DigitIndex == (unsigned char)4)
  6117  0014EA  0E04               	movlw	4
  6118  0014EC  184F               	xorwf	BCDManage7segment@DigitIndex,w,c
  6119  0014EE  A4D8               	btfss	status,2,c
  6120  0014F0  0012               	return	
  6121                           
  6122                           ;BCDdisplay.c: 127: {
  6123                           ;BCDdisplay.c: 128: DigitIndex = (unsigned char)0;
  6124  0014F2  0E00               	movlw	0
  6125  0014F4  6E4F               	movwf	BCDManage7segment@DigitIndex,c
  6126                           
  6127                           ;BCDdisplay.c: 129: LineIndex++;
  6128  0014F6  2A4D               	incf	BCDManage7segment@LineIndex,f,c
  6129                           
  6130                           ;BCDdisplay.c: 130: if(LineIndex == (unsigned char)2)
  6131  0014F8  0E02               	movlw	2
  6132  0014FA  184D               	xorwf	BCDManage7segment@LineIndex,w,c
  6133  0014FC  A4D8               	btfss	status,2,c
  6134  0014FE  0012               	return	
  6135                           
  6136                           ;BCDdisplay.c: 131: {
  6137                           ;BCDdisplay.c: 132: LineIndex = (unsigned char)0;
  6138  001500  0E00               	movlw	0
  6139  001502  6E4D               	movwf	BCDManage7segment@LineIndex,c
  6140  001504  0012               	return	
  6141  001506                     __end_of_BCDManage7segment:
  6142                           	opt stack 0
  6143                           tosu	equ	0xFFF
  6144                           tosh	equ	0xFFE
  6145                           tosl	equ	0xFFD
  6146                           pclath	equ	0xFFA
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           indf1	equ	0xFE7
  6157                           postinc1	equ	0xFE6
  6158                           fsr1h	equ	0xFE2
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _HWI_8Digit_WRITE *****************
  6168 ;; Defined at:
  6169 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  port            1    wreg     unsigned char 
  6172 ;;  value           1   19[COMRAM] unsigned char 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  port            1   20[COMRAM] unsigned char 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6184 ;;      Params:         1       0       0       0       0       0       0
  6185 ;;      Locals:         1       0       0       0       0       0       0
  6186 ;;      Temps:          0       0       0       0       0       0       0
  6187 ;;      Totals:         2       0       0       0       0       0       0
  6188 ;;Total ram usage:        2 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    4
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_BCDManage7segment
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text34
  6199  001C28                     __ptext34:
  6200                           	opt stack 0
  6201  001C28                     _HWI_8Digit_WRITE:
  6202                           	opt stack 22
  6203                           
  6204                           ;incstack = 0
  6205                           ;HWI_8Digit_WRITE@port stored from wreg
  6206  001C28  6E15               	movwf	HWI_8Digit_WRITE@port,c
  6207                           
  6208                           ;HWI_DIGITAL.c: 43: switch (port)
  6209  001C2A  D009               	goto	l2501
  6210  001C2C                     l454:
  6211                           
  6212                           ;HWI_DIGITAL.c: 46: PORTC = value;
  6213  001C2C  C014  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  6214                           
  6215                           ;HWI_DIGITAL.c: 47: break;
  6216  001C30  0012               	return	
  6217  001C32                     l456:
  6218                           
  6219                           ;HWI_DIGITAL.c: 49: PORTD = value;
  6220  001C32  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  6221                           
  6222                           ;HWI_DIGITAL.c: 50: break;
  6223  001C36  0012               	return	
  6224  001C38                     l457:
  6225                           
  6226                           ;HWI_DIGITAL.c: 52: PORTD = value;
  6227  001C38  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  6228                           
  6229                           ;HWI_DIGITAL.c: 54: }
  6230                           
  6231                           ;HWI_DIGITAL.c: 53: break;
  6232  001C3C  0012               	return	
  6233  001C3E                     l2501:
  6234  001C3E  5015               	movf	HWI_8Digit_WRITE@port,w,c
  6235                           
  6236                           ; Switch size 1, requested type "space"
  6237                           ; Number of cases is 2, Range of values is 0 to 1
  6238                           ; switch strategies available:
  6239                           ; Name         Instructions Cycles
  6240                           ; simple_byte            7     4 (average)
  6241                           ;	Chosen strategy is simple_byte
  6242  001C40  0A00               	xorlw	0	; case 0
  6243  001C42  B4D8               	btfsc	status,2,c
  6244  001C44  D7F3               	goto	l454
  6245  001C46  0A01               	xorlw	1	; case 1
  6246  001C48  B4D8               	btfsc	status,2,c
  6247  001C4A  D7F3               	goto	l456
  6248  001C4C  D7F5               	goto	l457
  6249  001C4E                     __end_of_HWI_8Digit_WRITE:
  6250                           	opt stack 0
  6251                           tosu	equ	0xFFF
  6252                           tosh	equ	0xFFE
  6253                           tosl	equ	0xFFD
  6254                           pclath	equ	0xFFA
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           postinc0	equ	0xFEE
  6263                           wreg	equ	0xFE8
  6264                           indf1	equ	0xFE7
  6265                           postinc1	equ	0xFE6
  6266                           fsr1h	equ	0xFE2
  6267                           fsr1l	equ	0xFE1
  6268                           indf2	equ	0xFDF
  6269                           postinc2	equ	0xFDE
  6270                           postdec2	equ	0xFDD
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _HWI_4Digit_WRITE *****************
  6276 ;; Defined at:
  6277 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  port            1    wreg     unsigned char 
  6280 ;;  value           1   19[COMRAM] unsigned char 
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;  port            1   20[COMRAM] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  1    wreg      void 
  6285 ;; Registers used:
  6286 ;;		wreg, status,2, status,0
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6292 ;;      Params:         1       0       0       0       0       0       0
  6293 ;;      Locals:         1       0       0       0       0       0       0
  6294 ;;      Temps:          0       0       0       0       0       0       0
  6295 ;;      Totals:         2       0       0       0       0       0       0
  6296 ;;Total ram usage:        2 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    4
  6299 ;; This function calls:
  6300 ;;		Nothing
  6301 ;; This function is called by:
  6302 ;;		_BCDManage7segment
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	text35
  6307  001AC8                     __ptext35:
  6308                           	opt stack 0
  6309  001AC8                     _HWI_4Digit_WRITE:
  6310                           	opt stack 22
  6311                           
  6312                           ;incstack = 0
  6313                           ;HWI_4Digit_WRITE@port stored from wreg
  6314  001AC8  6E15               	movwf	HWI_4Digit_WRITE@port,c
  6315                           
  6316                           ;HWI_DIGITAL.c: 10: switch (port)
  6317  001ACA  D00F               	goto	l2495
  6318  001ACC                     l2489:
  6319                           
  6320                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  6321  001ACC  508B               	movf	3979,w,c	;volatile
  6322  001ACE  0BF0               	andlw	240
  6323  001AD0  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  6324  001AD2  6E82               	movwf	3970,c	;volatile
  6325                           
  6326                           ;HWI_DIGITAL.c: 14: break;
  6327  001AD4  0012               	return	
  6328  001AD6                     l2491:
  6329                           
  6330                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  6331  001AD6  508C               	movf	3980,w,c	;volatile
  6332  001AD8  0BF0               	andlw	240
  6333  001ADA  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  6334  001ADC  6E83               	movwf	3971,c	;volatile
  6335                           
  6336                           ;HWI_DIGITAL.c: 17: break;
  6337  001ADE  0012               	return	
  6338  001AE0                     l2493:
  6339                           
  6340                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  6341  001AE0  508C               	movf	3980,w,c	;volatile
  6342  001AE2  0BF0               	andlw	240
  6343  001AE4  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  6344  001AE6  6E83               	movwf	3971,c	;volatile
  6345                           
  6346                           ;HWI_DIGITAL.c: 20: }
  6347  001AE8  0012               	return	
  6348  001AEA                     l2495:
  6349  001AEA  5015               	movf	HWI_4Digit_WRITE@port,w,c
  6350                           
  6351                           ; Switch size 1, requested type "space"
  6352                           ; Number of cases is 2, Range of values is 0 to 1
  6353                           ; switch strategies available:
  6354                           ; Name         Instructions Cycles
  6355                           ; simple_byte            7     4 (average)
  6356                           ;	Chosen strategy is simple_byte
  6357  001AEC  0A00               	xorlw	0	; case 0
  6358  001AEE  B4D8               	btfsc	status,2,c
  6359  001AF0  D7ED               	goto	l2489
  6360  001AF2  0A01               	xorlw	1	; case 1
  6361  001AF4  B4D8               	btfsc	status,2,c
  6362  001AF6  D7EF               	goto	l2491
  6363  001AF8  D7F3               	goto	l2493
  6364  001AFA                     __end_of_HWI_4Digit_WRITE:
  6365                           	opt stack 0
  6366                           tosu	equ	0xFFF
  6367                           tosh	equ	0xFFE
  6368                           tosl	equ	0xFFD
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           indf1	equ	0xFE7
  6380                           postinc1	equ	0xFE6
  6381                           fsr1h	equ	0xFE2
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _HWI_InitOscilatorCalib *****************
  6391 ;; Defined at:
  6392 ;;		line 11 in file "../../HWIsource/HWI_StartConfig.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      void 
  6399 ;; Registers used:
  6400 ;;		None
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6406 ;;      Params:         0       0       0       0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0
  6409 ;;      Totals:         0       0       0       0       0       0       0
  6410 ;;Total ram usage:        0 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    4
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_Start_App
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text36
  6421  001D7C                     __ptext36:
  6422                           	opt stack 0
  6423  001D7C                     _HWI_InitOscilatorCalib:
  6424                           	opt stack 25
  6425                           
  6426                           ;incstack = 0
  6427  001D7C  0012               	return		;funcret
  6428  001D7E                     __end_of_HWI_InitOscilatorCalib:
  6429                           	opt stack 0
  6430                           tosu	equ	0xFFF
  6431                           tosh	equ	0xFFE
  6432                           tosl	equ	0xFFD
  6433                           pclath	equ	0xFFA
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           indf1	equ	0xFE7
  6444                           postinc1	equ	0xFE6
  6445                           fsr1h	equ	0xFE2
  6446                           fsr1l	equ	0xFE1
  6447                           indf2	equ	0xFDF
  6448                           postinc2	equ	0xFDE
  6449                           postdec2	equ	0xFDD
  6450                           fsr2h	equ	0xFDA
  6451                           fsr2l	equ	0xFD9
  6452                           status	equ	0xFD8
  6453                           
  6454 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  6455 ;; Defined at:
  6456 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6470 ;;      Params:         0       0       0       0       0       0       0
  6471 ;;      Locals:         0       0       0       0       0       0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0
  6473 ;;      Totals:         0       0       0       0       0       0       0
  6474 ;;Total ram usage:        0 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    4
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_Start_App
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text37
  6485  001A12                     __ptext37:
  6486                           	opt stack 0
  6487  001A12                     _HWI_INTERRUPTS_INTITALIZE:
  6488                           	opt stack 25
  6489                           
  6490                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  6491                           
  6492                           ;incstack = 0
  6493  001A12  8093               	bsf	3987,0,c	;volatile
  6494                           
  6495                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  6496  001A14  8293               	bsf	3987,1,c	;volatile
  6497                           
  6498                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  6499  001A16  0EF0               	movlw	240
  6500  001A18  6EF2               	movwf	intcon,c	;volatile
  6501                           
  6502                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  6503  001A1A  0E08               	movlw	8
  6504  001A1C  6EF0               	movwf	intcon3,c	;volatile
  6505                           
  6506                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  6507  001A1E  0ED1               	movlw	209
  6508  001A20  6ED5               	movwf	4053,c	;volatile
  6509                           
  6510                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  6511  001A22  0E85               	movlw	133
  6512  001A24  6ECD               	movwf	4045,c	;volatile
  6513                           
  6514                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  6515  001A26  0E9D               	movlw	157
  6516  001A28  6EB1               	movwf	4017,c	;volatile
  6517                           
  6518                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  6519  001A2A  8CF1               	bsf	intcon2,6,c	;volatile
  6520                           
  6521                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  6522  001A2C  8AF1               	bsf	intcon2,5,c	;volatile
  6523                           
  6524                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  6525  001A2E  94F2               	bcf	intcon,2,c	;volatile
  6526                           
  6527                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  6528  001A30  8AF2               	bsf	intcon,5,c	;volatile
  6529                           
  6530                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  6531  001A32  909E               	bcf	3998,0,c	;volatile
  6532                           
  6533                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  6534  001A34  809D               	bsf	3997,0,c	;volatile
  6535                           
  6536                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  6537  001A36  92A1               	bcf	4001,1,c	;volatile
  6538                           
  6539                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  6540  001A38  82A0               	bsf	4000,1,c	;volatile
  6541                           
  6542                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  6543  001A3A  0E13               	movlw	19
  6544  001A3C  6ED6               	movwf	4054,c	;volatile
  6545                           
  6546                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  6547  001A3E  0E00               	movlw	0
  6548  001A40  6ECF               	movwf	4047,c	;volatile
  6549  001A42  0E00               	movlw	0
  6550  001A44  6ECE               	movwf	4046,c	;volatile
  6551                           
  6552                           ;HWI_Interrupts.c: 47: TMR3L=0;
  6553  001A46  0E00               	movlw	0
  6554  001A48  6EB2               	movwf	4018,c	;volatile
  6555                           
  6556                           ;HWI_Interrupts.c: 48: TMR3H=0;
  6557  001A4A  0E00               	movlw	0
  6558  001A4C  6EB3               	movwf	4019,c	;volatile
  6559  001A4E  0012               	return		;funcret
  6560  001A50                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  6561                           	opt stack 0
  6562                           tosu	equ	0xFFF
  6563                           tosh	equ	0xFFE
  6564                           tosl	equ	0xFFD
  6565                           pclath	equ	0xFFA
  6566                           tblptru	equ	0xFF8
  6567                           tblptrh	equ	0xFF7
  6568                           tblptrl	equ	0xFF6
  6569                           tablat	equ	0xFF5
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           intcon3	equ	0xFF0
  6575                           postinc0	equ	0xFEE
  6576                           wreg	equ	0xFE8
  6577                           indf1	equ	0xFE7
  6578                           postinc1	equ	0xFE6
  6579                           fsr1h	equ	0xFE2
  6580                           fsr1l	equ	0xFE1
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           postdec2	equ	0xFDD
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  6589 ;; Defined at:
  6590 ;;		line 75 in file "../../HWIsource/HWI_DIGITAL.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6604 ;;      Params:         0       0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    4
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_Start_App
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text38
  6619  001CC0                     __ptext38:
  6620                           	opt stack 0
  6621  001CC0                     _HWI_DIGITAL_INITIALIZE:
  6622                           	opt stack 25
  6623                           
  6624                           ;HWI_DIGITAL.c: 78: TRISD = 0x0;
  6625                           
  6626                           ;incstack = 0
  6627  001CC0  0E00               	movlw	0
  6628  001CC2  6E95               	movwf	3989,c	;volatile
  6629                           
  6630                           ;HWI_DIGITAL.c: 79: PORTD = 0x0;
  6631  001CC4  0E00               	movlw	0
  6632  001CC6  6E83               	movwf	3971,c	;volatile
  6633                           
  6634                           ;HWI_DIGITAL.c: 81: TRISC = 0x0;
  6635  001CC8  0E00               	movlw	0
  6636  001CCA  6E94               	movwf	3988,c	;volatile
  6637                           
  6638                           ;HWI_DIGITAL.c: 82: TRISBbits.RB2 = 1;
  6639  001CCC  8493               	bsf	3987,2,c	;volatile
  6640                           
  6641                           ;HWI_DIGITAL.c: 83: TRISBbits.RB3 = 1;
  6642  001CCE  8693               	bsf	3987,3,c	;volatile
  6643                           
  6644                           ;HWI_DIGITAL.c: 86: TRISBbits.RB4 =1;
  6645  001CD0  8893               	bsf	3987,4,c	;volatile
  6646                           
  6647                           ;HWI_DIGITAL.c: 87: TRISBbits.RB5 =0;
  6648  001CD2  9A93               	bcf	3987,5,c	;volatile
  6649                           
  6650                           ;HWI_DIGITAL.c: 88: TRISBbits.RB6 =0;
  6651  001CD4  9C93               	bcf	3987,6,c	;volatile
  6652                           
  6653                           ;HWI_DIGITAL.c: 89: TRISBbits.RB7 =0;
  6654  001CD6  9E93               	bcf	3987,7,c	;volatile
  6655  001CD8  0012               	return		;funcret
  6656  001CDA                     __end_of_HWI_DIGITAL_INITIALIZE:
  6657                           	opt stack 0
  6658                           tosu	equ	0xFFF
  6659                           tosh	equ	0xFFE
  6660                           tosl	equ	0xFFD
  6661                           pclath	equ	0xFFA
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           intcon2	equ	0xFF1
  6670                           intcon3	equ	0xFF0
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           indf1	equ	0xFE7
  6674                           postinc1	equ	0xFE6
  6675                           fsr1h	equ	0xFE2
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _CreateTask *****************
  6685 ;; Defined at:
  6686 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  6689 ;;		 -> ManageDrivers(1), DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  6690 ;;  TaskId          1   21[COMRAM] unsigned char 
  6691 ;;  Period          1   22[COMRAM] unsigned char 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6703 ;;      Params:         4       0       0       0       0       0       0
  6704 ;;      Locals:         0       0       0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0
  6706 ;;      Totals:         4       0       0       0       0       0       0
  6707 ;;Total ram usage:        4 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    4
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		_Start_App
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text39
  6718  00180A                     __ptext39:
  6719                           	opt stack 0
  6720  00180A                     _CreateTask:
  6721                           	opt stack 25
  6722                           
  6723                           ;Scheduler.c: 8: if(TaskId < 4)
  6724                           
  6725                           ;incstack = 0
  6726  00180A  0E04               	movlw	4
  6727  00180C  6016               	cpfslt	CreateTask@TaskId,c
  6728  00180E  0012               	return	
  6729                           
  6730                           ;Scheduler.c: 9: {
  6731                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  6732  001810  5016               	movf	CreateTask@TaskId,w,c
  6733  001812  0D04               	mullw	4
  6734  001814  0EB2               	movlw	low _ArrayTask
  6735  001816  24F3               	addwf	prodl,w,c
  6736  001818  6ED9               	movwf	fsr2l,c
  6737  00181A  0E00               	movlw	high _ArrayTask
  6738  00181C  20F4               	addwfc	prodh,w,c
  6739  00181E  6EDA               	movwf	fsr2h,c
  6740  001820  C014  FFDE         	movff	CreateTask@MangeFunction,postinc2
  6741  001824  C015  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  6742                           
  6743                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  6744  001828  5016               	movf	CreateTask@TaskId,w,c
  6745  00182A  0D04               	mullw	4
  6746  00182C  0E02               	movlw	2
  6747  00182E  26F3               	addwf	prodl,f,c
  6748  001830  0E00               	movlw	0
  6749  001832  22F4               	addwfc	prodh,f,c
  6750  001834  0EB2               	movlw	low _ArrayTask
  6751  001836  24F3               	addwf	prodl,w,c
  6752  001838  6ED9               	movwf	fsr2l,c
  6753  00183A  0E00               	movlw	high _ArrayTask
  6754  00183C  20F4               	addwfc	prodh,w,c
  6755  00183E  6EDA               	movwf	fsr2h,c
  6756  001840  C017  FFDF         	movff	CreateTask@Period,indf2
  6757                           
  6758                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  6759  001844  5016               	movf	CreateTask@TaskId,w,c
  6760  001846  0D04               	mullw	4
  6761  001848  0E03               	movlw	3
  6762  00184A  26F3               	addwf	prodl,f,c
  6763  00184C  0E00               	movlw	0
  6764  00184E  22F4               	addwfc	prodh,f,c
  6765  001850  0EB2               	movlw	low _ArrayTask
  6766  001852  24F3               	addwf	prodl,w,c
  6767  001854  6ED9               	movwf	fsr2l,c
  6768  001856  0E00               	movlw	high _ArrayTask
  6769  001858  20F4               	addwfc	prodh,w,c
  6770  00185A  6EDA               	movwf	fsr2h,c
  6771  00185C  0E00               	movlw	0
  6772  00185E  6EDF               	movwf	indf2,c
  6773  001860  0012               	return	
  6774  001862                     __end_of_CreateTask:
  6775                           	opt stack 0
  6776                           tosu	equ	0xFFF
  6777                           tosh	equ	0xFFE
  6778                           tosl	equ	0xFFD
  6779                           pclath	equ	0xFFA
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           intcon2	equ	0xFF1
  6788                           intcon3	equ	0xFF0
  6789                           postinc0	equ	0xFEE
  6790                           wreg	equ	0xFE8
  6791                           indf1	equ	0xFE7
  6792                           postinc1	equ	0xFE6
  6793                           fsr1h	equ	0xFE2
  6794                           fsr1l	equ	0xFE1
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function _BCDInitialize *****************
  6803 ;; Defined at:
  6804 ;;		line 30 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  bIsCommonAno    1    wreg     unsigned char 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  bIsCommonAno    1   19[COMRAM] unsigned char 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6818 ;;      Params:         0       0       0       0       0       0       0
  6819 ;;      Locals:         1       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0
  6821 ;;      Totals:         1       0       0       0       0       0       0
  6822 ;;Total ram usage:        1 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_Start_App
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text40
  6833  001D4A                     __ptext40:
  6834                           	opt stack 0
  6835  001D4A                     _BCDInitialize:
  6836                           	opt stack 25
  6837                           
  6838                           ;incstack = 0
  6839                           ;BCDInitialize@bIsCommonAnode stored from wreg
  6840  001D4A  6E14               	movwf	BCDInitialize@bIsCommonAnode,c
  6841                           
  6842                           ;BCDdisplay.c: 32: bIsAnodeUsed = bIsCommonAnode;
  6843  001D4C  C014  F054         	movff	BCDInitialize@bIsCommonAnode,_bIsAnodeUsed
  6844  001D50  0012               	return		;funcret
  6845  001D52                     __end_of_BCDInitialize:
  6846                           	opt stack 0
  6847                           tosu	equ	0xFFF
  6848                           tosh	equ	0xFFE
  6849                           tosl	equ	0xFFD
  6850                           pclath	equ	0xFFA
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           intcon2	equ	0xFF1
  6859                           intcon3	equ	0xFF0
  6860                           postinc0	equ	0xFEE
  6861                           wreg	equ	0xFE8
  6862                           indf1	equ	0xFE7
  6863                           postinc1	equ	0xFE6
  6864                           fsr1h	equ	0xFE2
  6865                           fsr1l	equ	0xFE1
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _APP_INITIALIZE *****************
  6874 ;; Defined at:
  6875 ;;		line 40 in file "../../../../Common/App/APP.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;		None
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      void 
  6882 ;; Registers used:
  6883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         0       0       0       0       0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0
  6892 ;;      Totals:         0       0       0       0       0       0       0
  6893 ;;Total ram usage:        0 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    6
  6896 ;; This function calls:
  6897 ;;		_APP_CALC_MAXSPDmanage_Set
  6898 ;;		_APP_CALC_TIMEsetTravelTime
  6899 ;;		_Eeprom_Read_Block
  6900 ;;		_SetCircumfirunce
  6901 ;;		_SetDistance
  6902 ;; This function is called by:
  6903 ;;		_Start_App
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           	psect	text41
  6908  001246                     __ptext41:
  6909                           	opt stack 0
  6910  001246                     _APP_INITIALIZE:
  6911                           	opt stack 23
  6912                           
  6913                           ;APP.c: 42: Eeprom_Read_Block(1 , &APP_DATA , (unsigned char)sizeof(APP_DATA));
  6914                           
  6915                           ;incstack = 0
  6916  001246  0E55               	movlw	low _APP_DATA
  6917  001248  6E18               	movwf	Eeprom_Read_Block@DataPtr,c
  6918  00124A  0E00               	movlw	high _APP_DATA
  6919  00124C  6E19               	movwf	Eeprom_Read_Block@DataPtr+1,c
  6920  00124E  0E0F               	movlw	15
  6921  001250  6E1A               	movwf	Eeprom_Read_Block@BlockSize,c
  6922  001252  0E01               	movlw	1
  6923  001254  EC85  F00C         	call	_Eeprom_Read_Block
  6924                           
  6925                           ;APP.c: 44: if(APP_DATA.Circum > (unsigned short)9999)
  6926  001258  0E10               	movlw	16
  6927  00125A  5C55               	subwf	_APP_DATA,w,c
  6928  00125C  0E27               	movlw	39
  6929  00125E  5856               	subwfb	_APP_DATA+1,w,c
  6930  001260  A0D8               	btfss	status,0,c
  6931  001262  D004               	goto	l3403
  6932                           
  6933                           ;APP.c: 45: {
  6934                           ;APP.c: 46: APP_DATA.Circum = (unsigned short)2000;
  6935  001264  0E07               	movlw	7
  6936  001266  6E56               	movwf	_APP_DATA+1,c
  6937  001268  0ED0               	movlw	208
  6938  00126A  6E55               	movwf	_APP_DATA,c
  6939  00126C                     l3403:
  6940                           
  6941                           ;APP.c: 47: }
  6942                           ;APP.c: 48: if(APP_DATA.TravelledDistance > (unsigned short)9999)
  6943  00126C  505D               	movf	_APP_DATA+8,w,c
  6944  00126E  105C               	iorwf	_APP_DATA+7,w,c
  6945  001270  E106               	bnz	u3080
  6946  001272  0E10               	movlw	16
  6947  001274  5C5A               	subwf	_APP_DATA+5,w,c
  6948  001276  0E27               	movlw	39
  6949  001278  585B               	subwfb	_APP_DATA+6,w,c
  6950  00127A  A0D8               	btfss	status,0,c
  6951  00127C  D008               	goto	l3407
  6952  00127E                     u3080:
  6953                           
  6954                           ;APP.c: 49: {
  6955                           ;APP.c: 50: APP_DATA.TravelledDistance = (unsigned long)0;
  6956  00127E  0E00               	movlw	0
  6957  001280  6E5A               	movwf	_APP_DATA+5,c
  6958  001282  0E00               	movlw	0
  6959  001284  6E5B               	movwf	_APP_DATA+6,c
  6960  001286  0E00               	movlw	0
  6961  001288  6E5C               	movwf	_APP_DATA+7,c
  6962  00128A  0E00               	movlw	0
  6963  00128C  6E5D               	movwf	_APP_DATA+8,c
  6964  00128E                     l3407:
  6965                           
  6966                           ;APP.c: 51: }
  6967                           ;APP.c: 52: if(APP_DATA.TravelledDistance > (unsigned short)9999)
  6968  00128E  505D               	movf	_APP_DATA+8,w,c
  6969  001290  105C               	iorwf	_APP_DATA+7,w,c
  6970  001292  E106               	bnz	u3090
  6971  001294  0E10               	movlw	16
  6972  001296  5C5A               	subwf	_APP_DATA+5,w,c
  6973  001298  0E27               	movlw	39
  6974  00129A  585B               	subwfb	_APP_DATA+6,w,c
  6975  00129C  A0D8               	btfss	status,0,c
  6976  00129E  D008               	goto	l3411
  6977  0012A0                     u3090:
  6978                           
  6979                           ;APP.c: 53: {
  6980                           ;APP.c: 54: APP_DATA.TravelTime = (unsigned long)0;
  6981  0012A0  0E00               	movlw	0
  6982  0012A2  6E5E               	movwf	_APP_DATA+9,c
  6983  0012A4  0E00               	movlw	0
  6984  0012A6  6E5F               	movwf	_APP_DATA+10,c
  6985  0012A8  0E00               	movlw	0
  6986  0012AA  6E60               	movwf	_APP_DATA+11,c
  6987  0012AC  0E00               	movlw	0
  6988  0012AE  6E61               	movwf	_APP_DATA+12,c
  6989  0012B0                     l3411:
  6990                           
  6991                           ;APP.c: 55: }
  6992                           ;APP.c: 56: if(APP_DATA.MaxSpeed > (unsigned short)9999)
  6993  0012B0  0E10               	movlw	16
  6994  0012B2  5C62               	subwf	_APP_DATA+13,w,c
  6995  0012B4  0E27               	movlw	39
  6996  0012B6  5863               	subwfb	_APP_DATA+14,w,c
  6997  0012B8  A0D8               	btfss	status,0,c
  6998  0012BA  D004               	goto	l3415
  6999                           
  7000                           ;APP.c: 57: {
  7001                           ;APP.c: 58: APP_DATA.MaxSpeed = (unsigned short)0;
  7002  0012BC  0E00               	movlw	0
  7003  0012BE  6E63               	movwf	_APP_DATA+14,c
  7004  0012C0  0E00               	movlw	0
  7005  0012C2  6E62               	movwf	_APP_DATA+13,c
  7006  0012C4                     l3415:
  7007                           
  7008                           ;APP.c: 59: }
  7009                           ;APP.c: 60: SetCircumfirunce(APP_DATA.Circum);
  7010  0012C4  C055  F014         	movff	_APP_DATA,SetCircumfirunce@Circum
  7011  0012C8  C056  F015         	movff	_APP_DATA+1,SetCircumfirunce@Circum+1
  7012  0012CC  EC8E  F00E         	call	_SetCircumfirunce	;wreg free
  7013                           
  7014                           ;APP.c: 61: SetDistance(APP_DATA.TravelledDistance);
  7015  0012D0  C05A  F014         	movff	_APP_DATA+5,SetDistance@Distance
  7016  0012D4  C05B  F015         	movff	_APP_DATA+6,SetDistance@Distance+1
  7017  0012D8  C05C  F016         	movff	_APP_DATA+7,SetDistance@Distance+2
  7018  0012DC  C05D  F017         	movff	_APP_DATA+8,SetDistance@Distance+3
  7019  0012E0  EC44  F00E         	call	_SetDistance	;wreg free
  7020                           
  7021                           ;APP.c: 62: APP_CALC_TIMEsetTravelTime(APP_DATA.TravelTime);
  7022  0012E4  C05E  F014         	movff	_APP_DATA+9,APP_CALC_TIMEsetTravelTime@TravelTime
  7023  0012E8  C05F  F015         	movff	_APP_DATA+10,APP_CALC_TIMEsetTravelTime@TravelTime+1
  7024  0012EC  C060  F016         	movff	_APP_DATA+11,APP_CALC_TIMEsetTravelTime@TravelTime+2
  7025  0012F0  C061  F017         	movff	_APP_DATA+12,APP_CALC_TIMEsetTravelTime@TravelTime+3
  7026  0012F4  EC52  F00E         	call	_APP_CALC_TIMEsetTravelTime	;wreg free
  7027                           
  7028                           ;APP.c: 63: APP_CALC_MAXSPDmanage_Set(APP_DATA.MaxSpeed);
  7029  0012F8  C062  F014         	movff	_APP_DATA+13,APP_CALC_MAXSPDmanage_Set@MaxSpeed
  7030  0012FC  C063  F015         	movff	_APP_DATA+14,APP_CALC_MAXSPDmanage_Set@MaxSpeed+1
  7031  001300  EC93  F00E         	call	_APP_CALC_MAXSPDmanage_Set	;wreg free
  7032  001304  0012               	return		;funcret
  7033  001306                     __end_of_APP_INITIALIZE:
  7034                           	opt stack 0
  7035                           tosu	equ	0xFFF
  7036                           tosh	equ	0xFFE
  7037                           tosl	equ	0xFFD
  7038                           pclath	equ	0xFFA
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           intcon2	equ	0xFF1
  7047                           intcon3	equ	0xFF0
  7048                           postinc0	equ	0xFEE
  7049                           wreg	equ	0xFE8
  7050                           indf1	equ	0xFE7
  7051                           postinc1	equ	0xFE6
  7052                           fsr1h	equ	0xFE2
  7053                           fsr1l	equ	0xFE1
  7054                           indf2	equ	0xFDF
  7055                           postinc2	equ	0xFDE
  7056                           postdec2	equ	0xFDD
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function _SetDistance *****************
  7062 ;; Defined at:
  7063 ;;		line 98 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  Distance        4   19[COMRAM] unsigned long 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;		None
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7077 ;;      Params:         4       0       0       0       0       0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0
  7080 ;;      Totals:         4       0       0       0       0       0       0
  7081 ;;Total ram usage:        4 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    4
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_APP_INITIALIZE
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text42
  7092  001C88                     __ptext42:
  7093                           	opt stack 0
  7094  001C88                     _SetDistance:
  7095                           	opt stack 24
  7096                           
  7097                           ;SpeedCalc.c: 100: DistTravelCntr = Distance;
  7098                           
  7099                           ;incstack = 0
  7100  001C88  C014  F0D6         	movff	SetDistance@Distance,_DistTravelCntr
  7101  001C8C  C015  F0D7         	movff	SetDistance@Distance+1,_DistTravelCntr+1
  7102  001C90  C016  F0D8         	movff	SetDistance@Distance+2,_DistTravelCntr+2
  7103  001C94  C017  F0D9         	movff	SetDistance@Distance+3,_DistTravelCntr+3
  7104                           
  7105                           ;SpeedCalc.c: 101: LapDistanceCounter = (unsigned short)0;
  7106  001C98  0E00               	movlw	0
  7107  001C9A  0100               	movlb	0	; () banked
  7108  001C9C  6FDD               	movwf	(_LapDistanceCounter+1)& (0+255),b
  7109  001C9E  0E00               	movlw	0
  7110  001CA0  6FDC               	movwf	_LapDistanceCounter& (0+255),b
  7111                           
  7112                           ; BSR set to: 0
  7113  001CA2  0012               	return		;funcret
  7114  001CA4                     __end_of_SetDistance:
  7115                           	opt stack 0
  7116                           tosu	equ	0xFFF
  7117                           tosh	equ	0xFFE
  7118                           tosl	equ	0xFFD
  7119                           pclath	equ	0xFFA
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           intcon2	equ	0xFF1
  7128                           intcon3	equ	0xFF0
  7129                           postinc0	equ	0xFEE
  7130                           wreg	equ	0xFE8
  7131                           indf1	equ	0xFE7
  7132                           postinc1	equ	0xFE6
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function _SetCircumfirunce *****************
  7143 ;; Defined at:
  7144 ;;		line 110 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  Circum          2   19[COMRAM] unsigned short 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;		None
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      void 
  7151 ;; Registers used:
  7152 ;;		None
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7158 ;;      Params:         2       0       0       0       0       0       0
  7159 ;;      Locals:         0       0       0       0       0       0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0
  7161 ;;      Totals:         2       0       0       0       0       0       0
  7162 ;;Total ram usage:        2 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    4
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_APP_INITIALIZE
  7169 ;;		_APP_MANAGE
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text43
  7174  001D1C                     __ptext43:
  7175                           	opt stack 0
  7176  001D1C                     _SetCircumfirunce:
  7177                           	opt stack 22
  7178                           
  7179                           ;SpeedCalc.c: 112: CircumFactor = (unsigned short)Circum;
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;incstack = 0
  7183  001D1C  C014  F06A         	movff	SetCircumfirunce@Circum,_CircumFactor
  7184  001D20  C015  F06B         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  7185  001D24  0012               	return		;funcret
  7186  001D26                     __end_of_SetCircumfirunce:
  7187                           	opt stack 0
  7188                           tosu	equ	0xFFF
  7189                           tosh	equ	0xFFE
  7190                           tosl	equ	0xFFD
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           intcon2	equ	0xFF1
  7200                           intcon3	equ	0xFF0
  7201                           postinc0	equ	0xFEE
  7202                           wreg	equ	0xFE8
  7203                           indf1	equ	0xFE7
  7204                           postinc1	equ	0xFE6
  7205                           fsr1h	equ	0xFE2
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _Eeprom_Read_Block *****************
  7215 ;; Defined at:
  7216 ;;		line 48 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  address         1    wreg     unsigned char 
  7219 ;;  DataPtr         2   23[COMRAM] PTR void 
  7220 ;;		 -> APP_DATA(15), 
  7221 ;;  BlockSize       1   25[COMRAM] unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  address         1   29[COMRAM] unsigned char 
  7224 ;;  LocDataPtr      2   27[COMRAM] PTR unsigned char 
  7225 ;;		 -> APP_DATA(15), 
  7226 ;;  LoopIndex       1   31[COMRAM] unsigned char 
  7227 ;;  ReadSuccess     1   30[COMRAM] unsigned char 
  7228 ;;  ReadGranted     1   26[COMRAM] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      unsigned char 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7238 ;;      Params:         3       0       0       0       0       0       0
  7239 ;;      Locals:         6       0       0       0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0       0       0
  7241 ;;      Totals:         9       0       0       0       0       0       0
  7242 ;;Total ram usage:        9 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    5
  7245 ;; This function calls:
  7246 ;;		_HWIeeprom_Read
  7247 ;; This function is called by:
  7248 ;;		_APP_INITIALIZE
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text44
  7253  00190A                     __ptext44:
  7254                           	opt stack 0
  7255  00190A                     _Eeprom_Read_Block:
  7256                           	opt stack 23
  7257                           
  7258                           ;incstack = 0
  7259                           ;Eeprom_Read_Block@address stored from wreg
  7260  00190A  6E1E               	movwf	Eeprom_Read_Block@address,c
  7261                           
  7262                           ;Eeprom.c: 55: unsigned char LoopIndex = (unsigned char)0 ;
  7263  00190C  0E00               	movlw	0
  7264  00190E  6E20               	movwf	Eeprom_Read_Block@LoopIndex,c
  7265                           
  7266                           ;Eeprom.c: 56: unsigned char ReadSuccess;
  7267                           ;Eeprom.c: 57: unsigned char ReadGranted;
  7268                           ;Eeprom.c: 59: unsigned char *LocDataPtr = (unsigned char *)DataPtr;
  7269  001910  C018  F01C         	movff	Eeprom_Read_Block@DataPtr,Eeprom_Read_Block@LocDataPtr
  7270  001914  C019  F01D         	movff	Eeprom_Read_Block@DataPtr+1,Eeprom_Read_Block@LocDataPtr+1
  7271                           
  7272                           ;Eeprom.c: 61: if( (unsigned char)0 == WriteRequest)
  7273  001918  504C               	movf	_WriteRequest,w,c
  7274  00191A  B4D8               	btfsc	status,2,c
  7275  00191C  D011               	goto	l2769
  7276  00191E  D017               	goto	l2773
  7277  001920                     l2763:
  7278                           
  7279                           ;Eeprom.c: 64: {
  7280                           ;Eeprom.c: 65: ReadSuccess = HWIeeprom_Read(address + LoopIndex , &LocDataPtr[LoopIndex]
      +                          );
  7281  001920  5020               	movf	Eeprom_Read_Block@LoopIndex,w,c
  7282  001922  0D01               	mullw	1
  7283  001924  50F3               	movf	prodl,w,c
  7284  001926  241C               	addwf	Eeprom_Read_Block@LocDataPtr,w,c
  7285  001928  6E14               	movwf	HWIeeprom_Read@Data,c
  7286  00192A  50F4               	movf	prodh,w,c
  7287  00192C  201D               	addwfc	Eeprom_Read_Block@LocDataPtr+1,w,c
  7288  00192E  6E15               	movwf	HWIeeprom_Read@Data+1,c
  7289  001930  501E               	movf	Eeprom_Read_Block@address,w,c
  7290  001932  2420               	addwf	Eeprom_Read_Block@LoopIndex,w,c
  7291  001934  ECED  F00D         	call	_HWIeeprom_Read
  7292  001938  6E1F               	movwf	Eeprom_Read_Block@ReadSuccess,c
  7293                           
  7294                           ;Eeprom.c: 66: if((unsigned char)1 == ReadSuccess)
  7295  00193A  041F               	decf	Eeprom_Read_Block@ReadSuccess,w,c
  7296  00193C  B4D8               	btfsc	status,2,c
  7297                           
  7298                           ;Eeprom.c: 67: {
  7299                           ;Eeprom.c: 68: LoopIndex++;
  7300  00193E  2A20               	incf	Eeprom_Read_Block@LoopIndex,f,c
  7301  001940                     l2769:
  7302  001940  501A               	movf	Eeprom_Read_Block@BlockSize,w,c
  7303  001942  5C20               	subwf	Eeprom_Read_Block@LoopIndex,w,c
  7304  001944  A0D8               	btfss	status,0,c
  7305  001946  D7EC               	goto	l2763
  7306                           
  7307                           ;Eeprom.c: 69: }
  7308                           ;Eeprom.c: 70: }
  7309                           ;Eeprom.c: 71: ReadGranted = (unsigned char)1;
  7310  001948  0E01               	movlw	1
  7311  00194A  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  7312                           
  7313                           ;Eeprom.c: 72: }
  7314  00194C  0012               	return	
  7315  00194E                     l2773:
  7316                           
  7317                           ;Eeprom.c: 73: else
  7318                           ;Eeprom.c: 74: {
  7319                           ;Eeprom.c: 75: ReadGranted = (unsigned char)0;
  7320  00194E  0E00               	movlw	0
  7321  001950  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  7322  001952  0012               	return	
  7323  001954                     __end_of_Eeprom_Read_Block:
  7324                           	opt stack 0
  7325                           tosu	equ	0xFFF
  7326                           tosh	equ	0xFFE
  7327                           tosl	equ	0xFFD
  7328                           pclath	equ	0xFFA
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon2	equ	0xFF1
  7337                           intcon3	equ	0xFF0
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           indf1	equ	0xFE7
  7341                           postinc1	equ	0xFE6
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _HWIeeprom_Read *****************
  7352 ;; Defined at:
  7353 ;;		line 31 in file "../../HWIeeprom/HWIeeprom.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;  address         1    wreg     unsigned char 
  7356 ;;  Data            2   19[COMRAM] PTR unsigned char 
  7357 ;;		 -> APP_DATA(15), 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  address         1   21[COMRAM] unsigned char 
  7360 ;;  ReadSuccess     1   22[COMRAM] unsigned char 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      unsigned char 
  7363 ;; Registers used:
  7364 ;;		wreg, fsr2l, fsr2h, status,2
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7370 ;;      Params:         2       0       0       0       0       0       0
  7371 ;;      Locals:         2       0       0       0       0       0       0
  7372 ;;      Temps:          0       0       0       0       0       0       0
  7373 ;;      Totals:         4       0       0       0       0       0       0
  7374 ;;Total ram usage:        4 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    4
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_Eeprom_Read_Block
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text45
  7385  001BDA                     __ptext45:
  7386                           	opt stack 0
  7387  001BDA                     _HWIeeprom_Read:
  7388                           	opt stack 23
  7389                           
  7390                           ;incstack = 0
  7391                           ;HWIeeprom_Read@address stored from wreg
  7392  001BDA  6E16               	movwf	HWIeeprom_Read@address,c
  7393                           
  7394                           ;HWIeeprom.c: 33: unsigned char ReadSuccess;
  7395                           ;HWIeeprom.c: 34: if((unsigned char)0 == EECON1bits.WR )
  7396  001BDC  B2A6               	btfsc	4006,1,c	;volatile
  7397  001BDE  D00D               	goto	l2669
  7398                           
  7399                           ;HWIeeprom.c: 35: {
  7400                           ;HWIeeprom.c: 36: EEADR = address;
  7401  001BE0  C016  FFA9         	movff	HWIeeprom_Read@address,4009	;volatile
  7402                           
  7403                           ;HWIeeprom.c: 37: EECON1bits.EEPGD = (unsigned char)0;
  7404  001BE4  9EA6               	bcf	4006,7,c	;volatile
  7405                           
  7406                           ;HWIeeprom.c: 38: EECON1bits.CFGS = (unsigned char)0;
  7407  001BE6  9CA6               	bcf	4006,6,c	;volatile
  7408                           
  7409                           ;HWIeeprom.c: 39: EECON1bits.RD = (unsigned char)1;
  7410  001BE8  80A6               	bsf	4006,0,c	;volatile
  7411                           
  7412                           ;HWIeeprom.c: 40: *Data = EEDATA;
  7413  001BEA  C014  FFD9         	movff	HWIeeprom_Read@Data,fsr2l
  7414  001BEE  C015  FFDA         	movff	HWIeeprom_Read@Data+1,fsr2h
  7415  001BF2  CFA8 FFDF          	movff	4008,indf2	;volatile
  7416                           
  7417                           ;HWIeeprom.c: 41: ReadSuccess = (unsigned char)1;
  7418  001BF6  0E01               	movlw	1
  7419  001BF8  D001               	goto	L16
  7420  001BFA                     l2669:
  7421                           
  7422                           ;HWIeeprom.c: 43: else
  7423                           ;HWIeeprom.c: 44: {
  7424                           ;HWIeeprom.c: 45: ReadSuccess = (unsigned char)0;
  7425  001BFA  0E00               	movlw	0
  7426  001BFC                     L16:
  7427  001BFC  6E17               	movwf	HWIeeprom_Read@ReadSuccess,c
  7428                           
  7429                           ;HWIeeprom.c: 46: }
  7430                           ;HWIeeprom.c: 48: return ReadSuccess;
  7431  001BFE  5017               	movf	HWIeeprom_Read@ReadSuccess,w,c
  7432  001C00  0012               	return	
  7433  001C02                     __end_of_HWIeeprom_Read:
  7434                           	opt stack 0
  7435                           tosu	equ	0xFFF
  7436                           tosh	equ	0xFFE
  7437                           tosl	equ	0xFFD
  7438                           pclath	equ	0xFFA
  7439                           tblptru	equ	0xFF8
  7440                           tblptrh	equ	0xFF7
  7441                           tblptrl	equ	0xFF6
  7442                           tablat	equ	0xFF5
  7443                           prodh	equ	0xFF4
  7444                           prodl	equ	0xFF3
  7445                           intcon	equ	0xFF2
  7446                           intcon2	equ	0xFF1
  7447                           intcon3	equ	0xFF0
  7448                           postinc0	equ	0xFEE
  7449                           wreg	equ	0xFE8
  7450                           indf1	equ	0xFE7
  7451                           postinc1	equ	0xFE6
  7452                           fsr1h	equ	0xFE2
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           
  7461 ;; *************** function _APP_CALC_TIMEsetTravelTime *****************
  7462 ;; Defined at:
  7463 ;;		line 13 in file "../../../../Common/App/APP_Calculations/APP_CalcTime.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  TravelTime      4   19[COMRAM] unsigned long 
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7477 ;;      Params:         4       0       0       0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0
  7480 ;;      Totals:         4       0       0       0       0       0       0
  7481 ;;Total ram usage:        4 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    4
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_APP_INITIALIZE
  7488 ;;		_APP_MANAGE
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text46
  7493  001CA4                     __ptext46:
  7494                           	opt stack 0
  7495  001CA4                     _APP_CALC_TIMEsetTravelTime:
  7496                           	opt stack 22
  7497                           
  7498                           ;APP_CalcTime.c: 15: ElapsedTimeMinutes = TravelTime;
  7499                           
  7500                           ;incstack = 0
  7501  001CA4  C014  F0D2         	movff	APP_CALC_TIMEsetTravelTime@TravelTime,_ElapsedTimeMinutes
  7502  001CA8  C015  F0D3         	movff	APP_CALC_TIMEsetTravelTime@TravelTime+1,_ElapsedTimeMinutes+1
  7503  001CAC  C016  F0D4         	movff	APP_CALC_TIMEsetTravelTime@TravelTime+2,_ElapsedTimeMinutes+2
  7504  001CB0  C017  F0D5         	movff	APP_CALC_TIMEsetTravelTime@TravelTime+3,_ElapsedTimeMinutes+3
  7505                           
  7506                           ;APP_CalcTime.c: 16: ElapsedTimePeriod = (unsigned short)0;
  7507  001CB4  0E00               	movlw	0
  7508  001CB6  0100               	movlb	0	; () banked
  7509  001CB8  6FDB               	movwf	(_ElapsedTimePeriod+1)& (0+255),b
  7510  001CBA  0E00               	movlw	0
  7511  001CBC  6FDA               	movwf	_ElapsedTimePeriod& (0+255),b
  7512                           
  7513                           ; BSR set to: 0
  7514  001CBE  0012               	return		;funcret
  7515  001CC0                     __end_of_APP_CALC_TIMEsetTravelTime:
  7516                           	opt stack 0
  7517                           tosu	equ	0xFFF
  7518                           tosh	equ	0xFFE
  7519                           tosl	equ	0xFFD
  7520                           pclath	equ	0xFFA
  7521                           tblptru	equ	0xFF8
  7522                           tblptrh	equ	0xFF7
  7523                           tblptrl	equ	0xFF6
  7524                           tablat	equ	0xFF5
  7525                           prodh	equ	0xFF4
  7526                           prodl	equ	0xFF3
  7527                           intcon	equ	0xFF2
  7528                           intcon2	equ	0xFF1
  7529                           intcon3	equ	0xFF0
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postinc1	equ	0xFE6
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _APP_CALC_MAXSPDmanage_Set *****************
  7544 ;; Defined at:
  7545 ;;		line 19 in file "../../../../Common/App/APP_Calculations/APP_CalcSpeed.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  MaxSpeed        2   19[COMRAM] unsigned short 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;		None
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  1    wreg      void 
  7552 ;; Registers used:
  7553 ;;		None
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7559 ;;      Params:         2       0       0       0       0       0       0
  7560 ;;      Locals:         0       0       0       0       0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0
  7562 ;;      Totals:         2       0       0       0       0       0       0
  7563 ;;Total ram usage:        2 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    4
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_APP_INITIALIZE
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text47
  7574  001D26                     __ptext47:
  7575                           	opt stack 0
  7576  001D26                     _APP_CALC_MAXSPDmanage_Set:
  7577                           	opt stack 24
  7578                           
  7579                           ;APP_CalcSpeed.c: 21: CalcMaxSpeed = MaxSpeed;
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;incstack = 0
  7583  001D26  C014  F03A         	movff	APP_CALC_MAXSPDmanage_Set@MaxSpeed,_CalcMaxSpeed
  7584  001D2A  C015  F03B         	movff	APP_CALC_MAXSPDmanage_Set@MaxSpeed+1,_CalcMaxSpeed+1
  7585  001D2E  0012               	return		;funcret
  7586  001D30                     __end_of_APP_CALC_MAXSPDmanage_Set:
  7587                           	opt stack 0
  7588                           tosu	equ	0xFFF
  7589                           tosh	equ	0xFFE
  7590                           tosl	equ	0xFFD
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           intcon2	equ	0xFF1
  7600                           intcon3	equ	0xFF0
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           indf1	equ	0xFE7
  7604                           postinc1	equ	0xFE6
  7605                           fsr1h	equ	0xFE2
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _ISR *****************
  7615 ;; Defined at:
  7616 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0
  7632 ;;      Temps:         14       0       0       0       0       0       0
  7633 ;;      Totals:        14       0       0       0       0       0       0
  7634 ;;Total ram usage:       14 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    3
  7637 ;; This function calls:
  7638 ;;		_APP_ISR1
  7639 ;;		_APP_ISR2
  7640 ;;		_APP_ISR3
  7641 ;;		_SchedulerTick
  7642 ;; This function is called by:
  7643 ;;		Interrupt level 2
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	intcode
  7648  000008                     __pintcode:
  7649                           	opt stack 0
  7650  000008                     _ISR:
  7651                           	opt stack 21
  7652                           
  7653                           ;incstack = 0
  7654  000008  826C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7655  00000A  ED83  F009         	call	int_func,f	;refresh shadow registers
  7656                           tosu	equ	0xFFF
  7657                           tosh	equ	0xFFE
  7658                           tosl	equ	0xFFD
  7659                           pclath	equ	0xFFA
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           intcon3	equ	0xFF0
  7669                           postinc0	equ	0xFEE
  7670                           wreg	equ	0xFE8
  7671                           indf1	equ	0xFE7
  7672                           postinc1	equ	0xFE6
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682                           	psect	intcode_body
  7683  001306                     __pintcode_body:
  7684                           	opt stack 21
  7685  001306                     int_func:
  7686                           	opt stack 21
  7687  001306  0006               	pop		; remove dummy address from shadow register refresh
  7688  001308  CFFA F006          	movff	pclath,??_ISR
  7689  00130C  CFFB F007          	movff	pclatu,??_ISR+1
  7690  001310  CFE9 F008          	movff	fsr0l,??_ISR+2
  7691  001314  CFEA F009          	movff	fsr0h,??_ISR+3
  7692  001318  CFE1 F00A          	movff	fsr1l,??_ISR+4
  7693  00131C  CFE2 F00B          	movff	fsr1h,??_ISR+5
  7694  001320  CFD9 F00C          	movff	fsr2l,??_ISR+6
  7695  001324  CFDA F00D          	movff	fsr2h,??_ISR+7
  7696  001328  CFF3 F00E          	movff	prodl,??_ISR+8
  7697  00132C  CFF4 F00F          	movff	prodh,??_ISR+9
  7698  001330  CFF6 F010          	movff	tblptrl,??_ISR+10
  7699  001334  CFF7 F011          	movff	tblptrh,??_ISR+11
  7700  001338  CFF8 F012          	movff	tblptru,??_ISR+12
  7701  00133C  CFF5 F013          	movff	tablat,??_ISR+13
  7702                           
  7703                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  7704  001340  A4F2               	btfss	intcon,2,c	;volatile
  7705  001342  D005               	goto	i2l2941
  7706                           
  7707                           ;HWI_Interrupts.c: 55: {
  7708                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  7709  001344  94F2               	bcf	intcon,2,c	;volatile
  7710                           
  7711                           ;HWI_Interrupts.c: 57: TMR0L=18;
  7712  001346  0E12               	movlw	18
  7713  001348  6ED6               	movwf	4054,c	;volatile
  7714                           
  7715                           ;HWI_Interrupts.c: 58: SchedulerTick();
  7716  00134A  ECD8  F00D         	call	_SchedulerTick	;wreg free
  7717  00134E                     i2l2941:
  7718                           
  7719                           ;HWI_Interrupts.c: 59: }
  7720                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  7721  00134E  A2A1               	btfss	4001,1,c	;volatile
  7722  001350  D005               	goto	i2l2947
  7723                           
  7724                           ;HWI_Interrupts.c: 61: {
  7725                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  7726  001352  92A1               	bcf	4001,1,c	;volatile
  7727                           
  7728                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  7729  001354  0EEF               	movlw	239
  7730  001356  6EB3               	movwf	4019,c	;volatile
  7731                           
  7732                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  7733  001358  0E00               	movlw	0
  7734  00135A  6EB2               	movwf	4018,c	;volatile
  7735  00135C                     i2l2947:
  7736                           
  7737                           ;HWI_Interrupts.c: 65: }
  7738                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  7739  00135C  A09E               	btfss	3998,0,c	;volatile
  7740  00135E  D007               	goto	i2l2955
  7741                           
  7742                           ;HWI_Interrupts.c: 67: {
  7743                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  7744  001360  909E               	bcf	3998,0,c	;volatile
  7745                           
  7746                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  7747  001362  0E00               	movlw	0
  7748  001364  6ECF               	movwf	4047,c	;volatile
  7749  001366  0E00               	movlw	0
  7750  001368  6ECE               	movwf	4046,c	;volatile
  7751                           
  7752                           ;HWI_Interrupts.c: 70: APP_ISR3();
  7753  00136A  ECB2  F00E         	call	_APP_ISR3	;wreg free
  7754  00136E                     i2l2955:
  7755                           
  7756                           ;HWI_Interrupts.c: 71: }
  7757                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  7758  00136E  B29E               	btfsc	3998,1,c	;volatile
  7759                           
  7760                           ;HWI_Interrupts.c: 73: {
  7761                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  7762  001370  929E               	bcf	3998,1,c	;volatile
  7763                           
  7764                           ;HWI_Interrupts.c: 76: }
  7765                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  7766  001372  A2F2               	btfss	intcon,1,c	;volatile
  7767  001374  D003               	goto	i2l2963
  7768                           
  7769                           ;HWI_Interrupts.c: 79: {
  7770                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  7771  001376  92F2               	bcf	intcon,1,c	;volatile
  7772                           
  7773                           ;HWI_Interrupts.c: 81: APP_ISR1();
  7774  001378  ECB8  F00E         	call	_APP_ISR1	;wreg free
  7775  00137C                     i2l2963:
  7776                           
  7777                           ;HWI_Interrupts.c: 82: }
  7778                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  7779  00137C  A0F0               	btfss	intcon3,0,c	;volatile
  7780  00137E  D003               	goto	i2l541
  7781                           
  7782                           ;HWI_Interrupts.c: 85: {
  7783                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  7784  001380  90F0               	bcf	intcon3,0,c	;volatile
  7785                           
  7786                           ;HWI_Interrupts.c: 87: APP_ISR2();
  7787  001382  ECB5  F00E         	call	_APP_ISR2	;wreg free
  7788  001386                     i2l541:
  7789  001386  C013  FFF5         	movff	??_ISR+13,tablat
  7790  00138A  C012  FFF8         	movff	??_ISR+12,tblptru
  7791  00138E  C011  FFF7         	movff	??_ISR+11,tblptrh
  7792  001392  C010  FFF6         	movff	??_ISR+10,tblptrl
  7793  001396  C00F  FFF4         	movff	??_ISR+9,prodh
  7794  00139A  C00E  FFF3         	movff	??_ISR+8,prodl
  7795  00139E  C00D  FFDA         	movff	??_ISR+7,fsr2h
  7796  0013A2  C00C  FFD9         	movff	??_ISR+6,fsr2l
  7797  0013A6  C00B  FFE2         	movff	??_ISR+5,fsr1h
  7798  0013AA  C00A  FFE1         	movff	??_ISR+4,fsr1l
  7799  0013AE  C009  FFEA         	movff	??_ISR+3,fsr0h
  7800  0013B2  C008  FFE9         	movff	??_ISR+2,fsr0l
  7801  0013B6  C007  FFFB         	movff	??_ISR+1,pclatu
  7802  0013BA  C006  FFFA         	movff	??_ISR,pclath
  7803  0013BE  926C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7804  0013C0  0011               	retfie		f
  7805  0013C2                     __end_of_ISR:
  7806                           	opt stack 0
  7807                           tosu	equ	0xFFF
  7808                           tosh	equ	0xFFE
  7809                           tosl	equ	0xFFD
  7810                           pclatu	equ	0xFFB
  7811                           pclath	equ	0xFFA
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           intcon3	equ	0xFF0
  7821                           postinc0	equ	0xFEE
  7822                           fsr0h	equ	0xFEA
  7823                           fsr0l	equ	0xFE9
  7824                           wreg	equ	0xFE8
  7825                           indf1	equ	0xFE7
  7826                           postinc1	equ	0xFE6
  7827                           fsr1h	equ	0xFE2
  7828                           fsr1l	equ	0xFE1
  7829                           indf2	equ	0xFDF
  7830                           postinc2	equ	0xFDE
  7831                           postdec2	equ	0xFDD
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _SchedulerTick *****************
  7837 ;; Defined at:
  7838 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7852 ;;      Params:         0       0       0       0       0       0       0
  7853 ;;      Locals:         1       0       0       0       0       0       0
  7854 ;;      Temps:          0       0       0       0       0       0       0
  7855 ;;      Totals:         1       0       0       0       0       0       0
  7856 ;;Total ram usage:        1 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_ISR
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text49
  7866  001BB0                     __ptext49:
  7867                           	opt stack 0
  7868  001BB0                     _SchedulerTick:
  7869                           	opt stack 23
  7870                           
  7871                           ;Scheduler.c: 18: unsigned char TaskIndex;
  7872                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 4 ; TaskIndex++)
  7873                           
  7874                           ;incstack = 0
  7875  001BB0  0E00               	movlw	0
  7876  001BB2  6E01               	movwf	SchedulerTick@TaskIndex,c
  7877  001BB4                     i2l2903:
  7878  001BB4  0E03               	movlw	3
  7879  001BB6  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  7880  001BB8  D001               	goto	i2l2907
  7881  001BBA  0012               	return	
  7882  001BBC                     i2l2907:
  7883                           
  7884                           ;Scheduler.c: 20: {
  7885                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  7886  001BBC  5001               	movf	SchedulerTick@TaskIndex,w,c
  7887  001BBE  0D04               	mullw	4
  7888  001BC0  0E03               	movlw	3
  7889  001BC2  26F3               	addwf	prodl,f,c
  7890  001BC4  0E00               	movlw	0
  7891  001BC6  22F4               	addwfc	prodh,f,c
  7892  001BC8  0EB2               	movlw	low _ArrayTask
  7893  001BCA  24F3               	addwf	prodl,w,c
  7894  001BCC  6ED9               	movwf	fsr2l,c
  7895  001BCE  0E00               	movlw	high _ArrayTask
  7896  001BD0  20F4               	addwfc	prodh,w,c
  7897  001BD2  6EDA               	movwf	fsr2h,c
  7898  001BD4  2ADF               	incf	indf2,f,c
  7899  001BD6  2A01               	incf	SchedulerTick@TaskIndex,f,c
  7900  001BD8  D7ED               	goto	i2l2903
  7901  001BDA                     __end_of_SchedulerTick:
  7902                           	opt stack 0
  7903                           tosu	equ	0xFFF
  7904                           tosh	equ	0xFFE
  7905                           tosl	equ	0xFFD
  7906                           pclatu	equ	0xFFB
  7907                           pclath	equ	0xFFA
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           intcon3	equ	0xFF0
  7917                           postinc0	equ	0xFEE
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           indf1	equ	0xFE7
  7922                           postinc1	equ	0xFE6
  7923                           fsr1h	equ	0xFE2
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function _APP_ISR3 *****************
  7933 ;; Defined at:
  7934 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7948 ;;      Params:         0       0       0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0
  7951 ;;      Totals:         0       0       0       0       0       0       0
  7952 ;;Total ram usage:        0 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    1
  7955 ;; This function calls:
  7956 ;;		_HWtimerCallback
  7957 ;; This function is called by:
  7958 ;;		_ISR
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           	psect	text50
  7963  001D64                     __ptext50:
  7964                           	opt stack 0
  7965  001D64                     _APP_ISR3:
  7966                           	opt stack 22
  7967                           
  7968                           ;AppInterrupts.c: 20: HWtimerCallback();
  7969                           
  7970                           ;incstack = 0
  7971  001D64  EC98  F00E         	call	_HWtimerCallback	;wreg free
  7972  001D68  0012               	return		;funcret
  7973  001D6A                     __end_of_APP_ISR3:
  7974                           	opt stack 0
  7975                           tosu	equ	0xFFF
  7976                           tosh	equ	0xFFE
  7977                           tosl	equ	0xFFD
  7978                           pclatu	equ	0xFFB
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           intcon	equ	0xFF2
  7987                           intcon2	equ	0xFF1
  7988                           intcon3	equ	0xFF0
  7989                           postinc0	equ	0xFEE
  7990                           fsr0h	equ	0xFEA
  7991                           fsr0l	equ	0xFE9
  7992                           wreg	equ	0xFE8
  7993                           indf1	equ	0xFE7
  7994                           postinc1	equ	0xFE6
  7995                           fsr1h	equ	0xFE2
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function _HWtimerCallback *****************
  8005 ;; Defined at:
  8006 ;;		line 144 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;		None
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;		None
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      void 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2, status,0
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8020 ;;      Params:         0       0       0       0       0       0       0
  8021 ;;      Locals:         0       0       0       0       0       0       0
  8022 ;;      Temps:          0       0       0       0       0       0       0
  8023 ;;      Totals:         0       0       0       0       0       0       0
  8024 ;;Total ram usage:        0 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; This function calls:
  8027 ;;		Nothing
  8028 ;; This function is called by:
  8029 ;;		_APP_ISR3
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text51
  8034  001D30                     __ptext51:
  8035                           	opt stack 0
  8036  001D30                     _HWtimerCallback:
  8037                           	opt stack 22
  8038                           
  8039                           ;SpeedCalc.c: 146: if(HwTimerOVFLcount < 64)
  8040                           
  8041                           ;incstack = 0
  8042  001D30  0E40               	movlw	64
  8043  001D32  6044               	cpfslt	_HwTimerOVFLcount,c	;volatile
  8044  001D34  0012               	return	
  8045                           
  8046                           ;SpeedCalc.c: 147: {
  8047                           ;SpeedCalc.c: 148: HwTimerOVFLcount++;
  8048  001D36  2A44               	incf	_HwTimerOVFLcount,f,c	;volatile
  8049  001D38  0012               	return	
  8050  001D3A                     __end_of_HWtimerCallback:
  8051                           	opt stack 0
  8052                           tosu	equ	0xFFF
  8053                           tosh	equ	0xFFE
  8054                           tosl	equ	0xFFD
  8055                           pclatu	equ	0xFFB
  8056                           pclath	equ	0xFFA
  8057                           tblptru	equ	0xFF8
  8058                           tblptrh	equ	0xFF7
  8059                           tblptrl	equ	0xFF6
  8060                           tablat	equ	0xFF5
  8061                           prodh	equ	0xFF4
  8062                           prodl	equ	0xFF3
  8063                           intcon	equ	0xFF2
  8064                           intcon2	equ	0xFF1
  8065                           intcon3	equ	0xFF0
  8066                           postinc0	equ	0xFEE
  8067                           fsr0h	equ	0xFEA
  8068                           fsr0l	equ	0xFE9
  8069                           wreg	equ	0xFE8
  8070                           indf1	equ	0xFE7
  8071                           postinc1	equ	0xFE6
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           indf2	equ	0xFDF
  8075                           postinc2	equ	0xFDE
  8076                           postdec2	equ	0xFDD
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _APP_ISR2 *****************
  8082 ;; Defined at:
  8083 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8097 ;;      Params:         0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    2
  8104 ;; This function calls:
  8105 ;;		_SensorTwoNotify
  8106 ;; This function is called by:
  8107 ;;		_ISR
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text52
  8112  001D6A                     __ptext52:
  8113                           	opt stack 0
  8114  001D6A                     _APP_ISR2:
  8115                           	opt stack 21
  8116                           
  8117                           ;AppInterrupts.c: 15: SensorTwoNotify();
  8118                           
  8119                           ;incstack = 0
  8120  001D6A  ECAB  F00D         	call	_SensorTwoNotify	;wreg free
  8121  001D6E  0012               	return		;funcret
  8122  001D70                     __end_of_APP_ISR2:
  8123                           	opt stack 0
  8124                           tosu	equ	0xFFF
  8125                           tosh	equ	0xFFE
  8126                           tosl	equ	0xFFD
  8127                           pclatu	equ	0xFFB
  8128                           pclath	equ	0xFFA
  8129                           tblptru	equ	0xFF8
  8130                           tblptrh	equ	0xFF7
  8131                           tblptrl	equ	0xFF6
  8132                           tablat	equ	0xFF5
  8133                           prodh	equ	0xFF4
  8134                           prodl	equ	0xFF3
  8135                           intcon	equ	0xFF2
  8136                           intcon2	equ	0xFF1
  8137                           intcon3	equ	0xFF0
  8138                           postinc0	equ	0xFEE
  8139                           fsr0h	equ	0xFEA
  8140                           fsr0l	equ	0xFE9
  8141                           wreg	equ	0xFE8
  8142                           indf1	equ	0xFE7
  8143                           postinc1	equ	0xFE6
  8144                           fsr1h	equ	0xFE2
  8145                           fsr1l	equ	0xFE1
  8146                           indf2	equ	0xFDF
  8147                           postinc2	equ	0xFDE
  8148                           postdec2	equ	0xFDD
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           
  8153 ;; *************** function _SensorTwoNotify *****************
  8154 ;; Defined at:
  8155 ;;		line 45 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8169 ;;      Params:         0       0       0       0       0       0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0
  8172 ;;      Totals:         0       0       0       0       0       0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    1
  8176 ;; This function calls:
  8177 ;;		_ReloadHWtimer
  8178 ;; This function is called by:
  8179 ;;		_APP_ISR2
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text53
  8184  001B56                     __ptext53:
  8185                           	opt stack 0
  8186  001B56                     _SensorTwoNotify:
  8187                           	opt stack 21
  8188                           
  8189                           ;SpeedCalc.c: 47: if( (unsigned char)0 == NotifyFlag )
  8190                           
  8191                           ;incstack = 0
  8192  001B56  5048               	movf	_NotifyFlag,w,c	;volatile
  8193  001B58  A4D8               	btfss	status,2,c
  8194  001B5A  D00F               	goto	i2l2845
  8195                           
  8196                           ;SpeedCalc.c: 48: {
  8197                           ;SpeedCalc.c: 49: NotifyFlag = (unsigned char)1;
  8198  001B5C  0E01               	movlw	1
  8199  001B5E  6E48               	movwf	_NotifyFlag,c	;volatile
  8200                           
  8201                           ;SpeedCalc.c: 50: LapCounter++;
  8202  001B60  2A47               	incf	_LapCounter,f,c	;volatile
  8203                           
  8204                           ;SpeedCalc.c: 51: HWtimerCount = ReloadHWtimer((unsigned char)1);
  8205  001B62  0E01               	movlw	1
  8206  001B64  EC46  F00D         	call	_ReloadHWtimer
  8207  001B68  C001  F03C         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  8208  001B6C  C002  F03D         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  8209                           
  8210                           ;SpeedCalc.c: 52: TimerOVFLcount = HwTimerOVFLcount;
  8211  001B70  C044  F046         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  8212                           
  8213                           ;SpeedCalc.c: 53: HwTimerOVFLcount = (unsigned char)0;
  8214  001B74  0E00               	movlw	0
  8215  001B76  6E44               	movwf	_HwTimerOVFLcount,c	;volatile
  8216                           
  8217                           ;SpeedCalc.c: 54: }
  8218  001B78  0012               	return	
  8219  001B7A                     i2l2845:
  8220                           
  8221                           ;SpeedCalc.c: 55: else
  8222                           ;SpeedCalc.c: 56: {
  8223                           ;SpeedCalc.c: 57: if(LapCounter != (unsigned char)0)
  8224  001B7A  5047               	movf	_LapCounter,w,c	;volatile
  8225  001B7C  B4D8               	btfsc	status,2,c
  8226  001B7E  0012               	return	
  8227                           
  8228                           ;SpeedCalc.c: 58: {
  8229                           ;SpeedCalc.c: 59: LapCounter--;
  8230  001B80  0647               	decf	_LapCounter,f,c	;volatile
  8231  001B82  0012               	return	
  8232  001B84                     __end_of_SensorTwoNotify:
  8233                           	opt stack 0
  8234                           tosu	equ	0xFFF
  8235                           tosh	equ	0xFFE
  8236                           tosl	equ	0xFFD
  8237                           pclatu	equ	0xFFB
  8238                           pclath	equ	0xFFA
  8239                           tblptru	equ	0xFF8
  8240                           tblptrh	equ	0xFF7
  8241                           tblptrl	equ	0xFF6
  8242                           tablat	equ	0xFF5
  8243                           prodh	equ	0xFF4
  8244                           prodl	equ	0xFF3
  8245                           intcon	equ	0xFF2
  8246                           intcon2	equ	0xFF1
  8247                           intcon3	equ	0xFF0
  8248                           postinc0	equ	0xFEE
  8249                           fsr0h	equ	0xFEA
  8250                           fsr0l	equ	0xFE9
  8251                           wreg	equ	0xFE8
  8252                           indf1	equ	0xFE7
  8253                           postinc1	equ	0xFE6
  8254                           fsr1h	equ	0xFE2
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function _ReloadHWtimer *****************
  8264 ;; Defined at:
  8265 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  TimerId         1    wreg     unsigned char 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  TimerId         1    2[COMRAM] unsigned char 
  8270 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    0[COMRAM] unsigned short 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8280 ;;      Params:         2       0       0       0       0       0       0
  8281 ;;      Locals:         3       0       0       0       0       0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0
  8283 ;;      Totals:         5       0       0       0       0       0       0
  8284 ;;Total ram usage:        5 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_SensorTwoNotify
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text54
  8294  001A8C                     __ptext54:
  8295                           	opt stack 0
  8296  001A8C                     _ReloadHWtimer:
  8297                           	opt stack 21
  8298                           
  8299                           ;incstack = 0
  8300                           ;ReloadHWtimer@TimerId stored from wreg
  8301  001A8C  6E03               	movwf	ReloadHWtimer@TimerId,c
  8302                           
  8303                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  8304  001A8E  0E00               	movlw	0
  8305  001A90  6E05               	movwf	ReloadHWtimer@ElapsedTime+1,c
  8306  001A92  0E00               	movlw	0
  8307  001A94  6E04               	movwf	ReloadHWtimer@ElapsedTime,c
  8308                           
  8309                           ;HWI_Interrupts.c: 95: switch(TimerId)
  8310  001A96  D009               	goto	i2l2789
  8311  001A98                     i2l547:
  8312                           
  8313                           ;HWI_Interrupts.c: 98: case 1:
  8314                           ;HWI_Interrupts.c: 99: case 2:
  8315                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  8316  001A98  CFCE F004          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  8317  001A9C  CFCF F005          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  8318                           
  8319                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  8320  001AA0  0E00               	movlw	0
  8321  001AA2  6ECF               	movwf	4047,c	;volatile
  8322  001AA4  0E00               	movlw	0
  8323  001AA6  6ECE               	movwf	4046,c	;volatile
  8324                           
  8325                           ;HWI_Interrupts.c: 105: }
  8326                           
  8327                           ;HWI_Interrupts.c: 104: break;
  8328                           
  8329                           ;HWI_Interrupts.c: 103: default:
  8330                           
  8331                           ;HWI_Interrupts.c: 102: break;
  8332  001AA8  D00A               	goto	i2l548
  8333  001AAA                     i2l2789:
  8334  001AAA  5003               	movf	ReloadHWtimer@TimerId,w,c
  8335                           
  8336                           ; Switch size 1, requested type "space"
  8337                           ; Number of cases is 3, Range of values is 0 to 2
  8338                           ; switch strategies available:
  8339                           ; Name         Instructions Cycles
  8340                           ; simple_byte           10     6 (average)
  8341                           ;	Chosen strategy is simple_byte
  8342  001AAC  0A00               	xorlw	0	; case 0
  8343  001AAE  B4D8               	btfsc	status,2,c
  8344  001AB0  D7F3               	goto	i2l547
  8345  001AB2  0A01               	xorlw	1	; case 1
  8346  001AB4  B4D8               	btfsc	status,2,c
  8347  001AB6  D7F0               	goto	i2l547
  8348  001AB8  0A03               	xorlw	3	; case 2
  8349  001ABA  B4D8               	btfsc	status,2,c
  8350  001ABC  D7ED               	goto	i2l547
  8351  001ABE                     i2l548:
  8352                           
  8353                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  8354  001ABE  C004  F001         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  8355  001AC2  C005  F002         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  8356  001AC6  0012               	return		;funcret
  8357  001AC8                     __end_of_ReloadHWtimer:
  8358                           	opt stack 0
  8359                           tosu	equ	0xFFF
  8360                           tosh	equ	0xFFE
  8361                           tosl	equ	0xFFD
  8362                           pclatu	equ	0xFFB
  8363                           pclath	equ	0xFFA
  8364                           tblptru	equ	0xFF8
  8365                           tblptrh	equ	0xFF7
  8366                           tblptrl	equ	0xFF6
  8367                           tablat	equ	0xFF5
  8368                           prodh	equ	0xFF4
  8369                           prodl	equ	0xFF3
  8370                           intcon	equ	0xFF2
  8371                           intcon2	equ	0xFF1
  8372                           intcon3	equ	0xFF0
  8373                           postinc0	equ	0xFEE
  8374                           fsr0h	equ	0xFEA
  8375                           fsr0l	equ	0xFE9
  8376                           wreg	equ	0xFE8
  8377                           indf1	equ	0xFE7
  8378                           postinc1	equ	0xFE6
  8379                           fsr1h	equ	0xFE2
  8380                           fsr1l	equ	0xFE1
  8381                           indf2	equ	0xFDF
  8382                           postinc2	equ	0xFDE
  8383                           postdec2	equ	0xFDD
  8384                           fsr2h	equ	0xFDA
  8385                           fsr2l	equ	0xFD9
  8386                           status	equ	0xFD8
  8387                           
  8388 ;; *************** function _APP_ISR1 *****************
  8389 ;; Defined at:
  8390 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;		None
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;		None
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  1    wreg      void 
  8397 ;; Registers used:
  8398 ;;		wreg, status,2, status,0, cstack
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8404 ;;      Params:         0       0       0       0       0       0       0
  8405 ;;      Locals:         0       0       0       0       0       0       0
  8406 ;;      Temps:          0       0       0       0       0       0       0
  8407 ;;      Totals:         0       0       0       0       0       0       0
  8408 ;;Total ram usage:        0 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:    1
  8411 ;; This function calls:
  8412 ;;		_SensorOneNotify
  8413 ;; This function is called by:
  8414 ;;		_ISR
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           	psect	text55
  8419  001D70                     __ptext55:
  8420                           	opt stack 0
  8421  001D70                     _APP_ISR1:
  8422                           	opt stack 22
  8423                           
  8424                           ;AppInterrupts.c: 10: SensorOneNotify();
  8425                           
  8426                           ;incstack = 0
  8427  001D70  EC6D  F00E         	call	_SensorOneNotify	;wreg free
  8428  001D74  0012               	return		;funcret
  8429  001D76                     __end_of_APP_ISR1:
  8430                           	opt stack 0
  8431                           tosu	equ	0xFFF
  8432                           tosh	equ	0xFFE
  8433                           tosl	equ	0xFFD
  8434                           pclatu	equ	0xFFB
  8435                           pclath	equ	0xFFA
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon2	equ	0xFF1
  8444                           intcon3	equ	0xFF0
  8445                           postinc0	equ	0xFEE
  8446                           fsr0h	equ	0xFEA
  8447                           fsr0l	equ	0xFE9
  8448                           wreg	equ	0xFE8
  8449                           indf1	equ	0xFE7
  8450                           postinc1	equ	0xFE6
  8451                           fsr1h	equ	0xFE2
  8452                           fsr1l	equ	0xFE1
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _SensorOneNotify *****************
  8461 ;; Defined at:
  8462 ;;		line 30 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8476 ;;      Params:         0       0       0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0
  8479 ;;      Totals:         0       0       0       0       0       0       0
  8480 ;;Total ram usage:        0 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		_APP_ISR1
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text56
  8490  001CDA                     __ptext56:
  8491                           	opt stack 0
  8492  001CDA                     _SensorOneNotify:
  8493                           	opt stack 22
  8494                           
  8495                           ;SpeedCalc.c: 32: if( (unsigned char)1 == NotifyFlag )
  8496                           
  8497                           ;incstack = 0
  8498  001CDA  0448               	decf	_NotifyFlag,w,c	;volatile
  8499  001CDC  A4D8               	btfss	status,2,c
  8500  001CDE  D003               	goto	i2l1947
  8501                           
  8502                           ;SpeedCalc.c: 33: {
  8503                           ;SpeedCalc.c: 34: NotifyFlag = (unsigned char)0;
  8504  001CE0  0E00               	movlw	0
  8505  001CE2  6E48               	movwf	_NotifyFlag,c	;volatile
  8506                           
  8507                           ;SpeedCalc.c: 35: }
  8508  001CE4  0012               	return	
  8509  001CE6                     i2l1947:
  8510                           
  8511                           ;SpeedCalc.c: 36: else
  8512                           ;SpeedCalc.c: 37: {
  8513                           ;SpeedCalc.c: 38: if(LapCounter != (unsigned char)0)
  8514  001CE6  5047               	movf	_LapCounter,w,c	;volatile
  8515  001CE8  B4D8               	btfsc	status,2,c
  8516  001CEA  0012               	return	
  8517                           
  8518                           ;SpeedCalc.c: 39: {
  8519                           ;SpeedCalc.c: 40: LapCounter--;
  8520  001CEC  0647               	decf	_LapCounter,f,c	;volatile
  8521  001CEE  0012               	return	
  8522  001CF0                     __end_of_SensorOneNotify:
  8523                           	opt stack 0
  8524                           tosu	equ	0xFFF
  8525                           tosh	equ	0xFFE
  8526                           tosl	equ	0xFFD
  8527                           pclatu	equ	0xFFB
  8528                           pclath	equ	0xFFA
  8529                           tblptru	equ	0xFF8
  8530                           tblptrh	equ	0xFF7
  8531                           tblptrl	equ	0xFF6
  8532                           tablat	equ	0xFF5
  8533                           prodh	equ	0xFF4
  8534                           prodl	equ	0xFF3
  8535                           intcon	equ	0xFF2
  8536                           intcon2	equ	0xFF1
  8537                           intcon3	equ	0xFF0
  8538                           postinc0	equ	0xFEE
  8539                           fsr0h	equ	0xFEA
  8540                           fsr0l	equ	0xFE9
  8541                           wreg	equ	0xFE8
  8542                           indf1	equ	0xFE7
  8543                           postinc1	equ	0xFE6
  8544                           fsr1h	equ	0xFE2
  8545                           fsr1l	equ	0xFE1
  8546                           indf2	equ	0xFDF
  8547                           postinc2	equ	0xFDE
  8548                           postdec2	equ	0xFDD
  8549                           fsr2h	equ	0xFDA
  8550                           fsr2l	equ	0xFD9
  8551                           status	equ	0xFD8
  8552                           tosu	equ	0xFFF
  8553                           tosh	equ	0xFFE
  8554                           tosl	equ	0xFFD
  8555                           pclatu	equ	0xFFB
  8556                           pclath	equ	0xFFA
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon2	equ	0xFF1
  8565                           intcon3	equ	0xFF0
  8566                           postinc0	equ	0xFEE
  8567                           fsr0h	equ	0xFEA
  8568                           fsr0l	equ	0xFE9
  8569                           wreg	equ	0xFE8
  8570                           indf1	equ	0xFE7
  8571                           postinc1	equ	0xFE6
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581                           	psect	text57
  8582  000000                     __ptext57:
  8583                           	opt stack 0
  8584                           tosu	equ	0xFFF
  8585                           tosh	equ	0xFFE
  8586                           tosl	equ	0xFFD
  8587                           pclatu	equ	0xFFB
  8588                           pclath	equ	0xFFA
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           intcon2	equ	0xFF1
  8597                           intcon3	equ	0xFF0
  8598                           postinc0	equ	0xFEE
  8599                           fsr0h	equ	0xFEA
  8600                           fsr0l	equ	0xFE9
  8601                           wreg	equ	0xFE8
  8602                           indf1	equ	0xFE7
  8603                           postinc1	equ	0xFE6
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613                           	psect	rparam
  8614  0000                     tosu	equ	0xFFF
  8615                           tosh	equ	0xFFE
  8616                           tosl	equ	0xFFD
  8617                           pclatu	equ	0xFFB
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           intcon3	equ	0xFF0
  8628                           postinc0	equ	0xFEE
  8629                           fsr0h	equ	0xFEA
  8630                           fsr0l	equ	0xFE9
  8631                           wreg	equ	0xFE8
  8632                           indf1	equ	0xFE7
  8633                           postinc1	equ	0xFE6
  8634                           fsr1h	equ	0xFE2
  8635                           fsr1l	equ	0xFE1
  8636                           indf2	equ	0xFDF
  8637                           postinc2	equ	0xFDE
  8638                           postdec2	equ	0xFDD
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643                           	psect	temp
  8644  00006C                     btemp:
  8645                           	opt stack 0
  8646  00006C                     	ds	1
  8647  0000                     int$flags	set	btemp
  8648                           tosu	equ	0xFFF
  8649                           tosh	equ	0xFFE
  8650                           tosl	equ	0xFFD
  8651                           pclatu	equ	0xFFB
  8652                           pclath	equ	0xFFA
  8653                           tblptru	equ	0xFF8
  8654                           tblptrh	equ	0xFF7
  8655                           tblptrl	equ	0xFF6
  8656                           tablat	equ	0xFF5
  8657                           prodh	equ	0xFF4
  8658                           prodl	equ	0xFF3
  8659                           intcon	equ	0xFF2
  8660                           intcon2	equ	0xFF1
  8661                           intcon3	equ	0xFF0
  8662                           postinc0	equ	0xFEE
  8663                           fsr0h	equ	0xFEA
  8664                           fsr0l	equ	0xFE9
  8665                           wreg	equ	0xFE8
  8666                           indf1	equ	0xFE7
  8667                           postinc1	equ	0xFE6
  8668                           fsr1h	equ	0xFE2
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    53
    Data        2
    BSS         142
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     57     107
    BANK0           128     19     113
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    APP_SLEEPmanage@StatusByte	PTR struct . size(2) Largest target is 2
		 -> APP_MANAGE@StatusByte(BANK0[2]), 

    APP_CALC_AVGSPDmanage@StatusByte	PTR struct . size(2) Largest target is 2
		 -> APP_MANAGE@StatusByte(BANK0[2]), 

    memset@p1	PTR void  size(2) Largest target is 6
		 -> KeyInternalData(COMRAM[6]), APP_MANAGE@StatusByte(BANK0[2]), 

    memset@p	PTR unsigned char  size(2) Largest target is 6
		 -> KeyInternalData(COMRAM[6]), APP_MANAGE@StatusByte(BANK0[2]), 

    memcpy@d1	PTR void  size(2) Largest target is 15
		 -> APP_MANAGE@StatusByte(BANK0[2]), APP_DATA(COMRAM[15]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 15
		 -> APP_MANAGE@StatusByte(BANK0[2]), APP_DATA(COMRAM[15]), 

    memcpy@s1	PTR const void  size(2) Largest target is 15
		 -> APP_DATA.StatusByte(COMRAM[2]), APP_MANAGE@StatusByte(BANK0[2]), APP_DATA(COMRAM[15]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 15
		 -> APP_DATA.StatusByte(COMRAM[2]), APP_MANAGE@StatusByte(BANK0[2]), APP_DATA(COMRAM[15]), 

    APP_HMImanage@StatusByte	PTR struct . size(2) Largest target is 2
		 -> APP_MANAGE@StatusByte(BANK0[2]), 

    APP_CALC_TIMEmanage@StatusByte	PTR struct . size(2) Largest target is 2
		 -> APP_MANAGE@StatusByte(BANK0[2]), 

    HWIeeprom_Read@Data	PTR unsigned char  size(2) Largest target is 15
		 -> APP_DATA(COMRAM[15]), 

    S436$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    Eeprom_Read_Block@DataPtr	PTR void  size(2) Largest target is 15
		 -> APP_DATA(COMRAM[15]), 

    Eeprom_Read_Block@LocDataPtr	PTR unsigned char  size(2) Largest target is 15
		 -> APP_DATA(COMRAM[15]), 

    Eeprom_Write_Block@ptrFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    WriteFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Eeprom_Write_Block@DataPtr	PTR void  size(2) Largest target is 15
		 -> APP_DATA(COMRAM[15]), 

    Eeprom_Write_Block@LocDataPtr	PTR unsigned char  size(2) Largest target is 15
		 -> APP_DATA(COMRAM[15]), 

    sp__memset	PTR void  size(2) Largest target is 6
		 -> KeyInternalData(COMRAM[6]), APP_MANAGE@StatusByte(BANK0[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 15
		 -> APP_MANAGE@StatusByte(BANK0[2]), APP_DATA(COMRAM[15]), 


Critical Paths under _main in COMRAM

    _Start_App->_RunScheduler
    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageDrivers->_MangeKeys
    _MangeKeys->_HWI_DIGI_READ
    _EepromManage->_HWIeeprom_Write
    _APP_MANAGE->_BCDsendNumber
    _IncrementDecrementSingleDigit->___lwdiv
    _GetAvgSpeed->___lldiv
    _BCDsendNumber->___lldiv
    ___lldiv->___lmul
    _APP_HMImanage->_memset
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE
    _APP_INITIALIZE->_Eeprom_Read_Block
    _Eeprom_Read_Block->_HWIeeprom_Read

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_BCDsendNumber

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19653
                          _Start_App
 ---------------------------------------------------------------------------------
 (1) _Start_App                                            0     0      0   19653
                     _APP_INITIALIZE
                      _BCDInitialize
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
             _HWI_InitOscilatorCalib
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (2) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunScheduler                                         2     2      0   17748
                                             55 COMRAM     2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                      _ManageDrivers *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (3) _ManageSpeedCalc                                      0     0      0    2011
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (4) _SpeedCalcManage                                      4     4      0    2011
                                             44 COMRAM     4     4      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ManageDrivers                                        1     1      0    1131
                                             26 COMRAM     1     1      0
                       _EepromManage
                          _MangeKeys
 ---------------------------------------------------------------------------------
 (4) _MangeKeys                                            5     5      0     908
                                             21 COMRAM     5     5      0
                      _HWI_DIGI_READ
 ---------------------------------------------------------------------------------
 (5) _HWI_DIGI_READ                                        2     2      0      48
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _EepromManage                                         1     1      0     155
                                             22 COMRAM     1     1      0
                    _HWIeeprom_Write
 ---------------------------------------------------------------------------------
 (5) _HWIeeprom_Write                                      3     2      1     132
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ManageApplication                                    0     0      0   14232
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (4) _APP_MANAGE                                           6     6      0   14232
                                             13 BANK0      6     6      0
              _APP_CALC_AVGSPDmanage
              _APP_CALC_MAXSPDmanage
                _APP_CALC_TIMEmanage
         _APP_CALC_TIMEsetTravelTime
                      _APP_HMImanage
                    _APP_SLEEPmanage
                      _BCDsendNumber
                         _BlinkDigit
                _DisableDistanceCntr
                 _Eeprom_Write_Block
                        _GetAvgSpeed
                        _GetDistance
      _IncrementDecrementSingleDigit
                   _SetCircumfirunce
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     636
                                             19 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _IncrementDecrementSingleDigit                       17    13      4    2812
                                             26 COMRAM    17    13      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     694
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     549
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _GetAvgSpeed                                          9     7      2    1369
                                             44 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Write_Block                                  10     5      5     587
                                             19 COMRAM    10     5      5
 ---------------------------------------------------------------------------------
 (5) _DisableDistanceCntr                                  1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _BlinkDigit                                           3     1      2     401
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _BCDsendNumber                                       24    17      7    3840
                                             44 COMRAM    11     4      7
                                              0 BANK0     13    13      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     558
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     703
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _APP_SLEEPmanage                                      2     0      2      77
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _APP_HMImanage                                        7     5      2    2066
                                             27 COMRAM     7     5      2
                       _GetKeyStatus
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             19 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _GetKeyStatus                                         2     2      0      96
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _APP_CALC_TIMEmanage                                  4     0      4     170
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _APP_CALC_MAXSPDmanage                                2     0      2     139
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _APP_CALC_AVGSPDmanage                               10     0     10     231
                                             19 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (3) _DisplayAlphaNumeric                                  0     0      0     374
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (4) _BCDManage7segment                                    4     4      0     374
                                             21 COMRAM     4     4      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (5) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _HWI_InitOscilatorCalib                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateTask                                           4     0      4     900
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _BCDInitialize                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_INITIALIZE                                       0     0      0     990
          _APP_CALC_MAXSPDmanage_Set
         _APP_CALC_TIMEsetTravelTime
                  _Eeprom_Read_Block
                   _SetCircumfirunce
                        _SetDistance
 ---------------------------------------------------------------------------------
 (3) _SetDistance                                          4     0      4      86
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _SetCircumfirunce                                     2     0      2     185
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Read_Block                                    9     6      3     448
                                             23 COMRAM     9     6      3
                     _HWIeeprom_Read
 ---------------------------------------------------------------------------------
 (4) _HWIeeprom_Read                                       4     2      2     132
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _APP_CALC_TIMEsetTravelTime                           4     0      4     185
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _APP_CALC_MAXSPDmanage_Set                            2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     114
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (8) _SchedulerTick                                        1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (9) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (9) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (10) _ReloadHWtimer                                       5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (9) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Start_App
     _APP_INITIALIZE
       _APP_CALC_MAXSPDmanage_Set
       _APP_CALC_TIMEsetTravelTime
       _Eeprom_Read_Block
         _HWIeeprom_Read
       _SetCircumfirunce
       _SetDistance
     _BCDInitialize
     _CreateTask
     _HWI_DIGITAL_INITIALIZE
     _HWI_INTERRUPTS_INTITALIZE
     _HWI_InitOscilatorCalib
     _RunScheduler
       _DisplayAlphaNumeric *
         _BCDManage7segment
           _HWI_4Digit_WRITE
           _HWI_8Digit_WRITE
       _ManageApplication *
         _APP_MANAGE
           _APP_CALC_AVGSPDmanage
           _APP_CALC_MAXSPDmanage
           _APP_CALC_TIMEmanage
           _APP_CALC_TIMEsetTravelTime
           _APP_HMImanage
             _GetKeyStatus
             _memset
           _APP_SLEEPmanage
           _BCDsendNumber
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _BlinkDigit
           _DisableDistanceCntr
           _Eeprom_Write_Block
           _GetAvgSpeed
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _GetDistance
           _IncrementDecrementSingleDigit
             ___lwdiv
             ___wmul
           _SetCircumfirunce
           _memcpy
           _memset
       _ManageDrivers *
         _EepromManage
           _HWIeeprom_Write
         _MangeKeys
           _HWI_DIGI_READ
       _ManageSpeedCalc *
         _SpeedCalcManage
           ___lldiv
             ___lmul (ARG)
           ___lwdiv
           ___wmul
     _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     13      71       5       88.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     39      6B       1       84.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DC      15        0.0%
DATA                 0      0      DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Aug 07 22:44:53 2017

                                         l53 0B70                                           l63 0C1A  
                                         l57 0BE8                                           l67 0C36  
                                         l59 0C04                                           l89 123C  
                        __end_of_GetAvgSpeed 1598                   APP_HMImanage@KeyStatusLeft 0021  
                        ___wmul@multiplicand 0016                                  __CFG_BORV$3 000000  
                          GetAvgSpeed@bIsKph 002F                                 __CFG_CP0$OFF 000000  
                               __CFG_CP1$OFF 000000                                 __CFG_CP2$OFF 000000  
                               __CFG_CP3$OFF 000000                          __end_of_GetDistance 1D02  
                                __CFG_OSC$XT 000000                                  __CFG_LVP$ON 000000  
                          _ElapsedTimePeriod 00DA                                          l121 0F56  
                                        l454 1C2C                                          l456 1C32  
                                        l457 1C38                                          l473 1A54  
                                        l474 1A88                                          l475 1A5C  
                                        l476 1A64                                          l566 1C62  
                                        l578 169C                                          l983 171E  
                               __CFG_CPB$OFF 000000                  Eeprom_Write_Block@LoopIndex 001D  
                               __CFG_CPD$OFF 000000                                          _ISR 0008  
                             _LineBlinkIndex 0051                  HWIeeprom_Write@WriteSuccess 0016  
                     BCDManage7segment@Index 0018                                          prod 000FF3  
                                        tosl 000FFD                                          wreg 000FE8  
                APP_HMImanage@KeyStatusRight 0022                        _APP_CALC_MAXSPDmanage 1C4E  
                                       ?_ISR 0001                                 __CFG_WDT$OFF 000000  
                                       l1036 1900                                         l3011 16DC  
                                       l3021 1710                                         l3013 16E0  
                                       l3031 18CE                                         l3121 0E8E  
                                       l3113 0E66                                         l3009 16D0  
                                       l3201 0F38                                         l3033 18D6  
                                       l3043 18F6                                         l3035 18DA  
                                       l2501 1C3E                                         l3133 0EC0  
                                       l3117 0E7A                                         l3125 0EA0  
                                       l3109 0E52                                         l3213 1018  
                                       l3221 108C                                         l3061 19C2  
                                       l3151 1652                                         l3127 0EB2  
                                       l3143 0ED6                                         l3215 1058  
                                       l3231 10E6                                         l3055 19A6  
                                       l3081 0D92                                         l3145 0EF2  
                                       l3073 0D4C                                         l3217 1086  
                                       l3209 1008                                         l3305 1802  
                                       l3411 12B0                                         l3403 126C  
                                       l3139 0ED0                                         l3067 0D3C  
                                       l3251 1176                                         l3227 10DE  
                                       l2621 147E                                         l3093 0DF4  
                                       l3173 151E                                         l3261 11CE  
                                       l3253 118A                                         l3245 1146  
                                       l3333 0B8A                                         l3421 159C  
                                       l3415 12C4                                         l3407 128E  
                                       l2631 149C                                         l2623 1482  
                                       l3159 1686                                         l3087 0DBC  
                                       l3079 0D76                                         l3183 158E  
                                       l3271 11FA                                         l3239 112E  
                                       l3351 0C16                                         l3335 0BAC  
                                       l2527 1B20                                         l2535 1A6C  
                                       l2703 0740                                         l3431 1620  
                                       l3097 0E0C                                         l3089 0DDC  
                                       l3265 11D6                                         l3257 11B8  
                                       l3361 0C76                                         l3345 0C00  
                                       l3337 0BCA                                         l3329 0B4E  
                                       l2705 0762                                         l3425 15A4  
                                       l2491 1AD6                                         l3179 157E  
                                       l3267 11DC                                         l3259 11CA  
                                       l3371 0CE4                                         l2539 1A72  
                                       l2731 09E6                                         l2723 0932  
                                       l2803 1C78                                         l3419 1598  
                                       l2493 1AE0                                         l3197 0F2E  
                                       l3365 0CA0                                         l3357 0C58  
                                       l2717 0876                                         l3429 1604  
                                       l2495 1AEA                                         l3295 17C0  
                                       l3359 0C68                                         l2735 0A3A  
                                       l2727 0986                                         l2719 08B4  
                                       l2489 1ACC                                         l3369 0CBE  
                                       l2809 1C82                                         l2763 1920  
                                       l3299 17E6                                         l2683 196C  
                                       l2739 0A50                                         l2669 1BFA  
                                       l2773 194E                                         l2693 066C  
                                       l2769 1940                                         l2975 1B8E  
                                       l2799 1C70                           _ElapsedTimeMinutes 00D2  
                                       l2979 1B9E                                         l2995 1872  
                                       l2999 1886                                         u2011 06EC  
                                       u2041 0822                                         _LATC 000F8B  
                                       _LATD 000F8C                                         u3080 127E  
                                       u3090 12A0                                         u3138 15F0  
                                       u2940 0B2A                                         u2946 0B2C  
                                       _TMR1 000FCE                                         _main 1D3A  
                       __end_of_GetKeyStatus 1B56                                         fsr0h 000FEA  
                                       fsr1h 000FE2                                         fsr2h 000FDA  
                                       fsr0l 000FE9                                         indf1 000FE7  
                                       indf2 000FDF                                         fsr1l 000FE1  
                                       fsr2l 000FD9                                 _CalcMaxSpeed 003A  
                                       btemp 006C        __end_of_IncrementDecrementSingleDigit 1246  
     __size_of_IncrementDecrementSingleDigit 017C                _IncrementDecrementSingleDigit 10CA  
                __end_of_DisableDistanceCntr 1D4A                                         prodh 000FF4  
                                       prodl 000FF3                            _BCDManage7segment 1464  
                                       start 000E                                __CFG_IESO$OFF 000000  
                                 _BlinkDigit 1D02                                   _BlinkIndex 0053  
                         ?_BCDManage7segment 0001                     __size_of_SpeedCalcManage 00A2  
                               ___param_bank 000000                             __end_of_APP_ISR1 1D76  
                           __end_of_APP_ISR2 1D70                             __end_of_APP_ISR3 1D6A  
                                      ??_ISR 0006                              ??_ManageDrivers 001B  
                        BCDsendNumber@Buffer 00E6                    _SpeedCalcNotifyInitialize 1D78  
                        BCDsendNumber@Number 002D                          __size_of_APP_MANAGE 02C4  
                        ??_BCDManage7segment 0016                          BCDsendNumber@Output 00E2  
                                      ?_main 0001                                   _CreateTask 180A  
                                      _EEADR 000FA9                         HWI_DIGI_READ@HWIread 0015  
                            __end_of___lldiv 1730                                   _LapCounter 0047  
                                      _T0CON 000FD5                                        _T1CON 000FCD  
                                      _T3CON 000FB1                              __end_of___lwdiv 190A  
                                      i2l541 1386                                        i2l547 1A98  
                                      i2l548 1ABE                                        _TMR0L 000FD6  
                                      _TMR3H 000FB3                                        _TMR3L 000FB2  
                          _ManageApplication 1D58                                        _PORTC 000F82  
                                      _PORTD 000F83                                        _TRISC 000F94  
                                      _TRISD 000F95                      APP_HMImanage@StatusByte 001C  
                              __CFG_PWRT$OFF 000000                                __CFG_WRT0$OFF 000000  
                              __CFG_WRT1$OFF 000000                                __CFG_WRT2$OFF 000000  
                        ___lmul@multiplicand 0018                                __CFG_WRT3$OFF 000000  
                             __CFG_EBTR0$OFF 000000                               __CFG_FCMEN$OFF 000000  
                             __CFG_EBTR1$OFF 000000                               __CFG_EBTR2$OFF 000000  
                             __CFG_EBTR3$OFF 000000                                 _WriteRequest 004C  
                         ?_ManageApplication 0001                                __CFG_WRTB$OFF 000000  
                              __CFG_WRTC$OFF 000000                                __CFG_WRTD$OFF 000000  
                             __CFG_EBTRB$OFF 000000                           _Eeprom_Write_Block 17A0  
                    CreateTask@MangeFunction 0014                    BCDsendNumber@DecimalPlace 0032  
                                      pclath 000FFA                  ??_APP_CALC_MAXSPDmanage_Set 0016  
                                      tablat 000FF5                          ??_ManageApplication 0038  
                          ?_HWI_8Digit_WRITE 0014                    __end_of_BCDManage7segment 1506  
                       __end_of_EepromManage 1994                                        status 000FD8  
        IncrementDecrementSingleDigit@Number 001B                        __end_of_BCDsendNumber 10CA  
                        ?_Eeprom_Write_Block 0014              __size_of_HWI_DIGITAL_INITIALIZE 001A  
        IncrementDecrementSingleDigit@Output 0027                           ??_HWI_8Digit_WRITE 0015  
                                _GetAvgSpeed 1506                               __CFG_MCLRE$OFF 000000  
                            __initialization 19D4                                  _GetDistance 1CF0  
                              ??_SetDistance 0018                                 __end_of_main 1D42  
                   ??_HWI_InitOscilatorCalib 0014                      __size_of_HWIeeprom_Read 0028  
                  __end_of_ManageApplication 1D5E                                       ??_main 003A  
                       ??_Eeprom_Write_Block 0019                               MangeKeys@KeyID 001A  
                              __activetblptr 000002                   __end_of_Segment7ASCIItable 061B  
                     ?_APP_CALC_MAXSPDmanage 0014                                       _EEDATA 000FA8  
                                     _EECON2 000FA7                    HWIeeprom_Read@ReadSuccess 0017  
                         __size_of_MangeKeys 042E                                       _INT0IF 007F91  
                                     _INT1IF 007F80                                       i2l2903 1BB4  
                                     i2l1947 1CE6                                       i2l2907 1BBC  
                BCDManage7segment@DigitIndex 004F                                       i2l2845 1B7A  
                                     i2l2941 134E                                       i2l2963 137C  
                                     i2l2955 136E                                       i2l2947 135C  
                                     i2l2789 1AAA                                       _INTCON 000FF2  
                   __size_of_SensorOneNotify 0016                     __size_of_ManageSpeedCalc 0006  
                       HWI_8Digit_WRITE@port 0015                                       _TMR0IE 007F95  
                                     _TMR0IF 007F92                                       _TMR1IE 007CE8  
                                     _TMR1IF 007CF0                                       _TMR2IF 007CF1  
                                     _TMR3IE 007D01                                       _TMR3IF 007D09  
                     __size_of_BCDInitialize 0008                              BlinkDigit@Index 0016  
                        _DisplayAlphaNumeric 1D52                                  ?_BlinkDigit 0014  
                             __CFG_XINST$OFF 000000                                   _NotifyFlag 0048  
                                     ___lmul 1862                                       ___wmul 1C02  
                             __CFG_STVREN$ON 000000                                    ??___lldiv 0028  
                                  ??___lwdiv 0018                    _APP_CALC_MAXSPDmanage_Set 1D26  
                            _APP_SLEEPmanage 1D7A                                       _memcpy 1994  
                                     _memset 1B84                                 _HWtimerCount 003C  
                     EepromManage@WriteIndex 0049                                       clear_0 19F2  
                                     clear_1 19FE         APP_CALC_TIMEsetTravelTime@TravelTime 0014  
                          ??_SpeedCalcManage 002D                                  ?_CreateTask 0014  
                     _HWI_DIGITAL_INITIALIZE 1CC0                          __end_of_SetDistance 1CA4  
                           CreateTask@Period 0017                             CreateTask@TaskId 0016  
                               __pdataCOMRAM 006A                      ??_APP_CALC_AVGSPDmanage 001E  
                     __size_of_HWI_DIGI_READ 003C                         ?_DisplayAlphaNumeric 0001  
                               __mediumconst 0000                     __size_of_SensorTwoNotify 002E  
                                     tblptrh 000FF7                                       tblptrl 000FF6  
                                     tblptru 000FF8                           __size_of_Start_App 0070  
                      __size_of_GetKeyStatus 002E                          SetDistance@Distance 0014  
                               ??_APP_MANAGE 0038                                    ?_APP_ISR1 0001  
                                  ?_APP_ISR2 0001                                    ?_APP_ISR3 0001  
                     __size_of_SchedulerTick 002A                     ReloadHWtimer@ElapsedTime 0004  
                 __size_of_BCDManage7segment 00A2                                   __accesstop 0080  
                    __end_of__initialization 1A04                  __end_of_APP_CALC_TIMEmanage 16AE  
                            __CFG_PBADEN$OFF 000000                            MangeKeys@KeyState 0018  
                          ?_SetCircumfirunce 0014                                ___rparam_used 000001  
                         ??_SetCircumfirunce 0016                  ?_APP_CALC_TIMEsetTravelTime 0014  
                             _TimerOVFLcount 0046                               __pcstackCOMRAM 0001  
                          BCDsendNumber@Line 0031                            BCDsendNumber@Link 00DE  
                  GetAvgSpeed@AvgSpeedKphMph 0034                            __end_of_MangeKeys 0A66  
                  __size_of_HWI_4Digit_WRITE 0032                   __size_of_ManageApplication 0006  
            __size_of_HWI_InitOscilatorCalib 0002                           __end_of_APP_MANAGE 0D2A  
                               _GetKeyStatus 1B28                                _BCDInitialize 1D4A  
                      ??_DisplayAlphaNumeric 001A         SpeedCalcManage@HundredMeterReference 002F  
                   __size_of_HWtimerCallback 000A           __size_of_SpeedCalcNotifyInitialize 0002  
     IncrementDecrementSingleDigit@LoopIndex 002B                     __size_of_HWIeeprom_Write 002E  
                        __size_of_BlinkDigit 0010                        __size_of_EepromManage 0040  
                     __size_of_ReloadHWtimer 003C                                   ??_APP_ISR1 0001  
                                 ??_APP_ISR2 0006                                   ??_APP_ISR3 0001  
                                 __pbssBANK0 0080                BCDManage7segment@BlinkCounter 004E  
                               _CircumFactor 006A                        __end_of_APP_HMImanage 0F18  
                        __size_of_CreateTask 0058                                _HWI_DIGI_READ 1A50  
                      _DistTravelCntrDisable 0045                     BCDsendNumber@EnableTranc 0033  
                    __end_of_APP_SLEEPmanage 1D7C                            ??_SensorOneNotify 0001  
                          ??_ManageSpeedCalc 0031                      __size_of_APP_INITIALIZE 00C0  
                                    ?___lmul 0014                       SetCircumfirunce@Circum 0014  
                          __end_of_Start_App 17A0                                      ?___wmul 0014  
                                _SetDistance 1C88               DisableDistanceCntr@bIsDisabled 0014  
                              _SchedulerTick 1BB0                               _HWIeeprom_Read 1BDA  
                                    ?_memcpy 0014                                      ?_memset 0014  
                             ___lmul@product 001C           __size_of_HWI_INTERRUPTS_INTITALIZE 003E  
                 ?_HWI_INTERRUPTS_INTITALIZE 0001                                 _EepromManage 1954  
                             ?_BCDInitialize 0001                                      _INTCON3 000FF0  
                      HWI_8Digit_WRITE@value 0014               Eeprom_Write_Block@WriteGranted 001C  
                       APP_HMImanage@TempVar 0020                       _HWI_InitOscilatorCalib 1D7C  
                          ??_SensorTwoNotify 0006                             HWI_DIGI_READ@pin 0014  
                  APP_HMImanage@DisplayState 0042                               ?_HWI_DIGI_READ 0001  
                                    __Hparam 0000                                 ?_GetAvgSpeed 002D  
                                    __Lparam 0000                                 ?_GetDistance 0014  
                     __end_of_HWIeeprom_Read 1C02                              __size_of___lmul 0056  
                              _ReloadHWtimer 1A8C                               ?_SchedulerTick 0001  
                                    ___lldiv 16AE                              __size_of___wmul 0026  
                                    ___lwdiv 18B8                 __size_of_DisableDistanceCntr 0008  
                               __psmallconst 0600                    __size_of_HWI_8Digit_WRITE 0026  
                      __end_of_ManageDrivers 1C88                                      __pcinit 19D4  
                            __size_of_memcpy 0040                              __size_of_memset 002C  
                          _Eeprom_Read_Block 190A                                      __ramtop 0600  
                                    __ptext0 1D3A                                      __ptext1 1730  
                                    __ptext2 1D78                                      __ptext3 1598  
                                    __ptext4 1C6C                                      __ptext5 1D52  
                                    __ptext6 1D58                                      __ptext7 1D5E  
                                    __ptext8 13C2                                      __ptext9 0638  
                    ??_APP_CALC_MAXSPDmanage 0016            __end_of_HWI_INTERRUPTS_INTITALIZE 1A50  
                               __size_of_ISR 13BA                           ?_Eeprom_Read_Block 0018  
                              ?_RunScheduler 0001                       SchedulerTick@TaskIndex 0001  
                        ??_Eeprom_Read_Block 001B                               __pintcode_body 1306  
                       end_of_initialization 1A04                            ??_HWtimerCallback 0001  
                                    memcpy@d 001A                                      memcpy@n 0018  
                                    memcpy@s 001C                           _Segment7ASCIItable 0601  
                                    memset@c 0016                                      memset@n 0018  
                                    memset@p 001A                                __Lmediumconst 0000  
                          ??_HWIeeprom_Write 0015                                      int_func 1306  
                            _SevenSegmentMAP 062B                              ___lldiv@divisor 0024  
                            _SpeedCalcManage 13C2                                 ??_BlinkDigit 0016  
                            ___lldiv@counter 002C                             ?_APP_SLEEPmanage 0014  
                             ?_ReloadHWtimer 0001                                      postdec2 000FDD  
                            ?_HWIeeprom_Read 0014                                      postinc0 000FEE  
                                    postinc1 000FE6                                      postinc2 000FDE  
                  __end_of_Eeprom_Read_Block 1954                      ?_HWI_DIGITAL_INITIALIZE 0001  
                           _HWI_4Digit_WRITE 1AC8                              ??_BCDInitialize 0014  
                               ??_CreateTask 0018                                    _PORTBbits 000F81  
                __size_of_Eeprom_Write_Block 006A                       __size_of_BCDsendNumber 01B2  
                             ??_RunScheduler 0038                                    _TRISBbits 000F93  
             __size_of_APP_CALC_AVGSPDmanage 000A                __end_of_APP_CALC_AVGSPDmanage 1D1C  
                       BCDManage7segment@BCD 0019                           __end_of_BlinkDigit 1D12  
                            ??_HWI_DIGI_READ 0014                                    _DataArray 0080  
                          __size_of_APP_ISR1 0006                            __size_of_APP_ISR2 0006  
                          __size_of_APP_ISR3 0006                           __end_of_CreateTask 1862  
                BCDInitialize@bIsCommonAnode 0014                                    _BlinkFlag 0050  
                             _APP_INITIALIZE 1246                               _DistTravelCntr 00D6  
                            ??_SchedulerTick 0001                                _BlinkDuration 0052  
                          _LapTimeTenthMilli 003E               __end_of_HWI_DIGITAL_INITIALIZE 1CDA  
                             __end_of___lmul 18B8  IncrementDecrementSingleDigit@NumberReturned 0022  
                             __end_of___wmul 1C28                       APP_MANAGE@CurrentSpeed 00ED  
                              __pidataCOMRAM 1D76                                    _ArrayTask 00B2  
                  __size_of_SetCircumfirunce 000A                APP_CALC_TIMEmanage@StatusByte 0014  
                             __end_of_memcpy 19D4                               __end_of_memset 1BB0  
                                  _MangeKeys 0638                          start_initialization 19D4  
                                __end_of_ISR 13C2                          HWIeeprom_Write@Data 0014  
                            _SensorOneNotify 1CDA                      __end_of_SevenSegmentMAP 0636  
                            _ManageSpeedCalc 1D5E                      __end_of_SpeedCalcManage 1464  
          IncrementDecrementSingleDigit@Link 0020                       __end_of_APP_INITIALIZE 1306  
                              _BCDsendNumber 0F18                              ??_ReloadHWtimer 0003  
                             BlinkDigit@Line 0014                   Eeprom_Read_Block@BlockSize 001A  
                   Eeprom_Read_Block@DataPtr 0018                 __size_of_APP_CALC_TIMEmanage 008A  
                                   ??___lmul 001C                                 ?_SetDistance 0014  
                                   ??___wmul 0018                         __size_of_GetAvgSpeed 0092  
                 __size_of_Eeprom_Read_Block 004A                  __end_of_DisplayAlphaNumeric 1D58  
                           __CFG_LPT1OSC$OFF 000000                         __size_of_GetDistance 0012  
                                   ??_memcpy 001A                             _HWI_8Digit_WRITE 1C28  
                                   ??_memset 001A               ?_IncrementDecrementSingleDigit 001B  
                     HWIeeprom_Write@address 0015                                    _Start_App 1730  
                         BlinkDigit@duration 0015                  ??_HWI_INTERRUPTS_INTITALIZE 0014  
                            _WriteFnCallback 0040                   BCDManage7segment@LineIndex 004D  
                                 ?_MangeKeys 0001                              _SensorTwoNotify 1B56  
                                __pbssCOMRAM 003A                       BCDsendNumber@LoopIndex 00EA  
                              __pcstackBANK0 00DE                     Eeprom_Read_Block@address 001E  
                  APP_SLEEPmanage@StatusByte 0014                      ?_HWI_InitOscilatorCalib 0001  
                        _DisableDistanceCntr 1D42                   Eeprom_Read_Block@LoopIndex 0020  
                      RunScheduler@TaskIndex 0043                               ?_BCDsendNumber 002D  
      IncrementDecrementSingleDigit@PowIndex 0024                              ?_APP_INITIALIZE 0001  
                           ___lwdiv@dividend 0014                         __end_of_RunScheduler 1624  
                          __CFG_CCP2MX$PORTC 000000                                    __pintcode 0008  
                                   ?___lldiv 0020                         ?_DisableDistanceCntr 0001  
                                   ?___lwdiv 0014                APP_CALC_AVGSPDmanage@Distance 001A  
                                 ?_Start_App 0001                             _HwTimerOVFLcount 0044  
                               _bIsAnodeUsed 0054                              _HWtimerCallback 1D30  
                     __size_of_APP_HMImanage 01EE                                  __smallconst 0600  
                    __end_of_SensorOneNotify 1CF0                                     _BCDAlpha 00C2  
                    __end_of_ManageSpeedCalc 1D64               __size_of_APP_CALC_MAXSPDmanage 001E  
              __end_of_APP_CALC_MAXSPDmanage 1C6C                              _HWIeeprom_Write 1AFA  
             __end_of_HWI_InitOscilatorCalib 1D7E                        HWI_4Digit_WRITE@value 0014  
                           ___lwdiv@quotient 0019                           APP_MANAGE@AvgSpeed 00EB  
                                   _APP_DATA 0055                     __end_of_HWI_4Digit_WRITE 1AFA  
                                   _APP_ISR1 1D70                                     _APP_ISR2 1D6A  
                                   _APP_ISR3 1D64                   ?_SpeedCalcNotifyInitialize 0001  
               Eeprom_Read_Block@ReadGranted 001B                           HWIeeprom_Read@Data 0014  
                           ?_SpeedCalcManage 0001                    _HWI_INTERRUPTS_INTITALIZE 1A12  
                       ReloadHWtimer@TimerId 0003                               ___wmul@product 0018  
                           ??_HWIeeprom_Read 0016                 Eeprom_Read_Block@ReadSuccess 001F  
                           __CFG_WDTPS$32768 000000                        ??_DisableDistanceCntr 0014  
                      HWIeeprom_Read@address 0016                      __end_of_SensorTwoNotify 1B84  
                           _SetCircumfirunce 1D1C                            ___wmul@multiplier 0014  
                                ??_MangeKeys 0016                                     _DataSize 004A  
         IncrementDecrementSingleDigit@Index 001D    IncrementDecrementSingleDigit@bIsincrement 001E  
                          ___lmul@multiplier 0014                                  _INTCON2bits 000FF1  
                            ??_BCDsendNumber 0034            __end_of_SpeedCalcNotifyInitialize 1D7A  
                     __size_of_ManageDrivers 001C                                _APP_HMImanage 0D2A  
                                 _EECON1bits 000FA6                               _KeyArrayConfig 061B  
                                   __Hrparam 0000                                     __Lrparam 0000  
               ??_APP_CALC_TIMEsetTravelTime 0018                           __CFG_BOREN$SBORDIS 000000  
                    __end_of_HWtimerCallback 1D3A                            GetKeyStatus@KeyID 0015  
                           __size_of___lldiv 0082                   __end_of_Eeprom_Write_Block 180A  
                    __end_of_HWIeeprom_Write 1B28                             __size_of___lwdiv 0052  
                       __size_of_SetDistance 001C                                  ??_Start_App 003A  
                   __size_of_APP_SLEEPmanage 0002                        __end_of_BCDInitialize 1D52  
                              ?_GetKeyStatus 0001                             ?_SensorOneNotify 0001  
                                 _EEPROMaddr 004B                             ?_ManageSpeedCalc 0001  
                Eeprom_Read_Block@LocDataPtr 001C                              ___lwdiv@divisor 0016  
                            ___lwdiv@counter 0018                                     __ptext10 1A50  
                                   __ptext11 1954                                     __ptext20 17A0  
                                   __ptext12 1AFA                                     __ptext21 1D42  
                                   __ptext13 0A66                                     __ptext30 1624  
                                   __ptext22 1D02                                     __ptext14 1994  
                                   __ptext31 1C4E                                     __ptext23 0F18  
                                   __ptext15 10CA                                     __ptext40 1D4A  
                                   __ptext32 1D12                                     __ptext24 1862  
                                   __ptext16 1C02                                     __ptext41 1246  
                                   __ptext33 1464                                     __ptext25 16AE  
                                   __ptext17 18B8                                     __ptext50 1D64  
                                   __ptext42 1C88                                     __ptext34 1C28  
                                   __ptext26 1D7A                                     __ptext18 1CF0  
                                   __ptext51 1D30                                     __ptext43 1D1C  
                                   __ptext35 1AC8                                     __ptext27 0D2A  
                                   __ptext19 1506                                     __ptext52 1D6A  
                                   __ptext44 190A                                     __ptext36 1D7C  
                                   __ptext28 1B84                                     __ptext53 1B56  
                                   __ptext45 1BDA                                     __ptext37 1A12  
                                   __ptext29 1B28                                     __ptext54 1A8C  
                                   __ptext46 1CA4                                     __ptext38 1CC0  
                                   __ptext55 1D70                                     __ptext47 1D26  
                                   __ptext39 180A                                     __ptext56 1CDA  
                                   __ptext57 0000                                     __ptext49 1BB0  
                        _APP_CALC_TIMEmanage 1624           __size_of_APP_CALC_MAXSPDmanage_Set 000A  
                  Eeprom_Write_Block@DataPtr 0014              APP_CALC_AVGSPDmanage@TravelTime 0016  
                      _APP_CALC_AVGSPDmanage 1D12                                   _APP_MANAGE 0A66  
                 ?_APP_CALC_MAXSPDmanage_Set 0014                              _KeyInternalData 0064  
                   __end_of_HWI_8Digit_WRITE 1C4E          __size_of_APP_CALC_TIMEsetTravelTime 001C  
                         _LapDistanceCounter 00DC              APP_CALC_AVGSPDmanage@StatusByte 0014  
                      __size_of_RunScheduler 008C                         HWI_4Digit_WRITE@port 0015  
                             ?_APP_HMImanage 001C                                __size_of_main 0008  
                     __end_of_KeyArrayConfig 062B                          MangeKeys@HWIreading 0019  
                      __end_of_HWI_DIGI_READ 1A8C              Eeprom_Write_Block@ptrFnCallback 0017  
                       ?_APP_CALC_TIMEmanage 0014                     EepromManage@WriteSuccess 0017  
                                   int$flags 006C                    Eeprom_Write_Block@address 0019  
                      __end_of_SchedulerTick 1BDA                             ?_SensorTwoNotify 0001  
                    GetAvgSpeed@KphMphFactor 0030            APP_CALC_MAXSPDmanage@CurrentSpeed 0014  
                             ??_GetKeyStatus 0014                                ?_EepromManage 0001  
                              _ManageDrivers 1C6C                                   _INTCONbits 000FF2  
                                   memcpy@d1 0014                                     memcpy@s1 0016  
                               _RunScheduler 1598                                     memset@p1 0014  
            ??_IncrementDecrementSingleDigit 001F                             ??_APP_INITIALIZE 0021  
                                   intlevel2 0000            __end_of_APP_CALC_MAXSPDmanage_Set 1D30  
                           ___lldiv@dividend 0020                                ??_GetAvgSpeed 002F  
                      ??_APP_CALC_TIMEmanage 0018                                ??_GetDistance 0018  
                      __end_of_ReloadHWtimer 1AC8                             ?_HWtimerCallback 0001  
                             ??_EepromManage 0017                               ?_ManageDrivers 0001  
                           ?_HWIeeprom_Write 0014    IncrementDecrementSingleDigit@unitPosition 0025  
                           ___lldiv@quotient 0028                 __size_of_DisplayAlphaNumeric 0006  
                          ??_APP_SLEEPmanage 0016                       ?_APP_CALC_AVGSPDmanage 0014  
                Eeprom_Write_Block@BlockSize 0016                                  ?_APP_MANAGE 0001  
                            ??_APP_HMImanage 001E                  ??_SpeedCalcNotifyInitialize 0014  
                          ?_HWI_4Digit_WRITE 0014                     __end_of_SetCircumfirunce 1D26  
                   ??_HWI_DIGITAL_INITIALIZE 0014                 Eeprom_Write_Block@LocDataPtr 001A  
                         ??_HWI_4Digit_WRITE 0015                         APP_MANAGE@StatusByte 00EF  
                     ManageDrivers@LoopIndex 001B           __end_of_APP_CALC_TIMEsetTravelTime 1CC0  
                 _APP_CALC_TIMEsetTravelTime 1CA4            APP_CALC_MAXSPDmanage_Set@MaxSpeed 0014  
                      GetKeyStatus@KeyStatus 0014  
