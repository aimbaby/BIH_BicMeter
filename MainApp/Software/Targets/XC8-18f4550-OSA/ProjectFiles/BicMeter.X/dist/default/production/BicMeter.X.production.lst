

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 09 23:16:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.41
    50                           ; Generated 25/01/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4520 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  000DCA                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _CircumFactor
    89  000DCA  00C8               	dw	200
    90                           
    91                           	psect	smallconst
    92  000600                     __psmallconst:
    93                           	opt stack 0
    94  000600  00                 	db	0
    95  000601                     _SevenSegmentMAP:
    96                           	opt stack 0
    97  000601  FC                 	db	252
    98  000602  60                 	db	96
    99  000603  DA                 	db	218
   100  000604  F2                 	db	242
   101  000605  66                 	db	102
   102  000606  B6                 	db	182
   103  000607  BE                 	db	190
   104  000608  E0                 	db	224
   105  000609  FE                 	db	254
   106  00060A  F6                 	db	246
   107  00060B  01                 	db	1
   108  00060C                     __end_of_SevenSegmentMAP:
   109                           	opt stack 0
   110  0000                     _TMR1	set	4046
   111  0000                     _TMR3H	set	4019
   112  0000                     _TMR3L	set	4018
   113  0000                     _TMR0L	set	4054
   114  0000                     _INTCON2bits	set	4081
   115  0000                     _T3CON	set	4017
   116  0000                     _T1CON	set	4045
   117  0000                     _T0CON	set	4053
   118  0000                     _INTCON3	set	4080
   119  0000                     _INTCON	set	4082
   120  0000                     _TRISBbits	set	3987
   121  0000                     _TRISC	set	3988
   122  0000                     _TRISD	set	3989
   123  0000                     _LATD	set	3980
   124  0000                     _PORTD	set	3971
   125  0000                     _LATC	set	3979
   126  0000                     _PORTC	set	3970
   127  0000                     _INT1IF	set	32640
   128  0000                     _INT0IF	set	32657
   129  0000                     _TMR2IF	set	31985
   130  0000                     _TMR3IE	set	32001
   131  0000                     _TMR3IF	set	32009
   132  0000                     _TMR1IE	set	31976
   133  0000                     _TMR1IF	set	31984
   134  0000                     _TMR0IE	set	32661
   135  0000                     _TMR0IF	set	32658
   136                           
   137                           ; #config settings
   138  00060C  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  000C54                     __pcinit:
   142                           	opt stack 0
   143  000C54                     start_initialization:
   144                           	opt stack 0
   145  000C54                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Initialize objects allocated to COMRAM (2 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  000C54  0ECA               	movlw	low __pidataCOMRAM
   151  000C56  6EF6               	movwf	tblptrl,c
   152  000C58  0E0D               	movlw	high __pidataCOMRAM
   153  000C5A  6EF7               	movwf	tblptrh,c
   154  000C5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  000C5E  6EF8               	movwf	tblptru,c
   156  000C60  0009               	tblrd		*+	;fetch initializer
   157  000C62  CFF5 F060          	movff	tablat,__pdataCOMRAM
   158  000C66  0009               	tblrd		*+	;fetch initializer
   159  000C68  CFF5 F061          	movff	tablat,__pdataCOMRAM+1
   160                           
   161                           ; Clear objects allocated to COMRAM (36 bytes)
   162  000C6C  EE00  F03C         	lfsr	0,__pbssCOMRAM
   163  000C70  0E24               	movlw	36
   164  000C72                     clear_0:
   165  000C72  6AEE               	clrf	postinc0,c
   166  000C74  06E8               	decf	wreg,f,c
   167  000C76  E1FD               	bnz	clear_0
   168  000C78                     end_of_initialization:
   169                           	opt stack 0
   170  000C78                     __end_of__initialization:
   171                           	opt stack 0
   172  000C78  9062               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   173  000C7A  9262               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   174  000C7C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   175  000C7E  6EF8               	movwf	tblptru,c
   176  000C80  0100               	movlb	0
   177  000C82  EF72  F005         	goto	_main	;jump to C main() function
   178                           tblptru	equ	0xFF8
   179                           tblptrh	equ	0xFF7
   180                           tblptrl	equ	0xFF6
   181                           tablat	equ	0xFF5
   182                           postinc0	equ	0xFEE
   183                           wreg	equ	0xFE8
   184                           
   185                           	psect	bssCOMRAM
   186  00003C                     __pbssCOMRAM:
   187                           	opt stack 0
   188  00003C                     _ArrayTask:
   189                           	opt stack 0
   190  00003C                     	ds	12
   191  000048                     _BCDNumber:
   192                           	opt stack 0
   193  000048                     	ds	8
   194  000050                     _DistTravelCntr:
   195                           	opt stack 0
   196  000050                     	ds	4
   197  000054                     _HWtimerCount:
   198                           	opt stack 0
   199  000054                     	ds	2
   200  000056                     _LapTimeTenthMilli:
   201                           	opt stack 0
   202  000056                     	ds	2
   203  000058                     _LapDistanceCounter:
   204                           	opt stack 0
   205  000058                     	ds	2
   206  00005A                     RunScheduler@TaskIndex:
   207                           	opt stack 0
   208  00005A                     	ds	1
   209  00005B                     _HwTimerOVFLcount:
   210                           	opt stack 0
   211  00005B                     	ds	1
   212  00005C                     _TimerOVFLcount:
   213                           	opt stack 0
   214  00005C                     	ds	1
   215  00005D                     _LapCounter:
   216                           	opt stack 0
   217  00005D                     	ds	1
   218  00005E                     _NotifyFlag:
   219                           	opt stack 0
   220  00005E                     	ds	1
   221  00005F                     BCDManage7segment@DigitIndex:
   222                           	opt stack 0
   223  00005F                     	ds	1
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           
   231                           	psect	dataCOMRAM
   232  000060                     __pdataCOMRAM:
   233                           	opt stack 0
   234  000060                     _CircumFactor:
   235                           	opt stack 0
   236  000060                     	ds	2
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	cstackCOMRAM
   245  000001                     __pcstackCOMRAM:
   246                           	opt stack 0
   247  000001                     ?_ReloadHWtimer:
   248                           	opt stack 0
   249  000001                     SchedulerTick@TaskIndex:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x0
   253  000001                     	ds	2
   254  000003                     ReloadHWtimer@TimerId:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x2
   258  000003                     	ds	1
   259  000004                     ReloadHWtimer@ElapsedTime:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x3
   263  000004                     	ds	2
   264  000006                     ??_ISR:
   265                           
   266                           ; 1 bytes @ 0x5
   267  000006                     	ds	14
   268  000014                     ?___wmul:
   269                           	opt stack 0
   270  000014                     ?___lwdiv:
   271                           	opt stack 0
   272  000014                     ?_GetDistance:
   273                           	opt stack 0
   274  000014                     ?___lmul:
   275                           	opt stack 0
   276  000014                     HWI_4Digit_WRITE@value:
   277                           	opt stack 0
   278  000014                     HWI_8Digit_WRITE@value:
   279                           	opt stack 0
   280  000014                     SetCircumfirunce@Circum:
   281                           	opt stack 0
   282  000014                     CreateTask@MangeFunction:
   283                           	opt stack 0
   284  000014                     ___wmul@multiplier:
   285                           	opt stack 0
   286  000014                     ___lwdiv@dividend:
   287                           	opt stack 0
   288  000014                     ___lmul@multiplier:
   289                           	opt stack 0
   290                           
   291                           ; 4 bytes @ 0x13
   292  000014                     	ds	1
   293  000015                     HWI_4Digit_WRITE@port:
   294                           	opt stack 0
   295  000015                     HWI_8Digit_WRITE@port:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x14
   299  000015                     	ds	1
   300  000016                     ??_BCDManage7segment:
   301  000016                     CreateTask@TaskId:
   302                           	opt stack 0
   303  000016                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  000016                     ___lwdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x15
   309  000016                     	ds	1
   310  000017                     CreateTask@Period:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0x16
   314  000017                     	ds	1
   315  000018                     ___wmul@product:
   316                           	opt stack 0
   317  000018                     ___lwdiv@quotient:
   318                           	opt stack 0
   319  000018                     ___lmul@multiplicand:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x17
   323  000018                     	ds	1
   324  000019                     
   325                           ; 1 bytes @ 0x18
   326  000019                     	ds	1
   327  00001A                     ___lwdiv@counter:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x19
   331  00001A                     	ds	1
   332  00001B                     BCDsendNumber@Number:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x1A
   336  00001B                     	ds	1
   337  00001C                     ___lmul@product:
   338                           	opt stack 0
   339                           
   340                           ; 4 bytes @ 0x1B
   341  00001C                     	ds	1
   342  00001D                     BCDsendNumber@DecimalPlace:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x1C
   346  00001D                     	ds	1
   347  00001E                     ??_BCDsendNumber:
   348                           
   349                           ; 1 bytes @ 0x1D
   350  00001E                     	ds	2
   351  000020                     ?___lldiv:
   352                           	opt stack 0
   353  000020                     BCDsendNumber@Link:
   354                           	opt stack 0
   355  000020                     ___lldiv@dividend:
   356                           	opt stack 0
   357                           
   358                           ; 4 bytes @ 0x1F
   359  000020                     	ds	2
   360  000022                     BCDsendNumber@Output:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x21
   364  000022                     	ds	2
   365  000024                     BCDsendNumber@Buffer:
   366                           	opt stack 0
   367  000024                     ___lldiv@divisor:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x23
   371  000024                     	ds	2
   372  000026                     BCDsendNumber@LoopIndex:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x25
   376  000026                     	ds	2
   377  000028                     ___lldiv@quotient:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0x27
   381  000028                     	ds	4
   382  00002C                     ___lldiv@counter:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x2B
   386  00002C                     	ds	1
   387  00002D                     ??_SpeedCalcManage:
   388  00002D                     ?_GetAvgSpeed:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x2C
   392  00002D                     	ds	2
   393  00002F                     SpeedCalcManage@HundredMeterReference:
   394                           	opt stack 0
   395  00002F                     GetAvgSpeed@AvgSpeedKphMph:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x2E
   399  00002F                     	ds	2
   400  000031                     GetAvgSpeed@bIsKph:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x30
   404  000031                     	ds	1
   405  000032                     GetAvgSpeed@KphMphFactor:
   406                           	opt stack 0
   407                           
   408                           ; 4 bytes @ 0x31
   409  000032                     	ds	4
   410  000036                     APP_MANAGE@AvgSpeedKph:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x35
   414  000036                     	ds	2
   415  000038                     APP_MANAGE@TravelledDistance:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x37
   419  000038                     	ds	2
   420  00003A                     
   421                           ; 1 bytes @ 0x39
   422  00003A                     	ds	2
   423  00003C                     tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           
   430                           ; 1 bytes @ 0x3B
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 86 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   450 ;;      Params:         0       0       0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels required when called:    9
   456 ;; This function calls:
   457 ;;		_APP_INITIALIZE
   458 ;;		_CreateTask
   459 ;;		_HWI_DIGITAL_INITIALIZE
   460 ;;		_HWI_INTERRUPTS_INTITALIZE
   461 ;;		_RunScheduler
   462 ;;		_SpeedCalcNotifyInitialize
   463 ;; This function is called by:
   464 ;;		Startup code after reset
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text0
   469  000AE4                     __ptext0:
   470                           	opt stack 0
   471  000AE4                     _main:
   472                           	opt stack 22
   473                           
   474                           ;main.c: 87: HWI_INTERRUPTS_INTITALIZE();
   475                           
   476                           ;incstack = 0
   477  000AE4  ECED  F005         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   478                           
   479                           ;main.c: 88: HWI_DIGITAL_INITIALIZE();
   480  000AE8  ECC2  F006         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   481                           
   482                           ;main.c: 89: SpeedCalcNotifyInitialize();
   483  000AEC  ECE6  F006         	call	_SpeedCalcNotifyInitialize	;wreg free
   484                           
   485                           ;main.c: 90: APP_INITIALIZE();
   486  000AF0  ECE7  F006         	call	_APP_INITIALIZE	;wreg free
   487                           
   488                           ;main.c: 92: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   489  000AF4  0EB2               	movlw	low _ManageSpeedCalc
   490  000AF6  6E14               	movwf	CreateTask@MangeFunction,c
   491  000AF8  0E0D               	movlw	high _ManageSpeedCalc
   492  000AFA  6E15               	movwf	CreateTask@MangeFunction+1,c
   493  000AFC  0E00               	movlw	0
   494  000AFE  6E16               	movwf	CreateTask@TaskId,c
   495  000B00  0E14               	movlw	20
   496  000B02  6E17               	movwf	CreateTask@Period,c
   497  000B04  EC1B  F005         	call	_CreateTask	;wreg free
   498                           
   499                           ;main.c: 94: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100);
   500  000B08  0EAC               	movlw	low _ManageApplication
   501  000B0A  6E14               	movwf	CreateTask@MangeFunction,c
   502  000B0C  0E0D               	movlw	high _ManageApplication
   503  000B0E  6E15               	movwf	CreateTask@MangeFunction+1,c
   504  000B10  0E02               	movlw	2
   505  000B12  6E16               	movwf	CreateTask@TaskId,c
   506  000B14  0E64               	movlw	100
   507  000B16  6E17               	movwf	CreateTask@Period,c
   508  000B18  EC1B  F005         	call	_CreateTask	;wreg free
   509                           
   510                           ;main.c: 96: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 50);
   511  000B1C  0EA6               	movlw	low _DisplayAlphaNumeric
   512  000B1E  6E14               	movwf	CreateTask@MangeFunction,c
   513  000B20  0E0D               	movlw	high _DisplayAlphaNumeric
   514  000B22  6E15               	movwf	CreateTask@MangeFunction+1,c
   515  000B24  0E01               	movlw	1
   516  000B26  6E16               	movwf	CreateTask@TaskId,c
   517  000B28  0E32               	movlw	50
   518  000B2A  6E17               	movwf	CreateTask@Period,c
   519  000B2C  EC1B  F005         	call	_CreateTask	;wreg free
   520                           
   521                           ;main.c: 99: RunScheduler();
   522  000B30  EC28  F004         	call	_RunScheduler	;wreg free
   523                           
   524                           ;main.c: 101: return;
   525  000B34  EF07  F000         	goto	start
   526  000B38                     __end_of_main:
   527                           	opt stack 0
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           
   535 ;; *************** function _SpeedCalcNotifyInitialize *****************
   536 ;; Defined at:
   537 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		None
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   551 ;;      Params:         0       0       0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0       0       0
   554 ;;      Totals:         0       0       0       0       0       0       0
   555 ;;Total ram usage:        0 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; Hardware stack levels required when called:    4
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text1
   566  000DCC                     __ptext1:
   567                           	opt stack 0
   568  000DCC                     _SpeedCalcNotifyInitialize:
   569                           	opt stack 26
   570                           
   571                           ;incstack = 0
   572  000DCC  0012               	return		;funcret
   573  000DCE                     __end_of_SpeedCalcNotifyInitialize:
   574                           	opt stack 0
   575                           tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           postinc0	equ	0xFEE
   580                           wreg	equ	0xFE8
   581                           
   582 ;; *************** function _RunScheduler *****************
   583 ;; Defined at:
   584 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   598 ;;      Params:         0       0       0       0       0       0       0
   599 ;;      Locals:         0       0       0       0       0       0       0
   600 ;;      Temps:          2       0       0       0       0       0       0
   601 ;;      Totals:         2       0       0       0       0       0       0
   602 ;;Total ram usage:        2 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; Hardware stack levels required when called:    8
   605 ;; This function calls:
   606 ;;		_DisplayAlphaNumeric
   607 ;;		_ManageApplication
   608 ;;		_ManageSpeedCalc
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           	psect	text2
   615  000850                     __ptext2:
   616                           	opt stack 0
   617  000850                     _RunScheduler:
   618                           	opt stack 22
   619  000850                     
   620                           ;Scheduler.c: 29: {
   621                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 3 ; TaskIndex++)
   622  000850  0E00               	movlw	0
   623  000852  6E5A               	movwf	RunScheduler@TaskIndex,c
   624  000854                     l1432:
   625  000854  0E02               	movlw	2
   626  000856  645A               	cpfsgt	RunScheduler@TaskIndex,c
   627  000858  D001               	goto	l1436
   628  00085A  D7FA               	goto	l1430
   629  00085C                     l1436:
   630                           
   631                           ;Scheduler.c: 31: {
   632                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   633  00085C  505A               	movf	RunScheduler@TaskIndex,w,c
   634  00085E  0D04               	mullw	4
   635  000860  0E02               	movlw	2
   636  000862  26F3               	addwf	prodl,f,c
   637  000864  0E00               	movlw	0
   638  000866  22F4               	addwfc	prodh,f,c
   639  000868  0E3C               	movlw	low _ArrayTask
   640  00086A  24F3               	addwf	prodl,w,c
   641  00086C  6ED9               	movwf	fsr2l,c
   642  00086E  0E00               	movlw	high _ArrayTask
   643  000870  20F4               	addwfc	prodh,w,c
   644  000872  6EDA               	movwf	fsr2h,c
   645  000874  505A               	movf	RunScheduler@TaskIndex,w,c
   646  000876  0D04               	mullw	4
   647  000878  0E03               	movlw	3
   648  00087A  26F3               	addwf	prodl,f,c
   649  00087C  0E00               	movlw	0
   650  00087E  22F4               	addwfc	prodh,f,c
   651  000880  0E3C               	movlw	low _ArrayTask
   652  000882  24F3               	addwf	prodl,w,c
   653  000884  6EE1               	movwf	fsr1l,c
   654  000886  0E00               	movlw	high _ArrayTask
   655  000888  20F4               	addwfc	prodh,w,c
   656  00088A  6EE2               	movwf	fsr1h,c
   657  00088C  50DE               	movf	postinc2,w,c
   658  00088E  5CE6               	subwf	postinc1,w,c
   659  000890  A0D8               	btfss	status,0,c
   660  000892  D022               	goto	l1442
   661                           
   662                           ;Scheduler.c: 33: {
   663                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   664  000894  505A               	movf	RunScheduler@TaskIndex,w,c
   665  000896  0D04               	mullw	4
   666  000898  0E3C               	movlw	low _ArrayTask
   667  00089A  24F3               	addwf	prodl,w,c
   668  00089C  6ED9               	movwf	fsr2l,c
   669  00089E  0E00               	movlw	high _ArrayTask
   670  0008A0  20F4               	addwfc	prodh,w,c
   671  0008A2  6EDA               	movwf	fsr2h,c
   672  0008A4  D801               	call	u608
   673  0008A6  D00A               	goto	l1440
   674  0008A8                     u608:
   675  0008A8  0005               	push	
   676  0008AA  6EFA               	movwf	pclath,c
   677  0008AC  50DE               	movf	postinc2,w,c
   678  0008AE  6EFD               	movwf	tosl,c
   679  0008B0  50DE               	movf	postinc2,w,c
   680  0008B2  6EFE               	movwf	tosh,c
   681  0008B4  50F8               	movf	tblptru,w,c
   682  0008B6  6EFF               	movwf	tosu,c
   683  0008B8  50FA               	movf	pclath,w,c
   684  0008BA  0012               	return		;indir
   685  0008BC                     l1440:
   686                           
   687                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   688  0008BC  505A               	movf	RunScheduler@TaskIndex,w,c
   689  0008BE  0D04               	mullw	4
   690  0008C0  0E03               	movlw	3
   691  0008C2  26F3               	addwf	prodl,f,c
   692  0008C4  0E00               	movlw	0
   693  0008C6  22F4               	addwfc	prodh,f,c
   694  0008C8  0E3C               	movlw	low _ArrayTask
   695  0008CA  24F3               	addwf	prodl,w,c
   696  0008CC  6ED9               	movwf	fsr2l,c
   697  0008CE  0E00               	movlw	high _ArrayTask
   698  0008D0  20F4               	addwfc	prodh,w,c
   699  0008D2  6EDA               	movwf	fsr2h,c
   700  0008D4  0E00               	movlw	0
   701  0008D6  6EDF               	movwf	indf2,c
   702  0008D8                     l1442:
   703  0008D8  2A5A               	incf	RunScheduler@TaskIndex,f,c
   704  0008DA  D7BC               	goto	l1432
   705  0008DC                     __end_of_RunScheduler:
   706                           	opt stack 0
   707                           tosu	equ	0xFFF
   708                           tosh	equ	0xFFE
   709                           tosl	equ	0xFFD
   710                           pclath	equ	0xFFA
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           prodh	equ	0xFF4
   716                           prodl	equ	0xFF3
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postinc1	equ	0xFE6
   720                           fsr1h	equ	0xFE2
   721                           fsr1l	equ	0xFE1
   722                           indf2	equ	0xFDF
   723                           postinc2	equ	0xFDE
   724                           fsr2h	equ	0xFDA
   725                           fsr2l	equ	0xFD9
   726                           status	equ	0xFD8
   727                           
   728 ;; *************** function _DisplayAlphaNumeric *****************
   729 ;; Defined at:
   730 ;;		line 104 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   744 ;;      Params:         0       0       0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    6
   751 ;; This function calls:
   752 ;;		_BCDManage7segment
   753 ;; This function is called by:
   754 ;;		_main
   755 ;;		_RunScheduler
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text3
   760  000DA6                     __ptext3:
   761                           	opt stack 0
   762  000DA6                     _DisplayAlphaNumeric:
   763                           	opt stack 23
   764                           
   765                           ;main.c: 106: BCDManage7segment();
   766                           
   767                           ;incstack = 0
   768  000DA6  ECC5  F005         	call	_BCDManage7segment	;wreg free
   769  000DAA  0012               	return		;funcret
   770  000DAC                     __end_of_DisplayAlphaNumeric:
   771                           	opt stack 0
   772                           tosu	equ	0xFFF
   773                           tosh	equ	0xFFE
   774                           tosl	equ	0xFFD
   775                           pclath	equ	0xFFA
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postinc1	equ	0xFE6
   785                           fsr1h	equ	0xFE2
   786                           fsr1l	equ	0xFE1
   787                           indf2	equ	0xFDF
   788                           postinc2	equ	0xFDE
   789                           fsr2h	equ	0xFDA
   790                           fsr2l	equ	0xFD9
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _ManageApplication *****************
   794 ;; Defined at:
   795 ;;		line 108 in file "main.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   809 ;;      Params:         0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    7
   816 ;; This function calls:
   817 ;;		_APP_MANAGE
   818 ;; This function is called by:
   819 ;;		_main
   820 ;;		_RunScheduler
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text4
   825  000DAC                     __ptext4:
   826                           	opt stack 0
   827  000DAC                     _ManageApplication:
   828                           	opt stack 22
   829                           
   830                           ;main.c: 110: APP_MANAGE();
   831                           
   832                           ;incstack = 0
   833  000DAC  ECE8  F004         	call	_APP_MANAGE	;wreg free
   834  000DB0  0012               	return		;funcret
   835  000DB2                     __end_of_ManageApplication:
   836                           	opt stack 0
   837                           tosu	equ	0xFFF
   838                           tosh	equ	0xFFE
   839                           tosl	equ	0xFFD
   840                           pclath	equ	0xFFA
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           prodh	equ	0xFF4
   846                           prodl	equ	0xFF3
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postinc1	equ	0xFE6
   850                           fsr1h	equ	0xFE2
   851                           fsr1l	equ	0xFE1
   852                           indf2	equ	0xFDF
   853                           postinc2	equ	0xFDE
   854                           fsr2h	equ	0xFDA
   855                           fsr2l	equ	0xFD9
   856                           status	equ	0xFD8
   857                           
   858 ;; *************** function _ManageSpeedCalc *****************
   859 ;; Defined at:
   860 ;;		line 112 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   874 ;;      Params:         0       0       0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0       0       0
   877 ;;      Totals:         0       0       0       0       0       0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    6
   881 ;; This function calls:
   882 ;;		_SpeedCalcManage
   883 ;; This function is called by:
   884 ;;		_main
   885 ;;		_RunScheduler
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text5
   890  000DB2                     __ptext5:
   891                           	opt stack 0
   892  000DB2                     _ManageSpeedCalc:
   893                           	opt stack 23
   894                           
   895                           ;main.c: 114: SpeedCalcManage();
   896                           
   897                           ;incstack = 0
   898  000DB2  ECE0  F003         	call	_SpeedCalcManage	;wreg free
   899  000DB6  0012               	return		;funcret
   900  000DB8                     __end_of_ManageSpeedCalc:
   901                           	opt stack 0
   902                           tosu	equ	0xFFF
   903                           tosh	equ	0xFFE
   904                           tosl	equ	0xFFD
   905                           pclath	equ	0xFFA
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           prodh	equ	0xFF4
   911                           prodl	equ	0xFF3
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postinc1	equ	0xFE6
   915                           fsr1h	equ	0xFE2
   916                           fsr1l	equ	0xFE1
   917                           indf2	equ	0xFDF
   918                           postinc2	equ	0xFDE
   919                           fsr2h	equ	0xFDA
   920                           fsr2l	equ	0xFD9
   921                           status	equ	0xFD8
   922                           
   923 ;; *************** function _SpeedCalcManage *****************
   924 ;; Defined at:
   925 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  HundredMeter    2   46[COMRAM] unsigned short 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   939 ;;      Params:         0       0       0       0       0       0       0
   940 ;;      Locals:         2       0       0       0       0       0       0
   941 ;;      Temps:          2       0       0       0       0       0       0
   942 ;;      Totals:         4       0       0       0       0       0       0
   943 ;;Total ram usage:        4 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    5
   946 ;; This function calls:
   947 ;;		___lldiv
   948 ;;		___lwdiv
   949 ;;		___wmul
   950 ;; This function is called by:
   951 ;;		_ManageSpeedCalc
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text6
   956  0007C0                     __ptext6:
   957                           	opt stack 0
   958  0007C0                     _SpeedCalcManage:
   959                           	opt stack 23
   960                           
   961                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
   962                           ;SpeedCalc.c: 67: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
   963                           ;SpeedCalc.c: 68: ((unsigned short)TimerOVFLcount * (unsigned short)655);
   964                           
   965                           ;incstack = 0
   966  0007C0  C054  F014         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
   967  0007C4  C055  F015         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
   968  0007C8  0E00               	movlw	0
   969  0007CA  6E17               	movwf	___lwdiv@divisor+1,c
   970  0007CC  0E64               	movlw	100
   971  0007CE  6E16               	movwf	___lwdiv@divisor,c
   972  0007D0  EC9C  F005         	call	___lwdiv	;wreg free
   973  0007D4  C014  F02D         	movff	?___lwdiv,??_SpeedCalcManage
   974  0007D8  C015  F02E         	movff	?___lwdiv+1,??_SpeedCalcManage+1
   975  0007DC  C05C  F014         	movff	_TimerOVFLcount,___wmul@multiplier
   976  0007E0  6A15               	clrf	___wmul@multiplier+1,c
   977  0007E2  0E02               	movlw	2
   978  0007E4  6E17               	movwf	___wmul@multiplicand+1,c
   979  0007E6  0E8F               	movlw	143
   980  0007E8  6E16               	movwf	___wmul@multiplicand,c
   981  0007EA  EC88  F006         	call	___wmul	;wreg free
   982  0007EE  5014               	movf	?___wmul,w,c
   983  0007F0  242D               	addwf	??_SpeedCalcManage,w,c
   984  0007F2  6E56               	movwf	_LapTimeTenthMilli,c
   985  0007F4  5015               	movf	?___wmul+1,w,c
   986  0007F6  202E               	addwfc	??_SpeedCalcManage+1,w,c
   987  0007F8  6E57               	movwf	_LapTimeTenthMilli+1,c
   988                           
   989                           ;SpeedCalc.c: 70: LapDistanceCounter += LapCounter;
   990  0007FA  505D               	movf	_LapCounter,w,c	;volatile
   991  0007FC  2658               	addwf	_LapDistanceCounter,f,c
   992  0007FE  0E00               	movlw	0
   993  000800  2259               	addwfc	_LapDistanceCounter+1,f,c
   994                           
   995                           ;SpeedCalc.c: 72: LapCounter = (unsigned char)0;
   996  000802  0E00               	movlw	0
   997  000804  6E5D               	movwf	_LapCounter,c	;volatile
   998                           
   999                           ;SpeedCalc.c: 74: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1000                           ;SpeedCalc.c: 75: (unsigned long)CircumFactor);
  1001  000806  0EA0               	movlw	160
  1002  000808  6E20               	movwf	___lldiv@dividend,c
  1003  00080A  0E86               	movlw	134
  1004  00080C  6E21               	movwf	___lldiv@dividend+1,c
  1005  00080E  0E01               	movlw	1
  1006  000810  6E22               	movwf	___lldiv@dividend+2,c
  1007  000812  0E00               	movlw	0
  1008  000814  6E23               	movwf	___lldiv@dividend+3,c
  1009  000816  C060  F024         	movff	_CircumFactor,___lldiv@divisor
  1010  00081A  C061  F025         	movff	_CircumFactor+1,___lldiv@divisor+1
  1011  00081E  6A26               	clrf	___lldiv@divisor+2,c
  1012  000820  6A27               	clrf	___lldiv@divisor+3,c
  1013  000822  EC6E  F004         	call	___lldiv	;wreg free
  1014  000826  C020  F02F         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1015  00082A  C021  F030         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1016                           
  1017                           ;SpeedCalc.c: 77: if(LapDistanceCounter >= HundredMeterReference)
  1018  00082E  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1019  000830  5C58               	subwf	_LapDistanceCounter,w,c
  1020  000832  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1021  000834  5859               	subwfb	_LapDistanceCounter+1,w,c
  1022  000836  A0D8               	btfss	status,0,c
  1023  000838  0012               	return	
  1024                           
  1025                           ;SpeedCalc.c: 78: {
  1026                           ;SpeedCalc.c: 79: DistTravelCntr ++;
  1027  00083A  0E01               	movlw	1
  1028  00083C  2650               	addwf	_DistTravelCntr,f,c
  1029  00083E  0E00               	movlw	0
  1030  000840  2251               	addwfc	_DistTravelCntr+1,f,c
  1031  000842  2252               	addwfc	_DistTravelCntr+2,f,c
  1032  000844  2253               	addwfc	_DistTravelCntr+3,f,c
  1033                           
  1034                           ;SpeedCalc.c: 80: LapDistanceCounter -= HundredMeterReference;
  1035  000846  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1036  000848  5E58               	subwf	_LapDistanceCounter,f,c
  1037  00084A  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1038  00084C  5A59               	subwfb	_LapDistanceCounter+1,f,c
  1039                           
  1040                           ;SpeedCalc.c: 81: }
  1041  00084E  0012               	return	
  1042  000850                     __end_of_SpeedCalcManage:
  1043                           	opt stack 0
  1044                           tosu	equ	0xFFF
  1045                           tosh	equ	0xFFE
  1046                           tosl	equ	0xFFD
  1047                           pclath	equ	0xFFA
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           prodh	equ	0xFF4
  1053                           prodl	equ	0xFF3
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postinc1	equ	0xFE6
  1057                           fsr1h	equ	0xFE2
  1058                           fsr1l	equ	0xFE1
  1059                           indf2	equ	0xFDF
  1060                           postinc2	equ	0xFDE
  1061                           fsr2h	equ	0xFDA
  1062                           fsr2l	equ	0xFD9
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _APP_MANAGE *****************
  1066 ;; Defined at:
  1067 ;;		line 15 in file "../../../../Common/App/APP.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  TravelledDis    2   55[COMRAM] unsigned short 
  1072 ;;  AvgSpeedKph     2   53[COMRAM] unsigned short 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1082 ;;      Params:         0       0       0       0       0       0       0
  1083 ;;      Locals:         4       0       0       0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0
  1085 ;;      Totals:         4       0       0       0       0       0       0
  1086 ;;Total ram usage:        4 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    6
  1089 ;; This function calls:
  1090 ;;		_BCDsendNumber
  1091 ;;		_GetAvgSpeed
  1092 ;;		_GetDistance
  1093 ;;		_SetCircumfirunce
  1094 ;;		___wmul
  1095 ;; This function is called by:
  1096 ;;		_ManageApplication
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text7
  1101  0009D0                     __ptext7:
  1102                           	opt stack 0
  1103  0009D0                     _APP_MANAGE:
  1104                           	opt stack 22
  1105                           
  1106                           ;APP.c: 17: unsigned short AvgSpeedKph;
  1107                           ;APP.c: 18: unsigned short TravelledDistance;
  1108                           ;APP.c: 22: SetCircumfirunce(2000);
  1109                           
  1110                           ;incstack = 0
  1111  0009D0  0E07               	movlw	7
  1112  0009D2  6E15               	movwf	SetCircumfirunce@Circum+1,c
  1113  0009D4  0ED0               	movlw	208
  1114  0009D6  6E14               	movwf	SetCircumfirunce@Circum,c
  1115  0009D8  ECC9  F006         	call	_SetCircumfirunce	;wreg free
  1116                           
  1117                           ;APP.c: 24: AvgSpeedKph = GetAvgSpeed(1);
  1118  0009DC  0E01               	movlw	1
  1119  0009DE  ECAF  F004         	call	_GetAvgSpeed
  1120  0009E2  C02D  F036         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  1121  0009E6  C02E  F037         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  1122                           
  1123                           ;APP.c: 25: TravelledDistance = GetDistance();
  1124  0009EA  ECB9  F006         	call	_GetDistance	;wreg free
  1125  0009EE  C014  F038         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  1126  0009F2  C015  F039         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  1127                           
  1128                           ;APP.c: 26: TravelledDistance *= (unsigned short)10;
  1129  0009F6  C038  F014         	movff	APP_MANAGE@TravelledDistance,___wmul@multiplier
  1130  0009FA  C039  F015         	movff	APP_MANAGE@TravelledDistance+1,___wmul@multiplier+1
  1131  0009FE  0E00               	movlw	0
  1132  000A00  6E17               	movwf	___wmul@multiplicand+1,c
  1133  000A02  0E0A               	movlw	10
  1134  000A04  6E16               	movwf	___wmul@multiplicand,c
  1135  000A06  EC88  F006         	call	___wmul	;wreg free
  1136  000A0A  C014  F038         	movff	?___wmul,APP_MANAGE@TravelledDistance
  1137  000A0E  C015  F039         	movff	?___wmul+1,APP_MANAGE@TravelledDistance+1
  1138                           
  1139                           ;APP.c: 27: TravelledDistance /= (unsigned short)16;
  1140  000A12  3A38               	swapf	APP_MANAGE@TravelledDistance,f,c
  1141  000A14  3A39               	swapf	APP_MANAGE@TravelledDistance+1,f,c
  1142  000A16  0E0F               	movlw	15
  1143  000A18  1638               	andwf	APP_MANAGE@TravelledDistance,f,c
  1144  000A1A  5039               	movf	APP_MANAGE@TravelledDistance+1,w,c
  1145  000A1C  0BF0               	andlw	240
  1146  000A1E  1238               	iorwf	APP_MANAGE@TravelledDistance,f,c
  1147  000A20  0E0F               	movlw	15
  1148  000A22  1639               	andwf	APP_MANAGE@TravelledDistance+1,f,c
  1149                           
  1150                           ;APP.c: 39: BCDsendNumber(AvgSpeedKph,1);
  1151  000A24  C036  F01B         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  1152  000A28  C037  F01C         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  1153  000A2C  0E01               	movlw	1
  1154  000A2E  6E1D               	movwf	BCDsendNumber@DecimalPlace,c
  1155  000A30  EC07  F003         	call	_BCDsendNumber	;wreg free
  1156  000A34  0012               	return		;funcret
  1157  000A36                     __end_of_APP_MANAGE:
  1158                           	opt stack 0
  1159                           tosu	equ	0xFFF
  1160                           tosh	equ	0xFFE
  1161                           tosl	equ	0xFFD
  1162                           pclath	equ	0xFFA
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           prodh	equ	0xFF4
  1168                           prodl	equ	0xFF3
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           postinc1	equ	0xFE6
  1172                           fsr1h	equ	0xFE2
  1173                           fsr1l	equ	0xFE1
  1174                           indf2	equ	0xFDF
  1175                           postinc2	equ	0xFDE
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           
  1180 ;; *************** function _SetCircumfirunce *****************
  1181 ;; Defined at:
  1182 ;;		line 99 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;  Circum          2   19[COMRAM] unsigned short 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		None
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1196 ;;      Params:         2       0       0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0       0       0
  1199 ;;      Totals:         2       0       0       0       0       0       0
  1200 ;;Total ram usage:        2 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    4
  1203 ;; This function calls:
  1204 ;;		Nothing
  1205 ;; This function is called by:
  1206 ;;		_APP_MANAGE
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text8
  1211  000D92                     __ptext8:
  1212                           	opt stack 0
  1213  000D92                     _SetCircumfirunce:
  1214                           	opt stack 23
  1215                           
  1216                           ;SpeedCalc.c: 101: CircumFactor = (unsigned short)Circum;
  1217                           
  1218                           ;incstack = 0
  1219  000D92  C014  F060         	movff	SetCircumfirunce@Circum,_CircumFactor
  1220  000D96  C015  F061         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  1221  000D9A  0012               	return		;funcret
  1222  000D9C                     __end_of_SetCircumfirunce:
  1223                           	opt stack 0
  1224                           tosu	equ	0xFFF
  1225                           tosh	equ	0xFFE
  1226                           tosl	equ	0xFFD
  1227                           pclath	equ	0xFFA
  1228                           tblptru	equ	0xFF8
  1229                           tblptrh	equ	0xFF7
  1230                           tblptrl	equ	0xFF6
  1231                           tablat	equ	0xFF5
  1232                           prodh	equ	0xFF4
  1233                           prodl	equ	0xFF3
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postinc1	equ	0xFE6
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           indf2	equ	0xFDF
  1240                           postinc2	equ	0xFDE
  1241                           fsr2h	equ	0xFDA
  1242                           fsr2l	equ	0xFD9
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _GetDistance *****************
  1246 ;; Defined at:
  1247 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  4   19[COMRAM] unsigned long 
  1254 ;; Registers used:
  1255 ;;		None
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1261 ;;      Params:         4       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0
  1264 ;;      Totals:         4       0       0       0       0       0       0
  1265 ;;Total ram usage:        4 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    4
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_APP_MANAGE
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text9
  1276  000D72                     __ptext9:
  1277                           	opt stack 0
  1278  000D72                     _GetDistance:
  1279                           	opt stack 23
  1280                           
  1281                           ;SpeedCalc.c: 95: return DistTravelCntr;
  1282                           
  1283                           ;incstack = 0
  1284  000D72  C050  F014         	movff	_DistTravelCntr,?_GetDistance
  1285  000D76  C051  F015         	movff	_DistTravelCntr+1,?_GetDistance+1
  1286  000D7A  C052  F016         	movff	_DistTravelCntr+2,?_GetDistance+2
  1287  000D7E  C053  F017         	movff	_DistTravelCntr+3,?_GetDistance+3
  1288  000D82  0012               	return		;funcret
  1289  000D84                     __end_of_GetDistance:
  1290                           	opt stack 0
  1291                           tosu	equ	0xFFF
  1292                           tosh	equ	0xFFE
  1293                           tosl	equ	0xFFD
  1294                           pclath	equ	0xFFA
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postinc1	equ	0xFE6
  1304                           fsr1h	equ	0xFE2
  1305                           fsr1l	equ	0xFE1
  1306                           indf2	equ	0xFDF
  1307                           postinc2	equ	0xFDE
  1308                           fsr2h	equ	0xFDA
  1309                           fsr2l	equ	0xFD9
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _GetAvgSpeed *****************
  1313 ;; Defined at:
  1314 ;;		line 105 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  bIsKph          1    wreg     unsigned char 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  bIsKph          1   48[COMRAM] unsigned char 
  1319 ;;  KphMphFactor    4   49[COMRAM] unsigned long 
  1320 ;;  AvgSpeedKphM    2   46[COMRAM] unsigned short 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  2   44[COMRAM] unsigned short 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1330 ;;      Params:         2       0       0       0       0       0       0
  1331 ;;      Locals:         7       0       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0
  1333 ;;      Totals:         9       0       0       0       0       0       0
  1334 ;;Total ram usage:        9 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    5
  1337 ;; This function calls:
  1338 ;;		___lldiv
  1339 ;;		___lmul
  1340 ;; This function is called by:
  1341 ;;		_APP_MANAGE
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text10
  1346  00095E                     __ptext10:
  1347                           	opt stack 0
  1348  00095E                     _GetAvgSpeed:
  1349                           	opt stack 22
  1350                           
  1351                           ;incstack = 0
  1352                           ;GetAvgSpeed@bIsKph stored from wreg
  1353  00095E  6E31               	movwf	GetAvgSpeed@bIsKph,c
  1354                           
  1355                           ;SpeedCalc.c: 107: unsigned short AvgSpeedKphMph;
  1356                           ;SpeedCalc.c: 108: unsigned long KphMphFactor;
  1357                           ;SpeedCalc.c: 110: if( (unsigned char)1 == bIsKph )
  1358  000960  0431               	decf	GetAvgSpeed@bIsKph,w,c
  1359  000962  A4D8               	btfss	status,2,c
  1360  000964  D004               	goto	l1304
  1361                           
  1362                           ;SpeedCalc.c: 111: {
  1363                           ;SpeedCalc.c: 112: KphMphFactor = (unsigned long)360;
  1364  000966  0E68               	movlw	104
  1365  000968  6E32               	movwf	GetAvgSpeed@KphMphFactor,c
  1366  00096A  0E01               	movlw	1
  1367  00096C  D003               	goto	L1
  1368  00096E                     l1304:
  1369                           
  1370                           ;SpeedCalc.c: 114: else
  1371                           ;SpeedCalc.c: 115: {
  1372                           ;SpeedCalc.c: 116: KphMphFactor = (unsigned long)225;
  1373  00096E  0EE1               	movlw	225
  1374  000970  6E32               	movwf	GetAvgSpeed@KphMphFactor,c
  1375  000972  0E00               	movlw	0
  1376  000974                     L1:
  1377  000974  6E33               	movwf	GetAvgSpeed@KphMphFactor+1,c
  1378  000976  0E00               	movlw	0
  1379  000978  6E34               	movwf	GetAvgSpeed@KphMphFactor+2,c
  1380  00097A  0E00               	movlw	0
  1381  00097C  6E35               	movwf	GetAvgSpeed@KphMphFactor+3,c
  1382                           
  1383                           ;SpeedCalc.c: 117: }
  1384                           ;SpeedCalc.c: 119: AvgSpeedKphMph = (unsigned short)
  1385                           ;SpeedCalc.c: 120: ((KphMphFactor * (unsigned long)CircumFactor )
  1386                           ;SpeedCalc.c: 121: / (unsigned long)LapTimeTenthMilli);
  1387  00097E  C060  F014         	movff	_CircumFactor,___lmul@multiplier
  1388  000982  C061  F015         	movff	_CircumFactor+1,___lmul@multiplier+1
  1389  000986  6A16               	clrf	___lmul@multiplier+2,c
  1390  000988  6A17               	clrf	___lmul@multiplier+3,c
  1391  00098A  C032  F018         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  1392  00098E  C033  F019         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  1393  000992  C034  F01A         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  1394  000996  C035  F01B         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  1395  00099A  EC47  F005         	call	___lmul	;wreg free
  1396  00099E  C014  F020         	movff	?___lmul,___lldiv@dividend
  1397  0009A2  C015  F021         	movff	?___lmul+1,___lldiv@dividend+1
  1398  0009A6  C016  F022         	movff	?___lmul+2,___lldiv@dividend+2
  1399  0009AA  C017  F023         	movff	?___lmul+3,___lldiv@dividend+3
  1400  0009AE  C056  F024         	movff	_LapTimeTenthMilli,___lldiv@divisor
  1401  0009B2  C057  F025         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  1402  0009B6  6A26               	clrf	___lldiv@divisor+2,c
  1403  0009B8  6A27               	clrf	___lldiv@divisor+3,c
  1404  0009BA  EC6E  F004         	call	___lldiv	;wreg free
  1405  0009BE  C020  F02F         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  1406  0009C2  C021  F030         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  1407                           
  1408                           ;SpeedCalc.c: 124: return AvgSpeedKphMph;
  1409  0009C6  C02F  F02D         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  1410  0009CA  C030  F02E         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  1411  0009CE  0012               	return	
  1412  0009D0                     __end_of_GetAvgSpeed:
  1413                           	opt stack 0
  1414                           tosu	equ	0xFFF
  1415                           tosh	equ	0xFFE
  1416                           tosl	equ	0xFFD
  1417                           pclath	equ	0xFFA
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodh	equ	0xFF4
  1423                           prodl	equ	0xFF3
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postinc1	equ	0xFE6
  1427                           fsr1h	equ	0xFE2
  1428                           fsr1l	equ	0xFE1
  1429                           indf2	equ	0xFDF
  1430                           postinc2	equ	0xFDE
  1431                           fsr2h	equ	0xFDA
  1432                           fsr2l	equ	0xFD9
  1433                           status	equ	0xFD8
  1434                           
  1435 ;; *************** function ___lmul *****************
  1436 ;; Defined at:
  1437 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  multiplier      4   19[COMRAM] unsigned long 
  1440 ;;  multiplicand    4   23[COMRAM] unsigned long 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  product         4   27[COMRAM] unsigned long 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  4   19[COMRAM] unsigned long 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1452 ;;      Params:         8       0       0       0       0       0       0
  1453 ;;      Locals:         4       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0
  1455 ;;      Totals:        12       0       0       0       0       0       0
  1456 ;;Total ram usage:       12 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    4
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_GetAvgSpeed
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text11
  1467  000A8E                     __ptext11:
  1468                           	opt stack 0
  1469  000A8E                     ___lmul:
  1470                           	opt stack 22
  1471                           
  1472                           ;incstack = 0
  1473  000A8E  0E00               	movlw	0
  1474  000A90  6E1C               	movwf	___lmul@product,c
  1475  000A92  0E00               	movlw	0
  1476  000A94  6E1D               	movwf	___lmul@product+1,c
  1477  000A96  0E00               	movlw	0
  1478  000A98  6E1E               	movwf	___lmul@product+2,c
  1479  000A9A  0E00               	movlw	0
  1480  000A9C  6E1F               	movwf	___lmul@product+3,c
  1481  000A9E                     l1246:
  1482  000A9E  A014               	btfss	___lmul@multiplier,0,c
  1483  000AA0  D008               	goto	l1250
  1484  000AA2  5018               	movf	___lmul@multiplicand,w,c
  1485  000AA4  261C               	addwf	___lmul@product,f,c
  1486  000AA6  5019               	movf	___lmul@multiplicand+1,w,c
  1487  000AA8  221D               	addwfc	___lmul@product+1,f,c
  1488  000AAA  501A               	movf	___lmul@multiplicand+2,w,c
  1489  000AAC  221E               	addwfc	___lmul@product+2,f,c
  1490  000AAE  501B               	movf	___lmul@multiplicand+3,w,c
  1491  000AB0  221F               	addwfc	___lmul@product+3,f,c
  1492  000AB2                     l1250:
  1493  000AB2  90D8               	bcf	status,0,c
  1494  000AB4  3618               	rlcf	___lmul@multiplicand,f,c
  1495  000AB6  3619               	rlcf	___lmul@multiplicand+1,f,c
  1496  000AB8  361A               	rlcf	___lmul@multiplicand+2,f,c
  1497  000ABA  361B               	rlcf	___lmul@multiplicand+3,f,c
  1498  000ABC  90D8               	bcf	status,0,c
  1499  000ABE  3217               	rrcf	___lmul@multiplier+3,f,c
  1500  000AC0  3216               	rrcf	___lmul@multiplier+2,f,c
  1501  000AC2  3215               	rrcf	___lmul@multiplier+1,f,c
  1502  000AC4  3214               	rrcf	___lmul@multiplier,f,c
  1503  000AC6  5014               	movf	___lmul@multiplier,w,c
  1504  000AC8  1015               	iorwf	___lmul@multiplier+1,w,c
  1505  000ACA  1016               	iorwf	___lmul@multiplier+2,w,c
  1506  000ACC  1017               	iorwf	___lmul@multiplier+3,w,c
  1507  000ACE  A4D8               	btfss	status,2,c
  1508  000AD0  D7E6               	goto	l1246
  1509  000AD2  C01C  F014         	movff	___lmul@product,?___lmul
  1510  000AD6  C01D  F015         	movff	___lmul@product+1,?___lmul+1
  1511  000ADA  C01E  F016         	movff	___lmul@product+2,?___lmul+2
  1512  000ADE  C01F  F017         	movff	___lmul@product+3,?___lmul+3
  1513  000AE2  0012               	return		;funcret
  1514  000AE4                     __end_of___lmul:
  1515                           	opt stack 0
  1516                           tosu	equ	0xFFF
  1517                           tosh	equ	0xFFE
  1518                           tosl	equ	0xFFD
  1519                           pclath	equ	0xFFA
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           postinc1	equ	0xFE6
  1529                           fsr1h	equ	0xFE2
  1530                           fsr1l	equ	0xFE1
  1531                           indf2	equ	0xFDF
  1532                           postinc2	equ	0xFDE
  1533                           fsr2h	equ	0xFDA
  1534                           fsr2l	equ	0xFD9
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function ___lldiv *****************
  1538 ;; Defined at:
  1539 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  dividend        4   31[COMRAM] unsigned long 
  1542 ;;  divisor         4   35[COMRAM] unsigned long 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  quotient        4   39[COMRAM] unsigned long 
  1545 ;;  counter         1   43[COMRAM] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  4   31[COMRAM] unsigned long 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1555 ;;      Params:         8       0       0       0       0       0       0
  1556 ;;      Locals:         5       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0
  1558 ;;      Totals:        13       0       0       0       0       0       0
  1559 ;;Total ram usage:       13 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    4
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_SpeedCalcManage
  1566 ;;		_GetAvgSpeed
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text12
  1571  0008DC                     __ptext12:
  1572                           	opt stack 0
  1573  0008DC                     ___lldiv:
  1574                           	opt stack 23
  1575                           
  1576                           ;incstack = 0
  1577  0008DC  0E00               	movlw	0
  1578  0008DE  6E28               	movwf	___lldiv@quotient,c
  1579  0008E0  0E00               	movlw	0
  1580  0008E2  6E29               	movwf	___lldiv@quotient+1,c
  1581  0008E4  0E00               	movlw	0
  1582  0008E6  6E2A               	movwf	___lldiv@quotient+2,c
  1583  0008E8  0E00               	movlw	0
  1584  0008EA  6E2B               	movwf	___lldiv@quotient+3,c
  1585  0008EC  5024               	movf	___lldiv@divisor,w,c
  1586  0008EE  1025               	iorwf	___lldiv@divisor+1,w,c
  1587  0008F0  1026               	iorwf	___lldiv@divisor+2,w,c
  1588  0008F2  1027               	iorwf	___lldiv@divisor+3,w,c
  1589  0008F4  B4D8               	btfsc	status,2,c
  1590  0008F6  D02A               	goto	l642
  1591  0008F8  0E01               	movlw	1
  1592  0008FA  6E2C               	movwf	___lldiv@counter,c
  1593  0008FC  D006               	goto	l1262
  1594  0008FE                     l1260:
  1595  0008FE  90D8               	bcf	status,0,c
  1596  000900  3624               	rlcf	___lldiv@divisor,f,c
  1597  000902  3625               	rlcf	___lldiv@divisor+1,f,c
  1598  000904  3626               	rlcf	___lldiv@divisor+2,f,c
  1599  000906  3627               	rlcf	___lldiv@divisor+3,f,c
  1600  000908  2A2C               	incf	___lldiv@counter,f,c
  1601  00090A                     l1262:
  1602  00090A  AE27               	btfss	___lldiv@divisor+3,7,c
  1603  00090C  D7F8               	goto	l1260
  1604  00090E                     l1264:
  1605  00090E  90D8               	bcf	status,0,c
  1606  000910  3628               	rlcf	___lldiv@quotient,f,c
  1607  000912  3629               	rlcf	___lldiv@quotient+1,f,c
  1608  000914  362A               	rlcf	___lldiv@quotient+2,f,c
  1609  000916  362B               	rlcf	___lldiv@quotient+3,f,c
  1610  000918  5024               	movf	___lldiv@divisor,w,c
  1611  00091A  5C20               	subwf	___lldiv@dividend,w,c
  1612  00091C  5025               	movf	___lldiv@divisor+1,w,c
  1613  00091E  5821               	subwfb	___lldiv@dividend+1,w,c
  1614  000920  5026               	movf	___lldiv@divisor+2,w,c
  1615  000922  5822               	subwfb	___lldiv@dividend+2,w,c
  1616  000924  5027               	movf	___lldiv@divisor+3,w,c
  1617  000926  5823               	subwfb	___lldiv@dividend+3,w,c
  1618  000928  A0D8               	btfss	status,0,c
  1619  00092A  D009               	goto	l1272
  1620  00092C  5024               	movf	___lldiv@divisor,w,c
  1621  00092E  5E20               	subwf	___lldiv@dividend,f,c
  1622  000930  5025               	movf	___lldiv@divisor+1,w,c
  1623  000932  5A21               	subwfb	___lldiv@dividend+1,f,c
  1624  000934  5026               	movf	___lldiv@divisor+2,w,c
  1625  000936  5A22               	subwfb	___lldiv@dividend+2,f,c
  1626  000938  5027               	movf	___lldiv@divisor+3,w,c
  1627  00093A  5A23               	subwfb	___lldiv@dividend+3,f,c
  1628  00093C  8028               	bsf	___lldiv@quotient,0,c
  1629  00093E                     l1272:
  1630  00093E  90D8               	bcf	status,0,c
  1631  000940  3227               	rrcf	___lldiv@divisor+3,f,c
  1632  000942  3226               	rrcf	___lldiv@divisor+2,f,c
  1633  000944  3225               	rrcf	___lldiv@divisor+1,f,c
  1634  000946  3224               	rrcf	___lldiv@divisor,f,c
  1635  000948  2E2C               	decfsz	___lldiv@counter,f,c
  1636  00094A  D7E1               	goto	l1264
  1637  00094C                     l642:
  1638  00094C  C028  F020         	movff	___lldiv@quotient,?___lldiv
  1639  000950  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  1640  000954  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  1641  000958  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  1642  00095C  0012               	return		;funcret
  1643  00095E                     __end_of___lldiv:
  1644                           	opt stack 0
  1645                           tosu	equ	0xFFF
  1646                           tosh	equ	0xFFE
  1647                           tosl	equ	0xFFD
  1648                           pclath	equ	0xFFA
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           prodh	equ	0xFF4
  1654                           prodl	equ	0xFF3
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postinc1	equ	0xFE6
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           indf2	equ	0xFDF
  1661                           postinc2	equ	0xFDE
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _BCDsendNumber *****************
  1667 ;; Defined at:
  1668 ;;		line 25 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  Number          2   26[COMRAM] unsigned short 
  1671 ;;  DecimalPlace    1   28[COMRAM] unsigned char 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  Buffer          2   35[COMRAM] unsigned short 
  1674 ;;  Output          2   33[COMRAM] unsigned short 
  1675 ;;  Link            2   31[COMRAM] unsigned short 
  1676 ;;  LoopIndex       1   37[COMRAM] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1686 ;;      Params:         3       0       0       0       0       0       0
  1687 ;;      Locals:         7       0       0       0       0       0       0
  1688 ;;      Temps:          2       0       0       0       0       0       0
  1689 ;;      Totals:        12       0       0       0       0       0       0
  1690 ;;Total ram usage:       12 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    5
  1693 ;; This function calls:
  1694 ;;		___lwdiv
  1695 ;;		___wmul
  1696 ;; This function is called by:
  1697 ;;		_APP_MANAGE
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text13
  1702  00060E                     __ptext13:
  1703                           	opt stack 0
  1704  00060E                     _BCDsendNumber:
  1705                           	opt stack 22
  1706                           
  1707                           ;BCDdisplay.c: 27: unsigned short Link,Output,Buffer;
  1708                           ;BCDdisplay.c: 28: unsigned char LoopIndex;
  1709                           ;BCDdisplay.c: 31: Buffer = Number;
  1710                           
  1711                           ;incstack = 0
  1712  00060E  C01B  F024         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  1713  000612  C01C  F025         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  1714                           
  1715                           ;BCDdisplay.c: 32: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  1716  000616  0E00               	movlw	0
  1717  000618  6E26               	movwf	BCDsendNumber@LoopIndex,c
  1718  00061A                     l1318:
  1719  00061A  0E03               	movlw	3
  1720  00061C  6426               	cpfsgt	BCDsendNumber@LoopIndex,c
  1721  00061E  D001               	goto	l1322
  1722  000620  D05C               	goto	l1342
  1723  000622                     l1322:
  1724                           
  1725                           ;BCDdisplay.c: 33: {
  1726                           ;BCDdisplay.c: 34: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  1727  000622  5024               	movf	BCDsendNumber@Buffer,w,c
  1728  000624  1025               	iorwf	BCDsendNumber@Buffer+1,w,c
  1729  000626  A4D8               	btfss	status,2,c
  1730  000628  D004               	goto	l29
  1731  00062A  5026               	movf	BCDsendNumber@LoopIndex,w,c
  1732  00062C  5C1D               	subwf	BCDsendNumber@DecimalPlace,w,c
  1733  00062E  A0D8               	btfss	status,0,c
  1734  000630  D02D               	goto	l1332
  1735  000632                     l29:
  1736                           
  1737                           ;BCDdisplay.c: 35: {
  1738                           ;BCDdisplay.c: 36: Link = Buffer;
  1739  000632  C024  F020         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  1740  000636  C025  F021         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  1741                           
  1742                           ;BCDdisplay.c: 37: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  1743  00063A  C024  F014         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  1744  00063E  C025  F015         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  1745  000642  0E00               	movlw	0
  1746  000644  6E17               	movwf	___lwdiv@divisor+1,c
  1747  000646  0E0A               	movlw	10
  1748  000648  6E16               	movwf	___lwdiv@divisor,c
  1749  00064A  EC9C  F005         	call	___lwdiv	;wreg free
  1750  00064E  C014  F024         	movff	?___lwdiv,BCDsendNumber@Buffer
  1751  000652  C015  F025         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  1752                           
  1753                           ;BCDdisplay.c: 38: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  1754  000656  C024  F014         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  1755  00065A  C025  F015         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  1756  00065E  0E00               	movlw	0
  1757  000660  6E17               	movwf	___wmul@multiplicand+1,c
  1758  000662  0E0A               	movlw	10
  1759  000664  6E16               	movwf	___wmul@multiplicand,c
  1760  000666  EC88  F006         	call	___wmul	;wreg free
  1761  00066A  1E14               	comf	?___wmul,f,c
  1762  00066C  1E15               	comf	?___wmul+1,f,c
  1763  00066E  4A14               	infsnz	?___wmul,f,c
  1764  000670  2A15               	incf	?___wmul+1,f,c
  1765  000672  5020               	movf	BCDsendNumber@Link,w,c
  1766  000674  2414               	addwf	?___wmul,w,c
  1767  000676  6E22               	movwf	BCDsendNumber@Output,c
  1768  000678  5021               	movf	BCDsendNumber@Link+1,w,c
  1769  00067A  2015               	addwfc	?___wmul+1,w,c
  1770  00067C  6E23               	movwf	BCDsendNumber@Output+1,c
  1771                           
  1772                           ;BCDdisplay.c: 40: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  1773  00067E  0E01               	movlw	low _SevenSegmentMAP
  1774  000680  2422               	addwf	BCDsendNumber@Output,w,c
  1775  000682  6EF6               	movwf	tblptrl,c
  1776  000684  0E06               	movlw	high _SevenSegmentMAP
  1777  000686  2023               	addwfc	BCDsendNumber@Output+1,w,c
  1778  000688  6EF7               	movwf	tblptrh,c
  1779  00068A                     	if	0	;There are less than 3 active tblptr bytes
  1780  00068A  D008               	goto	L2
  1781  00068C                     l1332:
  1782                           
  1783                           ;BCDdisplay.c: 42: else if (LoopIndex <= DecimalPlace)
  1784  00068C  5026               	movf	BCDsendNumber@LoopIndex,w,c
  1785  00068E  5C1D               	subwf	BCDsendNumber@DecimalPlace,w,c
  1786  000690  A0D8               	btfss	status,0,c
  1787  000692  D015               	goto	l1336
  1788                           
  1789                           ;BCDdisplay.c: 43: {
  1790                           ;BCDdisplay.c: 44: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  1791  000694  0E01               	movlw	low _SevenSegmentMAP
  1792  000696  6EF6               	movwf	tblptrl,c
  1793  000698                     	if	1	;There is more than 1 active tblptr byte
  1794  000698  0E06               	movlw	high _SevenSegmentMAP
  1795  00069A  6EF7               	movwf	tblptrh,c
  1796  00069C                     	endif
  1797  00069C                     	if	0	;There are less than 3 active tblptr bytes
  1798  00069C                     L2:
  1799  00069C                     	endif
  1800  00069C  0008               	tblrd		*
  1801  00069E  50F5               	movf	tablat,w,c
  1802  0006A0  6E1E               	movwf	??_BCDsendNumber& (0+255),c
  1803  0006A2  6A1F               	clrf	(??_BCDsendNumber+1)& (0+255),c
  1804  0006A4  5026               	movf	BCDsendNumber@LoopIndex,w,c
  1805  0006A6  0D02               	mullw	2
  1806  0006A8  0E48               	movlw	low _BCDNumber
  1807  0006AA  24F3               	addwf	prodl,w,c
  1808  0006AC  6ED9               	movwf	fsr2l,c
  1809  0006AE  0E00               	movlw	high _BCDNumber
  1810  0006B0  20F4               	addwfc	prodh,w,c
  1811  0006B2  6EDA               	movwf	fsr2h,c
  1812  0006B4  C01E  FFDE         	movff	??_BCDsendNumber,postinc2
  1813  0006B8  C01F  FFDD         	movff	??_BCDsendNumber+1,postdec2
  1814                           
  1815                           ;BCDdisplay.c: 45: }
  1816  0006BC  D00C               	goto	l1338
  1817  0006BE                     l1336:
  1818                           
  1819                           ;BCDdisplay.c: 46: else
  1820                           ;BCDdisplay.c: 47: {
  1821                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = 0x0;
  1822  0006BE  5026               	movf	BCDsendNumber@LoopIndex,w,c
  1823  0006C0  0D02               	mullw	2
  1824  0006C2  0E48               	movlw	low _BCDNumber
  1825  0006C4  24F3               	addwf	prodl,w,c
  1826  0006C6  6ED9               	movwf	fsr2l,c
  1827  0006C8  0E00               	movlw	high _BCDNumber
  1828  0006CA  20F4               	addwfc	prodh,w,c
  1829  0006CC  6EDA               	movwf	fsr2h,c
  1830  0006CE  0E00               	movlw	0
  1831  0006D0  6EDE               	movwf	postinc2,c
  1832  0006D2  0E00               	movlw	0
  1833  0006D4  6EDD               	movwf	postdec2,c
  1834  0006D6                     l1338:
  1835  0006D6  2A26               	incf	BCDsendNumber@LoopIndex,f,c
  1836  0006D8  D7A0               	goto	l1318
  1837  0006DA                     l1342:
  1838                           
  1839                           ;BCDdisplay.c: 49: }
  1840                           ;BCDdisplay.c: 50: }
  1841                           ;BCDdisplay.c: 51: if(DecimalPlace != (unsigned char)0)
  1842  0006DA  501D               	movf	BCDsendNumber@DecimalPlace,w,c
  1843  0006DC  B4D8               	btfsc	status,2,c
  1844  0006DE  0012               	return	
  1845                           
  1846                           ;BCDdisplay.c: 52: {
  1847                           ;BCDdisplay.c: 53: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  1848  0006E0  501D               	movf	BCDsendNumber@DecimalPlace,w,c
  1849  0006E2  0D02               	mullw	2
  1850  0006E4  0E48               	movlw	low _BCDNumber
  1851  0006E6  24F3               	addwf	prodl,w,c
  1852  0006E8  6ED9               	movwf	fsr2l,c
  1853  0006EA  0E00               	movlw	high _BCDNumber
  1854  0006EC  20F4               	addwfc	prodh,w,c
  1855  0006EE  6EDA               	movwf	fsr2h,c
  1856  0006F0  0E0B               	movlw	low (_SevenSegmentMAP+10)
  1857  0006F2  6EF6               	movwf	tblptrl,c
  1858  0006F4  0E06               	movlw	high (_SevenSegmentMAP+10)
  1859  0006F6  6EF7               	movwf	tblptrh,c
  1860  0006F8                     	if	0	;tblptru may be non-zero
  1861  0006F8                     	endif
  1862  0006F8                     	if	0	;tblptru may be non-zero
  1863  0006F8                     	endif
  1864  0006F8  0008               	tblrd		*
  1865  0006FA  50F5               	movf	tablat,w,c
  1866  0006FC  12DE               	iorwf	postinc2,f,c
  1867  0006FE  0E00               	movlw	0
  1868  000700  12DD               	iorwf	postdec2,f,c
  1869  000702  0012               	return	
  1870  000704                     __end_of_BCDsendNumber:
  1871                           	opt stack 0
  1872                           tosu	equ	0xFFF
  1873                           tosh	equ	0xFFE
  1874                           tosl	equ	0xFFD
  1875                           pclath	equ	0xFFA
  1876                           tblptru	equ	0xFF8
  1877                           tblptrh	equ	0xFF7
  1878                           tblptrl	equ	0xFF6
  1879                           tablat	equ	0xFF5
  1880                           prodh	equ	0xFF4
  1881                           prodl	equ	0xFF3
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postinc1	equ	0xFE6
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           indf2	equ	0xFDF
  1888                           postinc2	equ	0xFDE
  1889                           postdec2	equ	0xFDD
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function ___wmul *****************
  1895 ;; Defined at:
  1896 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  multiplier      2   19[COMRAM] unsigned int 
  1899 ;;  multiplicand    2   21[COMRAM] unsigned int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  product         2   23[COMRAM] unsigned int 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2   19[COMRAM] unsigned int 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0, prodl, prodh
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1911 ;;      Params:         4       0       0       0       0       0       0
  1912 ;;      Locals:         2       0       0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0
  1914 ;;      Totals:         6       0       0       0       0       0       0
  1915 ;;Total ram usage:        6 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    4
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_APP_MANAGE
  1922 ;;		_BCDsendNumber
  1923 ;;		_SpeedCalcManage
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text14
  1928  000D10                     __ptext14:
  1929                           	opt stack 0
  1930  000D10                     ___wmul:
  1931                           	opt stack 23
  1932                           
  1933                           ;incstack = 0
  1934  000D10  5014               	movf	___wmul@multiplier,w,c
  1935  000D12  0216               	mulwf	___wmul@multiplicand,c
  1936  000D14  CFF3 F018          	movff	prodl,___wmul@product
  1937  000D18  CFF4 F019          	movff	prodh,___wmul@product+1
  1938  000D1C  5014               	movf	___wmul@multiplier,w,c
  1939  000D1E  0217               	mulwf	___wmul@multiplicand+1,c
  1940  000D20  50F3               	movf	prodl,w,c
  1941  000D22  2619               	addwf	___wmul@product+1,f,c
  1942  000D24  5015               	movf	___wmul@multiplier+1,w,c
  1943  000D26  0216               	mulwf	___wmul@multiplicand,c
  1944  000D28  50F3               	movf	prodl,w,c
  1945  000D2A  2619               	addwf	___wmul@product+1,f,c
  1946  000D2C  C018  F014         	movff	___wmul@product,?___wmul
  1947  000D30  C019  F015         	movff	___wmul@product+1,?___wmul+1
  1948  000D34  0012               	return	
  1949  000D36                     __end_of___wmul:
  1950                           	opt stack 0
  1951                           tosu	equ	0xFFF
  1952                           tosh	equ	0xFFE
  1953                           tosl	equ	0xFFD
  1954                           pclath	equ	0xFFA
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           postinc1	equ	0xFE6
  1964                           fsr1h	equ	0xFE2
  1965                           fsr1l	equ	0xFE1
  1966                           indf2	equ	0xFDF
  1967                           postinc2	equ	0xFDE
  1968                           postdec2	equ	0xFDD
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function ___lwdiv *****************
  1974 ;; Defined at:
  1975 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  dividend        2   19[COMRAM] unsigned int 
  1978 ;;  divisor         2   21[COMRAM] unsigned int 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  quotient        2   23[COMRAM] unsigned int 
  1981 ;;  counter         1   25[COMRAM] unsigned char 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  2   19[COMRAM] unsigned int 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1991 ;;      Params:         4       0       0       0       0       0       0
  1992 ;;      Locals:         3       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0
  1994 ;;      Totals:         7       0       0       0       0       0       0
  1995 ;;Total ram usage:        7 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    4
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_BCDsendNumber
  2002 ;;		_SpeedCalcManage
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text15
  2007  000B38                     __ptext15:
  2008                           	opt stack 0
  2009  000B38                     ___lwdiv:
  2010                           	opt stack 23
  2011                           
  2012                           ;incstack = 0
  2013  000B38  0E00               	movlw	0
  2014  000B3A  6E19               	movwf	___lwdiv@quotient+1,c
  2015  000B3C  0E00               	movlw	0
  2016  000B3E  6E18               	movwf	___lwdiv@quotient,c
  2017  000B40  5016               	movf	___lwdiv@divisor,w,c
  2018  000B42  1017               	iorwf	___lwdiv@divisor+1,w,c
  2019  000B44  B4D8               	btfsc	status,2,c
  2020  000B46  D01C               	goto	l695
  2021  000B48  0E01               	movlw	1
  2022  000B4A  6E1A               	movwf	___lwdiv@counter,c
  2023  000B4C  D004               	goto	l1284
  2024  000B4E                     l1282:
  2025  000B4E  90D8               	bcf	status,0,c
  2026  000B50  3616               	rlcf	___lwdiv@divisor,f,c
  2027  000B52  3617               	rlcf	___lwdiv@divisor+1,f,c
  2028  000B54  2A1A               	incf	___lwdiv@counter,f,c
  2029  000B56                     l1284:
  2030  000B56  AE17               	btfss	___lwdiv@divisor+1,7,c
  2031  000B58  D7FA               	goto	l1282
  2032  000B5A                     l1286:
  2033  000B5A  90D8               	bcf	status,0,c
  2034  000B5C  3618               	rlcf	___lwdiv@quotient,f,c
  2035  000B5E  3619               	rlcf	___lwdiv@quotient+1,f,c
  2036  000B60  5016               	movf	___lwdiv@divisor,w,c
  2037  000B62  5C14               	subwf	___lwdiv@dividend,w,c
  2038  000B64  5017               	movf	___lwdiv@divisor+1,w,c
  2039  000B66  5815               	subwfb	___lwdiv@dividend+1,w,c
  2040  000B68  A0D8               	btfss	status,0,c
  2041  000B6A  D005               	goto	l1294
  2042  000B6C  5016               	movf	___lwdiv@divisor,w,c
  2043  000B6E  5E14               	subwf	___lwdiv@dividend,f,c
  2044  000B70  5017               	movf	___lwdiv@divisor+1,w,c
  2045  000B72  5A15               	subwfb	___lwdiv@dividend+1,f,c
  2046  000B74  8018               	bsf	___lwdiv@quotient,0,c
  2047  000B76                     l1294:
  2048  000B76  90D8               	bcf	status,0,c
  2049  000B78  3217               	rrcf	___lwdiv@divisor+1,f,c
  2050  000B7A  3216               	rrcf	___lwdiv@divisor,f,c
  2051  000B7C  2E1A               	decfsz	___lwdiv@counter,f,c
  2052  000B7E  D7ED               	goto	l1286
  2053  000B80                     l695:
  2054  000B80  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
  2055  000B84  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2056  000B88  0012               	return		;funcret
  2057  000B8A                     __end_of___lwdiv:
  2058                           	opt stack 0
  2059                           tosu	equ	0xFFF
  2060                           tosh	equ	0xFFE
  2061                           tosl	equ	0xFFD
  2062                           pclath	equ	0xFFA
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           postinc1	equ	0xFE6
  2072                           fsr1h	equ	0xFE2
  2073                           fsr1l	equ	0xFE1
  2074                           indf2	equ	0xFDF
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _BCDManage7segment *****************
  2082 ;; Defined at:
  2083 ;;		line 57 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         0       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0
  2099 ;;      Temps:          3       0       0       0       0       0       0
  2100 ;;      Totals:         3       0       0       0       0       0       0
  2101 ;;Total ram usage:        3 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    5
  2104 ;; This function calls:
  2105 ;;		_HWI_4Digit_WRITE
  2106 ;;		_HWI_8Digit_WRITE
  2107 ;; This function is called by:
  2108 ;;		_DisplayAlphaNumeric
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text16
  2113  000B8A                     __ptext16:
  2114                           	opt stack 0
  2115  000B8A                     _BCDManage7segment:
  2116                           	opt stack 23
  2117                           
  2118                           ;BCDdisplay.c: 59: static unsigned char DigitIndex = (unsigned char)0;
  2119                           ;BCDdisplay.c: 62: HWI_4Digit_WRITE(0,(~((unsigned char) 0x8 >> DigitIndex)));
  2120                           
  2121                           ;incstack = 0
  2122  000B8A  C05F  F016         	movff	BCDManage7segment@DigitIndex,??_BCDManage7segment
  2123  000B8E  0E08               	movlw	8
  2124  000B90  6E17               	movwf	(??_BCDManage7segment+1)& (0+255),c
  2125  000B92  0E00               	movlw	0
  2126  000B94  6E18               	movwf	(??_BCDManage7segment+2)& (0+255),c
  2127  000B96  2A16               	incf	??_BCDManage7segment,f,c
  2128  000B98  D003               	goto	u524
  2129  000B9A                     u525:
  2130  000B9A  3418               	rlcf	??_BCDManage7segment+2,w,c
  2131  000B9C  3218               	rrcf	??_BCDManage7segment+2,f,c
  2132  000B9E  3217               	rrcf	??_BCDManage7segment+1,f,c
  2133  000BA0                     u524:
  2134  000BA0  2E16               	decfsz	??_BCDManage7segment,f,c
  2135  000BA2  D7FB               	goto	u525
  2136  000BA4  5017               	movf	??_BCDManage7segment+1,w,c
  2137  000BA6  0AFF               	xorlw	255
  2138  000BA8  6E14               	movwf	HWI_4Digit_WRITE@value,c
  2139  000BAA  0E00               	movlw	0
  2140  000BAC  EC43  F006         	call	_HWI_4Digit_WRITE
  2141                           
  2142                           ;BCDdisplay.c: 63: HWI_8Digit_WRITE(1,BCDNumber[DigitIndex]);
  2143  000BB0  505F               	movf	BCDManage7segment@DigitIndex,w,c
  2144  000BB2  0D02               	mullw	2
  2145  000BB4  0E48               	movlw	low _BCDNumber
  2146  000BB6  24F3               	addwf	prodl,w,c
  2147  000BB8  6ED9               	movwf	fsr2l,c
  2148  000BBA  0E00               	movlw	high _BCDNumber
  2149  000BBC  20F4               	addwfc	prodh,w,c
  2150  000BBE  6EDA               	movwf	fsr2h,c
  2151  000BC0  50DF               	movf	indf2,w,c
  2152  000BC2  6E14               	movwf	HWI_8Digit_WRITE@value,c
  2153  000BC4  0E01               	movlw	1
  2154  000BC6  EC9B  F006         	call	_HWI_8Digit_WRITE
  2155                           
  2156                           ;BCDdisplay.c: 70: DigitIndex ++;
  2157  000BCA  2A5F               	incf	BCDManage7segment@DigitIndex,f,c
  2158                           
  2159                           ;BCDdisplay.c: 71: if(DigitIndex == 4)
  2160  000BCC  0E04               	movlw	4
  2161  000BCE  185F               	xorwf	BCDManage7segment@DigitIndex,w,c
  2162  000BD0  A4D8               	btfss	status,2,c
  2163  000BD2  0012               	return	
  2164                           
  2165                           ;BCDdisplay.c: 72: {
  2166                           ;BCDdisplay.c: 73: DigitIndex = (unsigned char)0;
  2167  000BD4  0E00               	movlw	0
  2168  000BD6  6E5F               	movwf	BCDManage7segment@DigitIndex,c
  2169  000BD8  0012               	return	
  2170  000BDA                     __end_of_BCDManage7segment:
  2171                           	opt stack 0
  2172                           tosu	equ	0xFFF
  2173                           tosh	equ	0xFFE
  2174                           tosl	equ	0xFFD
  2175                           pclath	equ	0xFFA
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postinc1	equ	0xFE6
  2185                           fsr1h	equ	0xFE2
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           postinc2	equ	0xFDE
  2189                           postdec2	equ	0xFDD
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _HWI_8Digit_WRITE *****************
  2195 ;; Defined at:
  2196 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  port            1    wreg     unsigned char 
  2199 ;;  value           1   19[COMRAM] unsigned char 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  port            1   20[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      void 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2211 ;;      Params:         1       0       0       0       0       0       0
  2212 ;;      Locals:         1       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0
  2214 ;;      Totals:         2       0       0       0       0       0       0
  2215 ;;Total ram usage:        2 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    4
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_BCDManage7segment
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text17
  2226  000D36                     __ptext17:
  2227                           	opt stack 0
  2228  000D36                     _HWI_8Digit_WRITE:
  2229                           	opt stack 23
  2230                           
  2231                           ;incstack = 0
  2232                           ;HWI_8Digit_WRITE@port stored from wreg
  2233  000D36  6E15               	movwf	HWI_8Digit_WRITE@port,c
  2234                           
  2235                           ;HWI_DIGITAL.c: 43: switch (port)
  2236  000D38  D009               	goto	l1358
  2237  000D3A                     l166:
  2238                           
  2239                           ;HWI_DIGITAL.c: 46: PORTC = value;
  2240  000D3A  C014  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  2241                           
  2242                           ;HWI_DIGITAL.c: 47: break;
  2243  000D3E  0012               	return	
  2244  000D40                     l168:
  2245                           
  2246                           ;HWI_DIGITAL.c: 49: PORTD = value;
  2247  000D40  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2248                           
  2249                           ;HWI_DIGITAL.c: 50: break;
  2250  000D44  0012               	return	
  2251  000D46                     l169:
  2252                           
  2253                           ;HWI_DIGITAL.c: 52: PORTD = value;
  2254  000D46  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2255                           
  2256                           ;HWI_DIGITAL.c: 53: }
  2257  000D4A  0012               	return	
  2258  000D4C                     l1358:
  2259  000D4C  5015               	movf	HWI_8Digit_WRITE@port,w,c
  2260                           
  2261                           ; Switch size 1, requested type "space"
  2262                           ; Number of cases is 2, Range of values is 0 to 1
  2263                           ; switch strategies available:
  2264                           ; Name         Instructions Cycles
  2265                           ; simple_byte            7     4 (average)
  2266                           ;	Chosen strategy is simple_byte
  2267  000D4E  0A00               	xorlw	0	; case 0
  2268  000D50  B4D8               	btfsc	status,2,c
  2269  000D52  D7F3               	goto	l166
  2270  000D54  0A01               	xorlw	1	; case 1
  2271  000D56  B4D8               	btfsc	status,2,c
  2272  000D58  D7F3               	goto	l168
  2273  000D5A  D7F5               	goto	l169
  2274  000D5C                     __end_of_HWI_8Digit_WRITE:
  2275                           	opt stack 0
  2276                           tosu	equ	0xFFF
  2277                           tosh	equ	0xFFE
  2278                           tosl	equ	0xFFD
  2279                           pclath	equ	0xFFA
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           prodh	equ	0xFF4
  2285                           prodl	equ	0xFF3
  2286                           postinc0	equ	0xFEE
  2287                           wreg	equ	0xFE8
  2288                           postinc1	equ	0xFE6
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _HWI_4Digit_WRITE *****************
  2299 ;; Defined at:
  2300 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;  port            1    wreg     unsigned char 
  2303 ;;  value           1   19[COMRAM] unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  port            1   20[COMRAM] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2315 ;;      Params:         1       0       0       0       0       0       0
  2316 ;;      Locals:         1       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0
  2318 ;;      Totals:         2       0       0       0       0       0       0
  2319 ;;Total ram usage:        2 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    4
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_BCDManage7segment
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text18
  2330  000C86                     __ptext18:
  2331                           	opt stack 0
  2332  000C86                     _HWI_4Digit_WRITE:
  2333                           	opt stack 23
  2334                           
  2335                           ;incstack = 0
  2336                           ;HWI_4Digit_WRITE@port stored from wreg
  2337  000C86  6E15               	movwf	HWI_4Digit_WRITE@port,c
  2338                           
  2339                           ;HWI_DIGITAL.c: 10: switch (port)
  2340  000C88  D00F               	goto	l1354
  2341  000C8A                     l1348:
  2342                           
  2343                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  2344  000C8A  508B               	movf	3979,w,c	;volatile
  2345  000C8C  0BF0               	andlw	240
  2346  000C8E  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  2347  000C90  6E82               	movwf	3970,c	;volatile
  2348                           
  2349                           ;HWI_DIGITAL.c: 14: break;
  2350  000C92  0012               	return	
  2351  000C94                     l1350:
  2352                           
  2353                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  2354  000C94  508C               	movf	3980,w,c	;volatile
  2355  000C96  0BF0               	andlw	240
  2356  000C98  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  2357  000C9A  6E83               	movwf	3971,c	;volatile
  2358                           
  2359                           ;HWI_DIGITAL.c: 17: break;
  2360  000C9C  0012               	return	
  2361  000C9E                     l1352:
  2362                           
  2363                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  2364  000C9E  508C               	movf	3980,w,c	;volatile
  2365  000CA0  0BF0               	andlw	240
  2366  000CA2  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  2367  000CA4  6E83               	movwf	3971,c	;volatile
  2368                           
  2369                           ;HWI_DIGITAL.c: 20: }
  2370  000CA6  0012               	return	
  2371  000CA8                     l1354:
  2372  000CA8  5015               	movf	HWI_4Digit_WRITE@port,w,c
  2373                           
  2374                           ; Switch size 1, requested type "space"
  2375                           ; Number of cases is 2, Range of values is 0 to 1
  2376                           ; switch strategies available:
  2377                           ; Name         Instructions Cycles
  2378                           ; simple_byte            7     4 (average)
  2379                           ;	Chosen strategy is simple_byte
  2380  000CAA  0A00               	xorlw	0	; case 0
  2381  000CAC  B4D8               	btfsc	status,2,c
  2382  000CAE  D7ED               	goto	l1348
  2383  000CB0  0A01               	xorlw	1	; case 1
  2384  000CB2  B4D8               	btfsc	status,2,c
  2385  000CB4  D7EF               	goto	l1350
  2386  000CB6  D7F3               	goto	l1352
  2387  000CB8                     __end_of_HWI_4Digit_WRITE:
  2388                           	opt stack 0
  2389                           tosu	equ	0xFFF
  2390                           tosh	equ	0xFFE
  2391                           tosl	equ	0xFFD
  2392                           pclath	equ	0xFFA
  2393                           tblptru	equ	0xFF8
  2394                           tblptrh	equ	0xFF7
  2395                           tblptrl	equ	0xFF6
  2396                           tablat	equ	0xFF5
  2397                           prodh	equ	0xFF4
  2398                           prodl	equ	0xFF3
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           postinc1	equ	0xFE6
  2402                           fsr1h	equ	0xFE2
  2403                           fsr1l	equ	0xFE1
  2404                           indf2	equ	0xFDF
  2405                           postinc2	equ	0xFDE
  2406                           postdec2	equ	0xFDD
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  2412 ;; Defined at:
  2413 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2427 ;;      Params:         0       0       0       0       0       0       0
  2428 ;;      Locals:         0       0       0       0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0
  2430 ;;      Totals:         0       0       0       0       0       0       0
  2431 ;;Total ram usage:        0 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    4
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_main
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text19
  2442  000BDA                     __ptext19:
  2443                           	opt stack 0
  2444  000BDA                     _HWI_INTERRUPTS_INTITALIZE:
  2445                           	opt stack 26
  2446                           
  2447                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  2448                           
  2449                           ;incstack = 0
  2450  000BDA  8093               	bsf	3987,0,c	;volatile
  2451                           
  2452                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  2453  000BDC  8293               	bsf	3987,1,c	;volatile
  2454                           
  2455                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  2456  000BDE  0EF0               	movlw	240
  2457  000BE0  6EF2               	movwf	intcon,c	;volatile
  2458                           
  2459                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  2460  000BE2  0E08               	movlw	8
  2461  000BE4  6EF0               	movwf	intcon3,c	;volatile
  2462                           
  2463                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  2464  000BE6  0ED1               	movlw	209
  2465  000BE8  6ED5               	movwf	4053,c	;volatile
  2466                           
  2467                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  2468  000BEA  0E85               	movlw	133
  2469  000BEC  6ECD               	movwf	4045,c	;volatile
  2470                           
  2471                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  2472  000BEE  0E9D               	movlw	157
  2473  000BF0  6EB1               	movwf	4017,c	;volatile
  2474                           
  2475                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  2476  000BF2  8CF1               	bsf	intcon2,6,c	;volatile
  2477                           
  2478                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  2479  000BF4  8AF1               	bsf	intcon2,5,c	;volatile
  2480                           
  2481                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  2482  000BF6  94F2               	bcf	intcon,2,c	;volatile
  2483                           
  2484                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  2485  000BF8  8AF2               	bsf	intcon,5,c	;volatile
  2486                           
  2487                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  2488  000BFA  909E               	bcf	3998,0,c	;volatile
  2489                           
  2490                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  2491  000BFC  809D               	bsf	3997,0,c	;volatile
  2492                           
  2493                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  2494  000BFE  92A1               	bcf	4001,1,c	;volatile
  2495                           
  2496                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  2497  000C00  82A0               	bsf	4000,1,c	;volatile
  2498                           
  2499                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  2500  000C02  0E13               	movlw	19
  2501  000C04  6ED6               	movwf	4054,c	;volatile
  2502                           
  2503                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  2504  000C06  0E00               	movlw	0
  2505  000C08  6ECF               	movwf	4047,c	;volatile
  2506  000C0A  0E00               	movlw	0
  2507  000C0C  6ECE               	movwf	4046,c	;volatile
  2508                           
  2509                           ;HWI_Interrupts.c: 47: TMR3L=0;
  2510  000C0E  0E00               	movlw	0
  2511  000C10  6EB2               	movwf	4018,c	;volatile
  2512                           
  2513                           ;HWI_Interrupts.c: 48: TMR3H=0;
  2514  000C12  0E00               	movlw	0
  2515  000C14  6EB3               	movwf	4019,c	;volatile
  2516  000C16  0012               	return		;funcret
  2517  000C18                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  2518                           	opt stack 0
  2519                           tosu	equ	0xFFF
  2520                           tosh	equ	0xFFE
  2521                           tosl	equ	0xFFD
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon2	equ	0xFF1
  2531                           intcon3	equ	0xFF0
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           postinc1	equ	0xFE6
  2535                           fsr1h	equ	0xFE2
  2536                           fsr1l	equ	0xFE1
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  2545 ;; Defined at:
  2546 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2560 ;;      Params:         0       0       0       0       0       0       0
  2561 ;;      Locals:         0       0       0       0       0       0       0
  2562 ;;      Temps:          0       0       0       0       0       0       0
  2563 ;;      Totals:         0       0       0       0       0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    4
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text20
  2575  000D84                     __ptext20:
  2576                           	opt stack 0
  2577  000D84                     _HWI_DIGITAL_INITIALIZE:
  2578                           	opt stack 26
  2579                           
  2580                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  2581                           
  2582                           ;incstack = 0
  2583  000D84  0E00               	movlw	0
  2584  000D86  6E95               	movwf	3989,c	;volatile
  2585                           
  2586                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  2587  000D88  0E00               	movlw	0
  2588  000D8A  6E83               	movwf	3971,c	;volatile
  2589                           
  2590                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  2591  000D8C  0E00               	movlw	0
  2592  000D8E  6E94               	movwf	3988,c	;volatile
  2593  000D90  0012               	return		;funcret
  2594  000D92                     __end_of_HWI_DIGITAL_INITIALIZE:
  2595                           	opt stack 0
  2596                           tosu	equ	0xFFF
  2597                           tosh	equ	0xFFE
  2598                           tosl	equ	0xFFD
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           intcon3	equ	0xFF0
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           postinc1	equ	0xFE6
  2612                           fsr1h	equ	0xFE2
  2613                           fsr1l	equ	0xFE1
  2614                           indf2	equ	0xFDF
  2615                           postinc2	equ	0xFDE
  2616                           postdec2	equ	0xFDD
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _CreateTask *****************
  2622 ;; Defined at:
  2623 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  2626 ;;		 -> DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  2627 ;;  TaskId          1   21[COMRAM] unsigned char 
  2628 ;;  Period          1   22[COMRAM] unsigned char 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2640 ;;      Params:         4       0       0       0       0       0       0
  2641 ;;      Locals:         0       0       0       0       0       0       0
  2642 ;;      Temps:          0       0       0       0       0       0       0
  2643 ;;      Totals:         4       0       0       0       0       0       0
  2644 ;;Total ram usage:        4 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    4
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text21
  2655  000A36                     __ptext21:
  2656                           	opt stack 0
  2657  000A36                     _CreateTask:
  2658                           	opt stack 26
  2659                           
  2660                           ;Scheduler.c: 8: if(TaskId < 3)
  2661                           
  2662                           ;incstack = 0
  2663  000A36  0E03               	movlw	3
  2664  000A38  6016               	cpfslt	CreateTask@TaskId,c
  2665  000A3A  0012               	return	
  2666                           
  2667                           ;Scheduler.c: 9: {
  2668                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  2669  000A3C  5016               	movf	CreateTask@TaskId,w,c
  2670  000A3E  0D04               	mullw	4
  2671  000A40  0E3C               	movlw	low _ArrayTask
  2672  000A42  24F3               	addwf	prodl,w,c
  2673  000A44  6ED9               	movwf	fsr2l,c
  2674  000A46  0E00               	movlw	high _ArrayTask
  2675  000A48  20F4               	addwfc	prodh,w,c
  2676  000A4A  6EDA               	movwf	fsr2h,c
  2677  000A4C  C014  FFDE         	movff	CreateTask@MangeFunction,postinc2
  2678  000A50  C015  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  2679                           
  2680                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  2681  000A54  5016               	movf	CreateTask@TaskId,w,c
  2682  000A56  0D04               	mullw	4
  2683  000A58  0E02               	movlw	2
  2684  000A5A  26F3               	addwf	prodl,f,c
  2685  000A5C  0E00               	movlw	0
  2686  000A5E  22F4               	addwfc	prodh,f,c
  2687  000A60  0E3C               	movlw	low _ArrayTask
  2688  000A62  24F3               	addwf	prodl,w,c
  2689  000A64  6ED9               	movwf	fsr2l,c
  2690  000A66  0E00               	movlw	high _ArrayTask
  2691  000A68  20F4               	addwfc	prodh,w,c
  2692  000A6A  6EDA               	movwf	fsr2h,c
  2693  000A6C  C017  FFDF         	movff	CreateTask@Period,indf2
  2694                           
  2695                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  2696  000A70  5016               	movf	CreateTask@TaskId,w,c
  2697  000A72  0D04               	mullw	4
  2698  000A74  0E03               	movlw	3
  2699  000A76  26F3               	addwf	prodl,f,c
  2700  000A78  0E00               	movlw	0
  2701  000A7A  22F4               	addwfc	prodh,f,c
  2702  000A7C  0E3C               	movlw	low _ArrayTask
  2703  000A7E  24F3               	addwf	prodl,w,c
  2704  000A80  6ED9               	movwf	fsr2l,c
  2705  000A82  0E00               	movlw	high _ArrayTask
  2706  000A84  20F4               	addwfc	prodh,w,c
  2707  000A86  6EDA               	movwf	fsr2h,c
  2708  000A88  0E00               	movlw	0
  2709  000A8A  6EDF               	movwf	indf2,c
  2710  000A8C  0012               	return	
  2711  000A8E                     __end_of_CreateTask:
  2712                           	opt stack 0
  2713                           tosu	equ	0xFFF
  2714                           tosh	equ	0xFFE
  2715                           tosl	equ	0xFFD
  2716                           pclath	equ	0xFFA
  2717                           tblptru	equ	0xFF8
  2718                           tblptrh	equ	0xFF7
  2719                           tblptrl	equ	0xFF6
  2720                           tablat	equ	0xFF5
  2721                           prodh	equ	0xFF4
  2722                           prodl	equ	0xFF3
  2723                           intcon	equ	0xFF2
  2724                           intcon2	equ	0xFF1
  2725                           intcon3	equ	0xFF0
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           postinc1	equ	0xFE6
  2729                           fsr1h	equ	0xFE2
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _APP_INITIALIZE *****************
  2739 ;; Defined at:
  2740 ;;		line 10 in file "../../../../Common/App/APP.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		None
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       0       0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    4
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text22
  2769  000DCE                     __ptext22:
  2770                           	opt stack 0
  2771  000DCE                     _APP_INITIALIZE:
  2772                           	opt stack 26
  2773                           
  2774                           ;incstack = 0
  2775  000DCE  0012               	return		;funcret
  2776  000DD0                     __end_of_APP_INITIALIZE:
  2777                           	opt stack 0
  2778                           tosu	equ	0xFFF
  2779                           tosh	equ	0xFFE
  2780                           tosl	equ	0xFFD
  2781                           pclath	equ	0xFFA
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           intcon2	equ	0xFF1
  2790                           intcon3	equ	0xFF0
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           postinc1	equ	0xFE6
  2794                           fsr1h	equ	0xFE2
  2795                           fsr1l	equ	0xFE1
  2796                           indf2	equ	0xFDF
  2797                           postinc2	equ	0xFDE
  2798                           postdec2	equ	0xFDD
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _ISR *****************
  2804 ;; Defined at:
  2805 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2819 ;;      Params:         0       0       0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0
  2821 ;;      Temps:         14       0       0       0       0       0       0
  2822 ;;      Totals:        14       0       0       0       0       0       0
  2823 ;;Total ram usage:       14 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    3
  2826 ;; This function calls:
  2827 ;;		_APP_ISR1
  2828 ;;		_APP_ISR2
  2829 ;;		_APP_ISR3
  2830 ;;		_SchedulerTick
  2831 ;; This function is called by:
  2832 ;;		Interrupt level 2
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	intcode
  2837  000008                     __pintcode:
  2838                           	opt stack 0
  2839  000008                     _ISR:
  2840                           	opt stack 22
  2841                           
  2842                           ;incstack = 0
  2843  000008  8262               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2844  00000A  ED82  F003         	call	int_func,f	;refresh shadow registers
  2845                           tosu	equ	0xFFF
  2846                           tosh	equ	0xFFE
  2847                           tosl	equ	0xFFD
  2848                           pclath	equ	0xFFA
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           intcon	equ	0xFF2
  2856                           intcon2	equ	0xFF1
  2857                           intcon3	equ	0xFF0
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postinc1	equ	0xFE6
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870                           	psect	intcode_body
  2871  000704                     __pintcode_body:
  2872                           	opt stack 22
  2873  000704                     int_func:
  2874                           	opt stack 22
  2875  000704  0006               	pop		; remove dummy address from shadow register refresh
  2876  000706  CFFA F006          	movff	pclath,??_ISR
  2877  00070A  CFFB F007          	movff	pclatu,??_ISR+1
  2878  00070E  CFE9 F008          	movff	fsr0l,??_ISR+2
  2879  000712  CFEA F009          	movff	fsr0h,??_ISR+3
  2880  000716  CFE1 F00A          	movff	fsr1l,??_ISR+4
  2881  00071A  CFE2 F00B          	movff	fsr1h,??_ISR+5
  2882  00071E  CFD9 F00C          	movff	fsr2l,??_ISR+6
  2883  000722  CFDA F00D          	movff	fsr2h,??_ISR+7
  2884  000726  CFF3 F00E          	movff	prodl,??_ISR+8
  2885  00072A  CFF4 F00F          	movff	prodh,??_ISR+9
  2886  00072E  CFF6 F010          	movff	tblptrl,??_ISR+10
  2887  000732  CFF7 F011          	movff	tblptrh,??_ISR+11
  2888  000736  CFF8 F012          	movff	tblptru,??_ISR+12
  2889  00073A  CFF5 F013          	movff	tablat,??_ISR+13
  2890                           
  2891                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  2892  00073E  A4F2               	btfss	intcon,2,c	;volatile
  2893  000740  D005               	goto	i2l1454
  2894                           
  2895                           ;HWI_Interrupts.c: 55: {
  2896                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  2897  000742  94F2               	bcf	intcon,2,c	;volatile
  2898                           
  2899                           ;HWI_Interrupts.c: 57: TMR0L=18;
  2900  000744  0E12               	movlw	18
  2901  000746  6ED6               	movwf	4054,c	;volatile
  2902                           
  2903                           ;HWI_Interrupts.c: 58: SchedulerTick();
  2904  000748  EC73  F006         	call	_SchedulerTick	;wreg free
  2905  00074C                     i2l1454:
  2906                           
  2907                           ;HWI_Interrupts.c: 59: }
  2908                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  2909  00074C  A2A1               	btfss	4001,1,c	;volatile
  2910  00074E  D005               	goto	i2l1460
  2911                           
  2912                           ;HWI_Interrupts.c: 61: {
  2913                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  2914  000750  92A1               	bcf	4001,1,c	;volatile
  2915                           
  2916                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  2917  000752  0EEF               	movlw	239
  2918  000754  6EB3               	movwf	4019,c	;volatile
  2919                           
  2920                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  2921  000756  0E00               	movlw	0
  2922  000758  6EB2               	movwf	4018,c	;volatile
  2923  00075A                     i2l1460:
  2924                           
  2925                           ;HWI_Interrupts.c: 65: }
  2926                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  2927  00075A  A09E               	btfss	3998,0,c	;volatile
  2928  00075C  D007               	goto	i2l1468
  2929                           
  2930                           ;HWI_Interrupts.c: 67: {
  2931                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  2932  00075E  909E               	bcf	3998,0,c	;volatile
  2933                           
  2934                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  2935  000760  0E00               	movlw	0
  2936  000762  6ECF               	movwf	4047,c	;volatile
  2937  000764  0E00               	movlw	0
  2938  000766  6ECE               	movwf	4046,c	;volatile
  2939                           
  2940                           ;HWI_Interrupts.c: 70: APP_ISR3();
  2941  000768  ECDC  F006         	call	_APP_ISR3	;wreg free
  2942  00076C                     i2l1468:
  2943                           
  2944                           ;HWI_Interrupts.c: 71: }
  2945                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  2946  00076C  B29E               	btfsc	3998,1,c	;volatile
  2947                           
  2948                           ;HWI_Interrupts.c: 73: {
  2949                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  2950  00076E  929E               	bcf	3998,1,c	;volatile
  2951                           
  2952                           ;HWI_Interrupts.c: 76: }
  2953                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  2954  000770  A2F2               	btfss	intcon,1,c	;volatile
  2955  000772  D003               	goto	i2l1476
  2956                           
  2957                           ;HWI_Interrupts.c: 79: {
  2958                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  2959  000774  92F2               	bcf	intcon,1,c	;volatile
  2960                           
  2961                           ;HWI_Interrupts.c: 81: APP_ISR1();
  2962  000776  ECE2  F006         	call	_APP_ISR1	;wreg free
  2963  00077A                     i2l1476:
  2964                           
  2965                           ;HWI_Interrupts.c: 82: }
  2966                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  2967  00077A  A0F0               	btfss	intcon3,0,c	;volatile
  2968  00077C  D003               	goto	i2l247
  2969                           
  2970                           ;HWI_Interrupts.c: 85: {
  2971                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  2972  00077E  90F0               	bcf	intcon3,0,c	;volatile
  2973                           
  2974                           ;HWI_Interrupts.c: 87: APP_ISR2();
  2975  000780  ECDF  F006         	call	_APP_ISR2	;wreg free
  2976  000784                     i2l247:
  2977  000784  C013  FFF5         	movff	??_ISR+13,tablat
  2978  000788  C012  FFF8         	movff	??_ISR+12,tblptru
  2979  00078C  C011  FFF7         	movff	??_ISR+11,tblptrh
  2980  000790  C010  FFF6         	movff	??_ISR+10,tblptrl
  2981  000794  C00F  FFF4         	movff	??_ISR+9,prodh
  2982  000798  C00E  FFF3         	movff	??_ISR+8,prodl
  2983  00079C  C00D  FFDA         	movff	??_ISR+7,fsr2h
  2984  0007A0  C00C  FFD9         	movff	??_ISR+6,fsr2l
  2985  0007A4  C00B  FFE2         	movff	??_ISR+5,fsr1h
  2986  0007A8  C00A  FFE1         	movff	??_ISR+4,fsr1l
  2987  0007AC  C009  FFEA         	movff	??_ISR+3,fsr0h
  2988  0007B0  C008  FFE9         	movff	??_ISR+2,fsr0l
  2989  0007B4  C007  FFFB         	movff	??_ISR+1,pclatu
  2990  0007B8  C006  FFFA         	movff	??_ISR,pclath
  2991  0007BC  9262               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2992  0007BE  0011               	retfie		f
  2993  0007C0                     __end_of_ISR:
  2994                           	opt stack 0
  2995                           tosu	equ	0xFFF
  2996                           tosh	equ	0xFFE
  2997                           tosl	equ	0xFFD
  2998                           pclatu	equ	0xFFB
  2999                           pclath	equ	0xFFA
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           intcon3	equ	0xFF0
  3009                           postinc0	equ	0xFEE
  3010                           fsr0h	equ	0xFEA
  3011                           fsr0l	equ	0xFE9
  3012                           wreg	equ	0xFE8
  3013                           postinc1	equ	0xFE6
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function _SchedulerTick *****************
  3024 ;; Defined at:
  3025 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3039 ;;      Params:         0       0       0       0       0       0       0
  3040 ;;      Locals:         1       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0
  3042 ;;      Totals:         1       0       0       0       0       0       0
  3043 ;;Total ram usage:        1 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_ISR
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text24
  3053  000CE6                     __ptext24:
  3054                           	opt stack 0
  3055  000CE6                     _SchedulerTick:
  3056                           	opt stack 24
  3057                           
  3058                           ;Scheduler.c: 18: unsigned char TaskIndex;
  3059                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 3 ; TaskIndex++)
  3060                           
  3061                           ;incstack = 0
  3062  000CE6  0E00               	movlw	0
  3063  000CE8  6E01               	movwf	SchedulerTick@TaskIndex,c
  3064  000CEA                     i2l1116:
  3065  000CEA  0E02               	movlw	2
  3066  000CEC  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  3067  000CEE  D001               	goto	i2l1120
  3068  000CF0  0012               	return	
  3069  000CF2                     i2l1120:
  3070                           
  3071                           ;Scheduler.c: 20: {
  3072                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  3073  000CF2  5001               	movf	SchedulerTick@TaskIndex,w,c
  3074  000CF4  0D04               	mullw	4
  3075  000CF6  0E03               	movlw	3
  3076  000CF8  26F3               	addwf	prodl,f,c
  3077  000CFA  0E00               	movlw	0
  3078  000CFC  22F4               	addwfc	prodh,f,c
  3079  000CFE  0E3C               	movlw	low _ArrayTask
  3080  000D00  24F3               	addwf	prodl,w,c
  3081  000D02  6ED9               	movwf	fsr2l,c
  3082  000D04  0E00               	movlw	high _ArrayTask
  3083  000D06  20F4               	addwfc	prodh,w,c
  3084  000D08  6EDA               	movwf	fsr2h,c
  3085  000D0A  2ADF               	incf	indf2,f,c
  3086  000D0C  2A01               	incf	SchedulerTick@TaskIndex,f,c
  3087  000D0E  D7ED               	goto	i2l1116
  3088  000D10                     __end_of_SchedulerTick:
  3089                           	opt stack 0
  3090                           tosu	equ	0xFFF
  3091                           tosh	equ	0xFFE
  3092                           tosl	equ	0xFFD
  3093                           pclatu	equ	0xFFB
  3094                           pclath	equ	0xFFA
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           intcon	equ	0xFF2
  3102                           intcon2	equ	0xFF1
  3103                           intcon3	equ	0xFF0
  3104                           postinc0	equ	0xFEE
  3105                           fsr0h	equ	0xFEA
  3106                           fsr0l	equ	0xFE9
  3107                           wreg	equ	0xFE8
  3108                           postinc1	equ	0xFE6
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _APP_ISR3 *****************
  3119 ;; Defined at:
  3120 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3134 ;;      Params:         0       0       0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0
  3137 ;;      Totals:         0       0       0       0       0       0       0
  3138 ;;Total ram usage:        0 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    1
  3141 ;; This function calls:
  3142 ;;		_HWtimerCallback
  3143 ;; This function is called by:
  3144 ;;		_ISR
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text25
  3149  000DB8                     __ptext25:
  3150                           	opt stack 0
  3151  000DB8                     _APP_ISR3:
  3152                           	opt stack 23
  3153                           
  3154                           ;AppInterrupts.c: 20: HWtimerCallback();
  3155                           
  3156                           ;incstack = 0
  3157  000DB8  ECCE  F006         	call	_HWtimerCallback	;wreg free
  3158  000DBC  0012               	return		;funcret
  3159  000DBE                     __end_of_APP_ISR3:
  3160                           	opt stack 0
  3161                           tosu	equ	0xFFF
  3162                           tosh	equ	0xFFE
  3163                           tosl	equ	0xFFD
  3164                           pclatu	equ	0xFFB
  3165                           pclath	equ	0xFFA
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           intcon2	equ	0xFF1
  3174                           intcon3	equ	0xFF0
  3175                           postinc0	equ	0xFEE
  3176                           fsr0h	equ	0xFEA
  3177                           fsr0l	equ	0xFE9
  3178                           wreg	equ	0xFE8
  3179                           postinc1	equ	0xFE6
  3180                           fsr1h	equ	0xFE2
  3181                           fsr1l	equ	0xFE1
  3182                           indf2	equ	0xFDF
  3183                           postinc2	equ	0xFDE
  3184                           postdec2	equ	0xFDD
  3185                           fsr2h	equ	0xFDA
  3186                           fsr2l	equ	0xFD9
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function _HWtimerCallback *****************
  3190 ;; Defined at:
  3191 ;;		line 127 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, status,2, status,0
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3205 ;;      Params:         0       0       0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0
  3208 ;;      Totals:         0       0       0       0       0       0       0
  3209 ;;Total ram usage:        0 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_APP_ISR3
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text26
  3219  000D9C                     __ptext26:
  3220                           	opt stack 0
  3221  000D9C                     _HWtimerCallback:
  3222                           	opt stack 23
  3223                           
  3224                           ;SpeedCalc.c: 129: if(HwTimerOVFLcount < 64)
  3225                           
  3226                           ;incstack = 0
  3227  000D9C  0E40               	movlw	64
  3228  000D9E  605B               	cpfslt	_HwTimerOVFLcount,c	;volatile
  3229  000DA0  0012               	return	
  3230                           
  3231                           ;SpeedCalc.c: 130: {
  3232                           ;SpeedCalc.c: 131: HwTimerOVFLcount++;
  3233  000DA2  2A5B               	incf	_HwTimerOVFLcount,f,c	;volatile
  3234  000DA4  0012               	return	
  3235  000DA6                     __end_of_HWtimerCallback:
  3236                           	opt stack 0
  3237                           tosu	equ	0xFFF
  3238                           tosh	equ	0xFFE
  3239                           tosl	equ	0xFFD
  3240                           pclatu	equ	0xFFB
  3241                           pclath	equ	0xFFA
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           intcon3	equ	0xFF0
  3251                           postinc0	equ	0xFEE
  3252                           fsr0h	equ	0xFEA
  3253                           fsr0l	equ	0xFE9
  3254                           wreg	equ	0xFE8
  3255                           postinc1	equ	0xFE6
  3256                           fsr1h	equ	0xFE2
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _APP_ISR2 *****************
  3266 ;; Defined at:
  3267 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3281 ;;      Params:         0       0       0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    2
  3288 ;; This function calls:
  3289 ;;		_SensorTwoNotify
  3290 ;; This function is called by:
  3291 ;;		_ISR
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text27
  3296  000DBE                     __ptext27:
  3297                           	opt stack 0
  3298  000DBE                     _APP_ISR2:
  3299                           	opt stack 22
  3300                           
  3301                           ;AppInterrupts.c: 15: SensorTwoNotify();
  3302                           
  3303                           ;incstack = 0
  3304  000DBE  EC5C  F006         	call	_SensorTwoNotify	;wreg free
  3305  000DC2  0012               	return		;funcret
  3306  000DC4                     __end_of_APP_ISR2:
  3307                           	opt stack 0
  3308                           tosu	equ	0xFFF
  3309                           tosh	equ	0xFFE
  3310                           tosl	equ	0xFFD
  3311                           pclatu	equ	0xFFB
  3312                           pclath	equ	0xFFA
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           intcon	equ	0xFF2
  3320                           intcon2	equ	0xFF1
  3321                           intcon3	equ	0xFF0
  3322                           postinc0	equ	0xFEE
  3323                           fsr0h	equ	0xFEA
  3324                           fsr0l	equ	0xFE9
  3325                           wreg	equ	0xFE8
  3326                           postinc1	equ	0xFE6
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _SensorTwoNotify *****************
  3337 ;; Defined at:
  3338 ;;		line 44 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3352 ;;      Params:         0       0       0       0       0       0       0
  3353 ;;      Locals:         0       0       0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0
  3355 ;;      Totals:         0       0       0       0       0       0       0
  3356 ;;Total ram usage:        0 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    1
  3359 ;; This function calls:
  3360 ;;		_ReloadHWtimer
  3361 ;; This function is called by:
  3362 ;;		_APP_ISR2
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text28
  3367  000CB8                     __ptext28:
  3368                           	opt stack 0
  3369  000CB8                     _SensorTwoNotify:
  3370                           	opt stack 22
  3371                           
  3372                           ;SpeedCalc.c: 46: if( (unsigned char)0 == NotifyFlag )
  3373                           
  3374                           ;incstack = 0
  3375  000CB8  505E               	movf	_NotifyFlag,w,c	;volatile
  3376  000CBA  A4D8               	btfss	status,2,c
  3377  000CBC  D00F               	goto	i2l1414
  3378                           
  3379                           ;SpeedCalc.c: 47: {
  3380                           ;SpeedCalc.c: 48: NotifyFlag = (unsigned char)1;
  3381  000CBE  0E01               	movlw	1
  3382  000CC0  6E5E               	movwf	_NotifyFlag,c	;volatile
  3383                           
  3384                           ;SpeedCalc.c: 49: LapCounter++;
  3385  000CC2  2A5D               	incf	_LapCounter,f,c	;volatile
  3386                           
  3387                           ;SpeedCalc.c: 50: HWtimerCount = ReloadHWtimer((unsigned char)1);
  3388  000CC4  0E01               	movlw	1
  3389  000CC6  EC0C  F006         	call	_ReloadHWtimer
  3390  000CCA  C001  F054         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  3391  000CCE  C002  F055         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  3392                           
  3393                           ;SpeedCalc.c: 51: TimerOVFLcount = HwTimerOVFLcount;
  3394  000CD2  C05B  F05C         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  3395                           
  3396                           ;SpeedCalc.c: 52: HwTimerOVFLcount = (unsigned char)0;
  3397  000CD6  0E00               	movlw	0
  3398  000CD8  6E5B               	movwf	_HwTimerOVFLcount,c	;volatile
  3399                           
  3400                           ;SpeedCalc.c: 53: }
  3401  000CDA  0012               	return	
  3402  000CDC                     i2l1414:
  3403                           
  3404                           ;SpeedCalc.c: 54: else
  3405                           ;SpeedCalc.c: 55: {
  3406                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  3407  000CDC  505D               	movf	_LapCounter,w,c	;volatile
  3408  000CDE  B4D8               	btfsc	status,2,c
  3409  000CE0  0012               	return	
  3410                           
  3411                           ;SpeedCalc.c: 57: {
  3412                           ;SpeedCalc.c: 58: LapCounter--;
  3413  000CE2  065D               	decf	_LapCounter,f,c	;volatile
  3414  000CE4  0012               	return	
  3415  000CE6                     __end_of_SensorTwoNotify:
  3416                           	opt stack 0
  3417                           tosu	equ	0xFFF
  3418                           tosh	equ	0xFFE
  3419                           tosl	equ	0xFFD
  3420                           pclatu	equ	0xFFB
  3421                           pclath	equ	0xFFA
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           intcon3	equ	0xFF0
  3431                           postinc0	equ	0xFEE
  3432                           fsr0h	equ	0xFEA
  3433                           fsr0l	equ	0xFE9
  3434                           wreg	equ	0xFE8
  3435                           postinc1	equ	0xFE6
  3436                           fsr1h	equ	0xFE2
  3437                           fsr1l	equ	0xFE1
  3438                           indf2	equ	0xFDF
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _ReloadHWtimer *****************
  3446 ;; Defined at:
  3447 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  TimerId         1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  TimerId         1    2[COMRAM] unsigned char 
  3452 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  2    0[COMRAM] unsigned short 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3462 ;;      Params:         2       0       0       0       0       0       0
  3463 ;;      Locals:         3       0       0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0
  3465 ;;      Totals:         5       0       0       0       0       0       0
  3466 ;;Total ram usage:        5 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_SensorTwoNotify
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text29
  3476  000C18                     __ptext29:
  3477                           	opt stack 0
  3478  000C18                     _ReloadHWtimer:
  3479                           	opt stack 22
  3480                           
  3481                           ;incstack = 0
  3482                           ;ReloadHWtimer@TimerId stored from wreg
  3483  000C18  6E03               	movwf	ReloadHWtimer@TimerId,c
  3484                           
  3485                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  3486  000C1A  0E00               	movlw	0
  3487  000C1C  6E05               	movwf	ReloadHWtimer@ElapsedTime+1,c
  3488  000C1E  0E00               	movlw	0
  3489  000C20  6E04               	movwf	ReloadHWtimer@ElapsedTime,c
  3490                           
  3491                           ;HWI_Interrupts.c: 95: switch(TimerId)
  3492  000C22  D009               	goto	i2l1388
  3493  000C24                     i2l253:
  3494                           
  3495                           ;HWI_Interrupts.c: 98: case 1:
  3496                           ;HWI_Interrupts.c: 99: case 2:
  3497                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  3498  000C24  CFCE F004          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  3499  000C28  CFCF F005          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  3500                           
  3501                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  3502  000C2C  0E00               	movlw	0
  3503  000C2E  6ECF               	movwf	4047,c	;volatile
  3504  000C30  0E00               	movlw	0
  3505  000C32  6ECE               	movwf	4046,c	;volatile
  3506                           
  3507                           ;HWI_Interrupts.c: 105: }
  3508                           
  3509                           ;HWI_Interrupts.c: 104: break;
  3510                           
  3511                           ;HWI_Interrupts.c: 103: default:
  3512                           
  3513                           ;HWI_Interrupts.c: 102: break;
  3514  000C34  D00A               	goto	i2l254
  3515  000C36                     i2l1388:
  3516  000C36  5003               	movf	ReloadHWtimer@TimerId,w,c
  3517                           
  3518                           ; Switch size 1, requested type "space"
  3519                           ; Number of cases is 3, Range of values is 0 to 2
  3520                           ; switch strategies available:
  3521                           ; Name         Instructions Cycles
  3522                           ; simple_byte           10     6 (average)
  3523                           ;	Chosen strategy is simple_byte
  3524  000C38  0A00               	xorlw	0	; case 0
  3525  000C3A  B4D8               	btfsc	status,2,c
  3526  000C3C  D7F3               	goto	i2l253
  3527  000C3E  0A01               	xorlw	1	; case 1
  3528  000C40  B4D8               	btfsc	status,2,c
  3529  000C42  D7F0               	goto	i2l253
  3530  000C44  0A03               	xorlw	3	; case 2
  3531  000C46  B4D8               	btfsc	status,2,c
  3532  000C48  D7ED               	goto	i2l253
  3533  000C4A                     i2l254:
  3534                           
  3535                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  3536  000C4A  C004  F001         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  3537  000C4E  C005  F002         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  3538  000C52  0012               	return		;funcret
  3539  000C54                     __end_of_ReloadHWtimer:
  3540                           	opt stack 0
  3541                           tosu	equ	0xFFF
  3542                           tosh	equ	0xFFE
  3543                           tosl	equ	0xFFD
  3544                           pclatu	equ	0xFFB
  3545                           pclath	equ	0xFFA
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           intcon2	equ	0xFF1
  3554                           intcon3	equ	0xFF0
  3555                           postinc0	equ	0xFEE
  3556                           fsr0h	equ	0xFEA
  3557                           fsr0l	equ	0xFE9
  3558                           wreg	equ	0xFE8
  3559                           postinc1	equ	0xFE6
  3560                           fsr1h	equ	0xFE2
  3561                           fsr1l	equ	0xFE1
  3562                           indf2	equ	0xFDF
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _APP_ISR1 *****************
  3570 ;; Defined at:
  3571 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3585 ;;      Params:         0       0       0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0
  3588 ;;      Totals:         0       0       0       0       0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    1
  3592 ;; This function calls:
  3593 ;;		_SensorOneNotify
  3594 ;; This function is called by:
  3595 ;;		_ISR
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text30
  3600  000DC4                     __ptext30:
  3601                           	opt stack 0
  3602  000DC4                     _APP_ISR1:
  3603                           	opt stack 23
  3604                           
  3605                           ;AppInterrupts.c: 10: SensorOneNotify();
  3606                           
  3607                           ;incstack = 0
  3608  000DC4  ECAE  F006         	call	_SensorOneNotify	;wreg free
  3609  000DC8  0012               	return		;funcret
  3610  000DCA                     __end_of_APP_ISR1:
  3611                           	opt stack 0
  3612                           tosu	equ	0xFFF
  3613                           tosh	equ	0xFFE
  3614                           tosl	equ	0xFFD
  3615                           pclatu	equ	0xFFB
  3616                           pclath	equ	0xFFA
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           intcon	equ	0xFF2
  3624                           intcon2	equ	0xFF1
  3625                           intcon3	equ	0xFF0
  3626                           postinc0	equ	0xFEE
  3627                           fsr0h	equ	0xFEA
  3628                           fsr0l	equ	0xFE9
  3629                           wreg	equ	0xFE8
  3630                           postinc1	equ	0xFE6
  3631                           fsr1h	equ	0xFE2
  3632                           fsr1l	equ	0xFE1
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _SensorOneNotify *****************
  3641 ;; Defined at:
  3642 ;;		line 29 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3656 ;;      Params:         0       0       0       0       0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0
  3659 ;;      Totals:         0       0       0       0       0       0       0
  3660 ;;Total ram usage:        0 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_APP_ISR1
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text31
  3670  000D5C                     __ptext31:
  3671                           	opt stack 0
  3672  000D5C                     _SensorOneNotify:
  3673                           	opt stack 23
  3674                           
  3675                           ;SpeedCalc.c: 31: if( (unsigned char)1 == NotifyFlag )
  3676                           
  3677                           ;incstack = 0
  3678  000D5C  045E               	decf	_NotifyFlag,w,c	;volatile
  3679  000D5E  A4D8               	btfss	status,2,c
  3680  000D60  D003               	goto	i2l1074
  3681                           
  3682                           ;SpeedCalc.c: 32: {
  3683                           ;SpeedCalc.c: 33: NotifyFlag = (unsigned char)0;
  3684  000D62  0E00               	movlw	0
  3685  000D64  6E5E               	movwf	_NotifyFlag,c	;volatile
  3686                           
  3687                           ;SpeedCalc.c: 34: }
  3688  000D66  0012               	return	
  3689  000D68                     i2l1074:
  3690                           
  3691                           ;SpeedCalc.c: 35: else
  3692                           ;SpeedCalc.c: 36: {
  3693                           ;SpeedCalc.c: 37: if(LapCounter != (unsigned char)0)
  3694  000D68  505D               	movf	_LapCounter,w,c	;volatile
  3695  000D6A  B4D8               	btfsc	status,2,c
  3696  000D6C  0012               	return	
  3697                           
  3698                           ;SpeedCalc.c: 38: {
  3699                           ;SpeedCalc.c: 39: LapCounter--;
  3700  000D6E  065D               	decf	_LapCounter,f,c	;volatile
  3701  000D70  0012               	return	
  3702  000D72                     __end_of_SensorOneNotify:
  3703                           	opt stack 0
  3704                           tosu	equ	0xFFF
  3705                           tosh	equ	0xFFE
  3706                           tosl	equ	0xFFD
  3707                           pclatu	equ	0xFFB
  3708                           pclath	equ	0xFFA
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon2	equ	0xFF1
  3717                           intcon3	equ	0xFF0
  3718                           postinc0	equ	0xFEE
  3719                           fsr0h	equ	0xFEA
  3720                           fsr0l	equ	0xFE9
  3721                           wreg	equ	0xFE8
  3722                           postinc1	equ	0xFE6
  3723                           fsr1h	equ	0xFE2
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           tosu	equ	0xFFF
  3732                           tosh	equ	0xFFE
  3733                           tosl	equ	0xFFD
  3734                           pclatu	equ	0xFFB
  3735                           pclath	equ	0xFFA
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           intcon2	equ	0xFF1
  3744                           intcon3	equ	0xFF0
  3745                           postinc0	equ	0xFEE
  3746                           fsr0h	equ	0xFEA
  3747                           fsr0l	equ	0xFE9
  3748                           wreg	equ	0xFE8
  3749                           postinc1	equ	0xFE6
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759                           	psect	text32
  3760  000000                     __ptext32:
  3761                           	opt stack 0
  3762                           tosu	equ	0xFFF
  3763                           tosh	equ	0xFFE
  3764                           tosl	equ	0xFFD
  3765                           pclatu	equ	0xFFB
  3766                           pclath	equ	0xFFA
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           intcon2	equ	0xFF1
  3775                           intcon3	equ	0xFF0
  3776                           postinc0	equ	0xFEE
  3777                           fsr0h	equ	0xFEA
  3778                           fsr0l	equ	0xFE9
  3779                           wreg	equ	0xFE8
  3780                           postinc1	equ	0xFE6
  3781                           fsr1h	equ	0xFE2
  3782                           fsr1l	equ	0xFE1
  3783                           indf2	equ	0xFDF
  3784                           postinc2	equ	0xFDE
  3785                           postdec2	equ	0xFDD
  3786                           fsr2h	equ	0xFDA
  3787                           fsr2l	equ	0xFD9
  3788                           status	equ	0xFD8
  3789                           
  3790                           	psect	rparam
  3791  0000                     tosu	equ	0xFFF
  3792                           tosh	equ	0xFFE
  3793                           tosl	equ	0xFFD
  3794                           pclatu	equ	0xFFB
  3795                           pclath	equ	0xFFA
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           intcon	equ	0xFF2
  3803                           intcon2	equ	0xFF1
  3804                           intcon3	equ	0xFF0
  3805                           postinc0	equ	0xFEE
  3806                           fsr0h	equ	0xFEA
  3807                           fsr0l	equ	0xFE9
  3808                           wreg	equ	0xFE8
  3809                           postinc1	equ	0xFE6
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819                           	psect	temp
  3820  000062                     btemp:
  3821                           	opt stack 0
  3822  000062                     	ds	1
  3823  0000                     int$flags	set	btemp
  3824                           tosu	equ	0xFFF
  3825                           tosh	equ	0xFFE
  3826                           tosl	equ	0xFFD
  3827                           pclatu	equ	0xFFB
  3828                           pclath	equ	0xFFA
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           intcon2	equ	0xFF1
  3837                           intcon3	equ	0xFF0
  3838                           postinc0	equ	0xFEE
  3839                           fsr0h	equ	0xFEA
  3840                           fsr0l	equ	0xFE9
  3841                           wreg	equ	0xFE8
  3842                           postinc1	equ	0xFE6
  3843                           fsr1h	equ	0xFE2
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           postinc2	equ	0xFDE
  3847                           postdec2	equ	0xFDD
  3848                           fsr2h	equ	0xFDA
  3849                           fsr2l	equ	0xFD9
  3850                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    11
    Data        2
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      97
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    S107$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 


Critical Paths under _main in COMRAM

    _main->_RunScheduler
    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5413
                     _APP_INITIALIZE
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (1) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunScheduler                                         2     2      0    4705
                                             57 COMRAM     2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (2) _ManageSpeedCalc                                      0     0      0    1424
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (3) _SpeedCalcManage                                      4     4      0    1424
                                             44 COMRAM     4     4      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _ManageApplication                                    0     0      0    2977
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (3) _APP_MANAGE                                           4     4      0    2977
                                             53 COMRAM     4     4      0
                      _BCDsendNumber
                        _GetAvgSpeed
                        _GetDistance
                   _SetCircumfirunce
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetCircumfirunce                                     2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GetAvgSpeed                                          9     7      2     809
                                             44 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     322
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     418
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _BCDsendNumber                                       12     9      3    1491
                                             26 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayAlphaNumeric                                  0     0      0     304
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (3) _BCDManage7segment                                    3     3      0     304
                                             21 COMRAM     3     3      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (4) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CreateTask                                           4     0      4     708
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _APP_INITIALIZE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0      91
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (7) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (8) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (8) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (9) _ReloadHWtimer                                        5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (8) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_INITIALIZE
   _CreateTask
   _HWI_DIGITAL_INITIALIZE
   _HWI_INTERRUPTS_INTITALIZE
   _RunScheduler
     _DisplayAlphaNumeric *
       _BCDManage7segment
         _HWI_4Digit_WRITE
         _HWI_8Digit_WRITE
     _ManageApplication *
       _APP_MANAGE
         _BCDsendNumber
           ___lwdiv
           ___wmul
         _GetAvgSpeed
           ___lldiv
             ___lmul (ARG)
           ___lmul
         _GetDistance
         _SetCircumfirunce
         ___wmul
     _ManageSpeedCalc *
       _SpeedCalcManage
         ___lldiv
           ___lmul (ARG)
         ___lwdiv
         ___wmul
   _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      61       1       77.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61      15        0.0%
DATA                 0      0      61       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 09 23:16:03 2017

                                  l29 0632                   __end_of_GetAvgSpeed 09D0  
                 ___wmul@multiplicand 0016                           __CFG_BORV$3 000000  
                   GetAvgSpeed@bIsKph 0031                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                   __end_of_GetDistance 0D84  
                         __CFG_OSC$XT 000000                           __CFG_LVP$ON 000000  
                                 l166 0D3A                                   l168 0D40  
                                 l169 0D46                                   l642 094C  
                                 l695 0B80                          __CFG_CPB$OFF 000000  
                        __CFG_CPD$OFF 000000                                   u524 0BA0  
                                 _ISR 0008                                   u525 0B9A  
                                 u608 08A8                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                                ?_ISR 0001                          __CFG_WDT$OFF 000000  
                                l1304 096E                                  l1322 0622  
                                l1250 0AB2                                  l1332 068C  
                                l1260 08FE                                  l1350 0C94  
                                l1342 06DA                                  l1318 061A  
                                l1262 090A                                  l1246 0A9E  
                                l1430 0850                                  l1352 0C9E  
                                l1336 06BE                                  l1272 093E  
                                l1264 090E                                  l1440 08BC  
                                l1432 0854                                  l1354 0CA8  
                                l1282 0B4E                                  l1338 06D6  
                                l1442 08D8                                  l1348 0C8A  
                                l1284 0B56                                  l1436 085C  
                                l1358 0D4C                                  l1294 0B76  
                                l1286 0B5A                                  _LATC 000F8B  
                                _LATD 000F8C                                  _TMR1 000FCE  
                                _main 0AE4                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0062                                  prodh 000FF4  
                                prodl 000FF3                     _BCDManage7segment 0B8A  
                                start 000E                         __CFG_IESO$OFF 000000  
                  ?_BCDManage7segment 0001              __size_of_SpeedCalcManage 0090  
                        ___param_bank 000000                      __end_of_APP_ISR1 0DCA  
                    __end_of_APP_ISR2 0DC4                      __end_of_APP_ISR3 0DBE  
                               ??_ISR 0006                   BCDsendNumber@Buffer 0024  
           _SpeedCalcNotifyInitialize 0DCC                   BCDsendNumber@Number 001B  
                 __size_of_APP_MANAGE 0066                   ??_BCDManage7segment 0016  
                 BCDsendNumber@Output 0022                                 ?_main 0001  
                          _CreateTask 0A36                       __end_of___lldiv 095E  
                          _LapCounter 005D                                 _T0CON 000FD5  
                               _T1CON 000FCD                                 _T3CON 000FB1  
                     __end_of___lwdiv 0B8A                                 i2l253 0C24  
                               i2l254 0C4A                                 i2l247 0784  
                               _TMR0L 000FD6                                 _TMR3H 000FB3  
                               _TMR3L 000FB2                     _ManageApplication 0DAC  
                               _PORTC 000F82                                 _PORTD 000F83  
                               _TRISC 000F94                                 _TRISD 000F95  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                 ___lmul@multiplicand 0018                         __CFG_WRT3$OFF 000000  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
                      __CFG_EBTR1$OFF 000000                        __CFG_EBTR2$OFF 000000  
                      __CFG_EBTR3$OFF 000000                    ?_ManageApplication 0001  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
             CreateTask@MangeFunction 0014             BCDsendNumber@DecimalPlace 001D  
                               pclath 000FFA                                 tablat 000FF5  
                 ??_ManageApplication 003A                     ?_HWI_8Digit_WRITE 0014  
           __end_of_BCDManage7segment 0BDA                                 status 000FD8  
               __end_of_BCDsendNumber 0704       __size_of_HWI_DIGITAL_INITIALIZE 000E  
                  ??_HWI_8Digit_WRITE 0015                           _GetAvgSpeed 095E  
                      __CFG_MCLRE$OFF 000000                       __initialization 0C54  
                         _GetDistance 0D72                          __end_of_main 0B38  
           __end_of_ManageApplication 0DB2                                ??_main 003C  
                       __activetblptr 000002                                _INT0IF 007F91  
                              _INT1IF 007F80                                i2l1120 0CF2  
                              i2l1116 0CEA                                i2l1074 0D68  
                              i2l1414 0CDC                                i2l1460 075A  
                              i2l1454 074C                                i2l1388 0C36  
                              i2l1476 077A                                i2l1468 076C  
         BCDManage7segment@DigitIndex 005F                                _INTCON 000FF2  
            __size_of_SensorOneNotify 0016              __size_of_ManageSpeedCalc 0006  
                HWI_8Digit_WRITE@port 0015                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR1IE 007CE8  
                              _TMR1IF 007CF0                                _TMR2IF 007CF1  
                              _TMR3IE 007D01                                _TMR3IF 007D09  
                 _DisplayAlphaNumeric 0DA6                        __CFG_XINST$OFF 000000  
                          _NotifyFlag 005E                                ___lmul 0A8E  
                              ___wmul 0D10                        __CFG_STVREN$ON 000000  
                           ??___lldiv 0028                             ??___lwdiv 0018  
                        _HWtimerCount 0054                                clear_0 0C72  
                   ??_SpeedCalcManage 002D                           ?_CreateTask 0014  
              _HWI_DIGITAL_INITIALIZE 0D84                      CreateTask@Period 0017  
                    CreateTask@TaskId 0016                          __pdataCOMRAM 0060  
                ?_DisplayAlphaNumeric 0001                          __mediumconst 0000  
            __size_of_SensorTwoNotify 002E                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                        ??_APP_MANAGE 0036                             ?_APP_ISR1 0001  
                           ?_APP_ISR2 0001                             ?_APP_ISR3 0001  
              __size_of_SchedulerTick 002A              ReloadHWtimer@ElapsedTime 0004  
          __size_of_BCDManage7segment 0050                            __accesstop 0080  
             __end_of__initialization 0C78                       __CFG_PBADEN$OFF 000000  
                   ?_SetCircumfirunce 0014                         ___rparam_used 000001  
                  ??_SetCircumfirunce 0016                        _TimerOVFLcount 005C  
                      __pcstackCOMRAM 0001                     BCDsendNumber@Link 0020  
           GetAvgSpeed@AvgSpeedKphMph 002F             __size_of_HWI_4Digit_WRITE 0032  
          __size_of_ManageApplication 0006                    __end_of_APP_MANAGE 0A36  
               ??_DisplayAlphaNumeric 0019  SpeedCalcManage@HundredMeterReference 002F  
            __size_of_HWtimerCallback 000A    __size_of_SpeedCalcNotifyInitialize 0002  
              __size_of_ReloadHWtimer 003C                            ??_APP_ISR1 0001  
                          ??_APP_ISR2 0006                            ??_APP_ISR3 0001  
                        _CircumFactor 0060                   __size_of_CreateTask 0058  
                   ??_SensorOneNotify 0001                     ??_ManageSpeedCalc 0031  
             __size_of_APP_INITIALIZE 0002                               ?___lmul 0014  
              SetCircumfirunce@Circum 0014                               ?___wmul 0014  
                       _SchedulerTick 0CE6                        ___lmul@product 001C  
  __size_of_HWI_INTERRUPTS_INTITALIZE 003E            ?_HWI_INTERRUPTS_INTITALIZE 0001  
                             _INTCON3 000FF0                 HWI_8Digit_WRITE@value 0014  
                   ??_SensorTwoNotify 0006                               __Hparam 0000  
                        ?_GetAvgSpeed 002D                             _BCDNumber 0048  
                             __Lparam 0000                          ?_GetDistance 0014  
                     __size_of___lmul 0056                         _ReloadHWtimer 0C18  
                      ?_SchedulerTick 0001                               ___lldiv 08DC  
                     __size_of___wmul 0026                               ___lwdiv 0B38  
                        __psmallconst 0600             __size_of_HWI_8Digit_WRITE 0026  
                             __pcinit 0C54                               __ramtop 0600  
                             __ptext0 0AE4                               __ptext1 0DCC  
                             __ptext2 0850                               __ptext3 0DA6  
                             __ptext4 0DAC                               __ptext5 0DB2  
                             __ptext6 07C0                               __ptext7 09D0  
                             __ptext8 0D92                               __ptext9 0D72  
   __end_of_HWI_INTERRUPTS_INTITALIZE 0C18                          __size_of_ISR 07B8  
                       ?_RunScheduler 0001                SchedulerTick@TaskIndex 0001  
                      __pintcode_body 0704                  end_of_initialization 0C78  
                   ??_HWtimerCallback 0001                         __Lmediumconst 0000  
                             int_func 0704                       _SevenSegmentMAP 0601  
                     ___lldiv@divisor 0024                       _SpeedCalcManage 07C0  
                     ___lldiv@counter 002C                        ?_ReloadHWtimer 0001  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
             ?_HWI_DIGITAL_INITIALIZE 0001           APP_MANAGE@TravelledDistance 0038  
                    _HWI_4Digit_WRITE 0C86                          ??_CreateTask 0018  
              __size_of_BCDsendNumber 00F6                        ??_RunScheduler 003A  
                           _TRISBbits 000F93                     __size_of_APP_ISR1 0006  
                   __size_of_APP_ISR2 0006                     __size_of_APP_ISR3 0006  
                  __end_of_CreateTask 0A8E                        _APP_INITIALIZE 0DCE  
                      _DistTravelCntr 0050                       ??_SchedulerTick 0001  
                   _LapTimeTenthMilli 0056        __end_of_HWI_DIGITAL_INITIALIZE 0D92  
                      __end_of___lmul 0AE4                        __end_of___wmul 0D36  
                       __pidataCOMRAM 0DCA                             _ArrayTask 003C  
           __size_of_SetCircumfirunce 000A                   start_initialization 0C54  
                         __end_of_ISR 07C0                       _SensorOneNotify 0D5C  
             __end_of_SevenSegmentMAP 060C                       _ManageSpeedCalc 0DB2  
             __end_of_SpeedCalcManage 0850                __end_of_APP_INITIALIZE 0DD0  
                       _BCDsendNumber 060E                       ??_ReloadHWtimer 0003  
                            ??___lmul 001C                              ??___wmul 0018  
                __size_of_GetAvgSpeed 0072           __end_of_DisplayAlphaNumeric 0DAC  
                    __CFG_LPT1OSC$OFF 000000                  __size_of_GetDistance 0012  
                    _HWI_8Digit_WRITE 0D36           ??_HWI_INTERRUPTS_INTITALIZE 0014  
                     _SensorTwoNotify 0CB8                           __pbssCOMRAM 003C  
              BCDsendNumber@LoopIndex 0026                 APP_MANAGE@AvgSpeedKph 0036  
               RunScheduler@TaskIndex 005A                        ?_BCDsendNumber 001B  
                     ?_APP_INITIALIZE 0001                      ___lwdiv@dividend 0014  
                __end_of_RunScheduler 08DC                     __CFG_CCP2MX$PORTC 000000  
                           __pintcode 0008                              ?___lldiv 0020  
                            ?___lwdiv 0014                      _HwTimerOVFLcount 005B  
                     _HWtimerCallback 0D9C                           __smallconst 0600  
             __end_of_SensorOneNotify 0D72               __end_of_ManageSpeedCalc 0DB8  
               HWI_4Digit_WRITE@value 0014                      ___lwdiv@quotient 0018  
            __end_of_HWI_4Digit_WRITE 0CB8                              _APP_ISR1 0DC4  
                            _APP_ISR2 0DBE                              _APP_ISR3 0DB8  
          ?_SpeedCalcNotifyInitialize 0001                      ?_SpeedCalcManage 0001  
           _HWI_INTERRUPTS_INTITALIZE 0BDA                  ReloadHWtimer@TimerId 0003  
                      ___wmul@product 0018                      __CFG_WDTPS$32768 000000  
             __end_of_SensorTwoNotify 0CE6                      _SetCircumfirunce 0D92  
                   ___wmul@multiplier 0014                     ___lmul@multiplier 0014  
                         _INTCON2bits 000FF1                       ??_BCDsendNumber 001E  
   __end_of_SpeedCalcNotifyInitialize 0DCE                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
             __end_of_HWtimerCallback 0DA6                      __size_of___lldiv 0082  
                    __size_of___lwdiv 0052                      ?_SensorOneNotify 0001  
                    ?_ManageSpeedCalc 0001                       ___lwdiv@divisor 0016  
                     ___lwdiv@counter 001A                              __ptext10 095E  
                            __ptext11 0A8E                              __ptext20 0D84  
                            __ptext12 08DC                              __ptext21 0A36  
                            __ptext13 060E                              __ptext30 0DC4  
                            __ptext22 0DCE                              __ptext14 0D10  
                            __ptext31 0D5C                              __ptext15 0B38  
                            __ptext32 0000                              __ptext24 0CE6  
                            __ptext16 0B8A                              __ptext25 0DB8  
                            __ptext17 0D36                              __ptext26 0D9C  
                            __ptext18 0C86                              __ptext27 0DBE  
                            __ptext19 0BDA                              __ptext28 0CB8  
                            __ptext29 0C18                            _APP_MANAGE 09D0  
            __end_of_HWI_8Digit_WRITE 0D5C                    _LapDistanceCounter 0058  
               __size_of_RunScheduler 008C                  HWI_4Digit_WRITE@port 0015  
                       __size_of_main 0054                              int$flags 0062  
               __end_of_SchedulerTick 0D10                      ?_SensorTwoNotify 0001  
             GetAvgSpeed@KphMphFactor 0032                          _RunScheduler 0850  
                    ??_APP_INITIALIZE 0014                              intlevel2 0000  
                    ___lldiv@dividend 0020                         ??_GetAvgSpeed 002F  
                       ??_GetDistance 0018                 __end_of_ReloadHWtimer 0C54  
                    ?_HWtimerCallback 0001                      ___lldiv@quotient 0028  
        __size_of_DisplayAlphaNumeric 0006                           ?_APP_MANAGE 0001  
         ??_SpeedCalcNotifyInitialize 0014                     ?_HWI_4Digit_WRITE 0014  
            __end_of_SetCircumfirunce 0D9C              ??_HWI_DIGITAL_INITIALIZE 0014  
                  ??_HWI_4Digit_WRITE 0015  
