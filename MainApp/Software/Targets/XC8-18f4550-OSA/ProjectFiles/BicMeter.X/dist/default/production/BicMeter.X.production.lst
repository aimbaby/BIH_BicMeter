

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 16 21:08:38 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.41
    48                           ; Generated 25/01/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4520 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  000D70                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _KMfactor
    87  000D70  00C8               	dw	200
    88                           
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt stack 0
    92  000600  00                 	db	0
    93  000601                     _SevenSegmentMAP:
    94                           	opt stack 0
    95  000601  FC                 	db	252
    96  000602  60                 	db	96
    97  000603  DA                 	db	218
    98  000604  F2                 	db	242
    99  000605  66                 	db	102
   100  000606  B6                 	db	182
   101  000607  BE                 	db	190
   102  000608  E0                 	db	224
   103  000609  FE                 	db	254
   104  00060A  F6                 	db	246
   105  00060B  01                 	db	1
   106  00060C                     __end_of_SevenSegmentMAP:
   107                           	opt stack 0
   108  0000                     _TMR3H	set	4019
   109  0000                     _TMR3L	set	4018
   110  0000                     _TMR1H	set	4047
   111  0000                     _TMR1L	set	4046
   112  0000                     _TMR0L	set	4054
   113  0000                     _INTCON2bits	set	4081
   114  0000                     _T3CON	set	4017
   115  0000                     _T1CON	set	4045
   116  0000                     _T0CON	set	4053
   117  0000                     _INTCON3	set	4080
   118  0000                     _INTCON	set	4082
   119  0000                     _TRISBbits	set	3987
   120  0000                     _TRISC	set	3988
   121  0000                     _TRISD	set	3989
   122  0000                     _LATD	set	3980
   123  0000                     _PORTD	set	3971
   124  0000                     _LATC	set	3979
   125  0000                     _PORTC	set	3970
   126  0000                     _INT1IF	set	32640
   127  0000                     _INT0IF	set	32657
   128  0000                     _TMR0IF	set	32658
   129  0000                     _TMR3IE	set	32001
   130  0000                     _TMR3IF	set	32009
   131  0000                     _TMR1IE	set	31976
   132  0000                     _TMR1IF	set	31984
   133                           
   134                           ; #config settings
   135  00060C  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           	psect	cinit
   138  000BF2                     __pcinit:
   139                           	opt stack 0
   140  000BF2                     start_initialization:
   141                           	opt stack 0
   142  000BF2                     __initialization:
   143                           	opt stack 0
   144                           
   145                           ; Initialize objects allocated to COMRAM (2 bytes)
   146                           ; load TBLPTR registers with __pidataCOMRAM
   147  000BF2  0E70               	movlw	low __pidataCOMRAM
   148  000BF4  6EF6               	movwf	tblptrl,c
   149  000BF6  0E0D               	movlw	high __pidataCOMRAM
   150  000BF8  6EF7               	movwf	tblptrh,c
   151  000BFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   152  000BFC  6EF8               	movwf	tblptru,c
   153  000BFE  0009               	tblrd		*+	;fetch initializer
   154  000C00  CFF5 F06E          	movff	tablat,__pdataCOMRAM
   155  000C04  0009               	tblrd		*+	;fetch initializer
   156  000C06  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
   157                           
   158                           ; Clear objects allocated to COMRAM (68 bytes)
   159  000C0A  EE00  F001         	lfsr	0,__pbssCOMRAM
   160  000C0E  0E44               	movlw	68
   161  000C10                     clear_0:
   162  000C10  6AEE               	clrf	postinc0,c
   163  000C12  06E8               	decf	wreg,f,c
   164  000C14  E1FD               	bnz	clear_0
   165  000C16                     end_of_initialization:
   166                           	opt stack 0
   167  000C16                     __end_of__initialization:
   168                           	opt stack 0
   169  000C16  9070               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   170  000C18  9270               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   171  000C1A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   172  000C1C  6EF8               	movwf	tblptru,c
   173  000C1E  0100               	movlb	0
   174  000C20  EFED  F004         	goto	_main	;jump to C main() function
   175                           tblptru	equ	0xFF8
   176                           tblptrh	equ	0xFF7
   177                           tblptrl	equ	0xFF6
   178                           tablat	equ	0xFF5
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	bssCOMRAM
   183  000001                     __pbssCOMRAM:
   184                           	opt stack 0
   185  000001                     _ArrayTask:
   186                           	opt stack 0
   187  000001                     	ds	12
   188  00000D                     _BCDNumber:
   189                           	opt stack 0
   190  00000D                     	ds	8
   191  000015                     _DistTravelCntr:
   192                           	opt stack 0
   193  000015                     	ds	4
   194  000019                     _LapCounterAvg:
   195                           	opt stack 0
   196  000019                     	ds	2
   197  00001B                     RunScheduler@TaskIndex:
   198                           	opt stack 0
   199  00001B                     	ds	1
   200  00001C                     SpeedCalcManage@LapSampleIndex:
   201                           	opt stack 0
   202  00001C                     	ds	1
   203  00001D                     SpeedCalcManage@LapTime:
   204                           	opt stack 0
   205  00001D                     	ds	1
   206  00001E                     _LapCounter:
   207                           	opt stack 0
   208  00001E                     	ds	1
   209  00001F                     _NotifyFlag:
   210                           	opt stack 0
   211  00001F                     	ds	1
   212  000020                     _LapCounterBuffer:
   213                           	opt stack 0
   214  000020                     	ds	36
   215  000044                     BCDManage7segment@DigitIndex:
   216                           	opt stack 0
   217  000044                     	ds	1
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           
   225                           	psect	dataCOMRAM
   226  00006E                     __pdataCOMRAM:
   227                           	opt stack 0
   228  00006E                     _KMfactor:
   229                           	opt stack 0
   230  00006E                     	ds	2
   231                           tblptru	equ	0xFF8
   232                           tblptrh	equ	0xFF7
   233                           tblptrl	equ	0xFF6
   234                           tablat	equ	0xFF5
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           	psect	cstackBANK0
   239  000080                     __pcstackBANK0:
   240                           	opt stack 0
   241  000080                     ?_GetAvgSpeed:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x0
   245  000080                     	ds	2
   246  000082                     GetAvgSpeed@AvgSpeedKph:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x2
   250  000082                     	ds	2
   251  000084                     APP_MANAGE@AvgSpeedKph:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x4
   255  000084                     	ds	2
   256  000086                     
   257                           ; 1 bytes @ 0x6
   258  000086                     	ds	2
   259                           tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	cstackCOMRAM
   267  000045                     __pcstackCOMRAM:
   268                           	opt stack 0
   269  000045                     SchedulerTick@TaskIndex:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x0
   273  000045                     	ds	1
   274  000046                     ??_ISR:
   275                           
   276                           ; 1 bytes @ 0x1
   277  000046                     	ds	14
   278  000054                     ??_SpeedCalcManage:
   279  000054                     ?___wmul:
   280                           	opt stack 0
   281  000054                     ?___lwdiv:
   282                           	opt stack 0
   283  000054                     ?___lmul:
   284                           	opt stack 0
   285  000054                     HWI_4Digit_WRITE@value:
   286                           	opt stack 0
   287  000054                     HWI_8Digit_WRITE@value:
   288                           	opt stack 0
   289  000054                     CreateTask@MangeFunction:
   290                           	opt stack 0
   291  000054                     ___wmul@multiplier:
   292                           	opt stack 0
   293  000054                     ___lwdiv@dividend:
   294                           	opt stack 0
   295  000054                     memset@p1:
   296                           	opt stack 0
   297  000054                     ___lmul@multiplier:
   298                           	opt stack 0
   299                           
   300                           ; 4 bytes @ 0xF
   301  000054                     	ds	1
   302  000055                     HWI_4Digit_WRITE@port:
   303                           	opt stack 0
   304  000055                     HWI_8Digit_WRITE@port:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x10
   308  000055                     	ds	1
   309  000056                     ??_BCDManage7segment:
   310  000056                     CreateTask@TaskId:
   311                           	opt stack 0
   312  000056                     ___wmul@multiplicand:
   313                           	opt stack 0
   314  000056                     ___lwdiv@divisor:
   315                           	opt stack 0
   316  000056                     memset@c:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x11
   320  000056                     	ds	1
   321  000057                     CreateTask@Period:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x12
   325  000057                     	ds	1
   326  000058                     ___lwdiv@counter:
   327                           	opt stack 0
   328  000058                     ___wmul@product:
   329                           	opt stack 0
   330  000058                     memset@n:
   331                           	opt stack 0
   332  000058                     ___lmul@multiplicand:
   333                           	opt stack 0
   334                           
   335                           ; 4 bytes @ 0x13
   336  000058                     	ds	1
   337  000059                     ___lwdiv@quotient:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x14
   341  000059                     	ds	1
   342  00005A                     memset@p:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x15
   346  00005A                     	ds	1
   347  00005B                     BCDsendNumber@Number:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x16
   351  00005B                     	ds	1
   352  00005C                     ___lmul@product:
   353                           	opt stack 0
   354                           
   355                           ; 4 bytes @ 0x17
   356  00005C                     	ds	1
   357  00005D                     BCDsendNumber@DecimalPlace:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0x18
   361  00005D                     	ds	1
   362  00005E                     ??_BCDsendNumber:
   363                           
   364                           ; 1 bytes @ 0x19
   365  00005E                     	ds	2
   366  000060                     ?___lldiv:
   367                           	opt stack 0
   368  000060                     BCDsendNumber@Link:
   369                           	opt stack 0
   370  000060                     ___lldiv@dividend:
   371                           	opt stack 0
   372                           
   373                           ; 4 bytes @ 0x1B
   374  000060                     	ds	2
   375  000062                     BCDsendNumber@Output:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x1D
   379  000062                     	ds	2
   380  000064                     BCDsendNumber@Buffer:
   381                           	opt stack 0
   382  000064                     ___lldiv@divisor:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x1F
   386  000064                     	ds	2
   387  000066                     BCDsendNumber@LoopIndex:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x21
   391  000066                     	ds	2
   392  000068                     ___lldiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x23
   396  000068                     	ds	4
   397  00006C                     ___lldiv@counter:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x27
   401  00006C                     	ds	1
   402  00006D                     SetCircumfirunce@Circum:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x28
   406  00006D                     	ds	1
   407  00006E                     tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           ; 1 bytes @ 0x29
   415 ;;
   416 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   417 ;;
   418 ;; *************** function _main *****************
   419 ;; Defined at:
   420 ;;		line 86 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   434 ;;      Params:         0       0       0       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0
   437 ;;      Totals:         0       0       0       0       0       0       0
   438 ;;Total ram usage:        0 bytes
   439 ;; Hardware stack levels required when called:    8
   440 ;; This function calls:
   441 ;;		_APP_INITIALIZE
   442 ;;		_CreateTask
   443 ;;		_HWI_DIGITAL_INITIALIZE
   444 ;;		_HWI_TIMERS_INTITALIZE
   445 ;;		_RunScheduler
   446 ;;		_SpeedCalcNotifyInitialize
   447 ;; This function is called by:
   448 ;;		Startup code after reset
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           	psect	text0
   453  0009DA                     __ptext0:
   454                           	opt stack 0
   455  0009DA                     _main:
   456                           	opt stack 23
   457                           
   458                           ;main.c: 87: HWI_TIMERS_INTITALIZE();
   459                           
   460                           ;incstack = 0
   461  0009DA  ECDC  F005         	call	_HWI_TIMERS_INTITALIZE	;wreg free
   462                           
   463                           ;main.c: 88: HWI_DIGITAL_INITIALIZE();
   464  0009DE  ECA2  F006         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   465                           
   466                           ;main.c: 89: SpeedCalcNotifyInitialize();
   467  0009E2  EC7C  F006         	call	_SpeedCalcNotifyInitialize	;wreg free
   468                           
   469                           ;main.c: 90: APP_INITIALIZE();
   470  0009E6  ECB9  F006         	call	_APP_INITIALIZE	;wreg free
   471                           
   472                           ;main.c: 92: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   473  0009EA  0E5E               	movlw	low _ManageSpeedCalc
   474  0009EC  6E54               	movwf	CreateTask@MangeFunction,c
   475  0009EE  0E0D               	movlw	high _ManageSpeedCalc
   476  0009F0  6E55               	movwf	CreateTask@MangeFunction+1,c
   477  0009F2  0E00               	movlw	0
   478  0009F4  6E56               	movwf	CreateTask@TaskId,c
   479  0009F6  0E14               	movlw	20
   480  0009F8  6E57               	movwf	CreateTask@Period,c
   481  0009FA  EC96  F004         	call	_CreateTask	;wreg free
   482                           
   483                           ;main.c: 94: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100);
   484  0009FE  0E58               	movlw	low _ManageApplication
   485  000A00  6E54               	movwf	CreateTask@MangeFunction,c
   486  000A02  0E0D               	movlw	high _ManageApplication
   487  000A04  6E55               	movwf	CreateTask@MangeFunction+1,c
   488  000A06  0E02               	movlw	2
   489  000A08  6E56               	movwf	CreateTask@TaskId,c
   490  000A0A  0E64               	movlw	100
   491  000A0C  6E57               	movwf	CreateTask@Period,c
   492  000A0E  EC96  F004         	call	_CreateTask	;wreg free
   493                           
   494                           ;main.c: 96: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 50);
   495  000A12  0E52               	movlw	low _DisplayAlphaNumeric
   496  000A14  6E54               	movwf	CreateTask@MangeFunction,c
   497  000A16  0E0D               	movlw	high _DisplayAlphaNumeric
   498  000A18  6E55               	movwf	CreateTask@MangeFunction+1,c
   499  000A1A  0E01               	movlw	1
   500  000A1C  6E56               	movwf	CreateTask@TaskId,c
   501  000A1E  0E32               	movlw	50
   502  000A20  6E57               	movwf	CreateTask@Period,c
   503  000A22  EC96  F004         	call	_CreateTask	;wreg free
   504                           
   505                           ;main.c: 99: RunScheduler();
   506  000A26  ECDC  F003         	call	_RunScheduler	;wreg free
   507                           
   508                           ;main.c: 101: return;
   509  000A2A  EF07  F000         	goto	start
   510  000A2E                     __end_of_main:
   511                           	opt stack 0
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           
   519 ;; *************** function _SpeedCalcNotifyInitialize *****************
   520 ;; Defined at:
   521 ;;		line 19 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   535 ;;      Params:         0       0       0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0       0       0
   537 ;;      Temps:          0       0       0       0       0       0       0
   538 ;;      Totals:         0       0       0       0       0       0       0
   539 ;;Total ram usage:        0 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; Hardware stack levels required when called:    4
   542 ;; This function calls:
   543 ;;		_memset
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text1
   550  000CF8                     __ptext1:
   551                           	opt stack 0
   552  000CF8                     _SpeedCalcNotifyInitialize:
   553                           	opt stack 26
   554                           
   555                           ;SpeedCalc.c: 21: memset(LapCounterBuffer , 0 , sizeof(LapCounterBuffer));
   556                           
   557                           ;incstack = 0
   558  000CF8  0E20               	movlw	low _LapCounterBuffer
   559  000CFA  6E54               	movwf	memset@p1,c
   560  000CFC  0E00               	movlw	high _LapCounterBuffer
   561  000CFE  6E55               	movwf	memset@p1+1,c
   562  000D00  0E00               	movlw	0
   563  000D02  6E57               	movwf	memset@c+1,c
   564  000D04  0E00               	movlw	0
   565  000D06  6E56               	movwf	memset@c,c
   566  000D08  0E00               	movlw	0
   567  000D0A  6E59               	movwf	memset@n+1,c
   568  000D0C  0E24               	movlw	36
   569  000D0E  6E58               	movwf	memset@n,c
   570  000D10  EC2B  F006         	call	_memset	;wreg free
   571  000D14  0012               	return		;funcret
   572  000D16                     __end_of_SpeedCalcNotifyInitialize:
   573                           	opt stack 0
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           
   581 ;; *************** function _memset *****************
   582 ;; Defined at:
   583 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memset.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  p1              2   15[COMRAM] PTR void 
   586 ;;		 -> LapCounterBuffer(36), 
   587 ;;  c               2   17[COMRAM] int 
   588 ;;  n               2   19[COMRAM] unsigned int 
   589 ;; Auto vars:     Size  Location     Type
   590 ;;  p               2   21[COMRAM] PTR unsigned char 
   591 ;;		 -> LapCounterBuffer(36), 
   592 ;; Return value:  Size  Location     Type
   593 ;;                  2   15[COMRAM] PTR void 
   594 ;; Registers used:
   595 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   601 ;;      Params:         6       0       0       0       0       0       0
   602 ;;      Locals:         2       0       0       0       0       0       0
   603 ;;      Temps:          0       0       0       0       0       0       0
   604 ;;      Totals:         8       0       0       0       0       0       0
   605 ;;Total ram usage:        8 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    3
   608 ;; This function calls:
   609 ;;		Nothing
   610 ;; This function is called by:
   611 ;;		_SpeedCalcNotifyInitialize
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text2
   616  000C56                     __ptext2:
   617                           	opt stack 0
   618  000C56                     _memset:
   619                           	opt stack 26
   620                           
   621                           ;incstack = 0
   622  000C56  C054  F05A         	movff	memset@p1,memset@p
   623  000C5A  C055  F05B         	movff	memset@p1+1,memset@p+1
   624  000C5E  D008               	goto	l1326
   625  000C60                     l1322:
   626  000C60  C05A  FFD9         	movff	memset@p,fsr2l
   627  000C64  C05B  FFDA         	movff	memset@p+1,fsr2h
   628  000C68  C056  FFDF         	movff	memset@c,indf2
   629  000C6C  4A5A               	infsnz	memset@p,f,c
   630  000C6E  2A5B               	incf	memset@p+1,f,c
   631  000C70                     l1326:
   632  000C70  0658               	decf	memset@n,f,c
   633  000C72  A0D8               	btfss	status,0,c
   634  000C74  0659               	decf	memset@n+1,f,c
   635  000C76  2858               	incf	memset@n,w,c
   636  000C78  E1F3               	bnz	l1322
   637  000C7A  2859               	incf	memset@n+1,w,c
   638  000C7C  B4D8               	btfsc	status,2,c
   639  000C7E  0012               	return	
   640  000C80  D7EF               	goto	l1322
   641  000C82                     __end_of_memset:
   642                           	opt stack 0
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           indf2	equ	0xFDF
   650                           fsr2h	equ	0xFDA
   651                           fsr2l	equ	0xFD9
   652                           status	equ	0xFD8
   653                           
   654 ;; *************** function _RunScheduler *****************
   655 ;; Defined at:
   656 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   670 ;;      Params:         0       0       0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0       0       0
   672 ;;      Temps:          0       2       0       0       0       0       0
   673 ;;      Totals:         0       2       0       0       0       0       0
   674 ;;Total ram usage:        2 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; Hardware stack levels required when called:    7
   677 ;; This function calls:
   678 ;;		_DisplayAlphaNumeric
   679 ;;		_ManageApplication
   680 ;;		_ManageSpeedCalc
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text3
   687  0007B8                     __ptext3:
   688                           	opt stack 0
   689  0007B8                     _RunScheduler:
   690                           	opt stack 23
   691  0007B8                     
   692                           ;Scheduler.c: 29: {
   693                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 3 ; TaskIndex++)
   694  0007B8  0E00               	movlw	0
   695  0007BA  6E1B               	movwf	RunScheduler@TaskIndex,c
   696  0007BC                     l1478:
   697  0007BC  0E02               	movlw	2
   698  0007BE  641B               	cpfsgt	RunScheduler@TaskIndex,c
   699  0007C0  D001               	goto	l1482
   700  0007C2  D7FA               	goto	l1476
   701  0007C4                     l1482:
   702                           
   703                           ;Scheduler.c: 31: {
   704                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   705  0007C4  501B               	movf	RunScheduler@TaskIndex,w,c
   706  0007C6  0D04               	mullw	4
   707  0007C8  0E02               	movlw	2
   708  0007CA  26F3               	addwf	prodl,f,c
   709  0007CC  0E00               	movlw	0
   710  0007CE  22F4               	addwfc	prodh,f,c
   711  0007D0  0E01               	movlw	low _ArrayTask
   712  0007D2  24F3               	addwf	prodl,w,c
   713  0007D4  6ED9               	movwf	fsr2l,c
   714  0007D6  0E00               	movlw	high _ArrayTask
   715  0007D8  20F4               	addwfc	prodh,w,c
   716  0007DA  6EDA               	movwf	fsr2h,c
   717  0007DC  501B               	movf	RunScheduler@TaskIndex,w,c
   718  0007DE  0D04               	mullw	4
   719  0007E0  0E03               	movlw	3
   720  0007E2  26F3               	addwf	prodl,f,c
   721  0007E4  0E00               	movlw	0
   722  0007E6  22F4               	addwfc	prodh,f,c
   723  0007E8  0E01               	movlw	low _ArrayTask
   724  0007EA  24F3               	addwf	prodl,w,c
   725  0007EC  6EE1               	movwf	fsr1l,c
   726  0007EE  0E00               	movlw	high _ArrayTask
   727  0007F0  20F4               	addwfc	prodh,w,c
   728  0007F2  6EE2               	movwf	fsr1h,c
   729  0007F4  50DE               	movf	postinc2,w,c
   730  0007F6  5CE6               	subwf	postinc1,w,c
   731  0007F8  A0D8               	btfss	status,0,c
   732  0007FA  D022               	goto	l1488
   733                           
   734                           ;Scheduler.c: 33: {
   735                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   736  0007FC  501B               	movf	RunScheduler@TaskIndex,w,c
   737  0007FE  0D04               	mullw	4
   738  000800  0E01               	movlw	low _ArrayTask
   739  000802  24F3               	addwf	prodl,w,c
   740  000804  6ED9               	movwf	fsr2l,c
   741  000806  0E00               	movlw	high _ArrayTask
   742  000808  20F4               	addwfc	prodh,w,c
   743  00080A  6EDA               	movwf	fsr2h,c
   744  00080C  D801               	call	u748
   745  00080E  D00A               	goto	l1486
   746  000810                     u748:
   747  000810  0005               	push	
   748  000812  6EFA               	movwf	pclath,c
   749  000814  50DE               	movf	postinc2,w,c
   750  000816  6EFD               	movwf	tosl,c
   751  000818  50DE               	movf	postinc2,w,c
   752  00081A  6EFE               	movwf	tosh,c
   753  00081C  50F8               	movf	tblptru,w,c
   754  00081E  6EFF               	movwf	tosu,c
   755  000820  50FA               	movf	pclath,w,c
   756  000822  0012               	return		;indir
   757  000824                     l1486:
   758                           
   759                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   760  000824  501B               	movf	RunScheduler@TaskIndex,w,c
   761  000826  0D04               	mullw	4
   762  000828  0E03               	movlw	3
   763  00082A  26F3               	addwf	prodl,f,c
   764  00082C  0E00               	movlw	0
   765  00082E  22F4               	addwfc	prodh,f,c
   766  000830  0E01               	movlw	low _ArrayTask
   767  000832  24F3               	addwf	prodl,w,c
   768  000834  6ED9               	movwf	fsr2l,c
   769  000836  0E00               	movlw	high _ArrayTask
   770  000838  20F4               	addwfc	prodh,w,c
   771  00083A  6EDA               	movwf	fsr2h,c
   772  00083C  0E00               	movlw	0
   773  00083E  6EDF               	movwf	indf2,c
   774  000840                     l1488:
   775  000840  2A1B               	incf	RunScheduler@TaskIndex,f,c
   776  000842  D7BC               	goto	l1478
   777  000844                     __end_of_RunScheduler:
   778                           	opt stack 0
   779                           tosu	equ	0xFFF
   780                           tosh	equ	0xFFE
   781                           tosl	equ	0xFFD
   782                           pclath	equ	0xFFA
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           prodh	equ	0xFF4
   788                           prodl	equ	0xFF3
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           postinc1	equ	0xFE6
   792                           fsr1h	equ	0xFE2
   793                           fsr1l	equ	0xFE1
   794                           indf2	equ	0xFDF
   795                           postinc2	equ	0xFDE
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _DisplayAlphaNumeric *****************
   801 ;; Defined at:
   802 ;;		line 104 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   816 ;;      Params:         0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    5
   823 ;; This function calls:
   824 ;;		_BCDManage7segment
   825 ;; This function is called by:
   826 ;;		_main
   827 ;;		_RunScheduler
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text4
   832  000D52                     __ptext4:
   833                           	opt stack 0
   834  000D52                     _DisplayAlphaNumeric:
   835                           	opt stack 24
   836                           
   837                           ;main.c: 106: BCDManage7segment();
   838                           
   839                           ;incstack = 0
   840  000D52  EC69  F005         	call	_BCDManage7segment	;wreg free
   841  000D56  0012               	return		;funcret
   842  000D58                     __end_of_DisplayAlphaNumeric:
   843                           	opt stack 0
   844                           tosu	equ	0xFFF
   845                           tosh	equ	0xFFE
   846                           tosl	equ	0xFFD
   847                           pclath	equ	0xFFA
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           prodh	equ	0xFF4
   853                           prodl	equ	0xFF3
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           postinc1	equ	0xFE6
   857                           fsr1h	equ	0xFE2
   858                           fsr1l	equ	0xFE1
   859                           indf2	equ	0xFDF
   860                           postinc2	equ	0xFDE
   861                           fsr2h	equ	0xFDA
   862                           fsr2l	equ	0xFD9
   863                           status	equ	0xFD8
   864                           
   865 ;; *************** function _ManageApplication *****************
   866 ;; Defined at:
   867 ;;		line 108 in file "main.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   881 ;;      Params:         0       0       0       0       0       0       0
   882 ;;      Locals:         0       0       0       0       0       0       0
   883 ;;      Temps:          0       0       0       0       0       0       0
   884 ;;      Totals:         0       0       0       0       0       0       0
   885 ;;Total ram usage:        0 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; Hardware stack levels required when called:    6
   888 ;; This function calls:
   889 ;;		_APP_MANAGE
   890 ;; This function is called by:
   891 ;;		_main
   892 ;;		_RunScheduler
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text5
   897  000D58                     __ptext5:
   898                           	opt stack 0
   899  000D58                     _ManageApplication:
   900                           	opt stack 23
   901                           
   902                           ;main.c: 110: APP_MANAGE();
   903                           
   904                           ;incstack = 0
   905  000D58  ECB8  F005         	call	_APP_MANAGE	;wreg free
   906  000D5C  0012               	return		;funcret
   907  000D5E                     __end_of_ManageApplication:
   908                           	opt stack 0
   909                           tosu	equ	0xFFF
   910                           tosh	equ	0xFFE
   911                           tosl	equ	0xFFD
   912                           pclath	equ	0xFFA
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           prodh	equ	0xFF4
   918                           prodl	equ	0xFF3
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postinc1	equ	0xFE6
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           indf2	equ	0xFDF
   925                           postinc2	equ	0xFDE
   926                           fsr2h	equ	0xFDA
   927                           fsr2l	equ	0xFD9
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function _ManageSpeedCalc *****************
   931 ;; Defined at:
   932 ;;		line 112 in file "main.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   946 ;;      Params:         0       0       0       0       0       0       0
   947 ;;      Locals:         0       0       0       0       0       0       0
   948 ;;      Temps:          0       0       0       0       0       0       0
   949 ;;      Totals:         0       0       0       0       0       0       0
   950 ;;Total ram usage:        0 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    4
   953 ;; This function calls:
   954 ;;		_SpeedCalcManage
   955 ;; This function is called by:
   956 ;;		_main
   957 ;;		_RunScheduler
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text6
   962  000D5E                     __ptext6:
   963                           	opt stack 0
   964  000D5E                     _ManageSpeedCalc:
   965                           	opt stack 25
   966                           
   967                           ;main.c: 114: SpeedCalcManage();
   968                           
   969                           ;incstack = 0
   970  000D5E  EC63  F004         	call	_SpeedCalcManage	;wreg free
   971  000D62  0012               	return		;funcret
   972  000D64                     __end_of_ManageSpeedCalc:
   973                           	opt stack 0
   974                           tosu	equ	0xFFF
   975                           tosh	equ	0xFFE
   976                           tosl	equ	0xFFD
   977                           pclath	equ	0xFFA
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           postinc1	equ	0xFE6
   987                           fsr1h	equ	0xFE2
   988                           fsr1l	equ	0xFE1
   989                           indf2	equ	0xFDF
   990                           postinc2	equ	0xFDE
   991                           fsr2h	equ	0xFDA
   992                           fsr2l	equ	0xFD9
   993                           status	equ	0xFD8
   994                           
   995 ;; *************** function _SpeedCalcManage *****************
   996 ;; Defined at:
   997 ;;		line 55 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1011 ;;      Params:         0       0       0       0       0       0       0
  1012 ;;      Locals:         0       0       0       0       0       0       0
  1013 ;;      Temps:          1       0       0       0       0       0       0
  1014 ;;      Totals:         1       0       0       0       0       0       0
  1015 ;;Total ram usage:        1 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    3
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_ManageSpeedCalc
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text7
  1026  0008C6                     __ptext7:
  1027                           	opt stack 0
  1028  0008C6                     _SpeedCalcManage:
  1029                           	opt stack 25
  1030                           
  1031                           ;SpeedCalc.c: 57: static unsigned char LapTime = (unsigned char)0;
  1032                           ;SpeedCalc.c: 58: static unsigned char LapSampleIndex = (unsigned char)0;
  1033                           ;SpeedCalc.c: 60: LapTime ++;
  1034                           
  1035                           ;incstack = 0
  1036  0008C6  2A1D               	incf	SpeedCalcManage@LapTime,f,c
  1037                           
  1038                           ;SpeedCalc.c: 63: if((unsigned char)10 == LapTime)
  1039  0008C8  0E0A               	movlw	10
  1040  0008CA  181D               	xorwf	SpeedCalcManage@LapTime,w,c
  1041  0008CC  A4D8               	btfss	status,2,c
  1042  0008CE  0012               	return	
  1043                           
  1044                           ;SpeedCalc.c: 64: {
  1045                           ;SpeedCalc.c: 65: LapTime = (unsigned char)0;
  1046  0008D0  0E00               	movlw	0
  1047  0008D2  6E1D               	movwf	SpeedCalcManage@LapTime,c
  1048                           
  1049                           ;SpeedCalc.c: 66: LapCounterAvg += (unsigned short)LapCounter;
  1050  0008D4  501E               	movf	_LapCounter,w,c
  1051  0008D6  2619               	addwf	_LapCounterAvg,f,c
  1052  0008D8  0E00               	movlw	0
  1053  0008DA  221A               	addwfc	_LapCounterAvg+1,f,c
  1054                           
  1055                           ;SpeedCalc.c: 67: LapCounterAvg -= (unsigned short)LapCounterBuffer[LapSampleIndex];
  1056  0008DC  501C               	movf	SpeedCalcManage@LapSampleIndex,w,c
  1057  0008DE  0D01               	mullw	1
  1058  0008E0  0E20               	movlw	low _LapCounterBuffer
  1059  0008E2  24F3               	addwf	prodl,w,c
  1060  0008E4  6ED9               	movwf	fsr2l,c
  1061  0008E6  0E00               	movlw	high _LapCounterBuffer
  1062  0008E8  20F4               	addwfc	prodh,w,c
  1063  0008EA  6EDA               	movwf	fsr2h,c
  1064  0008EC  50DF               	movf	indf2,w,c
  1065  0008EE  6E54               	movwf	??_SpeedCalcManage& (0+255),c
  1066  0008F0  5054               	movf	??_SpeedCalcManage,w,c
  1067  0008F2  5E19               	subwf	_LapCounterAvg,f,c
  1068  0008F4  0E00               	movlw	0
  1069  0008F6  5A1A               	subwfb	_LapCounterAvg+1,f,c
  1070                           
  1071                           ;SpeedCalc.c: 69: LapCounterBuffer[LapSampleIndex] = LapCounter;
  1072  0008F8  501C               	movf	SpeedCalcManage@LapSampleIndex,w,c
  1073  0008FA  0D01               	mullw	1
  1074  0008FC  0E20               	movlw	low _LapCounterBuffer
  1075  0008FE  24F3               	addwf	prodl,w,c
  1076  000900  6ED9               	movwf	fsr2l,c
  1077  000902  0E00               	movlw	high _LapCounterBuffer
  1078  000904  20F4               	addwfc	prodh,w,c
  1079  000906  6EDA               	movwf	fsr2h,c
  1080  000908  C01E  FFDF         	movff	_LapCounter,indf2
  1081                           
  1082                           ;SpeedCalc.c: 70: LapCounter = (unsigned char)0;
  1083  00090C  0E00               	movlw	0
  1084  00090E  6E1E               	movwf	_LapCounter,c
  1085                           
  1086                           ;SpeedCalc.c: 71: DistTravelCntr ++;
  1087  000910  0E01               	movlw	1
  1088  000912  2615               	addwf	_DistTravelCntr,f,c
  1089  000914  0E00               	movlw	0
  1090  000916  2216               	addwfc	_DistTravelCntr+1,f,c
  1091  000918  2217               	addwfc	_DistTravelCntr+2,f,c
  1092  00091A  2218               	addwfc	_DistTravelCntr+3,f,c
  1093                           
  1094                           ;SpeedCalc.c: 74: LapSampleIndex ++;
  1095  00091C  2A1C               	incf	SpeedCalcManage@LapSampleIndex,f,c
  1096                           
  1097                           ;SpeedCalc.c: 76: if( (unsigned char)36 == LapSampleIndex )
  1098  00091E  0E24               	movlw	36
  1099  000920  181C               	xorwf	SpeedCalcManage@LapSampleIndex,w,c
  1100  000922  A4D8               	btfss	status,2,c
  1101  000924  0012               	return	
  1102                           
  1103                           ;SpeedCalc.c: 77: {
  1104                           ;SpeedCalc.c: 78: LapSampleIndex = (unsigned char)0;
  1105  000926  0E00               	movlw	0
  1106  000928  6E1C               	movwf	SpeedCalcManage@LapSampleIndex,c
  1107                           
  1108                           ;SpeedCalc.c: 79: }
  1109                           ;SpeedCalc.c: 80: }
  1110  00092A  0012               	return	
  1111  00092C                     __end_of_SpeedCalcManage:
  1112                           	opt stack 0
  1113                           tosu	equ	0xFFF
  1114                           tosh	equ	0xFFE
  1115                           tosl	equ	0xFFD
  1116                           pclath	equ	0xFFA
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           prodh	equ	0xFF4
  1122                           prodl	equ	0xFF3
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postinc1	equ	0xFE6
  1126                           fsr1h	equ	0xFE2
  1127                           fsr1l	equ	0xFE1
  1128                           indf2	equ	0xFDF
  1129                           postinc2	equ	0xFDE
  1130                           fsr2h	equ	0xFDA
  1131                           fsr2l	equ	0xFD9
  1132                           status	equ	0xFD8
  1133                           
  1134 ;; *************** function _APP_MANAGE *****************
  1135 ;; Defined at:
  1136 ;;		line 15 in file "../../../../Common/App/APP.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;		None
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  AvgSpeedKph     2    4[BANK0 ] unsigned short 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1150 ;;      Params:         0       0       0       0       0       0       0
  1151 ;;      Locals:         0       2       0       0       0       0       0
  1152 ;;      Temps:          0       0       0       0       0       0       0
  1153 ;;      Totals:         0       2       0       0       0       0       0
  1154 ;;Total ram usage:        2 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    5
  1157 ;; This function calls:
  1158 ;;		_BCDsendNumber
  1159 ;;		_GetAvgSpeed
  1160 ;;		_SetCircumfirunce
  1161 ;;		___lwdiv
  1162 ;; This function is called by:
  1163 ;;		_ManageApplication
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text8
  1168  000B70                     __ptext8:
  1169                           	opt stack 0
  1170  000B70                     _APP_MANAGE:
  1171                           	opt stack 23
  1172                           
  1173                           ;APP.c: 17: unsigned short AvgSpeedKph;
  1174                           ;APP.c: 21: SetCircumfirunce(200);
  1175                           
  1176                           ;incstack = 0
  1177  000B70  0EC8               	movlw	200
  1178  000B72  EC91  F005         	call	_SetCircumfirunce
  1179                           
  1180                           ;APP.c: 23: AvgSpeedKph = GetAvgSpeed();
  1181  000B76  EC17  F005         	call	_GetAvgSpeed	;wreg free
  1182  000B7A  C080  F084         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  1183  000B7E  C081  F085         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  1184                           
  1185                           ;APP.c: 25: AvgSpeedKph = (AvgSpeedKph + (unsigned short)5)/(unsigned short)10;
  1186  000B82  0E05               	movlw	5
  1187  000B84  0100               	movlb	0	; () banked
  1188  000B86  2584               	addwf	APP_MANAGE@AvgSpeedKph& (0+255),w,b
  1189  000B88  6E54               	movwf	___lwdiv@dividend,c
  1190  000B8A  0E00               	movlw	0
  1191  000B8C  0100               	movlb	0	; () banked
  1192  000B8E  2185               	addwfc	(APP_MANAGE@AvgSpeedKph+1)& (0+255),w,b
  1193  000B90  6E55               	movwf	___lwdiv@dividend+1,c
  1194  000B92  0E00               	movlw	0
  1195  000B94  6E57               	movwf	___lwdiv@divisor+1,c
  1196  000B96  0E0A               	movlw	10
  1197  000B98  6E56               	movwf	___lwdiv@divisor,c
  1198  000B9A  EC40  F005         	call	___lwdiv	;wreg free
  1199  000B9E  C054  F084         	movff	?___lwdiv,APP_MANAGE@AvgSpeedKph
  1200  000BA2  C055  F085         	movff	?___lwdiv+1,APP_MANAGE@AvgSpeedKph+1
  1201                           
  1202                           ;APP.c: 37: BCDsendNumber(AvgSpeedKph,0);
  1203  000BA6  C084  F05B         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  1204  000BAA  C085  F05C         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  1205  000BAE  0E00               	movlw	0
  1206  000BB0  6E5D               	movwf	BCDsendNumber@DecimalPlace,c
  1207  000BB2  EC07  F003         	call	_BCDsendNumber	;wreg free
  1208  000BB6  0012               	return		;funcret
  1209  000BB8                     __end_of_APP_MANAGE:
  1210                           	opt stack 0
  1211                           tosu	equ	0xFFF
  1212                           tosh	equ	0xFFE
  1213                           tosl	equ	0xFFD
  1214                           pclath	equ	0xFFA
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodh	equ	0xFF4
  1220                           prodl	equ	0xFF3
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postinc1	equ	0xFE6
  1224                           fsr1h	equ	0xFE2
  1225                           fsr1l	equ	0xFE1
  1226                           indf2	equ	0xFDF
  1227                           postinc2	equ	0xFDE
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function _SetCircumfirunce *****************
  1233 ;; Defined at:
  1234 ;;		line 98 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  Circum          1    wreg     unsigned char 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  Circum          1   40[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1248 ;;      Params:         0       0       0       0       0       0       0
  1249 ;;      Locals:         1       0       0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0
  1251 ;;      Totals:         1       0       0       0       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    4
  1255 ;; This function calls:
  1256 ;;		___lldiv
  1257 ;;		___lmul
  1258 ;; This function is called by:
  1259 ;;		_APP_MANAGE
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text9
  1264  000B22                     __ptext9:
  1265                           	opt stack 0
  1266  000B22                     _SetCircumfirunce:
  1267                           	opt stack 23
  1268                           
  1269                           ;incstack = 0
  1270                           ;SetCircumfirunce@Circum stored from wreg
  1271  000B22  6E6D               	movwf	SetCircumfirunce@Circum,c
  1272                           
  1273                           ;SpeedCalc.c: 100: KMfactor = (unsigned short)(
  1274                           ;SpeedCalc.c: 101: ((unsigned long)36 * (unsigned long)Circum)
  1275                           ;SpeedCalc.c: 102: /((unsigned long)36)
  1276                           ;SpeedCalc.c: 103: );
  1277  000B24  506D               	movf	SetCircumfirunce@Circum,w,c
  1278  000B26  6E54               	movwf	___lmul@multiplier,c
  1279  000B28  6A55               	clrf	___lmul@multiplier+1,c
  1280  000B2A  6A56               	clrf	___lmul@multiplier+2,c
  1281  000B2C  6A57               	clrf	___lmul@multiplier+3,c
  1282  000B2E  0E24               	movlw	36
  1283  000B30  6E58               	movwf	___lmul@multiplicand,c
  1284  000B32  0E00               	movlw	0
  1285  000B34  6E59               	movwf	___lmul@multiplicand+1,c
  1286  000B36  0E00               	movlw	0
  1287  000B38  6E5A               	movwf	___lmul@multiplicand+2,c
  1288  000B3A  0E00               	movlw	0
  1289  000B3C  6E5B               	movwf	___lmul@multiplicand+3,c
  1290  000B3E  ECC2  F004         	call	___lmul	;wreg free
  1291  000B42  C054  F060         	movff	?___lmul,___lldiv@dividend
  1292  000B46  C055  F061         	movff	?___lmul+1,___lldiv@dividend+1
  1293  000B4A  C056  F062         	movff	?___lmul+2,___lldiv@dividend+2
  1294  000B4E  C057  F063         	movff	?___lmul+3,___lldiv@dividend+3
  1295  000B52  0E24               	movlw	36
  1296  000B54  6E64               	movwf	___lldiv@divisor,c
  1297  000B56  0E00               	movlw	0
  1298  000B58  6E65               	movwf	___lldiv@divisor+1,c
  1299  000B5A  0E00               	movlw	0
  1300  000B5C  6E66               	movwf	___lldiv@divisor+2,c
  1301  000B5E  0E00               	movlw	0
  1302  000B60  6E67               	movwf	___lldiv@divisor+3,c
  1303  000B62  EC22  F004         	call	___lldiv	;wreg free
  1304  000B66  C060  F06E         	movff	?___lldiv,_KMfactor
  1305  000B6A  C061  F06F         	movff	?___lldiv+1,_KMfactor+1
  1306  000B6E  0012               	return		;funcret
  1307  000B70                     __end_of_SetCircumfirunce:
  1308                           	opt stack 0
  1309                           tosu	equ	0xFFF
  1310                           tosh	equ	0xFFE
  1311                           tosl	equ	0xFFD
  1312                           pclath	equ	0xFFA
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           prodh	equ	0xFF4
  1318                           prodl	equ	0xFF3
  1319                           postinc0	equ	0xFEE
  1320                           wreg	equ	0xFE8
  1321                           postinc1	equ	0xFE6
  1322                           fsr1h	equ	0xFE2
  1323                           fsr1l	equ	0xFE1
  1324                           indf2	equ	0xFDF
  1325                           postinc2	equ	0xFDE
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330 ;; *************** function _GetAvgSpeed *****************
  1331 ;; Defined at:
  1332 ;;		line 107 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  AvgSpeedKph     2    2[BANK0 ] unsigned short 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  2    0[BANK0 ] unsigned short 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1346 ;;      Params:         0       2       0       0       0       0       0
  1347 ;;      Locals:         0       2       0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0
  1349 ;;      Totals:         0       4       0       0       0       0       0
  1350 ;;Total ram usage:        4 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    4
  1353 ;; This function calls:
  1354 ;;		___lldiv
  1355 ;;		___lmul
  1356 ;; This function is called by:
  1357 ;;		_APP_MANAGE
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text10
  1362  000A2E                     __ptext10:
  1363                           	opt stack 0
  1364  000A2E                     _GetAvgSpeed:
  1365                           	opt stack 23
  1366                           
  1367                           ;SpeedCalc.c: 109: unsigned short AvgSpeedKph;
  1368                           ;SpeedCalc.c: 111: AvgSpeedKph = (unsigned short)(
  1369                           ;SpeedCalc.c: 112: ((unsigned long)KMfactor * (unsigned long)LapCounterAvg)
  1370                           ;SpeedCalc.c: 113: /((unsigned long)20)
  1371                           ;SpeedCalc.c: 114: );
  1372                           
  1373                           ;incstack = 0
  1374  000A2E  C06E  F054         	movff	_KMfactor,___lmul@multiplier
  1375  000A32  C06F  F055         	movff	_KMfactor+1,___lmul@multiplier+1
  1376  000A36  6A56               	clrf	___lmul@multiplier+2,c
  1377  000A38  6A57               	clrf	___lmul@multiplier+3,c
  1378  000A3A  C019  F058         	movff	_LapCounterAvg,___lmul@multiplicand
  1379  000A3E  C01A  F059         	movff	_LapCounterAvg+1,___lmul@multiplicand+1
  1380  000A42  6A5A               	clrf	___lmul@multiplicand+2,c
  1381  000A44  6A5B               	clrf	___lmul@multiplicand+3,c
  1382  000A46  ECC2  F004         	call	___lmul	;wreg free
  1383  000A4A  C054  F060         	movff	?___lmul,___lldiv@dividend
  1384  000A4E  C055  F061         	movff	?___lmul+1,___lldiv@dividend+1
  1385  000A52  C056  F062         	movff	?___lmul+2,___lldiv@dividend+2
  1386  000A56  C057  F063         	movff	?___lmul+3,___lldiv@dividend+3
  1387  000A5A  0E14               	movlw	20
  1388  000A5C  6E64               	movwf	___lldiv@divisor,c
  1389  000A5E  0E00               	movlw	0
  1390  000A60  6E65               	movwf	___lldiv@divisor+1,c
  1391  000A62  0E00               	movlw	0
  1392  000A64  6E66               	movwf	___lldiv@divisor+2,c
  1393  000A66  0E00               	movlw	0
  1394  000A68  6E67               	movwf	___lldiv@divisor+3,c
  1395  000A6A  EC22  F004         	call	___lldiv	;wreg free
  1396  000A6E  C060  F082         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKph
  1397  000A72  C061  F083         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKph+1
  1398                           
  1399                           ;SpeedCalc.c: 115: return AvgSpeedKph;
  1400  000A76  C082  F080         	movff	GetAvgSpeed@AvgSpeedKph,?_GetAvgSpeed
  1401  000A7A  C083  F081         	movff	GetAvgSpeed@AvgSpeedKph+1,?_GetAvgSpeed+1
  1402  000A7E  0012               	return	
  1403  000A80                     __end_of_GetAvgSpeed:
  1404                           	opt stack 0
  1405                           tosu	equ	0xFFF
  1406                           tosh	equ	0xFFE
  1407                           tosl	equ	0xFFD
  1408                           pclath	equ	0xFFA
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           prodh	equ	0xFF4
  1414                           prodl	equ	0xFF3
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           postinc1	equ	0xFE6
  1418                           fsr1h	equ	0xFE2
  1419                           fsr1l	equ	0xFE1
  1420                           indf2	equ	0xFDF
  1421                           postinc2	equ	0xFDE
  1422                           fsr2h	equ	0xFDA
  1423                           fsr2l	equ	0xFD9
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function ___lmul *****************
  1427 ;; Defined at:
  1428 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  multiplier      4   15[COMRAM] unsigned long 
  1431 ;;  multiplicand    4   19[COMRAM] unsigned long 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  product         4   23[COMRAM] unsigned long 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  4   15[COMRAM] unsigned long 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1443 ;;      Params:         8       0       0       0       0       0       0
  1444 ;;      Locals:         4       0       0       0       0       0       0
  1445 ;;      Temps:          0       0       0       0       0       0       0
  1446 ;;      Totals:        12       0       0       0       0       0       0
  1447 ;;Total ram usage:       12 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    3
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_SetCircumfirunce
  1454 ;;		_GetAvgSpeed
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text11
  1459  000984                     __ptext11:
  1460                           	opt stack 0
  1461  000984                     ___lmul:
  1462                           	opt stack 23
  1463                           
  1464                           ;incstack = 0
  1465  000984  0E00               	movlw	0
  1466  000986  6E5C               	movwf	___lmul@product,c
  1467  000988  0E00               	movlw	0
  1468  00098A  6E5D               	movwf	___lmul@product+1,c
  1469  00098C  0E00               	movlw	0
  1470  00098E  6E5E               	movwf	___lmul@product+2,c
  1471  000990  0E00               	movlw	0
  1472  000992  6E5F               	movwf	___lmul@product+3,c
  1473  000994                     l1378:
  1474  000994  A054               	btfss	___lmul@multiplier,0,c
  1475  000996  D008               	goto	l1382
  1476  000998  5058               	movf	___lmul@multiplicand,w,c
  1477  00099A  265C               	addwf	___lmul@product,f,c
  1478  00099C  5059               	movf	___lmul@multiplicand+1,w,c
  1479  00099E  225D               	addwfc	___lmul@product+1,f,c
  1480  0009A0  505A               	movf	___lmul@multiplicand+2,w,c
  1481  0009A2  225E               	addwfc	___lmul@product+2,f,c
  1482  0009A4  505B               	movf	___lmul@multiplicand+3,w,c
  1483  0009A6  225F               	addwfc	___lmul@product+3,f,c
  1484  0009A8                     l1382:
  1485  0009A8  90D8               	bcf	status,0,c
  1486  0009AA  3658               	rlcf	___lmul@multiplicand,f,c
  1487  0009AC  3659               	rlcf	___lmul@multiplicand+1,f,c
  1488  0009AE  365A               	rlcf	___lmul@multiplicand+2,f,c
  1489  0009B0  365B               	rlcf	___lmul@multiplicand+3,f,c
  1490  0009B2  90D8               	bcf	status,0,c
  1491  0009B4  3257               	rrcf	___lmul@multiplier+3,f,c
  1492  0009B6  3256               	rrcf	___lmul@multiplier+2,f,c
  1493  0009B8  3255               	rrcf	___lmul@multiplier+1,f,c
  1494  0009BA  3254               	rrcf	___lmul@multiplier,f,c
  1495  0009BC  5054               	movf	___lmul@multiplier,w,c
  1496  0009BE  1055               	iorwf	___lmul@multiplier+1,w,c
  1497  0009C0  1056               	iorwf	___lmul@multiplier+2,w,c
  1498  0009C2  1057               	iorwf	___lmul@multiplier+3,w,c
  1499  0009C4  A4D8               	btfss	status,2,c
  1500  0009C6  D7E6               	goto	l1378
  1501  0009C8  C05C  F054         	movff	___lmul@product,?___lmul
  1502  0009CC  C05D  F055         	movff	___lmul@product+1,?___lmul+1
  1503  0009D0  C05E  F056         	movff	___lmul@product+2,?___lmul+2
  1504  0009D4  C05F  F057         	movff	___lmul@product+3,?___lmul+3
  1505  0009D8  0012               	return		;funcret
  1506  0009DA                     __end_of___lmul:
  1507                           	opt stack 0
  1508                           tosu	equ	0xFFF
  1509                           tosh	equ	0xFFE
  1510                           tosl	equ	0xFFD
  1511                           pclath	equ	0xFFA
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           prodh	equ	0xFF4
  1517                           prodl	equ	0xFF3
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postinc1	equ	0xFE6
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           indf2	equ	0xFDF
  1524                           postinc2	equ	0xFDE
  1525                           fsr2h	equ	0xFDA
  1526                           fsr2l	equ	0xFD9
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function ___lldiv *****************
  1530 ;; Defined at:
  1531 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  dividend        4   27[COMRAM] unsigned long 
  1534 ;;  divisor         4   31[COMRAM] unsigned long 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  quotient        4   35[COMRAM] unsigned long 
  1537 ;;  counter         1   39[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  4   27[COMRAM] unsigned long 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         8       0       0       0       0       0       0
  1548 ;;      Locals:         5       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0
  1550 ;;      Totals:        13       0       0       0       0       0       0
  1551 ;;Total ram usage:       13 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    3
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_SetCircumfirunce
  1558 ;;		_GetAvgSpeed
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text12
  1563  000844                     __ptext12:
  1564                           	opt stack 0
  1565  000844                     ___lldiv:
  1566                           	opt stack 23
  1567                           
  1568                           ;incstack = 0
  1569  000844  0E00               	movlw	0
  1570  000846  6E68               	movwf	___lldiv@quotient,c
  1571  000848  0E00               	movlw	0
  1572  00084A  6E69               	movwf	___lldiv@quotient+1,c
  1573  00084C  0E00               	movlw	0
  1574  00084E  6E6A               	movwf	___lldiv@quotient+2,c
  1575  000850  0E00               	movlw	0
  1576  000852  6E6B               	movwf	___lldiv@quotient+3,c
  1577  000854  5064               	movf	___lldiv@divisor,w,c
  1578  000856  1065               	iorwf	___lldiv@divisor+1,w,c
  1579  000858  1066               	iorwf	___lldiv@divisor+2,w,c
  1580  00085A  1067               	iorwf	___lldiv@divisor+3,w,c
  1581  00085C  B4D8               	btfsc	status,2,c
  1582  00085E  D02A               	goto	l614
  1583  000860  0E01               	movlw	1
  1584  000862  6E6C               	movwf	___lldiv@counter,c
  1585  000864  D006               	goto	l1394
  1586  000866                     l1392:
  1587  000866  90D8               	bcf	status,0,c
  1588  000868  3664               	rlcf	___lldiv@divisor,f,c
  1589  00086A  3665               	rlcf	___lldiv@divisor+1,f,c
  1590  00086C  3666               	rlcf	___lldiv@divisor+2,f,c
  1591  00086E  3667               	rlcf	___lldiv@divisor+3,f,c
  1592  000870  2A6C               	incf	___lldiv@counter,f,c
  1593  000872                     l1394:
  1594  000872  AE67               	btfss	___lldiv@divisor+3,7,c
  1595  000874  D7F8               	goto	l1392
  1596  000876                     l1396:
  1597  000876  90D8               	bcf	status,0,c
  1598  000878  3668               	rlcf	___lldiv@quotient,f,c
  1599  00087A  3669               	rlcf	___lldiv@quotient+1,f,c
  1600  00087C  366A               	rlcf	___lldiv@quotient+2,f,c
  1601  00087E  366B               	rlcf	___lldiv@quotient+3,f,c
  1602  000880  5064               	movf	___lldiv@divisor,w,c
  1603  000882  5C60               	subwf	___lldiv@dividend,w,c
  1604  000884  5065               	movf	___lldiv@divisor+1,w,c
  1605  000886  5861               	subwfb	___lldiv@dividend+1,w,c
  1606  000888  5066               	movf	___lldiv@divisor+2,w,c
  1607  00088A  5862               	subwfb	___lldiv@dividend+2,w,c
  1608  00088C  5067               	movf	___lldiv@divisor+3,w,c
  1609  00088E  5863               	subwfb	___lldiv@dividend+3,w,c
  1610  000890  A0D8               	btfss	status,0,c
  1611  000892  D009               	goto	l1404
  1612  000894  5064               	movf	___lldiv@divisor,w,c
  1613  000896  5E60               	subwf	___lldiv@dividend,f,c
  1614  000898  5065               	movf	___lldiv@divisor+1,w,c
  1615  00089A  5A61               	subwfb	___lldiv@dividend+1,f,c
  1616  00089C  5066               	movf	___lldiv@divisor+2,w,c
  1617  00089E  5A62               	subwfb	___lldiv@dividend+2,f,c
  1618  0008A0  5067               	movf	___lldiv@divisor+3,w,c
  1619  0008A2  5A63               	subwfb	___lldiv@dividend+3,f,c
  1620  0008A4  8068               	bsf	___lldiv@quotient,0,c
  1621  0008A6                     l1404:
  1622  0008A6  90D8               	bcf	status,0,c
  1623  0008A8  3267               	rrcf	___lldiv@divisor+3,f,c
  1624  0008AA  3266               	rrcf	___lldiv@divisor+2,f,c
  1625  0008AC  3265               	rrcf	___lldiv@divisor+1,f,c
  1626  0008AE  3264               	rrcf	___lldiv@divisor,f,c
  1627  0008B0  2E6C               	decfsz	___lldiv@counter,f,c
  1628  0008B2  D7E1               	goto	l1396
  1629  0008B4                     l614:
  1630  0008B4  C068  F060         	movff	___lldiv@quotient,?___lldiv
  1631  0008B8  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  1632  0008BC  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  1633  0008C0  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  1634  0008C4  0012               	return		;funcret
  1635  0008C6                     __end_of___lldiv:
  1636                           	opt stack 0
  1637                           tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postinc1	equ	0xFE6
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function _BCDsendNumber *****************
  1659 ;; Defined at:
  1660 ;;		line 25 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  Number          2   22[COMRAM] unsigned short 
  1663 ;;  DecimalPlace    1   24[COMRAM] unsigned char 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  Buffer          2   31[COMRAM] unsigned short 
  1666 ;;  Output          2   29[COMRAM] unsigned short 
  1667 ;;  Link            2   27[COMRAM] unsigned short 
  1668 ;;  LoopIndex       1   33[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1678 ;;      Params:         3       0       0       0       0       0       0
  1679 ;;      Locals:         7       0       0       0       0       0       0
  1680 ;;      Temps:          2       0       0       0       0       0       0
  1681 ;;      Totals:        12       0       0       0       0       0       0
  1682 ;;Total ram usage:       12 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    4
  1685 ;; This function calls:
  1686 ;;		___lwdiv
  1687 ;;		___wmul
  1688 ;; This function is called by:
  1689 ;;		_APP_MANAGE
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text13
  1694  00060E                     __ptext13:
  1695                           	opt stack 0
  1696  00060E                     _BCDsendNumber:
  1697                           	opt stack 23
  1698                           
  1699                           ;BCDdisplay.c: 27: unsigned short Link,Output,Buffer;
  1700                           ;BCDdisplay.c: 28: unsigned char LoopIndex;
  1701                           ;BCDdisplay.c: 31: Buffer = Number;
  1702                           
  1703                           ;incstack = 0
  1704  00060E  C05B  F064         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  1705  000612  C05C  F065         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  1706                           
  1707                           ;BCDdisplay.c: 32: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  1708  000616  0E00               	movlw	0
  1709  000618  6E66               	movwf	BCDsendNumber@LoopIndex,c
  1710  00061A                     l1442:
  1711  00061A  0E03               	movlw	3
  1712  00061C  6466               	cpfsgt	BCDsendNumber@LoopIndex,c
  1713  00061E  D001               	goto	l1446
  1714  000620  D05C               	goto	l1466
  1715  000622                     l1446:
  1716                           
  1717                           ;BCDdisplay.c: 33: {
  1718                           ;BCDdisplay.c: 34: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  1719  000622  5064               	movf	BCDsendNumber@Buffer,w,c
  1720  000624  1065               	iorwf	BCDsendNumber@Buffer+1,w,c
  1721  000626  A4D8               	btfss	status,2,c
  1722  000628  D004               	goto	l27
  1723  00062A  5066               	movf	BCDsendNumber@LoopIndex,w,c
  1724  00062C  5C5D               	subwf	BCDsendNumber@DecimalPlace,w,c
  1725  00062E  A0D8               	btfss	status,0,c
  1726  000630  D02D               	goto	l1456
  1727  000632                     l27:
  1728                           
  1729                           ;BCDdisplay.c: 35: {
  1730                           ;BCDdisplay.c: 36: Link = Buffer;
  1731  000632  C064  F060         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  1732  000636  C065  F061         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  1733                           
  1734                           ;BCDdisplay.c: 37: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  1735  00063A  C064  F054         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  1736  00063E  C065  F055         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  1737  000642  0E00               	movlw	0
  1738  000644  6E57               	movwf	___lwdiv@divisor+1,c
  1739  000646  0E0A               	movlw	10
  1740  000648  6E56               	movwf	___lwdiv@divisor,c
  1741  00064A  EC40  F005         	call	___lwdiv	;wreg free
  1742  00064E  C054  F064         	movff	?___lwdiv,BCDsendNumber@Buffer
  1743  000652  C055  F065         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  1744                           
  1745                           ;BCDdisplay.c: 38: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  1746  000656  C064  F054         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  1747  00065A  C065  F055         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  1748  00065E  0E00               	movlw	0
  1749  000660  6E57               	movwf	___wmul@multiplicand+1,c
  1750  000662  0E0A               	movlw	10
  1751  000664  6E56               	movwf	___wmul@multiplicand,c
  1752  000666  EC56  F006         	call	___wmul	;wreg free
  1753  00066A  1E54               	comf	?___wmul,f,c
  1754  00066C  1E55               	comf	?___wmul+1,f,c
  1755  00066E  4A54               	infsnz	?___wmul,f,c
  1756  000670  2A55               	incf	?___wmul+1,f,c
  1757  000672  5060               	movf	BCDsendNumber@Link,w,c
  1758  000674  2454               	addwf	?___wmul,w,c
  1759  000676  6E62               	movwf	BCDsendNumber@Output,c
  1760  000678  5061               	movf	BCDsendNumber@Link+1,w,c
  1761  00067A  2055               	addwfc	?___wmul+1,w,c
  1762  00067C  6E63               	movwf	BCDsendNumber@Output+1,c
  1763                           
  1764                           ;BCDdisplay.c: 40: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  1765  00067E  0E01               	movlw	low _SevenSegmentMAP
  1766  000680  2462               	addwf	BCDsendNumber@Output,w,c
  1767  000682  6EF6               	movwf	tblptrl,c
  1768  000684  0E06               	movlw	high _SevenSegmentMAP
  1769  000686  2063               	addwfc	BCDsendNumber@Output+1,w,c
  1770  000688  6EF7               	movwf	tblptrh,c
  1771  00068A                     	if	0	;There are less than 3 active tblptr bytes
  1772  00068A  D008               	goto	L1
  1773  00068C                     l1456:
  1774                           
  1775                           ;BCDdisplay.c: 42: else if (LoopIndex <= DecimalPlace)
  1776  00068C  5066               	movf	BCDsendNumber@LoopIndex,w,c
  1777  00068E  5C5D               	subwf	BCDsendNumber@DecimalPlace,w,c
  1778  000690  A0D8               	btfss	status,0,c
  1779  000692  D015               	goto	l1460
  1780                           
  1781                           ;BCDdisplay.c: 43: {
  1782                           ;BCDdisplay.c: 44: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  1783  000694  0E01               	movlw	low _SevenSegmentMAP
  1784  000696  6EF6               	movwf	tblptrl,c
  1785  000698                     	if	1	;There is more than 1 active tblptr byte
  1786  000698  0E06               	movlw	high _SevenSegmentMAP
  1787  00069A  6EF7               	movwf	tblptrh,c
  1788  00069C                     	endif
  1789  00069C                     	if	0	;There are less than 3 active tblptr bytes
  1790  00069C                     L1:
  1791  00069C                     	endif
  1792  00069C  0008               	tblrd		*
  1793  00069E  50F5               	movf	tablat,w,c
  1794  0006A0  6E5E               	movwf	??_BCDsendNumber& (0+255),c
  1795  0006A2  6A5F               	clrf	(??_BCDsendNumber+1)& (0+255),c
  1796  0006A4  5066               	movf	BCDsendNumber@LoopIndex,w,c
  1797  0006A6  0D02               	mullw	2
  1798  0006A8  0E0D               	movlw	low _BCDNumber
  1799  0006AA  24F3               	addwf	prodl,w,c
  1800  0006AC  6ED9               	movwf	fsr2l,c
  1801  0006AE  0E00               	movlw	high _BCDNumber
  1802  0006B0  20F4               	addwfc	prodh,w,c
  1803  0006B2  6EDA               	movwf	fsr2h,c
  1804  0006B4  C05E  FFDE         	movff	??_BCDsendNumber,postinc2
  1805  0006B8  C05F  FFDD         	movff	??_BCDsendNumber+1,postdec2
  1806                           
  1807                           ;BCDdisplay.c: 45: }
  1808  0006BC  D00C               	goto	l1462
  1809  0006BE                     l1460:
  1810                           
  1811                           ;BCDdisplay.c: 46: else
  1812                           ;BCDdisplay.c: 47: {
  1813                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = 0x0;
  1814  0006BE  5066               	movf	BCDsendNumber@LoopIndex,w,c
  1815  0006C0  0D02               	mullw	2
  1816  0006C2  0E0D               	movlw	low _BCDNumber
  1817  0006C4  24F3               	addwf	prodl,w,c
  1818  0006C6  6ED9               	movwf	fsr2l,c
  1819  0006C8  0E00               	movlw	high _BCDNumber
  1820  0006CA  20F4               	addwfc	prodh,w,c
  1821  0006CC  6EDA               	movwf	fsr2h,c
  1822  0006CE  0E00               	movlw	0
  1823  0006D0  6EDE               	movwf	postinc2,c
  1824  0006D2  0E00               	movlw	0
  1825  0006D4  6EDD               	movwf	postdec2,c
  1826  0006D6                     l1462:
  1827  0006D6  2A66               	incf	BCDsendNumber@LoopIndex,f,c
  1828  0006D8  D7A0               	goto	l1442
  1829  0006DA                     l1466:
  1830                           
  1831                           ;BCDdisplay.c: 49: }
  1832                           ;BCDdisplay.c: 50: }
  1833                           ;BCDdisplay.c: 51: if(DecimalPlace != (unsigned char)0)
  1834  0006DA  505D               	movf	BCDsendNumber@DecimalPlace,w,c
  1835  0006DC  B4D8               	btfsc	status,2,c
  1836  0006DE  0012               	return	
  1837                           
  1838                           ;BCDdisplay.c: 52: {
  1839                           ;BCDdisplay.c: 53: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  1840  0006E0  505D               	movf	BCDsendNumber@DecimalPlace,w,c
  1841  0006E2  0D02               	mullw	2
  1842  0006E4  0E0D               	movlw	low _BCDNumber
  1843  0006E6  24F3               	addwf	prodl,w,c
  1844  0006E8  6ED9               	movwf	fsr2l,c
  1845  0006EA  0E00               	movlw	high _BCDNumber
  1846  0006EC  20F4               	addwfc	prodh,w,c
  1847  0006EE  6EDA               	movwf	fsr2h,c
  1848  0006F0  0E0B               	movlw	low (_SevenSegmentMAP+10)
  1849  0006F2  6EF6               	movwf	tblptrl,c
  1850  0006F4  0E06               	movlw	high (_SevenSegmentMAP+10)
  1851  0006F6  6EF7               	movwf	tblptrh,c
  1852  0006F8                     	if	0	;tblptru may be non-zero
  1853  0006F8                     	endif
  1854  0006F8                     	if	0	;tblptru may be non-zero
  1855  0006F8                     	endif
  1856  0006F8  0008               	tblrd		*
  1857  0006FA  50F5               	movf	tablat,w,c
  1858  0006FC  12DE               	iorwf	postinc2,f,c
  1859  0006FE  0E00               	movlw	0
  1860  000700  12DD               	iorwf	postdec2,f,c
  1861  000702  0012               	return	
  1862  000704                     __end_of_BCDsendNumber:
  1863                           	opt stack 0
  1864                           tosu	equ	0xFFF
  1865                           tosh	equ	0xFFE
  1866                           tosl	equ	0xFFD
  1867                           pclath	equ	0xFFA
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postinc1	equ	0xFE6
  1877                           fsr1h	equ	0xFE2
  1878                           fsr1l	equ	0xFE1
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function ___wmul *****************
  1887 ;; Defined at:
  1888 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  multiplier      2   15[COMRAM] unsigned int 
  1891 ;;  multiplicand    2   17[COMRAM] unsigned int 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  product         2   19[COMRAM] unsigned int 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2   15[COMRAM] unsigned int 
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0, prodl, prodh
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1903 ;;      Params:         4       0       0       0       0       0       0
  1904 ;;      Locals:         2       0       0       0       0       0       0
  1905 ;;      Temps:          0       0       0       0       0       0       0
  1906 ;;      Totals:         6       0       0       0       0       0       0
  1907 ;;Total ram usage:        6 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    3
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_BCDsendNumber
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text14
  1918  000CAC                     __ptext14:
  1919                           	opt stack 0
  1920  000CAC                     ___wmul:
  1921                           	opt stack 23
  1922                           
  1923                           ;incstack = 0
  1924  000CAC  5054               	movf	___wmul@multiplier,w,c
  1925  000CAE  0256               	mulwf	___wmul@multiplicand,c
  1926  000CB0  CFF3 F058          	movff	prodl,___wmul@product
  1927  000CB4  CFF4 F059          	movff	prodh,___wmul@product+1
  1928  000CB8  5054               	movf	___wmul@multiplier,w,c
  1929  000CBA  0257               	mulwf	___wmul@multiplicand+1,c
  1930  000CBC  50F3               	movf	prodl,w,c
  1931  000CBE  2659               	addwf	___wmul@product+1,f,c
  1932  000CC0  5055               	movf	___wmul@multiplier+1,w,c
  1933  000CC2  0256               	mulwf	___wmul@multiplicand,c
  1934  000CC4  50F3               	movf	prodl,w,c
  1935  000CC6  2659               	addwf	___wmul@product+1,f,c
  1936  000CC8  C058  F054         	movff	___wmul@product,?___wmul
  1937  000CCC  C059  F055         	movff	___wmul@product+1,?___wmul+1
  1938  000CD0  0012               	return	
  1939  000CD2                     __end_of___wmul:
  1940                           	opt stack 0
  1941                           tosu	equ	0xFFF
  1942                           tosh	equ	0xFFE
  1943                           tosl	equ	0xFFD
  1944                           pclath	equ	0xFFA
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodh	equ	0xFF4
  1950                           prodl	equ	0xFF3
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postinc1	equ	0xFE6
  1954                           fsr1h	equ	0xFE2
  1955                           fsr1l	equ	0xFE1
  1956                           indf2	equ	0xFDF
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function ___lwdiv *****************
  1964 ;; Defined at:
  1965 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  dividend        2   15[COMRAM] unsigned int 
  1968 ;;  divisor         2   17[COMRAM] unsigned int 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  quotient        2   20[COMRAM] unsigned int 
  1971 ;;  counter         1   19[COMRAM] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  2   15[COMRAM] unsigned int 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1981 ;;      Params:         4       0       0       0       0       0       0
  1982 ;;      Locals:         3       0       0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0
  1984 ;;      Totals:         7       0       0       0       0       0       0
  1985 ;;Total ram usage:        7 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    3
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_APP_MANAGE
  1992 ;;		_BCDsendNumber
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text15
  1997  000A80                     __ptext15:
  1998                           	opt stack 0
  1999  000A80                     ___lwdiv:
  2000                           	opt stack 24
  2001                           
  2002                           ;incstack = 0
  2003  000A80  0E00               	movlw	0
  2004  000A82  6E5A               	movwf	___lwdiv@quotient+1,c
  2005  000A84  0E00               	movlw	0
  2006  000A86  6E59               	movwf	___lwdiv@quotient,c
  2007  000A88  5056               	movf	___lwdiv@divisor,w,c
  2008  000A8A  1057               	iorwf	___lwdiv@divisor+1,w,c
  2009  000A8C  B4D8               	btfsc	status,2,c
  2010  000A8E  D01C               	goto	l667
  2011  000A90  0E01               	movlw	1
  2012  000A92  6E58               	movwf	___lwdiv@counter,c
  2013  000A94  D004               	goto	l1416
  2014  000A96                     l1414:
  2015  000A96  90D8               	bcf	status,0,c
  2016  000A98  3656               	rlcf	___lwdiv@divisor,f,c
  2017  000A9A  3657               	rlcf	___lwdiv@divisor+1,f,c
  2018  000A9C  2A58               	incf	___lwdiv@counter,f,c
  2019  000A9E                     l1416:
  2020  000A9E  AE57               	btfss	___lwdiv@divisor+1,7,c
  2021  000AA0  D7FA               	goto	l1414
  2022  000AA2                     l1418:
  2023  000AA2  90D8               	bcf	status,0,c
  2024  000AA4  3659               	rlcf	___lwdiv@quotient,f,c
  2025  000AA6  365A               	rlcf	___lwdiv@quotient+1,f,c
  2026  000AA8  5056               	movf	___lwdiv@divisor,w,c
  2027  000AAA  5C54               	subwf	___lwdiv@dividend,w,c
  2028  000AAC  5057               	movf	___lwdiv@divisor+1,w,c
  2029  000AAE  5855               	subwfb	___lwdiv@dividend+1,w,c
  2030  000AB0  A0D8               	btfss	status,0,c
  2031  000AB2  D005               	goto	l1426
  2032  000AB4  5056               	movf	___lwdiv@divisor,w,c
  2033  000AB6  5E54               	subwf	___lwdiv@dividend,f,c
  2034  000AB8  5057               	movf	___lwdiv@divisor+1,w,c
  2035  000ABA  5A55               	subwfb	___lwdiv@dividend+1,f,c
  2036  000ABC  8059               	bsf	___lwdiv@quotient,0,c
  2037  000ABE                     l1426:
  2038  000ABE  90D8               	bcf	status,0,c
  2039  000AC0  3257               	rrcf	___lwdiv@divisor+1,f,c
  2040  000AC2  3256               	rrcf	___lwdiv@divisor,f,c
  2041  000AC4  2E58               	decfsz	___lwdiv@counter,f,c
  2042  000AC6  D7ED               	goto	l1418
  2043  000AC8                     l667:
  2044  000AC8  C059  F054         	movff	___lwdiv@quotient,?___lwdiv
  2045  000ACC  C05A  F055         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2046  000AD0  0012               	return		;funcret
  2047  000AD2                     __end_of___lwdiv:
  2048                           	opt stack 0
  2049                           tosu	equ	0xFFF
  2050                           tosh	equ	0xFFE
  2051                           tosl	equ	0xFFD
  2052                           pclath	equ	0xFFA
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postinc1	equ	0xFE6
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _BCDManage7segment *****************
  2072 ;; Defined at:
  2073 ;;		line 57 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2087 ;;      Params:         0       0       0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0
  2089 ;;      Temps:          3       0       0       0       0       0       0
  2090 ;;      Totals:         3       0       0       0       0       0       0
  2091 ;;Total ram usage:        3 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    4
  2094 ;; This function calls:
  2095 ;;		_HWI_4Digit_WRITE
  2096 ;;		_HWI_8Digit_WRITE
  2097 ;; This function is called by:
  2098 ;;		_DisplayAlphaNumeric
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text16
  2103  000AD2                     __ptext16:
  2104                           	opt stack 0
  2105  000AD2                     _BCDManage7segment:
  2106                           	opt stack 24
  2107                           
  2108                           ;BCDdisplay.c: 59: static unsigned char DigitIndex = (unsigned char)0;
  2109                           ;BCDdisplay.c: 62: HWI_4Digit_WRITE(0,(~((unsigned char) 0x8 >> DigitIndex)));
  2110                           
  2111                           ;incstack = 0
  2112  000AD2  C044  F056         	movff	BCDManage7segment@DigitIndex,??_BCDManage7segment
  2113  000AD6  0E08               	movlw	8
  2114  000AD8  6E57               	movwf	(??_BCDManage7segment+1)& (0+255),c
  2115  000ADA  0E00               	movlw	0
  2116  000ADC  6E58               	movwf	(??_BCDManage7segment+2)& (0+255),c
  2117  000ADE  2A56               	incf	??_BCDManage7segment,f,c
  2118  000AE0  D003               	goto	u504
  2119  000AE2                     u505:
  2120  000AE2  3458               	rlcf	??_BCDManage7segment+2,w,c
  2121  000AE4  3258               	rrcf	??_BCDManage7segment+2,f,c
  2122  000AE6  3257               	rrcf	??_BCDManage7segment+1,f,c
  2123  000AE8                     u504:
  2124  000AE8  2E56               	decfsz	??_BCDManage7segment,f,c
  2125  000AEA  D7FB               	goto	u505
  2126  000AEC  5057               	movf	??_BCDManage7segment+1,w,c
  2127  000AEE  0AFF               	xorlw	255
  2128  000AF0  6E54               	movwf	HWI_4Digit_WRITE@value,c
  2129  000AF2  0E00               	movlw	0
  2130  000AF4  EC12  F006         	call	_HWI_4Digit_WRITE
  2131                           
  2132                           ;BCDdisplay.c: 63: HWI_8Digit_WRITE(1,BCDNumber[DigitIndex]);
  2133  000AF8  5044               	movf	BCDManage7segment@DigitIndex,w,c
  2134  000AFA  0D02               	mullw	2
  2135  000AFC  0E0D               	movlw	low _BCDNumber
  2136  000AFE  24F3               	addwf	prodl,w,c
  2137  000B00  6ED9               	movwf	fsr2l,c
  2138  000B02  0E00               	movlw	high _BCDNumber
  2139  000B04  20F4               	addwfc	prodh,w,c
  2140  000B06  6EDA               	movwf	fsr2h,c
  2141  000B08  50DF               	movf	indf2,w,c
  2142  000B0A  6E54               	movwf	HWI_8Digit_WRITE@value,c
  2143  000B0C  0E01               	movlw	1
  2144  000B0E  EC69  F006         	call	_HWI_8Digit_WRITE
  2145                           
  2146                           ;BCDdisplay.c: 70: DigitIndex ++;
  2147  000B12  2A44               	incf	BCDManage7segment@DigitIndex,f,c
  2148                           
  2149                           ;BCDdisplay.c: 71: if(DigitIndex == 4)
  2150  000B14  0E04               	movlw	4
  2151  000B16  1844               	xorwf	BCDManage7segment@DigitIndex,w,c
  2152  000B18  A4D8               	btfss	status,2,c
  2153  000B1A  0012               	return	
  2154                           
  2155                           ;BCDdisplay.c: 72: {
  2156                           ;BCDdisplay.c: 73: DigitIndex = (unsigned char)0;
  2157  000B1C  0E00               	movlw	0
  2158  000B1E  6E44               	movwf	BCDManage7segment@DigitIndex,c
  2159  000B20  0012               	return	
  2160  000B22                     __end_of_BCDManage7segment:
  2161                           	opt stack 0
  2162                           tosu	equ	0xFFF
  2163                           tosh	equ	0xFFE
  2164                           tosl	equ	0xFFD
  2165                           pclath	equ	0xFFA
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           postinc1	equ	0xFE6
  2175                           fsr1h	equ	0xFE2
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _HWI_8Digit_WRITE *****************
  2185 ;; Defined at:
  2186 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  port            1    wreg     unsigned char 
  2189 ;;  value           1   15[COMRAM] unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  port            1   16[COMRAM] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2201 ;;      Params:         1       0       0       0       0       0       0
  2202 ;;      Locals:         1       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0
  2204 ;;      Totals:         2       0       0       0       0       0       0
  2205 ;;Total ram usage:        2 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    3
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_BCDManage7segment
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text17
  2216  000CD2                     __ptext17:
  2217                           	opt stack 0
  2218  000CD2                     _HWI_8Digit_WRITE:
  2219                           	opt stack 24
  2220                           
  2221                           ;incstack = 0
  2222                           ;HWI_8Digit_WRITE@port stored from wreg
  2223  000CD2  6E55               	movwf	HWI_8Digit_WRITE@port,c
  2224                           
  2225                           ;HWI_DIGITAL.c: 43: switch (port)
  2226  000CD4  D009               	goto	l1304
  2227  000CD6                     l152:
  2228                           
  2229                           ;HWI_DIGITAL.c: 46: PORTC = value;
  2230  000CD6  C054  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  2231                           
  2232                           ;HWI_DIGITAL.c: 47: break;
  2233  000CDA  0012               	return	
  2234  000CDC                     l154:
  2235                           
  2236                           ;HWI_DIGITAL.c: 49: PORTD = value;
  2237  000CDC  C054  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2238                           
  2239                           ;HWI_DIGITAL.c: 50: break;
  2240  000CE0  0012               	return	
  2241  000CE2                     l155:
  2242                           
  2243                           ;HWI_DIGITAL.c: 52: PORTD = value;
  2244  000CE2  C054  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2245                           
  2246                           ;HWI_DIGITAL.c: 53: }
  2247  000CE6  0012               	return	
  2248  000CE8                     l1304:
  2249  000CE8  5055               	movf	HWI_8Digit_WRITE@port,w,c
  2250                           
  2251                           ; Switch size 1, requested type "space"
  2252                           ; Number of cases is 2, Range of values is 0 to 1
  2253                           ; switch strategies available:
  2254                           ; Name         Instructions Cycles
  2255                           ; simple_byte            7     4 (average)
  2256                           ;	Chosen strategy is simple_byte
  2257  000CEA  0A00               	xorlw	0	; case 0
  2258  000CEC  B4D8               	btfsc	status,2,c
  2259  000CEE  D7F3               	goto	l152
  2260  000CF0  0A01               	xorlw	1	; case 1
  2261  000CF2  B4D8               	btfsc	status,2,c
  2262  000CF4  D7F3               	goto	l154
  2263  000CF6  D7F5               	goto	l155
  2264  000CF8                     __end_of_HWI_8Digit_WRITE:
  2265                           	opt stack 0
  2266                           tosu	equ	0xFFF
  2267                           tosh	equ	0xFFE
  2268                           tosl	equ	0xFFD
  2269                           pclath	equ	0xFFA
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           postinc1	equ	0xFE6
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _HWI_4Digit_WRITE *****************
  2289 ;; Defined at:
  2290 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  port            1    wreg     unsigned char 
  2293 ;;  value           1   15[COMRAM] unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  port            1   16[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2305 ;;      Params:         1       0       0       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0       0       0
  2308 ;;      Totals:         2       0       0       0       0       0       0
  2309 ;;Total ram usage:        2 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    3
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_BCDManage7segment
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text18
  2320  000C24                     __ptext18:
  2321                           	opt stack 0
  2322  000C24                     _HWI_4Digit_WRITE:
  2323                           	opt stack 24
  2324                           
  2325                           ;incstack = 0
  2326                           ;HWI_4Digit_WRITE@port stored from wreg
  2327  000C24  6E55               	movwf	HWI_4Digit_WRITE@port,c
  2328                           
  2329                           ;HWI_DIGITAL.c: 10: switch (port)
  2330  000C26  D00F               	goto	l1300
  2331  000C28                     l1294:
  2332                           
  2333                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  2334  000C28  508B               	movf	3979,w,c	;volatile
  2335  000C2A  0BF0               	andlw	240
  2336  000C2C  1054               	iorwf	HWI_4Digit_WRITE@value,w,c
  2337  000C2E  6E82               	movwf	3970,c	;volatile
  2338                           
  2339                           ;HWI_DIGITAL.c: 14: break;
  2340  000C30  0012               	return	
  2341  000C32                     l1296:
  2342                           
  2343                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  2344  000C32  508C               	movf	3980,w,c	;volatile
  2345  000C34  0BF0               	andlw	240
  2346  000C36  1054               	iorwf	HWI_4Digit_WRITE@value,w,c
  2347  000C38  6E83               	movwf	3971,c	;volatile
  2348                           
  2349                           ;HWI_DIGITAL.c: 17: break;
  2350  000C3A  0012               	return	
  2351  000C3C                     l1298:
  2352                           
  2353                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  2354  000C3C  508C               	movf	3980,w,c	;volatile
  2355  000C3E  0BF0               	andlw	240
  2356  000C40  1054               	iorwf	HWI_4Digit_WRITE@value,w,c
  2357  000C42  6E83               	movwf	3971,c	;volatile
  2358                           
  2359                           ;HWI_DIGITAL.c: 20: }
  2360  000C44  0012               	return	
  2361  000C46                     l1300:
  2362  000C46  5055               	movf	HWI_4Digit_WRITE@port,w,c
  2363                           
  2364                           ; Switch size 1, requested type "space"
  2365                           ; Number of cases is 2, Range of values is 0 to 1
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            7     4 (average)
  2369                           ;	Chosen strategy is simple_byte
  2370  000C48  0A00               	xorlw	0	; case 0
  2371  000C4A  B4D8               	btfsc	status,2,c
  2372  000C4C  D7ED               	goto	l1294
  2373  000C4E  0A01               	xorlw	1	; case 1
  2374  000C50  B4D8               	btfsc	status,2,c
  2375  000C52  D7EF               	goto	l1296
  2376  000C54  D7F3               	goto	l1298
  2377  000C56                     __end_of_HWI_4Digit_WRITE:
  2378                           	opt stack 0
  2379                           tosu	equ	0xFFF
  2380                           tosh	equ	0xFFE
  2381                           tosl	equ	0xFFD
  2382                           pclath	equ	0xFFA
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postinc1	equ	0xFE6
  2392                           fsr1h	equ	0xFE2
  2393                           fsr1l	equ	0xFE1
  2394                           indf2	equ	0xFDF
  2395                           postinc2	equ	0xFDE
  2396                           postdec2	equ	0xFDD
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _HWI_TIMERS_INTITALIZE *****************
  2402 ;; Defined at:
  2403 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, status,2
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2417 ;;      Params:         0       0       0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0
  2419 ;;      Temps:          0       0       0       0       0       0       0
  2420 ;;      Totals:         0       0       0       0       0       0       0
  2421 ;;Total ram usage:        0 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; Hardware stack levels required when called:    3
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text19
  2432  000BB8                     __ptext19:
  2433                           	opt stack 0
  2434  000BB8                     _HWI_TIMERS_INTITALIZE:
  2435                           	opt stack 27
  2436                           
  2437                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  2438                           
  2439                           ;incstack = 0
  2440  000BB8  8093               	bsf	3987,0,c	;volatile
  2441                           
  2442                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  2443  000BBA  8293               	bsf	3987,1,c	;volatile
  2444                           
  2445                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  2446  000BBC  0EF0               	movlw	240
  2447  000BBE  6EF2               	movwf	intcon,c	;volatile
  2448                           
  2449                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  2450  000BC0  0E08               	movlw	8
  2451  000BC2  6EF0               	movwf	intcon3,c	;volatile
  2452                           
  2453                           ;HWI_Interrupts.c: 18: T0CON =0b11010001;
  2454  000BC4  0ED1               	movlw	209
  2455  000BC6  6ED5               	movwf	4053,c	;volatile
  2456                           
  2457                           ;HWI_Interrupts.c: 19: T1CON =0b10000101;
  2458  000BC8  0E85               	movlw	133
  2459  000BCA  6ECD               	movwf	4045,c	;volatile
  2460                           
  2461                           ;HWI_Interrupts.c: 20: T3CON =0b10011101;
  2462  000BCC  0E9D               	movlw	157
  2463  000BCE  6EB1               	movwf	4017,c	;volatile
  2464                           
  2465                           ;HWI_Interrupts.c: 23: INTCON2bits.INTEDG0 = 1;
  2466  000BD0  8CF1               	bsf	intcon2,6,c	;volatile
  2467                           
  2468                           ;HWI_Interrupts.c: 24: INTCON2bits.INTEDG1 = 1;
  2469  000BD2  8AF1               	bsf	intcon2,5,c	;volatile
  2470                           
  2471                           ;HWI_Interrupts.c: 26: TMR0L= 19;
  2472  000BD4  0E13               	movlw	19
  2473  000BD6  6ED6               	movwf	4054,c	;volatile
  2474                           
  2475                           ;HWI_Interrupts.c: 29: TMR1IF=0;
  2476  000BD8  909E               	bcf	3998,0,c	;volatile
  2477                           
  2478                           ;HWI_Interrupts.c: 30: TMR1IE=1;
  2479  000BDA  809D               	bsf	3997,0,c	;volatile
  2480                           
  2481                           ;HWI_Interrupts.c: 33: TMR3IF=0;
  2482  000BDC  92A1               	bcf	4001,1,c	;volatile
  2483                           
  2484                           ;HWI_Interrupts.c: 34: TMR3IE=1;
  2485  000BDE  82A0               	bsf	4000,1,c	;volatile
  2486                           
  2487                           ;HWI_Interrupts.c: 37: TMR1L=0;
  2488  000BE0  0E00               	movlw	0
  2489  000BE2  6ECE               	movwf	4046,c	;volatile
  2490                           
  2491                           ;HWI_Interrupts.c: 38: TMR1H=0xAA;
  2492  000BE4  0EAA               	movlw	170
  2493  000BE6  6ECF               	movwf	4047,c	;volatile
  2494                           
  2495                           ;HWI_Interrupts.c: 40: TMR3L=0;
  2496  000BE8  0E00               	movlw	0
  2497  000BEA  6EB2               	movwf	4018,c	;volatile
  2498                           
  2499                           ;HWI_Interrupts.c: 41: TMR3H=0;
  2500  000BEC  0E00               	movlw	0
  2501  000BEE  6EB3               	movwf	4019,c	;volatile
  2502  000BF0  0012               	return		;funcret
  2503  000BF2                     __end_of_HWI_TIMERS_INTITALIZE:
  2504                           	opt stack 0
  2505                           tosu	equ	0xFFF
  2506                           tosh	equ	0xFFE
  2507                           tosl	equ	0xFFD
  2508                           pclath	equ	0xFFA
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           intcon2	equ	0xFF1
  2517                           intcon3	equ	0xFF0
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           postinc1	equ	0xFE6
  2521                           fsr1h	equ	0xFE2
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  2531 ;; Defined at:
  2532 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;		None
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2546 ;;      Params:         0       0       0       0       0       0       0
  2547 ;;      Locals:         0       0       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0
  2549 ;;      Totals:         0       0       0       0       0       0       0
  2550 ;;Total ram usage:        0 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    3
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text20
  2561  000D44                     __ptext20:
  2562                           	opt stack 0
  2563  000D44                     _HWI_DIGITAL_INITIALIZE:
  2564                           	opt stack 27
  2565                           
  2566                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  2567                           
  2568                           ;incstack = 0
  2569  000D44  0E00               	movlw	0
  2570  000D46  6E95               	movwf	3989,c	;volatile
  2571                           
  2572                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  2573  000D48  0E00               	movlw	0
  2574  000D4A  6E83               	movwf	3971,c	;volatile
  2575                           
  2576                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  2577  000D4C  0E00               	movlw	0
  2578  000D4E  6E94               	movwf	3988,c	;volatile
  2579  000D50  0012               	return		;funcret
  2580  000D52                     __end_of_HWI_DIGITAL_INITIALIZE:
  2581                           	opt stack 0
  2582                           tosu	equ	0xFFF
  2583                           tosh	equ	0xFFE
  2584                           tosl	equ	0xFFD
  2585                           pclath	equ	0xFFA
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           intcon	equ	0xFF2
  2593                           intcon2	equ	0xFF1
  2594                           intcon3	equ	0xFF0
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           postinc1	equ	0xFE6
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _CreateTask *****************
  2608 ;; Defined at:
  2609 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  MangeFunctio    2   15[COMRAM] PTR FTN()void 
  2612 ;;		 -> DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  2613 ;;  TaskId          1   17[COMRAM] unsigned char 
  2614 ;;  Period          1   18[COMRAM] unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2626 ;;      Params:         4       0       0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0       0       0
  2628 ;;      Temps:          0       0       0       0       0       0       0
  2629 ;;      Totals:         4       0       0       0       0       0       0
  2630 ;;Total ram usage:        4 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    3
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text21
  2641  00092C                     __ptext21:
  2642                           	opt stack 0
  2643  00092C                     _CreateTask:
  2644                           	opt stack 27
  2645                           
  2646                           ;Scheduler.c: 8: if(TaskId < 3)
  2647                           
  2648                           ;incstack = 0
  2649  00092C  0E03               	movlw	3
  2650  00092E  6056               	cpfslt	CreateTask@TaskId,c
  2651  000930  0012               	return	
  2652                           
  2653                           ;Scheduler.c: 9: {
  2654                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  2655  000932  5056               	movf	CreateTask@TaskId,w,c
  2656  000934  0D04               	mullw	4
  2657  000936  0E01               	movlw	low _ArrayTask
  2658  000938  24F3               	addwf	prodl,w,c
  2659  00093A  6ED9               	movwf	fsr2l,c
  2660  00093C  0E00               	movlw	high _ArrayTask
  2661  00093E  20F4               	addwfc	prodh,w,c
  2662  000940  6EDA               	movwf	fsr2h,c
  2663  000942  C054  FFDE         	movff	CreateTask@MangeFunction,postinc2
  2664  000946  C055  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  2665                           
  2666                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  2667  00094A  5056               	movf	CreateTask@TaskId,w,c
  2668  00094C  0D04               	mullw	4
  2669  00094E  0E02               	movlw	2
  2670  000950  26F3               	addwf	prodl,f,c
  2671  000952  0E00               	movlw	0
  2672  000954  22F4               	addwfc	prodh,f,c
  2673  000956  0E01               	movlw	low _ArrayTask
  2674  000958  24F3               	addwf	prodl,w,c
  2675  00095A  6ED9               	movwf	fsr2l,c
  2676  00095C  0E00               	movlw	high _ArrayTask
  2677  00095E  20F4               	addwfc	prodh,w,c
  2678  000960  6EDA               	movwf	fsr2h,c
  2679  000962  C057  FFDF         	movff	CreateTask@Period,indf2
  2680                           
  2681                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  2682  000966  5056               	movf	CreateTask@TaskId,w,c
  2683  000968  0D04               	mullw	4
  2684  00096A  0E03               	movlw	3
  2685  00096C  26F3               	addwf	prodl,f,c
  2686  00096E  0E00               	movlw	0
  2687  000970  22F4               	addwfc	prodh,f,c
  2688  000972  0E01               	movlw	low _ArrayTask
  2689  000974  24F3               	addwf	prodl,w,c
  2690  000976  6ED9               	movwf	fsr2l,c
  2691  000978  0E00               	movlw	high _ArrayTask
  2692  00097A  20F4               	addwfc	prodh,w,c
  2693  00097C  6EDA               	movwf	fsr2h,c
  2694  00097E  0E00               	movlw	0
  2695  000980  6EDF               	movwf	indf2,c
  2696  000982  0012               	return	
  2697  000984                     __end_of_CreateTask:
  2698                           	opt stack 0
  2699                           tosu	equ	0xFFF
  2700                           tosh	equ	0xFFE
  2701                           tosl	equ	0xFFD
  2702                           pclath	equ	0xFFA
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           intcon	equ	0xFF2
  2710                           intcon2	equ	0xFF1
  2711                           intcon3	equ	0xFF0
  2712                           postinc0	equ	0xFEE
  2713                           wreg	equ	0xFE8
  2714                           postinc1	equ	0xFE6
  2715                           fsr1h	equ	0xFE2
  2716                           fsr1l	equ	0xFE1
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _APP_INITIALIZE *****************
  2725 ;; Defined at:
  2726 ;;		line 10 in file "../../../../Common/App/APP.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		None
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2740 ;;      Params:         0       0       0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    3
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text22
  2755  000D72                     __ptext22:
  2756                           	opt stack 0
  2757  000D72                     _APP_INITIALIZE:
  2758                           	opt stack 27
  2759                           
  2760                           ;incstack = 0
  2761  000D72  0012               	return		;funcret
  2762  000D74                     __end_of_APP_INITIALIZE:
  2763                           	opt stack 0
  2764                           tosu	equ	0xFFF
  2765                           tosh	equ	0xFFE
  2766                           tosl	equ	0xFFD
  2767                           pclath	equ	0xFFA
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           intcon3	equ	0xFF0
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           postinc1	equ	0xFE6
  2780                           fsr1h	equ	0xFE2
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _ISR *****************
  2790 ;; Defined at:
  2791 ;;		line 46 in file "../../HWIsource/HWI_Interrupts.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;		None
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;		None
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2805 ;;      Params:         0       0       0       0       0       0       0
  2806 ;;      Locals:         0       0       0       0       0       0       0
  2807 ;;      Temps:         14       0       0       0       0       0       0
  2808 ;;      Totals:        14       0       0       0       0       0       0
  2809 ;;Total ram usage:       14 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    2
  2812 ;; This function calls:
  2813 ;;		_APP_ISR1
  2814 ;;		_APP_ISR2
  2815 ;;		_SchedulerTick
  2816 ;; This function is called by:
  2817 ;;		Interrupt level 2
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	intcode
  2822  000008                     __pintcode:
  2823                           	opt stack 0
  2824  000008                     _ISR:
  2825                           	opt stack 23
  2826                           
  2827                           ;incstack = 0
  2828  000008  8270               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2829  00000A  ED82  F003         	call	int_func,f	;refresh shadow registers
  2830                           tosu	equ	0xFFF
  2831                           tosh	equ	0xFFE
  2832                           tosl	equ	0xFFD
  2833                           pclath	equ	0xFFA
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           intcon2	equ	0xFF1
  2842                           intcon3	equ	0xFF0
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           postinc1	equ	0xFE6
  2846                           fsr1h	equ	0xFE2
  2847                           fsr1l	equ	0xFE1
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855                           	psect	intcode_body
  2856  000704                     __pintcode_body:
  2857                           	opt stack 23
  2858  000704                     int_func:
  2859                           	opt stack 23
  2860  000704  0006               	pop		; remove dummy address from shadow register refresh
  2861  000706  CFFA F046          	movff	pclath,??_ISR
  2862  00070A  CFFB F047          	movff	pclatu,??_ISR+1
  2863  00070E  CFE9 F048          	movff	fsr0l,??_ISR+2
  2864  000712  CFEA F049          	movff	fsr0h,??_ISR+3
  2865  000716  CFE1 F04A          	movff	fsr1l,??_ISR+4
  2866  00071A  CFE2 F04B          	movff	fsr1h,??_ISR+5
  2867  00071E  CFD9 F04C          	movff	fsr2l,??_ISR+6
  2868  000722  CFDA F04D          	movff	fsr2h,??_ISR+7
  2869  000726  CFF3 F04E          	movff	prodl,??_ISR+8
  2870  00072A  CFF4 F04F          	movff	prodh,??_ISR+9
  2871  00072E  CFF6 F050          	movff	tblptrl,??_ISR+10
  2872  000732  CFF7 F051          	movff	tblptrh,??_ISR+11
  2873  000736  CFF8 F052          	movff	tblptru,??_ISR+12
  2874  00073A  CFF5 F053          	movff	tablat,??_ISR+13
  2875                           
  2876                           ;HWI_Interrupts.c: 48: if(TMR0IF)
  2877  00073E  A4F2               	btfss	intcon,2,c	;volatile
  2878  000740  D005               	goto	i2l1152
  2879                           
  2880                           ;HWI_Interrupts.c: 49: {
  2881                           ;HWI_Interrupts.c: 50: TMR0IF=0;
  2882  000742  94F2               	bcf	intcon,2,c	;volatile
  2883                           
  2884                           ;HWI_Interrupts.c: 51: TMR0L=18;
  2885  000744  0E12               	movlw	18
  2886  000746  6ED6               	movwf	4054,c	;volatile
  2887                           
  2888                           ;HWI_Interrupts.c: 52: SchedulerTick();
  2889  000748  EC41  F006         	call	_SchedulerTick	;wreg free
  2890  00074C                     i2l1152:
  2891                           
  2892                           ;HWI_Interrupts.c: 53: }
  2893                           ;HWI_Interrupts.c: 54: if(TMR3IF)
  2894  00074C  A2A1               	btfss	4001,1,c	;volatile
  2895  00074E  D005               	goto	i2l1158
  2896                           
  2897                           ;HWI_Interrupts.c: 55: {
  2898                           ;HWI_Interrupts.c: 56: TMR3IF=0;
  2899  000750  92A1               	bcf	4001,1,c	;volatile
  2900                           
  2901                           ;HWI_Interrupts.c: 57: TMR3H = 0xEF;
  2902  000752  0EEF               	movlw	239
  2903  000754  6EB3               	movwf	4019,c	;volatile
  2904                           
  2905                           ;HWI_Interrupts.c: 58: TMR3L = 0;
  2906  000756  0E00               	movlw	0
  2907  000758  6EB2               	movwf	4018,c	;volatile
  2908  00075A                     i2l1158:
  2909                           
  2910                           ;HWI_Interrupts.c: 59: }
  2911                           ;HWI_Interrupts.c: 60: if(TMR1IF)
  2912  00075A  A09E               	btfss	3998,0,c	;volatile
  2913  00075C  D005               	goto	i2l1164
  2914                           
  2915                           ;HWI_Interrupts.c: 61: {
  2916                           ;HWI_Interrupts.c: 62: TMR1IF=0;
  2917  00075E  909E               	bcf	3998,0,c	;volatile
  2918                           
  2919                           ;HWI_Interrupts.c: 63: TMR1L=0;
  2920  000760  0E00               	movlw	0
  2921  000762  6ECE               	movwf	4046,c	;volatile
  2922                           
  2923                           ;HWI_Interrupts.c: 64: TMR1H=0xAA;
  2924  000764  0EAA               	movlw	170
  2925  000766  6ECF               	movwf	4047,c	;volatile
  2926  000768                     i2l1164:
  2927                           
  2928                           ;HWI_Interrupts.c: 65: }
  2929                           ;HWI_Interrupts.c: 67: if((unsigned char)1 == INT0IF)
  2930  000768  A2F2               	btfss	intcon,1,c	;volatile
  2931  00076A  D003               	goto	i2l1170
  2932                           
  2933                           ;HWI_Interrupts.c: 68: {
  2934                           ;HWI_Interrupts.c: 69: INT0IF = 0;
  2935  00076C  92F2               	bcf	intcon,1,c	;volatile
  2936                           
  2937                           ;HWI_Interrupts.c: 70: APP_ISR1();
  2938  00076E  ECB5  F006         	call	_APP_ISR1	;wreg free
  2939  000772                     i2l1170:
  2940                           
  2941                           ;HWI_Interrupts.c: 71: }
  2942                           ;HWI_Interrupts.c: 73: if((unsigned char)1 == INT1IF)
  2943  000772  A0F0               	btfss	intcon3,0,c	;volatile
  2944  000774  D003               	goto	i2l228
  2945                           
  2946                           ;HWI_Interrupts.c: 74: {
  2947                           ;HWI_Interrupts.c: 75: INT1IF = 0;
  2948  000776  90F0               	bcf	intcon3,0,c	;volatile
  2949                           
  2950                           ;HWI_Interrupts.c: 76: APP_ISR2();
  2951  000778  ECB2  F006         	call	_APP_ISR2	;wreg free
  2952  00077C                     i2l228:
  2953  00077C  C053  FFF5         	movff	??_ISR+13,tablat
  2954  000780  C052  FFF8         	movff	??_ISR+12,tblptru
  2955  000784  C051  FFF7         	movff	??_ISR+11,tblptrh
  2956  000788  C050  FFF6         	movff	??_ISR+10,tblptrl
  2957  00078C  C04F  FFF4         	movff	??_ISR+9,prodh
  2958  000790  C04E  FFF3         	movff	??_ISR+8,prodl
  2959  000794  C04D  FFDA         	movff	??_ISR+7,fsr2h
  2960  000798  C04C  FFD9         	movff	??_ISR+6,fsr2l
  2961  00079C  C04B  FFE2         	movff	??_ISR+5,fsr1h
  2962  0007A0  C04A  FFE1         	movff	??_ISR+4,fsr1l
  2963  0007A4  C049  FFEA         	movff	??_ISR+3,fsr0h
  2964  0007A8  C048  FFE9         	movff	??_ISR+2,fsr0l
  2965  0007AC  C047  FFFB         	movff	??_ISR+1,pclatu
  2966  0007B0  C046  FFFA         	movff	??_ISR,pclath
  2967  0007B4  9270               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2968  0007B6  0011               	retfie		f
  2969  0007B8                     __end_of_ISR:
  2970                           	opt stack 0
  2971                           tosu	equ	0xFFF
  2972                           tosh	equ	0xFFE
  2973                           tosl	equ	0xFFD
  2974                           pclatu	equ	0xFFB
  2975                           pclath	equ	0xFFA
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           intcon	equ	0xFF2
  2983                           intcon2	equ	0xFF1
  2984                           intcon3	equ	0xFF0
  2985                           postinc0	equ	0xFEE
  2986                           fsr0h	equ	0xFEA
  2987                           fsr0l	equ	0xFE9
  2988                           wreg	equ	0xFE8
  2989                           postinc1	equ	0xFE6
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8
  2998                           
  2999 ;; *************** function _SchedulerTick *****************
  3000 ;; Defined at:
  3001 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  3002 ;; Parameters:    Size  Location     Type
  3003 ;;		None
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      void 
  3008 ;; Registers used:
  3009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3015 ;;      Params:         0       0       0       0       0       0       0
  3016 ;;      Locals:         1       0       0       0       0       0       0
  3017 ;;      Temps:          0       0       0       0       0       0       0
  3018 ;;      Totals:         1       0       0       0       0       0       0
  3019 ;;Total ram usage:        1 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; This function calls:
  3022 ;;		Nothing
  3023 ;; This function is called by:
  3024 ;;		_ISR
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text24
  3029  000C82                     __ptext24:
  3030                           	opt stack 0
  3031  000C82                     _SchedulerTick:
  3032                           	opt stack 24
  3033                           
  3034                           ;Scheduler.c: 18: unsigned char TaskIndex;
  3035                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 3 ; TaskIndex++)
  3036                           
  3037                           ;incstack = 0
  3038  000C82  0E00               	movlw	0
  3039  000C84  6E45               	movwf	SchedulerTick@TaskIndex,c
  3040  000C86                     i2l1076:
  3041  000C86  0E02               	movlw	2
  3042  000C88  6445               	cpfsgt	SchedulerTick@TaskIndex,c
  3043  000C8A  D001               	goto	i2l1080
  3044  000C8C  0012               	return	
  3045  000C8E                     i2l1080:
  3046                           
  3047                           ;Scheduler.c: 20: {
  3048                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  3049  000C8E  5045               	movf	SchedulerTick@TaskIndex,w,c
  3050  000C90  0D04               	mullw	4
  3051  000C92  0E03               	movlw	3
  3052  000C94  26F3               	addwf	prodl,f,c
  3053  000C96  0E00               	movlw	0
  3054  000C98  22F4               	addwfc	prodh,f,c
  3055  000C9A  0E01               	movlw	low _ArrayTask
  3056  000C9C  24F3               	addwf	prodl,w,c
  3057  000C9E  6ED9               	movwf	fsr2l,c
  3058  000CA0  0E00               	movlw	high _ArrayTask
  3059  000CA2  20F4               	addwfc	prodh,w,c
  3060  000CA4  6EDA               	movwf	fsr2h,c
  3061  000CA6  2ADF               	incf	indf2,f,c
  3062  000CA8  2A45               	incf	SchedulerTick@TaskIndex,f,c
  3063  000CAA  D7ED               	goto	i2l1076
  3064  000CAC                     __end_of_SchedulerTick:
  3065                           	opt stack 0
  3066                           tosu	equ	0xFFF
  3067                           tosh	equ	0xFFE
  3068                           tosl	equ	0xFFD
  3069                           pclatu	equ	0xFFB
  3070                           pclath	equ	0xFFA
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           intcon2	equ	0xFF1
  3079                           intcon3	equ	0xFF0
  3080                           postinc0	equ	0xFEE
  3081                           fsr0h	equ	0xFEA
  3082                           fsr0l	equ	0xFE9
  3083                           wreg	equ	0xFE8
  3084                           postinc1	equ	0xFE6
  3085                           fsr1h	equ	0xFE2
  3086                           fsr1l	equ	0xFE1
  3087                           indf2	equ	0xFDF
  3088                           postinc2	equ	0xFDE
  3089                           postdec2	equ	0xFDD
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _APP_ISR2 *****************
  3095 ;; Defined at:
  3096 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3110 ;;      Params:         0       0       0       0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0       0       0
  3112 ;;      Temps:          0       0       0       0       0       0       0
  3113 ;;      Totals:         0       0       0       0       0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    1
  3117 ;; This function calls:
  3118 ;;		_SensorTwoNotify
  3119 ;; This function is called by:
  3120 ;;		_ISR
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text25
  3125  000D64                     __ptext25:
  3126                           	opt stack 0
  3127  000D64                     _APP_ISR2:
  3128                           	opt stack 23
  3129                           
  3130                           ;AppInterrupts.c: 15: SensorTwoNotify();
  3131                           
  3132                           ;incstack = 0
  3133  000D64  EC8B  F006         	call	_SensorTwoNotify	;wreg free
  3134  000D68  0012               	return		;funcret
  3135  000D6A                     __end_of_APP_ISR2:
  3136                           	opt stack 0
  3137                           tosu	equ	0xFFF
  3138                           tosh	equ	0xFFE
  3139                           tosl	equ	0xFFD
  3140                           pclatu	equ	0xFFB
  3141                           pclath	equ	0xFFA
  3142                           tblptru	equ	0xFF8
  3143                           tblptrh	equ	0xFF7
  3144                           tblptrl	equ	0xFF6
  3145                           tablat	equ	0xFF5
  3146                           prodh	equ	0xFF4
  3147                           prodl	equ	0xFF3
  3148                           intcon	equ	0xFF2
  3149                           intcon2	equ	0xFF1
  3150                           intcon3	equ	0xFF0
  3151                           postinc0	equ	0xFEE
  3152                           fsr0h	equ	0xFEA
  3153                           fsr0l	equ	0xFE9
  3154                           wreg	equ	0xFE8
  3155                           postinc1	equ	0xFE6
  3156                           fsr1h	equ	0xFE2
  3157                           fsr1l	equ	0xFE1
  3158                           indf2	equ	0xFDF
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _SensorTwoNotify *****************
  3166 ;; Defined at:
  3167 ;;		line 39 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3181 ;;      Params:         0       0       0       0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0
  3184 ;;      Totals:         0       0       0       0       0       0       0
  3185 ;;Total ram usage:        0 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_APP_ISR2
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text26
  3195  000D16                     __ptext26:
  3196                           	opt stack 0
  3197  000D16                     _SensorTwoNotify:
  3198                           	opt stack 23
  3199                           
  3200                           ;SpeedCalc.c: 41: if( (unsigned char)0 == NotifyFlag )
  3201                           
  3202                           ;incstack = 0
  3203  000D16  501F               	movf	_NotifyFlag,w,c
  3204  000D18  A4D8               	btfss	status,2,c
  3205  000D1A  D004               	goto	i2l1054
  3206                           
  3207                           ;SpeedCalc.c: 42: {
  3208                           ;SpeedCalc.c: 43: NotifyFlag = (unsigned char)1;
  3209  000D1C  0E01               	movlw	1
  3210  000D1E  6E1F               	movwf	_NotifyFlag,c
  3211                           
  3212                           ;SpeedCalc.c: 44: LapCounter++;
  3213  000D20  2A1E               	incf	_LapCounter,f,c
  3214                           
  3215                           ;SpeedCalc.c: 45: }
  3216  000D22  0012               	return	
  3217  000D24                     i2l1054:
  3218                           
  3219                           ;SpeedCalc.c: 46: else
  3220                           ;SpeedCalc.c: 47: {
  3221                           ;SpeedCalc.c: 48: if(LapCounter != (unsigned char)0)
  3222  000D24  501E               	movf	_LapCounter,w,c
  3223  000D26  B4D8               	btfsc	status,2,c
  3224  000D28  0012               	return	
  3225                           
  3226                           ;SpeedCalc.c: 49: {
  3227                           ;SpeedCalc.c: 50: LapCounter--;
  3228  000D2A  061E               	decf	_LapCounter,f,c
  3229  000D2C  0012               	return	
  3230  000D2E                     __end_of_SensorTwoNotify:
  3231                           	opt stack 0
  3232                           tosu	equ	0xFFF
  3233                           tosh	equ	0xFFE
  3234                           tosl	equ	0xFFD
  3235                           pclatu	equ	0xFFB
  3236                           pclath	equ	0xFFA
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           prodh	equ	0xFF4
  3242                           prodl	equ	0xFF3
  3243                           intcon	equ	0xFF2
  3244                           intcon2	equ	0xFF1
  3245                           intcon3	equ	0xFF0
  3246                           postinc0	equ	0xFEE
  3247                           fsr0h	equ	0xFEA
  3248                           fsr0l	equ	0xFE9
  3249                           wreg	equ	0xFE8
  3250                           postinc1	equ	0xFE6
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _APP_ISR1 *****************
  3261 ;; Defined at:
  3262 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3276 ;;      Params:         0       0       0       0       0       0       0
  3277 ;;      Locals:         0       0       0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0
  3279 ;;      Totals:         0       0       0       0       0       0       0
  3280 ;;Total ram usage:        0 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    1
  3283 ;; This function calls:
  3284 ;;		_SensorOneNotify
  3285 ;; This function is called by:
  3286 ;;		_ISR
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text27
  3291  000D6A                     __ptext27:
  3292                           	opt stack 0
  3293  000D6A                     _APP_ISR1:
  3294                           	opt stack 23
  3295                           
  3296                           ;AppInterrupts.c: 10: SensorOneNotify();
  3297                           
  3298                           ;incstack = 0
  3299  000D6A  EC97  F006         	call	_SensorOneNotify	;wreg free
  3300  000D6E  0012               	return		;funcret
  3301  000D70                     __end_of_APP_ISR1:
  3302                           	opt stack 0
  3303                           tosu	equ	0xFFF
  3304                           tosh	equ	0xFFE
  3305                           tosl	equ	0xFFD
  3306                           pclatu	equ	0xFFB
  3307                           pclath	equ	0xFFA
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           intcon2	equ	0xFF1
  3316                           intcon3	equ	0xFF0
  3317                           postinc0	equ	0xFEE
  3318                           fsr0h	equ	0xFEA
  3319                           fsr0l	equ	0xFE9
  3320                           wreg	equ	0xFE8
  3321                           postinc1	equ	0xFE6
  3322                           fsr1h	equ	0xFE2
  3323                           fsr1l	equ	0xFE1
  3324                           indf2	equ	0xFDF
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _SensorOneNotify *****************
  3332 ;; Defined at:
  3333 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3347 ;;      Params:         0       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0
  3350 ;;      Totals:         0       0       0       0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_APP_ISR1
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text28
  3361  000D2E                     __ptext28:
  3362                           	opt stack 0
  3363  000D2E                     _SensorOneNotify:
  3364                           	opt stack 23
  3365                           
  3366                           ;SpeedCalc.c: 26: if( (unsigned char)1 == NotifyFlag )
  3367                           
  3368                           ;incstack = 0
  3369  000D2E  041F               	decf	_NotifyFlag,w,c
  3370  000D30  A4D8               	btfss	status,2,c
  3371  000D32  D003               	goto	i2l1044
  3372                           
  3373                           ;SpeedCalc.c: 27: {
  3374                           ;SpeedCalc.c: 28: NotifyFlag = (unsigned char)0;
  3375  000D34  0E00               	movlw	0
  3376  000D36  6E1F               	movwf	_NotifyFlag,c
  3377                           
  3378                           ;SpeedCalc.c: 29: }
  3379  000D38  0012               	return	
  3380  000D3A                     i2l1044:
  3381                           
  3382                           ;SpeedCalc.c: 30: else
  3383                           ;SpeedCalc.c: 31: {
  3384                           ;SpeedCalc.c: 32: if(LapCounter != (unsigned char)0)
  3385  000D3A  501E               	movf	_LapCounter,w,c
  3386  000D3C  B4D8               	btfsc	status,2,c
  3387  000D3E  0012               	return	
  3388                           
  3389                           ;SpeedCalc.c: 33: {
  3390                           ;SpeedCalc.c: 34: LapCounter--;
  3391  000D40  061E               	decf	_LapCounter,f,c
  3392  000D42  0012               	return	
  3393  000D44                     __end_of_SensorOneNotify:
  3394                           	opt stack 0
  3395                           tosu	equ	0xFFF
  3396                           tosh	equ	0xFFE
  3397                           tosl	equ	0xFFD
  3398                           pclatu	equ	0xFFB
  3399                           pclath	equ	0xFFA
  3400                           tblptru	equ	0xFF8
  3401                           tblptrh	equ	0xFF7
  3402                           tblptrl	equ	0xFF6
  3403                           tablat	equ	0xFF5
  3404                           prodh	equ	0xFF4
  3405                           prodl	equ	0xFF3
  3406                           intcon	equ	0xFF2
  3407                           intcon2	equ	0xFF1
  3408                           intcon3	equ	0xFF0
  3409                           postinc0	equ	0xFEE
  3410                           fsr0h	equ	0xFEA
  3411                           fsr0l	equ	0xFE9
  3412                           wreg	equ	0xFE8
  3413                           postinc1	equ	0xFE6
  3414                           fsr1h	equ	0xFE2
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           tosu	equ	0xFFF
  3423                           tosh	equ	0xFFE
  3424                           tosl	equ	0xFFD
  3425                           pclatu	equ	0xFFB
  3426                           pclath	equ	0xFFA
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon2	equ	0xFF1
  3435                           intcon3	equ	0xFF0
  3436                           postinc0	equ	0xFEE
  3437                           fsr0h	equ	0xFEA
  3438                           fsr0l	equ	0xFE9
  3439                           wreg	equ	0xFE8
  3440                           postinc1	equ	0xFE6
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           postdec2	equ	0xFDD
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450                           	psect	text29
  3451  000000                     __ptext29:
  3452                           	opt stack 0
  3453                           tosu	equ	0xFFF
  3454                           tosh	equ	0xFFE
  3455                           tosl	equ	0xFFD
  3456                           pclatu	equ	0xFFB
  3457                           pclath	equ	0xFFA
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           intcon	equ	0xFF2
  3465                           intcon2	equ	0xFF1
  3466                           intcon3	equ	0xFF0
  3467                           postinc0	equ	0xFEE
  3468                           fsr0h	equ	0xFEA
  3469                           fsr0l	equ	0xFE9
  3470                           wreg	equ	0xFE8
  3471                           postinc1	equ	0xFE6
  3472                           fsr1h	equ	0xFE2
  3473                           fsr1l	equ	0xFE1
  3474                           indf2	equ	0xFDF
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481                           	psect	rparam
  3482  0000                     tosu	equ	0xFFF
  3483                           tosh	equ	0xFFE
  3484                           tosl	equ	0xFFD
  3485                           pclatu	equ	0xFFB
  3486                           pclath	equ	0xFFA
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           intcon	equ	0xFF2
  3494                           intcon2	equ	0xFF1
  3495                           intcon3	equ	0xFF0
  3496                           postinc0	equ	0xFEE
  3497                           fsr0h	equ	0xFEA
  3498                           fsr0l	equ	0xFE9
  3499                           wreg	equ	0xFE8
  3500                           postinc1	equ	0xFE6
  3501                           fsr1h	equ	0xFE2
  3502                           fsr1l	equ	0xFE1
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510                           	psect	temp
  3511  000070                     btemp:
  3512                           	opt stack 0
  3513  000070                     	ds	1
  3514  0000                     int$flags	set	btemp
  3515                           tosu	equ	0xFFF
  3516                           tosh	equ	0xFFE
  3517                           tosl	equ	0xFFD
  3518                           pclatu	equ	0xFFB
  3519                           pclath	equ	0xFFA
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           intcon	equ	0xFF2
  3527                           intcon2	equ	0xFF1
  3528                           intcon3	equ	0xFF0
  3529                           postinc0	equ	0xFEE
  3530                           fsr0h	equ	0xFEA
  3531                           fsr0l	equ	0xFE9
  3532                           wreg	equ	0xFE8
  3533                           postinc1	equ	0xFE6
  3534                           fsr1h	equ	0xFE2
  3535                           fsr1l	equ	0xFE1
  3536                           indf2	equ	0xFDF
  3537                           postinc2	equ	0xFDE
  3538                           postdec2	equ	0xFDD
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    11
    Data        2
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41     111
    BANK0           128      8       8
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 36
		 -> LapCounterBuffer(COMRAM[36]), 

    memset@p	PTR unsigned char  size(2) Largest target is 36
		 -> LapCounterBuffer(COMRAM[36]), 

    S95$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 36
		 -> LapCounterBuffer(COMRAM[36]), 


Critical Paths under _main in COMRAM

    _SpeedCalcNotifyInitialize->_memset
    _ManageSpeedCalc->_SpeedCalcManage
    _APP_MANAGE->_SetCircumfirunce
    _SetCircumfirunce->___lldiv
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE

Critical Paths under _ISR in COMRAM

    _ISR->_SchedulerTick

Critical Paths under _main in BANK0

    _main->_RunScheduler
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5861
                     _APP_INITIALIZE
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
              _HWI_TIMERS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (1) _SpeedCalcNotifyInitialize                            0     0      0     288
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     288
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _RunScheduler                                         2     2      0    4865
                                              6 BANK0      2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (2) _ManageSpeedCalc                                      0     0      0       0
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (3) _SpeedCalcManage                                      1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ManageApplication                                    0     0      0    4561
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (3) _APP_MANAGE                                           2     2      0    4561
                                              4 BANK0      2     2      0
                      _BCDsendNumber
                        _GetAvgSpeed
                   _SetCircumfirunce
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) _SetCircumfirunce                                     1     1      0    1138
                                             40 COMRAM     1     1      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _GetAvgSpeed                                          4     2      2    1141
                                              0 BANK0      4     2      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     558
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             27 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _BCDsendNumber                                       12     9      3    1665
                                             22 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     386
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayAlphaNumeric                                  0     0      0     304
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (3) _BCDManage7segment                                    3     3      0     304
                                             17 COMRAM     3     3      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (4) _HWI_8Digit_WRITE                                     2     1      1     152
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _HWI_4Digit_WRITE                                     2     1      1     152
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _HWI_TIMERS_INTITALIZE                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CreateTask                                           4     0      4     708
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _APP_INITIALIZE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0      45
                                              1 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (7) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR2                                             0     0      0       0
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (8) _SensorTwoNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (8) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_INITIALIZE
   _CreateTask
   _HWI_DIGITAL_INITIALIZE
   _HWI_TIMERS_INTITALIZE
   _RunScheduler
     _DisplayAlphaNumeric *
       _BCDManage7segment
         _HWI_4Digit_WRITE
         _HWI_8Digit_WRITE
     _ManageApplication *
       _APP_MANAGE
         _BCDsendNumber
           ___lwdiv
           ___wmul
         _GetAvgSpeed
           ___lldiv
             ___lmul (ARG)
           ___lmul
         _SetCircumfirunce
           ___lldiv
             ___lmul (ARG)
           ___lmul
         ___lwdiv
     _ManageSpeedCalc *
       _SpeedCalcManage
   _SpeedCalcNotifyInitialize
     _memset

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8       8       5        6.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      6F       1       88.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      77      15        0.0%
DATA                 0      0      77       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 16 21:08:38 2017

                                l27 0632                 __end_of_GetAvgSpeed 0A80  
               ___wmul@multiplicand 0056                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                       __CFG_OSC$XT 000000                         __CFG_LVP$ON 000000  
                               l152 0CD6                                 l154 0CDC  
                               l155 0CE2                                 l614 08B4  
                               l667 0AC8                        __CFG_CPB$OFF 000000  
                               u504 0AE8                                 u505 0AE2  
                      __CFG_CPD$OFF 000000                                 _ISR 0008  
                               u748 0810                                 prod 000FF3  
                               tosl 000FFD                                 wreg 000FE8  
                              ?_ISR 0045                        __CFG_WDT$OFF 000000  
                              l1300 0C46                                l1304 0CE8  
                              l1322 0C60                                l1404 08A6  
                              l1414 0A96                                l1326 0C70  
                              l1416 0A9E                                l1426 0ABE  
                              l1418 0AA2                                l1442 061A  
                              l1460 06BE                                l1294 0C28  
                              l1462 06D6                                l1446 0622  
                              l1382 09A8                                l1296 0C32  
                              l1456 068C                                l1392 0866  
                              l1298 0C3C                                l1466 06DA  
                              l1394 0872                                l1378 0994  
                              l1482 07C4                                l1396 0876  
                              l1476 07B8                                l1486 0824  
                              l1478 07BC                                l1488 0840  
                              _LATC 000F8B                                _LATD 000F8C  
                              _main 09DA             ??_HWI_TIMERS_INTITALIZE 0054  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 0070  
                              prodh 000FF4                                prodl 000FF3  
                 _BCDManage7segment 0AD2                                start 000E  
                     __CFG_IESO$OFF 000000                  ?_BCDManage7segment 0045  
          __size_of_SpeedCalcManage 0066                        ___param_bank 000000  
                  __end_of_APP_ISR1 0D70                    __end_of_APP_ISR2 0D6A  
                             ??_ISR 0046                 BCDsendNumber@Buffer 0064  
         _SpeedCalcNotifyInitialize 0CF8                 BCDsendNumber@Number 005B  
               __size_of_APP_MANAGE 0048                 ??_BCDManage7segment 0056  
               BCDsendNumber@Output 0062                               ?_main 0045  
                        _CreateTask 092C                     __end_of___lldiv 08C6  
                        _LapCounter 001E                               _T0CON 000FD5  
                             _T1CON 000FCD                               _T3CON 000FB1  
                   __end_of___lwdiv 0AD2                               i2l228 077C  
                             _TMR1H 000FCF                               _TMR0L 000FD6  
                             _TMR1L 000FCE                               _TMR3H 000FB3  
                             _TMR3L 000FB2                   _ManageApplication 0D58  
                             _PORTC 000F82                               _PORTD 000F83  
                             _TRISC 000F94                               _TRISD 000F95  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
               ___lmul@multiplicand 0058                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                  ?_ManageApplication 0045  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBTRB$OFF 000000  
           CreateTask@MangeFunction 0054           BCDsendNumber@DecimalPlace 005D  
                             pclath 000FFA                               tablat 000FF5  
               ??_ManageApplication 006E                   ?_HWI_8Digit_WRITE 0054  
         __end_of_BCDManage7segment 0B22                               status 000FD8  
             __end_of_BCDsendNumber 0704     __size_of_HWI_DIGITAL_INITIALIZE 000E  
                ??_HWI_8Digit_WRITE 0055                         _GetAvgSpeed 0A2E  
                    __CFG_MCLRE$OFF 000000                     __initialization 0BF2  
                      __end_of_main 0A2E           __end_of_ManageApplication 0D5E  
                            ??_main 006E                       __activetblptr 000002  
                            _INT0IF 007F91                              _INT1IF 007F80  
                            i2l1044 0D3A                              i2l1054 0D24  
                            i2l1080 0C8E                              i2l1152 074C  
                            i2l1170 0772                              i2l1076 0C86  
                            i2l1164 0768                              i2l1158 075A  
       BCDManage7segment@DigitIndex 0044                              _INTCON 000FF2  
          __size_of_SensorOneNotify 0016            __size_of_ManageSpeedCalc 0006  
              HWI_8Digit_WRITE@port 0055                              _TMR0IF 007F92  
                            _TMR1IE 007CE8                              _TMR1IF 007CF0  
                            _TMR3IE 007D01                              _TMR3IF 007D09  
               _DisplayAlphaNumeric 0D52                      __CFG_XINST$OFF 000000  
                        _NotifyFlag 001F                              ___lmul 0984  
                            ___wmul 0CAC                      __CFG_STVREN$ON 000000  
                         ??___lldiv 0068                           ??___lwdiv 0058  
                            _memset 0C56                              clear_0 0C10  
                 ??_SpeedCalcManage 0054                         ?_CreateTask 0054  
            _HWI_DIGITAL_INITIALIZE 0D44                    CreateTask@Period 0057  
                  CreateTask@TaskId 0056                        __pdataCOMRAM 006E  
              ?_DisplayAlphaNumeric 0045                        __mediumconst 0000  
          __size_of_SensorTwoNotify 0018                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                      ??_APP_MANAGE 006E                           ?_APP_ISR1 0045  
                         ?_APP_ISR2 0045              __size_of_SchedulerTick 002A  
        __size_of_BCDManage7segment 0050                          __accesstop 0080  
           __end_of__initialization 0C16                     __CFG_PBADEN$OFF 000000  
                 ?_SetCircumfirunce 0045                       ___rparam_used 000001  
                ??_SetCircumfirunce 006D                      __pcstackCOMRAM 0045  
                 BCDsendNumber@Link 0060           __size_of_HWI_4Digit_WRITE 0032  
        __size_of_ManageApplication 0006                  __end_of_APP_MANAGE 0BB8  
             ??_DisplayAlphaNumeric 0059  __size_of_SpeedCalcNotifyInitialize 001E  
                        ??_APP_ISR1 0045                          ??_APP_ISR2 0045  
               __size_of_CreateTask 0058      __size_of_HWI_TIMERS_INTITALIZE 003A  
     __end_of_HWI_TIMERS_INTITALIZE 0BF2                   ??_SensorOneNotify 0045  
                 ??_ManageSpeedCalc 0055              GetAvgSpeed@AvgSpeedKph 0082  
           __size_of_APP_INITIALIZE 0002                             ?___lmul 0054  
            SetCircumfirunce@Circum 006D                             ?___wmul 0054  
                     _SchedulerTick 0C82                             ?_memset 0054  
                    ___lmul@product 005C                             _INTCON3 000FF0  
     SpeedCalcManage@LapSampleIndex 001C               HWI_8Digit_WRITE@value 0054  
                 ??_SensorTwoNotify 0045                             __Hparam 0000  
                      ?_GetAvgSpeed 0080                           _BCDNumber 000D  
                           __Lparam 0000                     __size_of___lmul 0056  
                    ?_SchedulerTick 0045                             ___lldiv 0844  
                   __size_of___wmul 0026                             ___lwdiv 0A80  
                      __psmallconst 0600           __size_of_HWI_8Digit_WRITE 0026  
                           __pcinit 0BF2                     __size_of_memset 002C  
                           __ramtop 0600                             __ptext0 09DA  
                           __ptext1 0CF8                             __ptext2 0C56  
                           __ptext3 07B8                             __ptext4 0D52  
                           __ptext5 0D58                             __ptext6 0D5E  
                           __ptext7 08C6                             __ptext8 0B70  
                           __ptext9 0B22                        __size_of_ISR 07B0  
                     ?_RunScheduler 0045              SchedulerTick@TaskIndex 0045  
                    __pintcode_body 0704                end_of_initialization 0C16  
                           memset@c 0056                             memset@n 0058  
                           memset@p 005A                       __Lmediumconst 0000  
                           int_func 0704                     _SevenSegmentMAP 0601  
                   ___lldiv@divisor 0064                     _SpeedCalcManage 08C6  
                   ___lldiv@counter 006C                             postdec2 000FDD  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE             ?_HWI_DIGITAL_INITIALIZE 0045  
                  _HWI_4Digit_WRITE 0C24                        ??_CreateTask 0058  
            __size_of_BCDsendNumber 00F6                      ??_RunScheduler 0086  
                         _TRISBbits 000F93                   __size_of_APP_ISR1 0006  
                 __size_of_APP_ISR2 0006                  __end_of_CreateTask 0984  
                    _APP_INITIALIZE 0D72                      _DistTravelCntr 0015  
                   ??_SchedulerTick 0045      __end_of_HWI_DIGITAL_INITIALIZE 0D52  
                    __end_of___lmul 09DA                      __end_of___wmul 0CD2  
                     __pidataCOMRAM 0D70                           _ArrayTask 0001  
         __size_of_SetCircumfirunce 004E                      __end_of_memset 0C82  
               start_initialization 0BF2                         __end_of_ISR 07B8  
                   _SensorOneNotify 0D2E             __end_of_SevenSegmentMAP 060C  
                   _ManageSpeedCalc 0D5E             __end_of_SpeedCalcManage 092C  
            __end_of_APP_INITIALIZE 0D74                       _BCDsendNumber 060E  
            SpeedCalcManage@LapTime 001D                            ??___lmul 005C  
                          ??___wmul 0058                __size_of_GetAvgSpeed 0052  
       __end_of_DisplayAlphaNumeric 0D58                    __CFG_LPT1OSC$OFF 000000  
                  _HWI_8Digit_WRITE 0CD2                            ??_memset 005A  
                   _SensorTwoNotify 0D16                         __pbssCOMRAM 0001  
            BCDsendNumber@LoopIndex 0066                       __pcstackBANK0 0080  
             APP_MANAGE@AvgSpeedKph 0084                    _LapCounterBuffer 0020  
             RunScheduler@TaskIndex 001B                      ?_BCDsendNumber 005B  
                   ?_APP_INITIALIZE 0045                    ___lwdiv@dividend 0054  
              __end_of_RunScheduler 0844                   __CFG_CCP2MX$PORTC 000000  
             _HWI_TIMERS_INTITALIZE 0BB8                           __pintcode 0008  
                          ?___lldiv 0060                            ?___lwdiv 0054  
                       __smallconst 0600             __end_of_SensorOneNotify 0D44  
           __end_of_ManageSpeedCalc 0D64               HWI_4Digit_WRITE@value 0054  
                  ___lwdiv@quotient 0059                       _LapCounterAvg 0019  
          __end_of_HWI_4Digit_WRITE 0C56                            _APP_ISR1 0D6A  
                          _APP_ISR2 0D64          ?_SpeedCalcNotifyInitialize 0045  
                  ?_SpeedCalcManage 0045                      ___wmul@product 0058  
                  __CFG_WDTPS$32768 000000             __end_of_SensorTwoNotify 0D2E  
                          _KMfactor 006E                    _SetCircumfirunce 0B22  
                 ___wmul@multiplier 0054                   ___lmul@multiplier 0054  
                       _INTCON2bits 000FF1                     ??_BCDsendNumber 005E  
 __end_of_SpeedCalcNotifyInitialize 0D16                            __Hrparam 0000  
            ?_HWI_TIMERS_INTITALIZE 0045                            __Lrparam 0000  
                __CFG_BOREN$SBORDIS 000000                    __size_of___lldiv 0082  
                  __size_of___lwdiv 0052                    ?_SensorOneNotify 0045  
                  ?_ManageSpeedCalc 0045                     ___lwdiv@divisor 0056  
                   ___lwdiv@counter 0058                            __ptext10 0A2E  
                          __ptext11 0984                            __ptext20 0D44  
                          __ptext12 0844                            __ptext21 092C  
                          __ptext13 060E                            __ptext22 0D72  
                          __ptext14 0CAC                            __ptext15 0A80  
                          __ptext24 0C82                            __ptext16 0AD2  
                          __ptext25 0D64                            __ptext17 0CD2  
                          __ptext26 0D16                            __ptext18 0C24  
                          __ptext27 0D6A                            __ptext19 0BB8  
                          __ptext28 0D2E                            __ptext29 0000  
                        _APP_MANAGE 0B70            __end_of_HWI_8Digit_WRITE 0CF8  
             __size_of_RunScheduler 008C                HWI_4Digit_WRITE@port 0055  
                     __size_of_main 0054                            int$flags 0070  
             __end_of_SchedulerTick 0CAC                    ?_SensorTwoNotify 0045  
                      _RunScheduler 07B8                            memset@p1 0054  
                  ??_APP_INITIALIZE 0054                            intlevel2 0000  
                  ___lldiv@dividend 0060                       ??_GetAvgSpeed 006D  
                  ___lldiv@quotient 0068        __size_of_DisplayAlphaNumeric 0006  
                       ?_APP_MANAGE 0045         ??_SpeedCalcNotifyInitialize 005C  
                 ?_HWI_4Digit_WRITE 0054            __end_of_SetCircumfirunce 0B70  
          ??_HWI_DIGITAL_INITIALIZE 0054                  ??_HWI_4Digit_WRITE 0055  
