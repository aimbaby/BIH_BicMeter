
BicMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000017e0  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b3  008000a4  008000a4  000018b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000340  00000000  00000000  00002010  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ff  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd1  00000000  00000000  0000474f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e3  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a4  00000000  00000000  00006604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dbe  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016db  00000000  00000000  00007c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	28 cb       	rjmp	.-2480   	; 0xfffff654 <__eeprom_end+0xff7ef654>
       4:	4d cb       	rjmp	.-2406   	; 0xfffff6a0 <__eeprom_end+0xff7ef6a0>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	fa ca       	rjmp	.-2572   	; 0xfffff606 <__eeprom_end+0xff7ef606>
      12:	d4 ca       	rjmp	.-2648   	; 0xfffff5bc <__eeprom_end+0xff7ef5bc>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 ee       	ldi	r30, 0xE0	; 224
      3a:	f7 e1       	ldi	r31, 0x17	; 23
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a4 3a       	cpi	r26, 0xA4	; 164
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a4 ea       	ldi	r26, 0xA4	; 164
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a7 35       	cpi	r26, 0x57	; 87
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	68 db       	rcall	.-2352   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
      5a:	c0 cb       	rjmp	.-2176   	; 0xfffff7dc <__eeprom_end+0xff7ef7dc>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <IncrementDecrementSingleDigit>:
  (
    unsigned short Number,
    unsigned char Index,
    unsigned char bIsincrement
  )
  {
      5e:	df 92       	push	r13
      60:	ef 92       	push	r14
      62:	ff 92       	push	r15
      64:	0f 93       	push	r16
      66:	1f 93       	push	r17
      68:	cf 93       	push	r28
      6a:	df 93       	push	r29
      6c:	00 d0       	rcall	.+0      	; 0x6e <IncrementDecrementSingleDigit+0x10>
      6e:	00 d0       	rcall	.+0      	; 0x70 <IncrementDecrementSingleDigit+0x12>
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	9c 01       	movw	r18, r24
      76:	d6 2e       	mov	r13, r22
      unsigned short NumberReturned = (unsigned short)0;
      78:	fe 01       	movw	r30, r28
      7a:	31 96       	adiw	r30, 0x01	; 1
			 }
	}  
	
  }
  
  static unsigned short IncrementDecrementSingleDigit
      7c:	8e 01       	movw	r16, r28
      7e:	0b 5f       	subi	r16, 0xFB	; 251
      80:	1f 4f       	sbci	r17, 0xFF	; 255
      for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)      
      {          
          if((Number != (unsigned short)0) )      
          { 
              Link = Number;
              Number = (unsigned short)(Number/(unsigned short)10);
      82:	0f 2e       	mov	r0, r31
      84:	fa e0       	ldi	r31, 0x0A	; 10
      86:	ef 2e       	mov	r14, r31
      88:	ff 24       	eor	r15, r15
      8a:	f0 2d       	mov	r31, r0
      unsigned short unitPosition = (unsigned short)1;


      for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)      
      {          
          if((Number != (unsigned short)0) )      
      8c:	21 15       	cp	r18, r1
      8e:	31 05       	cpc	r19, r1
      90:	71 f0       	breq	.+28     	; 0xae <IncrementDecrementSingleDigit+0x50>
          { 
              Link = Number;
              Number = (unsigned short)(Number/(unsigned short)10);
      92:	c9 01       	movw	r24, r18
      94:	b7 01       	movw	r22, r14
      96:	6c db       	rcall	.-2344   	; 0xfffff770 <__eeprom_end+0xff7ef770>
              Output[LoopIndex] = Link - 
      98:	86 2f       	mov	r24, r22
      9a:	88 0f       	add	r24, r24
      9c:	98 2f       	mov	r25, r24
      9e:	99 0f       	add	r25, r25
      a0:	99 0f       	add	r25, r25
      a2:	89 0f       	add	r24, r25
      a4:	28 1b       	sub	r18, r24
      a6:	20 83       	st	Z, r18
      for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)      
      {          
          if((Number != (unsigned short)0) )      
          { 
              Link = Number;
              Number = (unsigned short)(Number/(unsigned short)10);
      a8:	26 2f       	mov	r18, r22
      aa:	37 2f       	mov	r19, r23
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <IncrementDecrementSingleDigit+0x52>
              Output[LoopIndex] = Link - 
                                  (unsigned short)(Number * (unsigned short)10);
          }
		  else
		  {
			  Output[LoopIndex] = (unsigned short)0;
      ae:	10 82       	st	Z, r1
      b0:	31 96       	adiw	r30, 0x01	; 1
      unsigned char PowIndex;
      unsigned char Output[NUMBER_DIGITS];
      unsigned short unitPosition = (unsigned short)1;


      for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)      
      b2:	e0 17       	cp	r30, r16
      b4:	f1 07       	cpc	r31, r17
      b6:	51 f7       	brne	.-44     	; 0x8c <IncrementDecrementSingleDigit+0x2e>
		  {
			  Output[LoopIndex] = (unsigned short)0;
		  }			         
      }   

      if((unsigned char)0 == bIsincrement)
      b8:	44 23       	and	r20, r20
      ba:	89 f4       	brne	.+34     	; 0xde <IncrementDecrementSingleDigit+0x80>
      {
          if((unsigned char)0 == Output[Index])
      bc:	8d 2d       	mov	r24, r13
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	fe 01       	movw	r30, r28
      c2:	e8 0f       	add	r30, r24
      c4:	f9 1f       	adc	r31, r25
      c6:	21 81       	ldd	r18, Z+1	; 0x01
      c8:	22 23       	and	r18, r18
      ca:	19 f4       	brne	.+6      	; 0xd2 <IncrementDecrementSingleDigit+0x74>
          {
              Output[Index] =(unsigned char)9;
      cc:	29 e0       	ldi	r18, 0x09	; 9
      ce:	21 83       	std	Z+1, r18	; 0x01
      d0:	15 c0       	rjmp	.+42     	; 0xfc <IncrementDecrementSingleDigit+0x9e>
          }
          else
          {
              Output[Index]--;            
      d2:	8c 0f       	add	r24, r28
      d4:	9d 1f       	adc	r25, r29
      d6:	21 50       	subi	r18, 0x01	; 1
      d8:	fc 01       	movw	r30, r24
      da:	21 83       	std	Z+1, r18	; 0x01
      dc:	0f c0       	rjmp	.+30     	; 0xfc <IncrementDecrementSingleDigit+0x9e>
          }        
      }
      else
      {
          if( (unsigned char)9 == Output[Index])
      de:	8d 2d       	mov	r24, r13
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fe 01       	movw	r30, r28
      e4:	e8 0f       	add	r30, r24
      e6:	f9 1f       	adc	r31, r25
      e8:	21 81       	ldd	r18, Z+1	; 0x01
      ea:	29 30       	cpi	r18, 0x09	; 9
      ec:	11 f4       	brne	.+4      	; 0xf2 <IncrementDecrementSingleDigit+0x94>
          {
              Output[Index] = (unsigned char)0;
      ee:	11 82       	std	Z+1, r1	; 0x01
      f0:	05 c0       	rjmp	.+10     	; 0xfc <IncrementDecrementSingleDigit+0x9e>
          }
          else
          {  
              Output[Index]++;  
      f2:	8c 0f       	add	r24, r28
      f4:	9d 1f       	adc	r25, r29
      f6:	2f 5f       	subi	r18, 0xFF	; 255
      f8:	fc 01       	movw	r30, r24
      fa:	21 83       	std	Z+1, r18	; 0x01
          }  
      }
      
      for(LoopIndex=(unsigned char)0;LoopIndex < NUMBER_DIGITS; LoopIndex++)
      {
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
      fc:	71 e0       	ldi	r23, 0x01	; 1
      fe:	60 e0       	ldi	r22, 0x00	; 0
    unsigned short Number,
    unsigned char Index,
    unsigned char bIsincrement
  )
  {
      unsigned short NumberReturned = (unsigned short)0;
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b0 e0       	ldi	r27, 0x00	; 0
          }  
      }
      
      for(LoopIndex=(unsigned char)0;LoopIndex < NUMBER_DIGITS; LoopIndex++)
      {
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
     104:	ee 24       	eor	r14, r14
     106:	ff 24       	eor	r15, r15
     108:	e3 94       	inc	r14
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	25 c0       	rjmp	.+74     	; 0x158 <IncrementDecrementSingleDigit+0xfa>
     10e:	a7 01       	movw	r20, r14
     110:	20 2f       	mov	r18, r16
                                                          PowIndex++  )
          {
              unitPosition *=(unsigned short)10;
     112:	ca 01       	movw	r24, r20
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	44 0f       	add	r20, r20
     11a:	55 1f       	adc	r21, r21
     11c:	44 0f       	add	r20, r20
     11e:	55 1f       	adc	r21, r21
     120:	44 0f       	add	r20, r20
     122:	55 1f       	adc	r21, r21
     124:	48 0f       	add	r20, r24
     126:	59 1f       	adc	r21, r25
      }
      
      for(LoopIndex=(unsigned char)0;LoopIndex < NUMBER_DIGITS; LoopIndex++)
      {
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
                                                          PowIndex++  )
     128:	2f 5f       	subi	r18, 0xFF	; 255
          }  
      }
      
      for(LoopIndex=(unsigned char)0;LoopIndex < NUMBER_DIGITS; LoopIndex++)
      {
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
     12a:	62 17       	cp	r22, r18
     12c:	91 f7       	brne	.-28     	; 0x112 <IncrementDecrementSingleDigit+0xb4>
                                                          PowIndex++  )
          {
              unitPosition *=(unsigned short)10;
          }
          NumberReturned += 
                     (((unsigned short)Output[LoopIndex]) * unitPosition);
     12e:	e1 e0       	ldi	r30, 0x01	; 1
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	ec 0f       	add	r30, r28
     134:	fd 1f       	adc	r31, r29
     136:	e6 0f       	add	r30, r22
     138:	f1 1d       	adc	r31, r1
     13a:	80 81       	ld	r24, Z
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	48 9f       	mul	r20, r24
     140:	90 01       	movw	r18, r0
     142:	49 9f       	mul	r20, r25
     144:	30 0d       	add	r19, r0
     146:	58 9f       	mul	r21, r24
     148:	30 0d       	add	r19, r0
     14a:	11 24       	eor	r1, r1
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
                                                          PowIndex++  )
          {
              unitPosition *=(unsigned short)10;
          }
          NumberReturned += 
     14c:	a2 0f       	add	r26, r18
     14e:	b3 1f       	adc	r27, r19
          {  
              Output[Index]++;  
          }  
      }
      
      for(LoopIndex=(unsigned char)0;LoopIndex < NUMBER_DIGITS; LoopIndex++)
     150:	74 30       	cpi	r23, 0x04	; 4
     152:	28 f4       	brcc	.+10     	; 0x15e <IncrementDecrementSingleDigit+0x100>
     154:	6f 5f       	subi	r22, 0xFF	; 255
     156:	7f 5f       	subi	r23, 0xFF	; 255
      {
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
     158:	66 23       	and	r22, r22
     15a:	c9 f6       	brne	.-78     	; 0x10e <IncrementDecrementSingleDigit+0xb0>
     15c:	0e c0       	rjmp	.+28     	; 0x17a <IncrementDecrementSingleDigit+0x11c>
                     (((unsigned short)Output[LoopIndex]) * unitPosition);
          unitPosition = (unsigned short)1;
      }
      
      return NumberReturned;
  }
     15e:	8a 2f       	mov	r24, r26
     160:	9b 2f       	mov	r25, r27
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	08 95       	ret
                                                          PowIndex++  )
          {
              unitPosition *=(unsigned short)10;
          }
          NumberReturned += 
                     (((unsigned short)Output[LoopIndex]) * unitPosition);
     17a:	e1 e0       	ldi	r30, 0x01	; 1
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ec 0f       	add	r30, r28
     180:	fd 1f       	adc	r31, r29
     182:	e6 0f       	add	r30, r22
     184:	f1 1d       	adc	r31, r1
     186:	80 81       	ld	r24, Z
          for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
                                                          PowIndex++  )
          {
              unitPosition *=(unsigned short)10;
          }
          NumberReturned += 
     188:	a8 0f       	add	r26, r24
     18a:	b1 1d       	adc	r27, r1
     18c:	e3 cf       	rjmp	.-58     	; 0x154 <IncrementDecrementSingleDigit+0xf6>

0000018e <APP_INITIALIZE>:
  unsigned short ConvertMinutesHM(unsigned long TimeMinutes);

  
  PUBLIC void APP_INITIALIZE(void)
  {
	 Eeprom_Read_Block(1 , &APP_DATA , (unsigned char)sizeof(APP_DATA));	  
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	64 ea       	ldi	r22, 0xA4	; 164
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	4f e0       	ldi	r20, 0x0F	; 15
     196:	7d d5       	rcall	.+2810   	; 0xc92 <Eeprom_Read_Block>
  
	 if(APP_DATA.Circum > MAX_DISPLAY_NUMBER)
     198:	80 91 a4 00 	lds	r24, 0x00A4
     19c:	90 91 a5 00 	lds	r25, 0x00A5
     1a0:	27 e2       	ldi	r18, 0x27	; 39
     1a2:	80 31       	cpi	r24, 0x10	; 16
     1a4:	92 07       	cpc	r25, r18
     1a6:	30 f0       	brcs	.+12     	; 0x1b4 <APP_INITIALIZE+0x26>
	 {
		 APP_DATA.Circum = DEFAULT_CIRCUM;
     1a8:	80 ed       	ldi	r24, 0xD0	; 208
     1aa:	97 e0       	ldi	r25, 0x07	; 7
     1ac:	90 93 a5 00 	sts	0x00A5, r25
     1b0:	80 93 a4 00 	sts	0x00A4, r24
	 }
	 if(APP_DATA.TravelledDistance > MAX_DISPLAY_NUMBER)
     1b4:	80 91 a9 00 	lds	r24, 0x00A9
     1b8:	90 91 aa 00 	lds	r25, 0x00AA
     1bc:	a0 91 ab 00 	lds	r26, 0x00AB
     1c0:	b0 91 ac 00 	lds	r27, 0x00AC
     1c4:	80 31       	cpi	r24, 0x10	; 16
     1c6:	27 e2       	ldi	r18, 0x27	; 39
     1c8:	92 07       	cpc	r25, r18
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	a2 07       	cpc	r26, r18
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	b2 07       	cpc	r27, r18
     1d2:	40 f0       	brcs	.+16     	; 0x1e4 <APP_INITIALIZE+0x56>
	 {
		 APP_DATA.TravelledDistance = DEFAULT_TRAVEL_DIST;
     1d4:	10 92 a9 00 	sts	0x00A9, r1
     1d8:	10 92 aa 00 	sts	0x00AA, r1
     1dc:	10 92 ab 00 	sts	0x00AB, r1
     1e0:	10 92 ac 00 	sts	0x00AC, r1
	 }		 
	 if(APP_DATA.TravelledDistance > MAX_DISPLAY_NUMBER)
	 {
		 APP_DATA.TravelTime = DEFAULT_TRAVEL_TIME;
	 }
	 if(APP_DATA.MaxSpeed > MAX_DISPLAY_NUMBER)
     1e4:	80 91 b1 00 	lds	r24, 0x00B1
     1e8:	90 91 b2 00 	lds	r25, 0x00B2
     1ec:	27 e2       	ldi	r18, 0x27	; 39
     1ee:	80 31       	cpi	r24, 0x10	; 16
     1f0:	92 07       	cpc	r25, r18
     1f2:	20 f0       	brcs	.+8      	; 0x1fc <APP_INITIALIZE+0x6e>
	 {
		 APP_DATA.MaxSpeed = DEFAULT_MAX_SPEED;
     1f4:	10 92 b2 00 	sts	0x00B2, r1
     1f8:	10 92 b1 00 	sts	0x00B1, r1
	 }
	 if(APP_DATA.CircumBlinkIndex >= NUMBER_DIGITS)
     1fc:	80 91 a6 00 	lds	r24, 0x00A6
     200:	84 30       	cpi	r24, 0x04	; 4
     202:	10 f0       	brcs	.+4      	; 0x208 <APP_INITIALIZE+0x7a>
	 {
		 APP_DATA.CircumBlinkIndex = DEFAULT_BLINK_INDEX;
     204:	10 92 a6 00 	sts	0x00A6, r1
	 }
	 SetCircumfirunce(APP_DATA.Circum);
     208:	80 91 a4 00 	lds	r24, 0x00A4
     20c:	90 91 a5 00 	lds	r25, 0x00A5
     210:	1a d8       	rcall	.-4044   	; 0xfffff246 <__eeprom_end+0xff7ef246>
	 SetDistance(APP_DATA.TravelledDistance);
     212:	60 91 a9 00 	lds	r22, 0x00A9
     216:	70 91 aa 00 	lds	r23, 0x00AA
     21a:	80 91 ab 00 	lds	r24, 0x00AB
     21e:	90 91 ac 00 	lds	r25, 0x00AC
     222:	f9 d7       	rcall	.+4082   	; 0x1216 <SetDistance>
	 APP_CALC_TIMEsetTravelTime(APP_DATA.TravelTime);
     224:	60 91 ad 00 	lds	r22, 0x00AD
     228:	70 91 ae 00 	lds	r23, 0x00AE
     22c:	80 91 af 00 	lds	r24, 0x00AF
     230:	90 91 b0 00 	lds	r25, 0x00B0
     234:	4c d2       	rcall	.+1176   	; 0x6ce <APP_CALC_TIMEsetTravelTime>
	 APP_CALC_MAXSPDmanage_Set(APP_DATA.MaxSpeed);
     236:	80 91 b1 00 	lds	r24, 0x00B1
     23a:	90 91 b2 00 	lds	r25, 0x00B2
     23e:	2e d2       	rcall	.+1116   	; 0x69c <APP_CALC_MAXSPDmanage_Set>
  }
     240:	08 95       	ret

00000242 <ConvertMinutesHM>:
      return NumberReturned;
  }
  
  
  unsigned short ConvertMinutesHM(unsigned long TimeMinutes)
  {
     242:	cf 93       	push	r28
     244:	c6 2f       	mov	r28, r22
	  unsigned short Hours;
	  unsigned char Minutes;
	  Hours = (TimeMinutes / (unsigned long)60);
     246:	2c e3       	ldi	r18, 0x3C	; 60
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	a4 da       	rcall	.-2744   	; 0xfffff798 <__eeprom_end+0xff7ef798>
	  Minutes = (unsigned char)(TimeMinutes - ((unsigned long)60 * (unsigned long)Hours));
     250:	8c e3       	ldi	r24, 0x3C	; 60
     252:	28 9f       	mul	r18, r24
     254:	80 2d       	mov	r24, r0
     256:	11 24       	eor	r1, r1
     258:	c8 1b       	sub	r28, r24
	  
	  Hours = (unsigned short)Minutes + (unsigned short)(Hours * (unsigned short)100);
     25a:	44 e6       	ldi	r20, 0x64	; 100
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	24 9f       	mul	r18, r20
     260:	c0 01       	movw	r24, r0
     262:	25 9f       	mul	r18, r21
     264:	90 0d       	add	r25, r0
     266:	34 9f       	mul	r19, r20
     268:	90 0d       	add	r25, r0
     26a:	11 24       	eor	r1, r1
     26c:	8c 0f       	add	r24, r28
     26e:	91 1d       	adc	r25, r1
	  return Hours;
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <APP_MANAGE>:
	 APP_CALC_TIMEsetTravelTime(APP_DATA.TravelTime);
	 APP_CALC_MAXSPDmanage_Set(APP_DATA.MaxSpeed);
  }
  
  PUBLIC void APP_MANAGE(void)
  {
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <APP_MANAGE+0x1a>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	unsigned short MaxSpeed;
	unsigned short TimeHoursMinutes;
	unsigned long TravelledDistance;
	APP_INFOR_BYTE StatusByte;
	
	memcpy(&StatusByte,&APP_DATA.StatusByte,sizeof(APP_INFOR_BYTE));
     292:	80 91 a7 00 	lds	r24, 0x00A7
     296:	90 91 a8 00 	lds	r25, 0x00A8
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
    
	StatusByte.SleepFlag = (unsigned char)0;
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8a 83       	std	Y+2, r24	; 0x02
    APP_HMImanage(&StatusByte);
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	57 d2       	rcall	.+1198   	; 0x758 <APP_HMImanage>
	DisableDistanceCntr(StatusByte.StopMeasureFlag);
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	82 95       	swap	r24
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	81 70       	andi	r24, 0x01	; 1
     2b2:	ae d7       	rcall	.+3932   	; 0x1210 <DisableDistanceCntr>
	APP_DATA.TravelledDistance = GetDistance();
     2b4:	bf d7       	rcall	.+3966   	; 0x1234 <GetDistance>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	80 93 a9 00 	sts	0x00A9, r24
     2be:	90 93 aa 00 	sts	0x00AA, r25
     2c2:	a0 93 ab 00 	sts	0x00AB, r26
     2c6:	b0 93 ac 00 	sts	0x00AC, r27
	CurrentSpeed =  GetAvgSpeed(1);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	c1 d7       	rcall	.+3970   	; 0x1250 <GetAvgSpeed>
     2ce:	5c 01       	movw	r10, r24
	if((unsigned short)0 != CurrentSpeed)
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	81 f0       	breq	.+32     	; 0x2f4 <APP_MANAGE+0x80>
	{
	    APP_DATA.TravelTime = APP_CALC_TIMEmanage(&StatusByte);		
     2d4:	ce 01       	movw	r24, r28
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	09 d2       	rcall	.+1042   	; 0x6ec <APP_CALC_TIMEmanage>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	80 93 ad 00 	sts	0x00AD, r24
     2e2:	90 93 ae 00 	sts	0x00AE, r25
     2e6:	a0 93 af 00 	sts	0x00AF, r26
     2ea:	b0 93 b0 00 	sts	0x00B0, r27
		StatusByte.SleepFlag = (unsigned char)0;
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	8d 7f       	andi	r24, 0xFD	; 253
     2f2:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		
	}	
	
    AvgSpeed = APP_CALC_AVGSPDmanage(&StatusByte , APP_DATA.TravelTime , APP_DATA.TravelledDistance);
     2f4:	0f 2e       	mov	r0, r31
     2f6:	fd ea       	ldi	r31, 0xAD	; 173
     2f8:	cf 2e       	mov	r12, r31
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	df 2e       	mov	r13, r31
     2fe:	f0 2d       	mov	r31, r0
     300:	40 91 ad 00 	lds	r20, 0x00AD
     304:	50 91 ae 00 	lds	r21, 0x00AE
     308:	60 91 af 00 	lds	r22, 0x00AF
     30c:	70 91 b0 00 	lds	r23, 0x00B0
     310:	f6 01       	movw	r30, r12
     312:	32 91       	ld	r19, -Z
     314:	22 91       	ld	r18, -Z
     316:	12 91       	ld	r17, -Z
     318:	02 91       	ld	r16, -Z
     31a:	7f 01       	movw	r14, r30
     31c:	ce 01       	movw	r24, r28
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	9b d1       	rcall	.+822    	; 0x658 <APP_CALC_AVGSPDmanage>
     322:	4c 01       	movw	r8, r24
    APP_DATA.MaxSpeed = APP_CALC_MAXSPDmanage(&StatusByte , CurrentSpeed);
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	b5 01       	movw	r22, r10
     32a:	bd d1       	rcall	.+890    	; 0x6a6 <APP_CALC_MAXSPDmanage>
     32c:	90 93 b2 00 	sts	0x00B2, r25
     330:	80 93 b1 00 	sts	0x00B1, r24
	APP_SLEEPmanage(&StatusByte,&APP_DATA);
     334:	b6 01       	movw	r22, r12
     336:	69 50       	subi	r22, 0x09	; 9
     338:	70 40       	sbci	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	d6 d2       	rcall	.+1452   	; 0x8ec <APP_SLEEPmanage>
	
	
	TravelledDistance = APP_DATA.TravelledDistance;
     340:	f7 01       	movw	r30, r14
     342:	c0 80       	ld	r12, Z
     344:	d1 80       	ldd	r13, Z+1	; 0x01
     346:	e2 80       	ldd	r14, Z+2	; 0x02
     348:	f3 80       	ldd	r15, Z+3	; 0x03
	MaxSpeed = APP_DATA.MaxSpeed;
     34a:	00 91 b1 00 	lds	r16, 0x00B1
     34e:	10 91 b2 00 	lds	r17, 0x00B2
	
	if((unsigned char)0 == StatusByte.KphFlag)
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	82 fd       	sbrc	r24, 2
     356:	55 c0       	rjmp	.+170    	; 0x402 <APP_MANAGE+0x18e>
	{
		SET_MPH(MaxSpeed);
     358:	98 01       	movw	r18, r16
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	c8 01       	movw	r24, r16
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	82 0f       	add	r24, r18
     36e:	93 1f       	adc	r25, r19
     370:	08 96       	adiw	r24, 0x08	; 8
     372:	8c 01       	movw	r16, r24
     374:	12 95       	swap	r17
     376:	02 95       	swap	r16
     378:	0f 70       	andi	r16, 0x0F	; 15
     37a:	01 27       	eor	r16, r17
     37c:	1f 70       	andi	r17, 0x0F	; 15
     37e:	01 27       	eor	r16, r17
		SET_MPH(CurrentSpeed);
     380:	c5 01       	movw	r24, r10
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	aa 0c       	add	r10, r10
     388:	bb 1c       	adc	r11, r11
     38a:	aa 0c       	add	r10, r10
     38c:	bb 1c       	adc	r11, r11
     38e:	aa 0c       	add	r10, r10
     390:	bb 1c       	adc	r11, r11
     392:	8a 0d       	add	r24, r10
     394:	9b 1d       	adc	r25, r11
     396:	08 96       	adiw	r24, 0x08	; 8
     398:	5c 01       	movw	r10, r24
     39a:	b6 94       	lsr	r11
     39c:	a7 94       	ror	r10
     39e:	b6 94       	lsr	r11
     3a0:	a7 94       	ror	r10
     3a2:	b6 94       	lsr	r11
     3a4:	a7 94       	ror	r10
     3a6:	b6 94       	lsr	r11
     3a8:	a7 94       	ror	r10
		SET_MPH(AvgSpeed);
     3aa:	94 01       	movw	r18, r8
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	c4 01       	movw	r24, r8
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	82 0f       	add	r24, r18
     3c0:	93 1f       	adc	r25, r19
     3c2:	08 96       	adiw	r24, 0x08	; 8
     3c4:	4c 01       	movw	r8, r24
     3c6:	96 94       	lsr	r9
     3c8:	87 94       	ror	r8
     3ca:	96 94       	lsr	r9
     3cc:	87 94       	ror	r8
     3ce:	96 94       	lsr	r9
     3d0:	87 94       	ror	r8
     3d2:	96 94       	lsr	r9
     3d4:	87 94       	ror	r8
		SET_MPH(TravelledDistance);
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	2a e0       	ldi	r18, 0x0A	; 10
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	a7 d9       	rcall	.-3250   	; 0xfffff732 <__eeprom_end+0xff7ef732>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	08 96       	adiw	r24, 0x08	; 8
     3ea:	a1 1d       	adc	r26, r1
     3ec:	b1 1d       	adc	r27, r1
     3ee:	6c 01       	movw	r12, r24
     3f0:	7d 01       	movw	r14, r26
     3f2:	68 94       	set
     3f4:	13 f8       	bld	r1, 3
     3f6:	f6 94       	lsr	r15
     3f8:	e7 94       	ror	r14
     3fa:	d7 94       	ror	r13
     3fc:	c7 94       	ror	r12
     3fe:	16 94       	lsr	r1
     400:	d1 f7       	brne	.-12     	; 0x3f6 <APP_MANAGE+0x182>
	{
		
	}
	

	ExclusiveSwitchLedOnOff((unsigned char)1,StatusByte.CurrentState);
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	67 70       	andi	r22, 0x07	; 7
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	f2 d5       	rcall	.+3044   	; 0xfee <ExclusiveSwitchLedOnOff>
	BlinkLedOnOff(StatusByte.CurrentState , LED_BLINK_RATE , StatusByte.StopMeasureFlag);
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	42 95       	swap	r20
     410:	4f 70       	andi	r20, 0x0F	; 15
     412:	41 70       	andi	r20, 0x01	; 1
     414:	87 70       	andi	r24, 0x07	; 7
     416:	64 e1       	ldi	r22, 0x14	; 20
     418:	fb d5       	rcall	.+3062   	; 0x1010 <BlinkLedOnOff>
	SwitchLedOnOff(StatusByte.KphFlag , MPH_LED);
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	86 95       	lsr	r24
     41e:	86 95       	lsr	r24
     420:	81 70       	andi	r24, 0x01	; 1
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	de d5       	rcall	.+3004   	; 0xfe2 <SwitchLedOnOff>
	SwitchLedOnOff((0x1 & ((unsigned char)~StatusByte.KphFlag)) , KPH_LED);
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	92 fd       	sbrc	r25, 2
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	65 e0       	ldi	r22, 0x05	; 5
     430:	d8 d5       	rcall	.+2992   	; 0xfe2 <SwitchLedOnOff>

    switch(StatusByte.CurrentState)
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	87 70       	andi	r24, 0x07	; 7
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	91 05       	cpc	r25, r1
     43c:	09 f4       	brne	.+2      	; 0x440 <APP_MANAGE+0x1cc>
     43e:	5e c0       	rjmp	.+188    	; 0x4fc <__stack+0x9d>
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	91 05       	cpc	r25, r1
     444:	3c f4       	brge	.+14     	; 0x454 <APP_MANAGE+0x1e0>
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	71 f0       	breq	.+28     	; 0x466 <__stack+0x7>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	91 05       	cpc	r25, r1
     44e:	09 f0       	breq	.+2      	; 0x452 <APP_MANAGE+0x1de>
     450:	d4 c0       	rjmp	.+424    	; 0x5fa <__stack+0x19b>
     452:	29 c0       	rjmp	.+82     	; 0x4a6 <__stack+0x47>
     454:	83 30       	cpi	r24, 0x03	; 3
     456:	91 05       	cpc	r25, r1
     458:	09 f4       	brne	.+2      	; 0x45c <APP_MANAGE+0x1e8>
     45a:	5e c0       	rjmp	.+188    	; 0x518 <__stack+0xb9>
     45c:	84 30       	cpi	r24, 0x04	; 4
     45e:	91 05       	cpc	r25, r1
     460:	09 f0       	breq	.+2      	; 0x464 <__stack+0x5>
     462:	cb c0       	rjmp	.+406    	; 0x5fa <__stack+0x19b>
     464:	6d c0       	rjmp	.+218    	; 0x540 <__stack+0xe1>
    {
		case APP_STATE_DIST:
			if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	86 ff       	sbrs	r24, 6
     46a:	10 c0       	rjmp	.+32     	; 0x48c <__stack+0x2d>
			{
				APP_CALC_TIMEsetTravelTime((unsigned long)0);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	cb 01       	movw	r24, r22
     472:	2d d1       	rcall	.+602    	; 0x6ce <APP_CALC_TIMEsetTravelTime>
				SetDistance((unsigned long)0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	cb 01       	movw	r24, r22
     47a:	cd d6       	rcall	.+3482   	; 0x1216 <SetDistance>
				APP_DATA.TravelTime = (unsigned long)0;
     47c:	10 92 ad 00 	sts	0x00AD, r1
     480:	10 92 ae 00 	sts	0x00AE, r1
     484:	10 92 af 00 	sts	0x00AF, r1
     488:	10 92 b0 00 	sts	0x00B0, r1
			}				
			BCDsendNumber(CurrentSpeed,0,1,1);
     48c:	b5 01       	movw	r22, r10
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	01 e0       	ldi	r16, 0x01	; 1
     498:	4c d2       	rcall	.+1176   	; 0x932 <BCDsendNumber>
		    BCDsendNumber(TravelledDistance ,1 ,1 ,1);
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	47 d2       	rcall	.+1166   	; 0x932 <BCDsendNumber>
		break;
     4a4:	b3 c0       	rjmp	.+358    	; 0x60c <__stack+0x1ad>
        
        case APP_STATE_TIME:
		
		    if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	86 ff       	sbrs	r24, 6
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <__stack+0x6d>
			{
				APP_CALC_TIMEsetTravelTime((unsigned long)0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	cb 01       	movw	r24, r22
     4b2:	0d d1       	rcall	.+538    	; 0x6ce <APP_CALC_TIMEsetTravelTime>
				SetDistance((unsigned long)0);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	cb 01       	movw	r24, r22
     4ba:	ad d6       	rcall	.+3418   	; 0x1216 <SetDistance>
				APP_DATA.TravelTime = (unsigned long)0;
     4bc:	10 92 ad 00 	sts	0x00AD, r1
     4c0:	10 92 ae 00 	sts	0x00AE, r1
     4c4:	10 92 af 00 	sts	0x00AF, r1
     4c8:	10 92 b0 00 	sts	0x00B0, r1
			}		
			TimeHoursMinutes = ConvertMinutesHM(APP_DATA.TravelTime);
     4cc:	60 91 ad 00 	lds	r22, 0x00AD
     4d0:	70 91 ae 00 	lds	r23, 0x00AE
     4d4:	80 91 af 00 	lds	r24, 0x00AF
     4d8:	90 91 b0 00 	lds	r25, 0x00B0
     4dc:	b2 de       	rcall	.-668    	; 0x242 <ConvertMinutesHM>
			BCDsendNumber(TimeHoursMinutes ,1 ,2 ,0);
     4de:	bc 01       	movw	r22, r24
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	22 e0       	ldi	r18, 0x02	; 2
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	23 d2       	rcall	.+1094   	; 0x932 <BCDsendNumber>
			BCDsendNumber(CurrentSpeed,0,1,1);		
     4ec:	b5 01       	movw	r22, r10
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	01 e0       	ldi	r16, 0x01	; 1
     4f8:	1c d2       	rcall	.+1080   	; 0x932 <BCDsendNumber>
        break;
     4fa:	88 c0       	rjmp	.+272    	; 0x60c <__stack+0x1ad>

		case APP_STATE_AVGSPD:
		    BCDsendNumber(AvgSpeed,1,1,1);
     4fc:	b4 01       	movw	r22, r8
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	01 e0       	ldi	r16, 0x01	; 1
     508:	14 d2       	rcall	.+1064   	; 0x932 <BCDsendNumber>
			BCDsendNumber(CurrentSpeed,0,1,1);
     50a:	b5 01       	movw	r22, r10
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	0e d2       	rcall	.+1052   	; 0x932 <BCDsendNumber>
		break;
     516:	7a c0       	rjmp	.+244    	; 0x60c <__stack+0x1ad>
		
		case APP_STATE_MAXSPD:	
			if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	86 ff       	sbrs	r24, 6
     51c:	03 c0       	rjmp	.+6      	; 0x524 <__stack+0xc5>
			{
				APP_CALC_MAXSPDmanage_Set(0);	
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	bc d0       	rcall	.+376    	; 0x69c <APP_CALC_MAXSPDmanage_Set>
			}				
			BCDsendNumber(MaxSpeed , 1 ,1 ,1);
     524:	b8 01       	movw	r22, r16
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	01 e0       	ldi	r16, 0x01	; 1
     530:	00 d2       	rcall	.+1024   	; 0x932 <BCDsendNumber>
			BCDsendNumber(CurrentSpeed,0,1,1);
     532:	b5 01       	movw	r22, r10
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	fa d1       	rcall	.+1012   	; 0x932 <BCDsendNumber>
		break;
     53e:	66 c0       	rjmp	.+204    	; 0x60c <__stack+0x1ad>
		
		case APP_STATE_CIRCUM:
			
			if(StatusByte.DisplayState == HMI_APPLY_STATE)
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	83 ff       	sbrs	r24, 3
     544:	3f c0       	rjmp	.+126    	; 0x5c4 <__stack+0x165>
			{
				if((unsigned char)1 == StatusByte.ExtraIncrementFlag)
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	86 ff       	sbrs	r24, 6
     54a:	0b c0       	rjmp	.+22     	; 0x562 <__stack+0x103>
				{
					if(APP_DATA.CircumBlinkIndex == (NUMBER_DIGITS - (unsigned char)1))
     54c:	80 91 a6 00 	lds	r24, 0x00A6
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	19 f4       	brne	.+6      	; 0x55a <__stack+0xfb>
					{
						APP_DATA.CircumBlinkIndex = (unsigned char)0;
     554:	10 92 a6 00 	sts	0x00A6, r1
     558:	2f c0       	rjmp	.+94     	; 0x5b8 <__stack+0x159>
					}
					else
					{
						APP_DATA.CircumBlinkIndex ++;
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	80 93 a6 00 	sts	0x00A6, r24
     560:	2b c0       	rjmp	.+86     	; 0x5b8 <__stack+0x159>
					}
					
				}
				else if((unsigned char)1 == StatusByte.ExtraDecrementFlag)
     562:	88 23       	and	r24, r24
     564:	64 f4       	brge	.+24     	; 0x57e <__stack+0x11f>
				{
					if(APP_DATA.CircumBlinkIndex == (unsigned char)0)
     566:	80 91 a6 00 	lds	r24, 0x00A6
     56a:	88 23       	and	r24, r24
     56c:	21 f4       	brne	.+8      	; 0x576 <__stack+0x117>
					{
						APP_DATA.CircumBlinkIndex = NUMBER_DIGITS - (unsigned char)1;
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	80 93 a6 00 	sts	0x00A6, r24
     574:	21 c0       	rjmp	.+66     	; 0x5b8 <__stack+0x159>
					}
					else
					{
						APP_DATA.CircumBlinkIndex --;	
     576:	81 50       	subi	r24, 0x01	; 1
     578:	80 93 a6 00 	sts	0x00A6, r24
     57c:	1d c0       	rjmp	.+58     	; 0x5b8 <__stack+0x159>
					}					
				}
				else if((unsigned char)1 == StatusByte.IncrementFlag )
     57e:	84 ff       	sbrs	r24, 4
     580:	0d c0       	rjmp	.+26     	; 0x59c <__stack+0x13d>
				{
					APP_DATA.Circum = IncrementDecrementSingleDigit(
     582:	80 91 a4 00 	lds	r24, 0x00A4
     586:	90 91 a5 00 	lds	r25, 0x00A5
     58a:	60 91 a6 00 	lds	r22, 0x00A6
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	66 dd       	rcall	.-1332   	; 0x5e <IncrementDecrementSingleDigit>
     592:	90 93 a5 00 	sts	0x00A5, r25
     596:	80 93 a4 00 	sts	0x00A4, r24
     59a:	0e c0       	rjmp	.+28     	; 0x5b8 <__stack+0x159>
					              APP_DATA.Circum,APP_DATA.CircumBlinkIndex,(unsigned char)0);
				}
				else if ((unsigned char)1 == StatusByte.DecrementFlag)
     59c:	85 ff       	sbrs	r24, 5
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <__stack+0x159>
				{
					APP_DATA.Circum = IncrementDecrementSingleDigit(
     5a0:	80 91 a4 00 	lds	r24, 0x00A4
     5a4:	90 91 a5 00 	lds	r25, 0x00A5
     5a8:	60 91 a6 00 	lds	r22, 0x00A6
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	57 dd       	rcall	.-1362   	; 0x5e <IncrementDecrementSingleDigit>
     5b0:	90 93 a5 00 	sts	0x00A5, r25
     5b4:	80 93 a4 00 	sts	0x00A4, r24
				}
				else
				{
					
				}
				BlinkDigit(APP_DATA.CircumBlinkIndex,1,SEG7_BLINK_RATE);
     5b8:	80 91 a6 00 	lds	r24, 0x00A6
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	44 e6       	ldi	r20, 0x64	; 100
     5c0:	bb d2       	rcall	.+1398   	; 0xb38 <BlinkDigit>
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__stack+0x16f>
			}				
			else
			{
				BlinkDigit(APP_DATA.CircumBlinkIndex,1,0);
     5c4:	80 91 a6 00 	lds	r24, 0x00A6
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	b5 d2       	rcall	.+1386   	; 0xb38 <BlinkDigit>
			}

			BCDsendNumber(APP_DATA.Circum ,1, 0,0);
     5ce:	60 91 a4 00 	lds	r22, 0x00A4
     5d2:	70 91 a5 00 	lds	r23, 0x00A5
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	00 e0       	ldi	r16, 0x00	; 0
     5e0:	a8 d1       	rcall	.+848    	; 0x932 <BCDsendNumber>
			SetCircumfirunce(APP_DATA.Circum);
     5e2:	80 91 a4 00 	lds	r24, 0x00A4
     5e6:	90 91 a5 00 	lds	r25, 0x00A5
     5ea:	2d d6       	rcall	.+3162   	; 0x1246 <SetCircumfirunce>
			DisplaySendString(0,0,"CIRC",4);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	40 e6       	ldi	r20, 0x60	; 96
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	24 e0       	ldi	r18, 0x04	; 4
     5f6:	d9 d2       	rcall	.+1458   	; 0xbaa <DisplaySendString>
			
		break;
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <__stack+0x1ad>
		
		default:
			BCDsendNumber(CurrentSpeed,0,1,1);
     5fa:	b5 01       	movw	r22, r10
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	01 e0       	ldi	r16, 0x01	; 1
     606:	95 d1       	rcall	.+810    	; 0x932 <BCDsendNumber>
			memset(&StatusByte,0,sizeof(StatusByte));
     608:	1a 82       	std	Y+2, r1	; 0x02
     60a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	memcpy(&APP_DATA.StatusByte,&StatusByte,sizeof(APP_INFOR_BYTE));
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	90 93 a8 00 	sts	0x00A8, r25
     614:	80 93 a7 00 	sts	0x00A7, r24
    
	if(StatusByte.EEPsaveFlag == (unsigned char)1)
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	83 ff       	sbrs	r24, 3
     61c:	0e c0       	rjmp	.+28     	; 0x63a <__stack+0x1db>
	{
		if((unsigned char)1 == 
		     Eeprom_Write_Block(1,&APP_DATA,(unsigned char)sizeof(APP_DATA),NULL))
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	64 ea       	ldi	r22, 0xA4	; 164
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	4f e0       	ldi	r20, 0x0F	; 15
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	05 d3       	rcall	.+1546   	; 0xc36 <Eeprom_Write_Block>

	memcpy(&APP_DATA.StatusByte,&StatusByte,sizeof(APP_INFOR_BYTE));
    
	if(StatusByte.EEPsaveFlag == (unsigned char)1)
	{
		if((unsigned char)1 == 
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	29 f4       	brne	.+10     	; 0x63a <__stack+0x1db>
		     Eeprom_Write_Block(1,&APP_DATA,(unsigned char)sizeof(APP_DATA),NULL))
			 {
				APP_DATA.StatusByte.EEPsaveFlag = (unsigned char)0;
     630:	80 91 a7 00 	lds	r24, 0x00A7
     634:	87 7f       	andi	r24, 0xF7	; 247
     636:	80 93 a7 00 	sts	0x00A7, r24
			 }
	}  
	
  }
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	bf 90       	pop	r11
     650:	af 90       	pop	r10
     652:	9f 90       	pop	r9
     654:	8f 90       	pop	r8
     656:	08 95       	ret

00000658 <APP_CALC_AVGSPDmanage>:
(
	APP_INFOR_BYTE * StatusByte ,
	unsigned long TravelTime ,
	unsigned long Distance
)
{
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	6a 01       	movw	r12, r20
     666:	7b 01       	movw	r14, r22
	unsigned short AverageSpeed;
	
	if(TravelTime != (unsigned long)0)
     668:	41 15       	cp	r20, r1
     66a:	51 05       	cpc	r21, r1
     66c:	61 05       	cpc	r22, r1
     66e:	71 05       	cpc	r23, r1
     670:	61 f0       	breq	.+24     	; 0x68a <APP_CALC_AVGSPDmanage+0x32>
	{
		AverageSpeed = (unsigned short)((unsigned long)
     672:	c9 01       	movw	r24, r18
     674:	b8 01       	movw	r22, r16
     676:	2c e3       	ldi	r18, 0x3C	; 60
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	59 d8       	rcall	.-3918   	; 0xfffff732 <__eeprom_end+0xff7ef732>
		        (Distance * ConvMeterMinuteRatio)/TravelTime);
     680:	a7 01       	movw	r20, r14
     682:	96 01       	movw	r18, r12
     684:	89 d8       	rcall	.-3822   	; 0xfffff798 <__eeprom_end+0xff7ef798>
{
	unsigned short AverageSpeed;
	
	if(TravelTime != (unsigned long)0)
	{
		AverageSpeed = (unsigned short)((unsigned long)
     686:	c9 01       	movw	r24, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <APP_CALC_AVGSPDmanage+0x36>
		        (Distance * ConvMeterMinuteRatio)/TravelTime);
	}
	else
	{
		AverageSpeed = (unsigned short)0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return AverageSpeed;
	
}
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	08 95       	ret

0000069c <APP_CALC_MAXSPDmanage_Set>:

PUBLIC void APP_CALC_MAXSPDmanage_Set(unsigned short MaxSpeed)
{
	CalcMaxSpeed = MaxSpeed;
     69c:	90 93 b4 00 	sts	0x00B4, r25
     6a0:	80 93 b3 00 	sts	0x00B3, r24
}
     6a4:	08 95       	ret

000006a6 <APP_CALC_MAXSPDmanage>:
(
	APP_INFOR_BYTE * StatusByte, 
	unsigned short CurrentSpeed
)
{
	if((unsigned char)0 == StatusByte->StopMeasureFlag)
     6a6:	fc 01       	movw	r30, r24
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	84 fd       	sbrc	r24, 4
     6ac:	0b c0       	rjmp	.+22     	; 0x6c4 <APP_CALC_MAXSPDmanage+0x1e>
	{
		if(CalcMaxSpeed < CurrentSpeed)
     6ae:	80 91 b3 00 	lds	r24, 0x00B3
     6b2:	90 91 b4 00 	lds	r25, 0x00B4
     6b6:	86 17       	cp	r24, r22
     6b8:	97 07       	cpc	r25, r23
     6ba:	20 f4       	brcc	.+8      	; 0x6c4 <APP_CALC_MAXSPDmanage+0x1e>
		{
			CalcMaxSpeed = CurrentSpeed;
     6bc:	70 93 b4 00 	sts	0x00B4, r23
     6c0:	60 93 b3 00 	sts	0x00B3, r22
	{
		
	}

	return CalcMaxSpeed;	
}
     6c4:	80 91 b3 00 	lds	r24, 0x00B3
     6c8:	90 91 b4 00 	lds	r25, 0x00B4
     6cc:	08 95       	ret

000006ce <APP_CALC_TIMEsetTravelTime>:
static unsigned long ElapsedTimeMinutes = (unsigned long)0;
static unsigned short ElapsedTimePeriod = (unsigned short)0;


PUBLIC void APP_CALC_TIMEsetTravelTime(unsigned long TravelTime)
{
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
	ElapsedTimeMinutes = TravelTime;
     6d2:	80 93 b5 00 	sts	0x00B5, r24
     6d6:	90 93 b6 00 	sts	0x00B6, r25
     6da:	a0 93 b7 00 	sts	0x00B7, r26
     6de:	b0 93 b8 00 	sts	0x00B8, r27
	ElapsedTimePeriod = (unsigned short)0;
     6e2:	10 92 ba 00 	sts	0x00BA, r1
     6e6:	10 92 b9 00 	sts	0x00B9, r1
}
     6ea:	08 95       	ret

000006ec <APP_CALC_TIMEmanage>:


PUBLIC unsigned long APP_CALC_TIMEmanage(APP_INFOR_BYTE * StatusByte)
{
     6ec:	fc 01       	movw	r30, r24

	if(ElapsedTimePeriod >= MINUTE_STAMP)
     6ee:	80 91 b9 00 	lds	r24, 0x00B9
     6f2:	90 91 ba 00 	lds	r25, 0x00BA
     6f6:	24 e0       	ldi	r18, 0x04	; 4
     6f8:	80 3b       	cpi	r24, 0xB0	; 176
     6fa:	92 07       	cpc	r25, r18
     6fc:	e0 f0       	brcs	.+56     	; 0x736 <APP_CALC_TIMEmanage+0x4a>
	{
		ElapsedTimePeriod = (unsigned short)0;
     6fe:	10 92 ba 00 	sts	0x00BA, r1
     702:	10 92 b9 00 	sts	0x00B9, r1
		ElapsedTimeMinutes++;
     706:	40 91 b5 00 	lds	r20, 0x00B5
     70a:	50 91 b6 00 	lds	r21, 0x00B6
     70e:	60 91 b7 00 	lds	r22, 0x00B7
     712:	70 91 b8 00 	lds	r23, 0x00B8
     716:	4f 5f       	subi	r20, 0xFF	; 255
     718:	5f 4f       	sbci	r21, 0xFF	; 255
     71a:	6f 4f       	sbci	r22, 0xFF	; 255
     71c:	7f 4f       	sbci	r23, 0xFF	; 255
     71e:	40 93 b5 00 	sts	0x00B5, r20
     722:	50 93 b6 00 	sts	0x00B6, r21
     726:	60 93 b7 00 	sts	0x00B7, r22
     72a:	70 93 b8 00 	sts	0x00B8, r23
		StatusByte->EEPsaveFlag = (unsigned char)1;
     72e:	80 81       	ld	r24, Z
     730:	88 60       	ori	r24, 0x08	; 8
     732:	80 83       	st	Z, r24
     734:	08 c0       	rjmp	.+16     	; 0x746 <APP_CALC_TIMEmanage+0x5a>
	}
	else if(StatusByte->StopMeasureFlag == (unsigned char)0)
     736:	21 81       	ldd	r18, Z+1	; 0x01
     738:	24 fd       	sbrc	r18, 4
     73a:	05 c0       	rjmp	.+10     	; 0x746 <APP_CALC_TIMEmanage+0x5a>
	{
		ElapsedTimePeriod++;						
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 ba 00 	sts	0x00BA, r25
     742:	80 93 b9 00 	sts	0x00B9, r24
	else
	{
		
	}
	
	return ElapsedTimeMinutes;
     746:	60 91 b5 00 	lds	r22, 0x00B5
     74a:	70 91 b6 00 	lds	r23, 0x00B6
}
     74e:	80 91 b7 00 	lds	r24, 0x00B7
     752:	90 91 b8 00 	lds	r25, 0x00B8
     756:	08 95       	ret

00000758 <APP_HMImanage>:
#define TRANSITION_TO_APPLY_STATE          (unsigned char)0x3

#define HMI_1BIT_MASK                      (unsigned char)0x01

PUBLIC void APP_HMImanage(APP_INFOR_BYTE * StatusByte )
{
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	unsigned char TempKphFlag;
	unsigned char TempStopFLag;
	static unsigned char DisplayState = NORMAL_STATE;
	
	
	KeyStatusLeft = GetKeyStatus(LEFT_KEY_ID);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	eb d2       	rcall	.+1494   	; 0xd3a <GetKeyStatus>
     764:	18 2f       	mov	r17, r24
	KeyStatusRight = GetKeyStatus(RIGHT_KEY_ID);
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	e8 d2       	rcall	.+1488   	; 0xd3a <GetKeyStatus>
	
	switch(DisplayState)
     76a:	90 91 bb 00 	lds	r25, 0x00BB
     76e:	91 30       	cpi	r25, 0x01	; 1
     770:	09 f4       	brne	.+2      	; 0x774 <APP_HMImanage+0x1c>
     772:	55 c0       	rjmp	.+170    	; 0x81e <APP_HMImanage+0xc6>
     774:	91 30       	cpi	r25, 0x01	; 1
     776:	38 f0       	brcs	.+14     	; 0x786 <APP_HMImanage+0x2e>
     778:	92 30       	cpi	r25, 0x02	; 2
     77a:	09 f4       	brne	.+2      	; 0x77e <APP_HMImanage+0x26>
     77c:	94 c0       	rjmp	.+296    	; 0x8a6 <APP_HMImanage+0x14e>
     77e:	93 30       	cpi	r25, 0x03	; 3
     780:	09 f0       	breq	.+2      	; 0x784 <APP_HMImanage+0x2c>
     782:	a0 c0       	rjmp	.+320    	; 0x8c4 <APP_HMImanage+0x16c>
     784:	97 c0       	rjmp	.+302    	; 0x8b4 <APP_HMImanage+0x15c>
	{
		case NORMAL_STATE:
		if(
     786:	11 30       	cpi	r17, 0x01	; 1
     788:	31 f4       	brne	.+12     	; 0x796 <APP_HMImanage+0x3e>
		   (KeyStatusLeft == STATE_SHORT_PRESS)
		   &&(KeyStatusRight == STATE_SHORT_PRESS)
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	b1 f4       	brne	.+44     	; 0x7ba <APP_HMImanage+0x62>
		   )
		{
			DisplayState = TRANSITION_TO_APPLY_STATE;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	80 93 bb 00 	sts	0x00BB, r24
     794:	99 c0       	rjmp	.+306    	; 0x8c8 <APP_HMImanage+0x170>
		}
		else if(KeyStatusLeft == CAPTURE_STATE_SHORT_PRESS)
     796:	10 34       	cpi	r17, 0x40	; 64
     798:	81 f4       	brne	.+32     	; 0x7ba <APP_HMImanage+0x62>
		{
			if(StatusByte->CurrentState == (unsigned char)0)
     79a:	88 81       	ld	r24, Y
     79c:	87 70       	andi	r24, 0x07	; 7
     79e:	29 f4       	brne	.+10     	; 0x7aa <APP_HMImanage+0x52>
			{
				StatusByte->CurrentState = APP_NB_DISPLAY_STATES - (unsigned char)1;	
     7a0:	88 81       	ld	r24, Y
     7a2:	88 7f       	andi	r24, 0xF8	; 248
     7a4:	84 60       	ori	r24, 0x04	; 4
     7a6:	88 83       	st	Y, r24
     7a8:	8f c0       	rjmp	.+286    	; 0x8c8 <APP_HMImanage+0x170>
			}
			else
			{
				StatusByte->CurrentState--;	
     7aa:	88 81       	ld	r24, Y
     7ac:	98 2f       	mov	r25, r24
     7ae:	99 5f       	subi	r25, 0xF9	; 249
     7b0:	97 70       	andi	r25, 0x07	; 7
     7b2:	88 7f       	andi	r24, 0xF8	; 248
     7b4:	89 2b       	or	r24, r25
     7b6:	88 83       	st	Y, r24
     7b8:	87 c0       	rjmp	.+270    	; 0x8c8 <APP_HMImanage+0x170>
			}
		}
		else if(KeyStatusRight == CAPTURE_STATE_SHORT_PRESS)
     7ba:	80 34       	cpi	r24, 0x40	; 64
     7bc:	81 f4       	brne	.+32     	; 0x7de <APP_HMImanage+0x86>
		{
			if(StatusByte->CurrentState == (APP_NB_DISPLAY_STATES - (unsigned char)1))
     7be:	88 81       	ld	r24, Y
     7c0:	87 70       	andi	r24, 0x07	; 7
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	21 f4       	brne	.+8      	; 0x7ce <APP_HMImanage+0x76>
			{
				StatusByte->CurrentState = (unsigned char)0;
     7c6:	88 81       	ld	r24, Y
     7c8:	88 7f       	andi	r24, 0xF8	; 248
     7ca:	88 83       	st	Y, r24
     7cc:	7d c0       	rjmp	.+250    	; 0x8c8 <APP_HMImanage+0x170>
			}
			else
			{
				StatusByte->CurrentState++;	
     7ce:	88 81       	ld	r24, Y
     7d0:	98 2f       	mov	r25, r24
     7d2:	9f 5f       	subi	r25, 0xFF	; 255
     7d4:	97 70       	andi	r25, 0x07	; 7
     7d6:	88 7f       	andi	r24, 0xF8	; 248
     7d8:	89 2b       	or	r24, r25
     7da:	88 83       	st	Y, r24
     7dc:	75 c0       	rjmp	.+234    	; 0x8c8 <APP_HMImanage+0x170>
			}
		}
		else if(KeyStatusLeft == NEW_STATE_LONG_PRESS)
     7de:	12 38       	cpi	r17, 0x82	; 130
     7e0:	61 f4       	brne	.+24     	; 0x7fa <APP_HMImanage+0xa2>
		{
			StatusByte->KphFlag ^= (unsigned char)1;
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	98 2f       	mov	r25, r24
     7e6:	96 95       	lsr	r25
     7e8:	96 95       	lsr	r25
     7ea:	90 95       	com	r25
     7ec:	91 70       	andi	r25, 0x01	; 1
     7ee:	99 0f       	add	r25, r25
     7f0:	99 0f       	add	r25, r25
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	89 2b       	or	r24, r25
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	67 c0       	rjmp	.+206    	; 0x8c8 <APP_HMImanage+0x170>
		}
		else if(KeyStatusRight == NEW_STATE_LONG_PRESS)
     7fa:	82 38       	cpi	r24, 0x82	; 130
     7fc:	61 f4       	brne	.+24     	; 0x816 <APP_HMImanage+0xbe>
		{
			StatusByte->StopMeasureFlag ^= (unsigned char)1;
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	98 2f       	mov	r25, r24
     802:	92 95       	swap	r25
     804:	9f 70       	andi	r25, 0x0F	; 15
     806:	90 95       	com	r25
     808:	91 70       	andi	r25, 0x01	; 1
     80a:	92 95       	swap	r25
     80c:	90 7f       	andi	r25, 0xF0	; 240
     80e:	8f 7e       	andi	r24, 0xEF	; 239
     810:	89 2b       	or	r24, r25
     812:	89 83       	std	Y+1, r24	; 0x01
     814:	59 c0       	rjmp	.+178    	; 0x8c8 <APP_HMImanage+0x170>
		}
		else
		{
			StatusByte->SleepFlag = (unsigned char)1;
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	82 60       	ori	r24, 0x02	; 2
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	55 c0       	rjmp	.+170    	; 0x8c8 <APP_HMImanage+0x170>
		}			
		break;
		
		case APPLY_STATE:
		TempCurrentState = StatusByte->CurrentState;
     81e:	38 81       	ld	r19, Y
     820:	37 70       	andi	r19, 0x07	; 7
		TempKphFlag = StatusByte->KphFlag;
     822:	99 81       	ldd	r25, Y+1	; 0x01
     824:	29 2f       	mov	r18, r25
     826:	26 95       	lsr	r18
     828:	26 95       	lsr	r18
     82a:	21 70       	andi	r18, 0x01	; 1
		TempStopFLag = StatusByte->StopMeasureFlag;
     82c:	92 95       	swap	r25
     82e:	9f 70       	andi	r25, 0x0F	; 15
     830:	91 70       	andi	r25, 0x01	; 1
		memset(StatusByte,0,sizeof(APP_INFOR_BYTE));
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	18 82       	st	Y, r1
		if(
     836:	11 30       	cpi	r17, 0x01	; 1
     838:	49 f4       	brne	.+18     	; 0x84c <APP_HMImanage+0xf4>
			(KeyStatusLeft == STATE_SHORT_PRESS)
			&&(KeyStatusRight == STATE_SHORT_PRESS)
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	69 f4       	brne	.+26     	; 0x858 <APP_HMImanage+0x100>
		  )
		{
			DisplayState = TRANSITION_TO_NORMAL_STATE;
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	80 93 bb 00 	sts	0x00BB, r24
			StatusByte->EEPsaveFlag = (unsigned char)1;
     844:	88 81       	ld	r24, Y
     846:	88 60       	ori	r24, 0x08	; 8
     848:	88 83       	st	Y, r24
     84a:	1b c0       	rjmp	.+54     	; 0x882 <APP_HMImanage+0x12a>
		}
		else if(KeyStatusLeft == CAPTURE_STATE_SHORT_PRESS)
     84c:	10 34       	cpi	r17, 0x40	; 64
     84e:	21 f4       	brne	.+8      	; 0x858 <APP_HMImanage+0x100>
		{
			StatusByte->DecrementFlag = (unsigned char)1;
     850:	88 81       	ld	r24, Y
     852:	80 62       	ori	r24, 0x20	; 32
     854:	88 83       	st	Y, r24
     856:	15 c0       	rjmp	.+42     	; 0x882 <APP_HMImanage+0x12a>
		}
		else if(KeyStatusRight == CAPTURE_STATE_SHORT_PRESS)
     858:	80 34       	cpi	r24, 0x40	; 64
     85a:	21 f4       	brne	.+8      	; 0x864 <APP_HMImanage+0x10c>
		{
			StatusByte->IncrementFlag = (unsigned char)1;
     85c:	88 81       	ld	r24, Y
     85e:	80 61       	ori	r24, 0x10	; 16
     860:	88 83       	st	Y, r24
     862:	0f c0       	rjmp	.+30     	; 0x882 <APP_HMImanage+0x12a>
		}
		else if(KeyStatusLeft == NEW_STATE_LONG_PRESS)
     864:	12 38       	cpi	r17, 0x82	; 130
     866:	21 f4       	brne	.+8      	; 0x870 <APP_HMImanage+0x118>
		{
			StatusByte->ExtraDecrementFlag = (unsigned char)1;
     868:	88 81       	ld	r24, Y
     86a:	80 68       	ori	r24, 0x80	; 128
     86c:	88 83       	st	Y, r24
     86e:	09 c0       	rjmp	.+18     	; 0x882 <APP_HMImanage+0x12a>
		}
		else if(KeyStatusRight == NEW_STATE_LONG_PRESS)
     870:	82 38       	cpi	r24, 0x82	; 130
     872:	21 f4       	brne	.+8      	; 0x87c <APP_HMImanage+0x124>
		{
			StatusByte->ExtraIncrementFlag = (unsigned char)1;
     874:	88 81       	ld	r24, Y
     876:	80 64       	ori	r24, 0x40	; 64
     878:	88 83       	st	Y, r24
     87a:	03 c0       	rjmp	.+6      	; 0x882 <APP_HMImanage+0x12a>
		}
		else
		{
		    StatusByte->SleepFlag = (unsigned char)1;
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	89 83       	std	Y+1, r24	; 0x01
		}
		
		StatusByte->CurrentState = TempCurrentState;
     882:	88 81       	ld	r24, Y
     884:	88 7f       	andi	r24, 0xF8	; 248
     886:	83 2b       	or	r24, r19
     888:	88 83       	st	Y, r24
		StatusByte->KphFlag = TempKphFlag;
     88a:	21 70       	andi	r18, 0x01	; 1
     88c:	22 0f       	add	r18, r18
     88e:	22 0f       	add	r18, r18
     890:	39 81       	ldd	r19, Y+1	; 0x01
     892:	3b 7e       	andi	r19, 0xEB	; 235
		StatusByte->StopMeasureFlag = TempStopFLag;
     894:	91 70       	andi	r25, 0x01	; 1
     896:	89 2f       	mov	r24, r25
     898:	82 95       	swap	r24
     89a:	80 7f       	andi	r24, 0xF0	; 240
     89c:	93 2f       	mov	r25, r19
     89e:	92 2b       	or	r25, r18
     8a0:	98 2b       	or	r25, r24
     8a2:	99 83       	std	Y+1, r25	; 0x01
		
		break;
     8a4:	11 c0       	rjmp	.+34     	; 0x8c8 <APP_HMImanage+0x170>
		
		case TRANSITION_TO_NORMAL_STATE:
		if(
     8a6:	11 23       	and	r17, r17
     8a8:	79 f4       	brne	.+30     	; 0x8c8 <APP_HMImanage+0x170>
		   ( KeyStatusLeft == STATE_NOT_PRESSED )
		   &&( KeyStatusRight == STATE_NOT_PRESSED )
     8aa:	88 23       	and	r24, r24
     8ac:	69 f4       	brne	.+26     	; 0x8c8 <APP_HMImanage+0x170>
		   )
		{
			DisplayState = NORMAL_STATE;		
     8ae:	10 92 bb 00 	sts	0x00BB, r1
     8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <APP_HMImanage+0x170>
		}
		break;
		
		case TRANSITION_TO_APPLY_STATE:
		if(
     8b4:	11 23       	and	r17, r17
     8b6:	41 f4       	brne	.+16     	; 0x8c8 <APP_HMImanage+0x170>
		( KeyStatusLeft == STATE_NOT_PRESSED )
		&&( KeyStatusRight == STATE_NOT_PRESSED )
     8b8:	88 23       	and	r24, r24
     8ba:	31 f4       	brne	.+12     	; 0x8c8 <APP_HMImanage+0x170>
		)
		{
			DisplayState = APPLY_STATE;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 bb 00 	sts	0x00BB, r24
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <APP_HMImanage+0x170>
		}
		break;
				
		default:
		DisplayState = NORMAL_STATE;
     8c4:	10 92 bb 00 	sts	0x00BB, r1
		break;
	}	
	StatusByte->DisplayState = DisplayState & HMI_1BIT_MASK;
     8c8:	90 91 bb 00 	lds	r25, 0x00BB
     8cc:	91 70       	andi	r25, 0x01	; 1
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0f       	add	r25, r25
     8d2:	99 0f       	add	r25, r25
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	89 2b       	or	r24, r25
     8da:	89 83       	std	Y+1, r24	; 0x01
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	08 95       	ret

000008e4 <SleepAfterSave>:
	
}

static void SleepAfterSave(void)
{
	HWI_DIGITAL_SLEEP();
     8e4:	8c d5       	rcall	.+2840   	; 0x13fe <HWI_DIGITAL_SLEEP>
	SendMCUtoSleep();
     8e6:	ff d6       	rcall	.+3582   	; 0x16e6 <SendMCUtoSleep>
	/* wake up from sleep here */
	HWI_DIGITAL_INITIALIZE();
     8e8:	82 d5       	rcall	.+2820   	; 0x13ee <HWI_DIGITAL_INITIALIZE>
     8ea:	08 95       	ret

000008ec <APP_SLEEPmanage>:

static void SleepAfterSave(void);

PUBLIC void APP_SLEEPmanage(APP_INFOR_BYTE * StatusByte , APP_NVM_DATA * APP_DATA)
{
	if((unsigned char)1 == StatusByte->SleepFlag)
     8ec:	fc 01       	movw	r30, r24
     8ee:	81 81       	ldd	r24, Z+1	; 0x01
     8f0:	81 ff       	sbrs	r24, 1
     8f2:	17 c0       	rjmp	.+46     	; 0x922 <APP_SLEEPmanage+0x36>
	{
		SleepTimer++;
     8f4:	80 91 bc 00 	lds	r24, 0x00BC
     8f8:	90 91 bd 00 	lds	r25, 0x00BD
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 bd 00 	sts	0x00BD, r25
     902:	80 93 bc 00 	sts	0x00BC, r24
		if( SLEEP_TIME_STAMP == SleepTimer )
     906:	f2 e0       	ldi	r31, 0x02	; 2
     908:	88 35       	cpi	r24, 0x58	; 88
     90a:	9f 07       	cpc	r25, r31
     90c:	71 f4       	brne	.+28     	; 0x92a <APP_SLEEPmanage+0x3e>
		{
			SleepTimer = (unsigned short)0;
     90e:	10 92 bd 00 	sts	0x00BD, r1
     912:	10 92 bc 00 	sts	0x00BC, r1
			/* save and sleep */
			Eeprom_Write_Block(1,APP_DATA,(unsigned char)sizeof(APP_NVM_DATA),SleepAfterSave);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	4f e0       	ldi	r20, 0x0F	; 15
     91a:	22 e7       	ldi	r18, 0x72	; 114
     91c:	34 e0       	ldi	r19, 0x04	; 4
     91e:	8b d1       	rcall	.+790    	; 0xc36 <Eeprom_Write_Block>
     920:	08 95       	ret
		}
	}
	else
	{
		SleepTimer = (unsigned short)0;
     922:	10 92 bd 00 	sts	0x00BD, r1
     926:	10 92 bc 00 	sts	0x00BC, r1
     92a:	08 95       	ret

0000092c <BCDInitialize>:
static unsigned char LineBlinkIndex = (unsigned char)0;
static unsigned char BlinkFlag = (unsigned char)0;

PUBLIC void BCDInitialize( unsigned char bIsCommonAnode)
{
	bIsAnodeUsed = bIsCommonAnode;
     92c:	80 93 be 00 	sts	0x00BE, r24
}
     930:	08 95       	ret

00000932 <BCDsendNumber>:
    unsigned long Number , 
    unsigned char Line ,       
    unsigned char DecimalPlace,
    unsigned char EnableTranc
)
{
     932:	2f 92       	push	r2
     934:	3f 92       	push	r3
     936:	4f 92       	push	r4
     938:	5f 92       	push	r5
     93a:	6f 92       	push	r6
     93c:	7f 92       	push	r7
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <BCDsendNumber+0x26>
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	a2 2e       	mov	r10, r18
     960:	30 2e       	mov	r3, r16
        { 
            Link = Buffer;
            Buffer = (unsigned long)(Buffer/(unsigned long)10);
            Output = Link - (unsigned long)(Buffer * (unsigned long)10);
         
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
     962:	24 2f       	mov	r18, r20
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	3a 83       	std	Y+2, r19	; 0x02
     968:	29 83       	std	Y+1, r18	; 0x01
PUBLIC void BCDInitialize( unsigned char bIsCommonAnode)
{
	bIsAnodeUsed = bIsCommonAnode;
}

PUBLIC void BCDsendNumber
     96a:	22 0f       	add	r18, r18
     96c:	33 1f       	adc	r19, r19
     96e:	22 0f       	add	r18, r18
     970:	33 1f       	adc	r19, r19
     972:	22 0f       	add	r18, r18
     974:	33 1f       	adc	r19, r19
     976:	0f 2e       	mov	r0, r31
     978:	ff eb       	ldi	r31, 0xBF	; 191
     97a:	8f 2e       	mov	r8, r31
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	9f 2e       	mov	r9, r31
     980:	f0 2d       	mov	r31, r0
     982:	82 0e       	add	r8, r18
     984:	93 1e       	adc	r9, r19
)
{
    unsigned long Link,Output,Buffer;
    unsigned char LoopIndex;
 
    Buffer = Number;
     986:	c6 2e       	mov	r12, r22
     988:	d7 2e       	mov	r13, r23
     98a:	e8 2e       	mov	r14, r24
     98c:	f9 2e       	mov	r15, r25
    for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)
     98e:	bb 24       	eor	r11, r11
    {
        if((Buffer != (unsigned long)0)|| (LoopIndex <= DecimalPlace) )
        { 
            Link = Buffer;
            Buffer = (unsigned long)(Buffer/(unsigned long)10);
     990:	0f 2e       	mov	r0, r31
     992:	fa e0       	ldi	r31, 0x0A	; 10
     994:	4f 2e       	mov	r4, r31
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	5f 2e       	mov	r5, r31
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	6f 2e       	mov	r6, r31
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	7f 2e       	mov	r7, r31
     9a2:	f0 2d       	mov	r31, r0
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
        }
        else if ((LoopIndex <= DecimalPlace)
                                  ||( (unsigned char)0) == EnableTranc)
        {
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[0];            
     9a4:	2b 2c       	mov	r2, r11
    unsigned char LoopIndex;
 
    Buffer = Number;
    for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)
    {
        if((Buffer != (unsigned long)0)|| (LoopIndex <= DecimalPlace) )
     9a6:	c1 14       	cp	r12, r1
     9a8:	d1 04       	cpc	r13, r1
     9aa:	e1 04       	cpc	r14, r1
     9ac:	f1 04       	cpc	r15, r1
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <BCDsendNumber+0x82>
     9b0:	a2 14       	cp	r10, r2
     9b2:	20 f1       	brcs	.+72     	; 0x9fc <BCDsendNumber+0xca>
        { 
            Link = Buffer;
            Buffer = (unsigned long)(Buffer/(unsigned long)10);
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	a3 01       	movw	r20, r6
     9ba:	92 01       	movw	r18, r4
     9bc:	ed d6       	rcall	.+3546   	; 0x1798 <__udivmodsi4>
     9be:	2b 83       	std	Y+3, r18	; 0x03
     9c0:	13 2f       	mov	r17, r19
     9c2:	04 2f       	mov	r16, r20
     9c4:	b5 2e       	mov	r11, r21
            Output = Link - (unsigned long)(Buffer * (unsigned long)10);
     9c6:	62 2f       	mov	r22, r18
     9c8:	73 2f       	mov	r23, r19
     9ca:	84 2f       	mov	r24, r20
     9cc:	95 2f       	mov	r25, r21
     9ce:	a3 01       	movw	r20, r6
     9d0:	92 01       	movw	r18, r4
     9d2:	af d6       	rcall	.+3422   	; 0x1732 <__mulsi3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	c8 1a       	sub	r12, r24
     9da:	d9 0a       	sbc	r13, r25
     9dc:	ea 0a       	sbc	r14, r26
     9de:	fb 0a       	sbc	r15, r27
         
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
     9e0:	85 e6       	ldi	r24, 0x65	; 101
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	c8 0e       	add	r12, r24
     9e6:	d9 1e       	adc	r13, r25
     9e8:	d6 01       	movw	r26, r12
     9ea:	8c 91       	ld	r24, X
     9ec:	f4 01       	movw	r30, r8
     9ee:	80 83       	st	Z, r24
     9f0:	11 82       	std	Z+1, r1	; 0x01
    for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)
    {
        if((Buffer != (unsigned long)0)|| (LoopIndex <= DecimalPlace) )
        { 
            Link = Buffer;
            Buffer = (unsigned long)(Buffer/(unsigned long)10);
     9f2:	cb 80       	ldd	r12, Y+3	; 0x03
     9f4:	d1 2e       	mov	r13, r17
     9f6:	e0 2e       	mov	r14, r16
     9f8:	fb 2c       	mov	r15, r11
            Output = Link - (unsigned long)(Buffer * (unsigned long)10);
         
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <BCDsendNumber+0xe4>
        }
        else if ((LoopIndex <= DecimalPlace)
                                  ||( (unsigned char)0) == EnableTranc)
     9fc:	33 20       	and	r3, r3
     9fe:	39 f4       	brne	.+14     	; 0xa0e <BCDsendNumber+0xdc>
        {
            BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[0];            
     a00:	ec ef       	ldi	r30, 0xFC	; 252
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	d4 01       	movw	r26, r8
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	fc 93       	st	X, r31
     a0a:	ee 93       	st	-X, r30
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <BCDsendNumber+0xe4>
        }
        else
        {
           BCDAlpha[Line][LoopIndex] = 0x0;    
     a0e:	d4 01       	movw	r26, r8
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	1c 92       	st	X, r1
     a14:	1e 92       	st	-X, r1
{
    unsigned long Link,Output,Buffer;
    unsigned char LoopIndex;
 
    Buffer = Number;
    for( LoopIndex = (unsigned char)0; LoopIndex < NUMBER_DIGITS ; LoopIndex++)
     a16:	23 94       	inc	r2
     a18:	e2 e0       	ldi	r30, 0x02	; 2
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	8e 0e       	add	r8, r30
     a1e:	9f 1e       	adc	r9, r31
     a20:	f4 e0       	ldi	r31, 0x04	; 4
     a22:	2f 16       	cp	r2, r31
     a24:	09 f0       	breq	.+2      	; 0xa28 <BCDsendNumber+0xf6>
     a26:	bf cf       	rjmp	.-130    	; 0x9a6 <BCDsendNumber+0x74>
        else
        {
           BCDAlpha[Line][LoopIndex] = 0x0;    
        }
    }    
    if(DecimalPlace != (unsigned char)0)
     a28:	aa 20       	and	r10, r10
     a2a:	89 f0       	breq	.+34     	; 0xa4e <BCDsendNumber+0x11c>
    {
        BCDAlpha[Line][DecimalPlace] |= SevenSegmentMAP[10];
     a2c:	e9 81       	ldd	r30, Y+1	; 0x01
     a2e:	fa 81       	ldd	r31, Y+2	; 0x02
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ea 0d       	add	r30, r10
     a3a:	f1 1d       	adc	r31, r1
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	e1 54       	subi	r30, 0x41	; 65
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
    }
}
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	7f 90       	pop	r7
     a6e:	6f 90       	pop	r6
     a70:	5f 90       	pop	r5
     a72:	4f 90       	pop	r4
     a74:	3f 90       	pop	r3
     a76:	2f 90       	pop	r2
     a78:	08 95       	ret

00000a7a <BCDManage7segment>:

PUBLIC void BCDManage7segment(void)
{
     a7a:	cf 93       	push	r28
    
    unsigned char Index;
	unsigned char BCD;    

    
    if( BlinkDuration != (unsigned char)0)
     a7c:	80 91 cf 00 	lds	r24, 0x00CF
     a80:	88 23       	and	r24, r24
     a82:	81 f0       	breq	.+32     	; 0xaa4 <BCDManage7segment+0x2a>
    {
       BlinkCounter++;
     a84:	90 91 d0 00 	lds	r25, 0x00D0
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	90 93 d0 00 	sts	0x00D0, r25
       if(BlinkCounter == BlinkDuration)
     a8e:	89 17       	cp	r24, r25
     a90:	61 f4       	brne	.+24     	; 0xaaa <BCDManage7segment+0x30>
       {
           BlinkFlag ^= (unsigned char)1;
     a92:	90 91 d1 00 	lds	r25, 0x00D1
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	89 27       	eor	r24, r25
     a9a:	80 93 d1 00 	sts	0x00D1, r24
           BlinkCounter = (unsigned char)0;
     a9e:	10 92 d0 00 	sts	0x00D0, r1
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <BCDManage7segment+0x30>
       }
    }
    else
    {
       BlinkFlag = (unsigned char)0;    
     aa4:	10 92 d1 00 	sts	0x00D1, r1
     aa8:	10 c0       	rjmp	.+32     	; 0xaca <BCDManage7segment+0x50>
    }
        
    if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex)
     aaa:	80 91 d1 00 	lds	r24, 0x00D1
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	61 f4       	brne	.+24     	; 0xaca <BCDManage7segment+0x50>
     ab2:	90 91 d2 00 	lds	r25, 0x00D2
     ab6:	80 91 d3 00 	lds	r24, 0x00D3
     aba:	98 17       	cp	r25, r24
     abc:	31 f4       	brne	.+12     	; 0xaca <BCDManage7segment+0x50>
            && (LineBlinkIndex == LineIndex))
     abe:	90 91 d4 00 	lds	r25, 0x00D4
     ac2:	80 91 d5 00 	lds	r24, 0x00D5
     ac6:	98 17       	cp	r25, r24
     ac8:	89 f0       	breq	.+34     	; 0xaec <BCDManage7segment+0x72>
    {
        BCD = (unsigned char)0;
    }
    else
    {
        BCD = BCDAlpha[LineIndex][DigitIndex];   
     aca:	e0 91 d5 00 	lds	r30, 0x00D5
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 91 d2 00 	lds	r24, 0x00D2
     ad4:	ee 0f       	add	r30, r30
     ad6:	ff 1f       	adc	r31, r31
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e8 0f       	add	r30, r24
     ade:	f1 1d       	adc	r31, r1
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	e1 54       	subi	r30, 0x41	; 65
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	c0 81       	ld	r28, Z
     aea:	01 c0       	rjmp	.+2      	; 0xaee <BCDManage7segment+0x74>
    }
        
    if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex)
            && (LineBlinkIndex == LineIndex))
    {
        BCD = (unsigned char)0;
     aec:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        BCD = BCDAlpha[LineIndex][DigitIndex];   
    }

    if( (unsigned char)1 == bIsAnodeUsed)
     aee:	80 91 be 00 	lds	r24, 0x00BE
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	09 f4       	brne	.+2      	; 0xaf8 <BCDManage7segment+0x7e>
    {
        //Index = (unsigned char)~Index;
        BCD = (unsigned char)~BCD;
     af6:	c0 95       	com	r28
    }
   
    
    Index = (unsigned char)(LineIndex * (unsigned char)NUMBER_DIGITS )
     af8:	60 91 d5 00 	lds	r22, 0x00D5
     afc:	66 0f       	add	r22, r22
     afe:	66 0f       	add	r22, r22
     b00:	80 91 d2 00 	lds	r24, 0x00D2
     b04:	68 0f       	add	r22, r24
                                                                  + DigitIndex;
    //Index = ((NUMBER_DIGITS - DigitIndex)- (unsigned char)1);	
    HWI_4Digit_WRITE(0,Index);
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	f3 d4       	rcall	.+2534   	; 0x14f0 <HWI_4Digit_WRITE>
    HWI_8Digit_WRITE(1,BCD);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	6c 2f       	mov	r22, r28
     b0e:	12 d5       	rcall	.+2596   	; 0x1534 <HWI_8Digit_WRITE>
    //PORTD = BCDAlpha[DigitIndex];
    //PORTC =  0xF & (~((unsigned char) 0x8 >> DigitIndex));

    
    
    DigitIndex ++;
     b10:	80 91 d2 00 	lds	r24, 0x00D2
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	80 93 d2 00 	sts	0x00D2, r24
    if(DigitIndex == (unsigned char)NUMBER_DIGITS)
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	59 f4       	brne	.+22     	; 0xb34 <BCDManage7segment+0xba>
    {
        DigitIndex = (unsigned char)0;
     b1e:	10 92 d2 00 	sts	0x00D2, r1
        LineIndex++;
     b22:	80 91 d5 00 	lds	r24, 0x00D5
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	80 93 d5 00 	sts	0x00D5, r24
        if(LineIndex == (unsigned char)NUMBER_LINES)
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	11 f4       	brne	.+4      	; 0xb34 <BCDManage7segment+0xba>
        {
            LineIndex = (unsigned char)0;
     b30:	10 92 d5 00 	sts	0x00D5, r1
        }
    }
    
}
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <BlinkDigit>:
    unsigned char Index , 
    unsigned char Line, 
    unsigned char duration
)
{
    BlinkIndex = Index;
     b38:	80 93 d3 00 	sts	0x00D3, r24
    BlinkDuration = duration;
     b3c:	40 93 cf 00 	sts	0x00CF, r20
    LineBlinkIndex = Line;
     b40:	60 93 d4 00 	sts	0x00D4, r22
}
     b44:	08 95       	ret

00000b46 <Segment7SendString>:
    unsigned char Position, 
    unsigned char Line,
    unsigned char * Data,
    unsigned char Length
)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ea 01       	movw	r28, r20
    unsigned char LoopIndex;
    if((Position + Length ) <= NUMBER_DIGITS)
     b50:	48 2f       	mov	r20, r24
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	fa 01       	movw	r30, r20
     b56:	e2 0f       	add	r30, r18
     b58:	f1 1d       	adc	r31, r1
     b5a:	9f 01       	movw	r18, r30
     b5c:	e5 30       	cpi	r30, 0x05	; 5
     b5e:	f1 05       	cpc	r31, r1
     b60:	fc f4       	brge	.+62     	; 0xba0 <Segment7SendString+0x5a>
    {
       for(LoopIndex = Position ; LoopIndex < (Position+Length) ;LoopIndex++)
     b62:	4e 17       	cp	r20, r30
     b64:	5f 07       	cpc	r21, r31
     b66:	e4 f4       	brge	.+56     	; 0xba0 <Segment7SendString+0x5a>
       {
           BCDAlpha[Line][LoopIndex] = Data[LoopIndex];
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	0f eb       	ldi	r16, 0xBF	; 191
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	46 0f       	add	r20, r22
     b78:	57 1f       	adc	r21, r23
     b7a:	da 01       	movw	r26, r20
     b7c:	aa 0f       	add	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	a0 0f       	add	r26, r16
     b82:	b1 1f       	adc	r27, r17
     b84:	fe 01       	movw	r30, r28
     b86:	e8 0f       	add	r30, r24
     b88:	f1 1d       	adc	r31, r1
     b8a:	90 81       	ld	r25, Z
     b8c:	9c 93       	st	X, r25
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	1c 92       	st	X, r1
     b92:	11 97       	sbiw	r26, 0x01	; 1
)
{
    unsigned char LoopIndex;
    if((Position + Length ) <= NUMBER_DIGITS)
    {
       for(LoopIndex = Position ; LoopIndex < (Position+Length) ;LoopIndex++)
     b94:	8f 5f       	subi	r24, 0xFF	; 255
     b96:	48 2f       	mov	r20, r24
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	42 17       	cp	r20, r18
     b9c:	53 07       	cpc	r21, r19
     b9e:	5c f3       	brlt	.-42     	; 0xb76 <Segment7SendString+0x30>
       {
           BCDAlpha[Line][LoopIndex] = Data[LoopIndex];
       }    
    } 
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <DisplaySendString>:
    unsigned char Position, 
    unsigned char Line,
    char * Data, 
    unsigned char Length
)
{
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <DisplaySendString+0xe>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <DisplaySendString+0x10>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	38 2f       	mov	r19, r24
     bc0:	16 2f       	mov	r17, r22
    unsigned char ConvertedData[NUMBER_DIGITS];
    unsigned char LoopIndex;
    unsigned char TempStore;
   
    for(LoopIndex = (unsigned char)0 ;LoopIndex < Length ; LoopIndex++)
     bc2:	22 23       	and	r18, r18
     bc4:	39 f1       	breq	.+78     	; 0xc14 <DisplaySendString+0x6a>
     bc6:	64 2f       	mov	r22, r20
     bc8:	75 2f       	mov	r23, r21
    {
        if((Data[LoopIndex] >= (unsigned char) 0x41)
                &&(Data[LoopIndex] <= (unsigned char)0x66))
        {
            TempStore = (unsigned char)Data[LoopIndex] - (unsigned char)0x41;
            ConvertedData[(Length - (unsigned char)1)- LoopIndex] 
     bca:	82 2f       	mov	r24, r18
     bcc:	90 e0       	ldi	r25, 0x00	; 0
    0b00000000, //X
    0b00000000, //Y
    0b00000000  //Z
};

PUBLIC void DisplaySendString
     bce:	de 01       	movw	r26, r28
     bd0:	a8 0f       	add	r26, r24
     bd2:	b9 1f       	adc	r27, r25
     bd4:	ee 24       	eor	r14, r14
     bd6:	ea 94       	dec	r14
     bd8:	fe 2c       	mov	r15, r14
     bda:	ec 0e       	add	r14, r28
     bdc:	fd 1e       	adc	r15, r29
     bde:	8e 0d       	add	r24, r14
     be0:	9f 1d       	adc	r25, r15
     be2:	42 2f       	mov	r20, r18
     be4:	41 50       	subi	r20, 0x01	; 1
     be6:	84 1b       	sub	r24, r20
     be8:	91 09       	sbc	r25, r1
        if((Data[LoopIndex] >= (unsigned char) 0x41)
                &&(Data[LoopIndex] <= (unsigned char)0x66))
        {
            TempStore = (unsigned char)Data[LoopIndex] - (unsigned char)0x41;
            ConvertedData[(Length - (unsigned char)1)- LoopIndex] 
                                               = Segment7ASCIItable[TempStore];
     bea:	40 e7       	ldi	r20, 0x70	; 112
     bec:	50 e0       	ldi	r21, 0x00	; 0
    unsigned char LoopIndex;
    unsigned char TempStore;
   
    for(LoopIndex = (unsigned char)0 ;LoopIndex < Length ; LoopIndex++)
    {
        if((Data[LoopIndex] >= (unsigned char) 0x41)
     bee:	fb 01       	movw	r30, r22
     bf0:	01 91       	ld	r16, Z+
     bf2:	bf 01       	movw	r22, r30
                &&(Data[LoopIndex] <= (unsigned char)0x66))
     bf4:	f0 2f       	mov	r31, r16
     bf6:	f1 54       	subi	r31, 0x41	; 65
    unsigned char LoopIndex;
    unsigned char TempStore;
   
    for(LoopIndex = (unsigned char)0 ;LoopIndex < Length ; LoopIndex++)
    {
        if((Data[LoopIndex] >= (unsigned char) 0x41)
     bf8:	f6 32       	cpi	r31, 0x26	; 38
     bfa:	38 f4       	brcc	.+14     	; 0xc0a <DisplaySendString+0x60>
                &&(Data[LoopIndex] <= (unsigned char)0x66))
        {
            TempStore = (unsigned char)Data[LoopIndex] - (unsigned char)0x41;
            ConvertedData[(Length - (unsigned char)1)- LoopIndex] 
                                               = Segment7ASCIItable[TempStore];
     bfc:	7a 01       	movw	r14, r20
     bfe:	ef 0e       	add	r14, r31
     c00:	f1 1c       	adc	r15, r1
     c02:	f7 01       	movw	r30, r14
     c04:	e0 81       	ld	r30, Z
     c06:	ec 93       	st	X, r30
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <DisplaySendString+0x62>
        }     
		else
		{
			ConvertedData[(Length - (unsigned char)1)- LoopIndex] 
			                                   = (unsigned char)Data[LoopIndex];
     c0a:	0c 93       	st	X, r16
     c0c:	11 97       	sbiw	r26, 0x01	; 1
{
    unsigned char ConvertedData[NUMBER_DIGITS];
    unsigned char LoopIndex;
    unsigned char TempStore;
   
    for(LoopIndex = (unsigned char)0 ;LoopIndex < Length ; LoopIndex++)
     c0e:	a8 17       	cp	r26, r24
     c10:	b9 07       	cpc	r27, r25
     c12:	69 f7       	brne	.-38     	; 0xbee <DisplaySendString+0x44>
		{
			ConvertedData[(Length - (unsigned char)1)- LoopIndex] 
			                                   = (unsigned char)Data[LoopIndex];
		}			   
    }
    Segment7SendString(Position , Line , &ConvertedData[0] , Length);
     c14:	83 2f       	mov	r24, r19
     c16:	61 2f       	mov	r22, r17
     c18:	ae 01       	movw	r20, r28
     c1a:	4f 5f       	subi	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	93 df       	rcall	.-218    	; 0xb46 <Segment7SendString>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <Eeprom_Write_Block>:
    unsigned char address , 
    void *DataPtr ,                                               
    unsigned char BlockSize,
    void (*ptrFnCallback)(void)
)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	e9 01       	movw	r28, r18
    unsigned char WriteGranted;
    unsigned char LoopIndex;
	unsigned char *LocDataPtr = (unsigned char*)DataPtr;
	
	
    if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= EEPROM_BUFFER_SIZE))
     c3c:	90 91 d6 00 	lds	r25, 0x00D6
     c40:	99 23       	and	r25, r25
     c42:	09 f5       	brne	.+66     	; 0xc86 <Eeprom_Write_Block+0x50>
     c44:	43 33       	cpi	r20, 0x33	; 51
     c46:	08 f5       	brcc	.+66     	; 0xc8a <Eeprom_Write_Block+0x54>
    {
        WriteRequest = (unsigned char)1;
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	90 93 d6 00 	sts	0x00D6, r25

        for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
     c4e:	44 23       	and	r20, r20
     c50:	81 f0       	breq	.+32     	; 0xc72 <Eeprom_Write_Block+0x3c>
     c52:	a6 2f       	mov	r26, r22
     c54:	b7 2f       	mov	r27, r23
     c56:	e7 ed       	ldi	r30, 0xD7	; 215
     c58:	f0 e0       	ldi	r31, 0x00	; 0
static unsigned char DataArray[EEPROM_BUFFER_SIZE];
static unsigned char EEPROMaddr;
static unsigned char DataSize;
static void (*WriteFnCallback)(void);

PUBLIC unsigned char Eeprom_Write_Block
     c5a:	9f 01       	movw	r18, r30
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	94 2f       	mov	r25, r20
     c62:	91 50       	subi	r25, 0x01	; 1
     c64:	29 0f       	add	r18, r25
     c66:	31 1d       	adc	r19, r1
    {
        WriteRequest = (unsigned char)1;

        for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
        {
            DataArray[LoopIndex] = LocDataPtr[LoopIndex];
     c68:	9d 91       	ld	r25, X+
     c6a:	91 93       	st	Z+, r25
	
    if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= EEPROM_BUFFER_SIZE))
    {
        WriteRequest = (unsigned char)1;

        for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
     c6c:	e2 17       	cp	r30, r18
     c6e:	f3 07       	cpc	r31, r19
     c70:	d9 f7       	brne	.-10     	; 0xc68 <Eeprom_Write_Block+0x32>
        {
            DataArray[LoopIndex] = LocDataPtr[LoopIndex];
        }
        DataSize = BlockSize;
     c72:	40 93 09 01 	sts	0x0109, r20
        EEPROMaddr = address;
     c76:	80 93 0a 01 	sts	0x010A, r24
        WriteFnCallback = ptrFnCallback;
     c7a:	d0 93 0c 01 	sts	0x010C, r29
     c7e:	c0 93 0b 01 	sts	0x010B, r28
        WriteGranted = (unsigned char)1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <Eeprom_Write_Block+0x56>
    }
    else
    {
        WriteGranted = (unsigned char)0;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <Eeprom_Write_Block+0x56>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
    }
    return WriteGranted;
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <Eeprom_Read_Block>:
(   
    unsigned char address , 
    void *DataPtr , 
    unsigned char BlockSize
)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	18 2f       	mov	r17, r24
     c9e:	7b 01       	movw	r14, r22
     ca0:	d4 2f       	mov	r29, r20
    unsigned char ReadSuccess;
    unsigned char ReadGranted;
	
	unsigned char *LocDataPtr = (unsigned char *)DataPtr;
    
    if( (unsigned char)0 == WriteRequest)
     ca2:	80 91 d6 00 	lds	r24, 0x00D6
     ca6:	88 23       	and	r24, r24
     ca8:	81 f4       	brne	.+32     	; 0xcca <Eeprom_Read_Block+0x38>
    {     
        while(LoopIndex < BlockSize  )
     caa:	44 23       	and	r20, r20
     cac:	81 f0       	breq	.+32     	; 0xcce <Eeprom_Read_Block+0x3c>
     cae:	c0 e0       	ldi	r28, 0x00	; 0
        {
           ReadSuccess = HWIeeprom_Read(address + LoopIndex , &LocDataPtr[LoopIndex]); 
     cb0:	b7 01       	movw	r22, r14
     cb2:	6c 0f       	add	r22, r28
     cb4:	71 1d       	adc	r23, r1
     cb6:	8c 2f       	mov	r24, r28
     cb8:	81 0f       	add	r24, r17
     cba:	8c d3       	rcall	.+1816   	; 0x13d4 <HWIeeprom_Read>
           if((unsigned char)1 == ReadSuccess)
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <Eeprom_Read_Block+0x30>
           {
                LoopIndex++;
     cc0:	cf 5f       	subi	r28, 0xFF	; 255
	
	unsigned char *LocDataPtr = (unsigned char *)DataPtr;
    
    if( (unsigned char)0 == WriteRequest)
    {     
        while(LoopIndex < BlockSize  )
     cc2:	cd 17       	cp	r28, r29
     cc4:	a8 f3       	brcs	.-22     	; 0xcb0 <Eeprom_Read_Block+0x1e>
           if((unsigned char)1 == ReadSuccess)
           {
                LoopIndex++;
           }
        } 
        ReadGranted = (unsigned char)1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <Eeprom_Read_Block+0x3e>
    }
    else
    {
        ReadGranted = (unsigned char)0;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <Eeprom_Read_Block+0x3e>
           if((unsigned char)1 == ReadSuccess)
           {
                LoopIndex++;
           }
        } 
        ReadGranted = (unsigned char)1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
        ReadGranted = (unsigned char)0;
    }
    
    return ReadGranted;
    
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <EepromManage>:
PUBLIC void EepromManage(void)
{
    static unsigned char WriteIndex = ((unsigned char)0);
    unsigned char WriteSuccess;
    
    if((unsigned char)1 == WriteRequest )
     cdc:	80 91 d6 00 	lds	r24, 0x00D6
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	11 f5       	brne	.+68     	; 0xd28 <EepromManage+0x4c>
    {
        if(WriteIndex == DataSize)
     ce4:	80 91 0d 01 	lds	r24, 0x010D
     ce8:	90 91 09 01 	lds	r25, 0x0109
     cec:	89 17       	cp	r24, r25
     cee:	61 f4       	brne	.+24     	; 0xd08 <EepromManage+0x2c>
        {
            WriteIndex = (unsigned char)0;
     cf0:	10 92 0d 01 	sts	0x010D, r1
            WriteRequest = (unsigned char)0;
     cf4:	10 92 d6 00 	sts	0x00D6, r1
            if(WriteFnCallback != (void*)0)
     cf8:	e0 91 0b 01 	lds	r30, 0x010B
     cfc:	f0 91 0c 01 	lds	r31, 0x010C
     d00:	30 97       	sbiw	r30, 0x00	; 0
     d02:	91 f0       	breq	.+36     	; 0xd28 <EepromManage+0x4c>
            {
                WriteFnCallback();
     d04:	09 95       	icall
     d06:	08 95       	ret
            }          
        }
        else
        {
            WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[WriteIndex]);
     d08:	90 91 0a 01 	lds	r25, 0x010A
     d0c:	e7 ed       	ldi	r30, 0xD7	; 215
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e8 0f       	add	r30, r24
     d12:	f1 1d       	adc	r31, r1
     d14:	89 0f       	add	r24, r25
     d16:	60 81       	ld	r22, Z
     d18:	51 d3       	rcall	.+1698   	; 0x13bc <HWIeeprom_Write>
            if( (unsigned char)1 == WriteSuccess )
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	29 f4       	brne	.+10     	; 0xd28 <EepromManage+0x4c>
            {
                WriteIndex++;            
     d1e:	80 91 0d 01 	lds	r24, 0x010D
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	80 93 0d 01 	sts	0x010D, r24
     d28:	08 95       	ret

00000d2a <KeyInitialize>:
const strKeyConfig KeyArrayConfig[NUMBER_KEYS] =  KEYS_CONFIG;
static strKeyData KeyInternalData[NUMBER_KEYS];

PUBLIC void KeyInitialize(void)
{
    memset(KeyInternalData , 0 ,sizeof(KeyInternalData));
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	ee e0       	ldi	r30, 0x0E	; 14
     d2e:	f1 e0       	ldi	r31, 0x01	; 1
     d30:	df 01       	movw	r26, r30
     d32:	1d 92       	st	X+, r1
     d34:	8a 95       	dec	r24
     d36:	e9 f7       	brne	.-6      	; 0xd32 <KeyInitialize+0x8>
}
     d38:	08 95       	ret

00000d3a <GetKeyStatus>:

PUBLIC unsigned char GetKeyStatus(unsigned char KeyID)
{
    unsigned char KeyStatus;
    
    KeyStatus = KeyInternalData[KeyID].KeyState;
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	e2 5f       	subi	r30, 0xF2	; 242
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	80 81       	ld	r24, Z
    KeyInternalData[KeyID].KeyState &= STATE_MASK;
     d4c:	98 2f       	mov	r25, r24
     d4e:	9f 73       	andi	r25, 0x3F	; 63
     d50:	90 83       	st	Z, r25
    
    return KeyStatus;
}
     d52:	08 95       	ret

00000d54 <MangeKeys>:

PUBLIC void MangeKeys(unsigned char KeyID)
{
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
    unsigned char HWIreading;
    unsigned char KeyState;
    
    KeyState = KeyInternalData[KeyID].KeyState & STATE_MASK;
     d5a:	08 2f       	mov	r16, r24
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	f8 01       	movw	r30, r16
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	e0 0f       	add	r30, r16
     d66:	f1 1f       	adc	r31, r17
     d68:	e2 5f       	subi	r30, 0xF2	; 242
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	c0 81       	ld	r28, Z
     d6e:	cf 73       	andi	r28, 0x3F	; 63
    HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
     d70:	f8 01       	movw	r30, r16
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	e6 57       	subi	r30, 0x76	; 118
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 81       	ld	r24, Z
     d84:	43 d3       	rcall	.+1670   	; 0x140c <HWI_DIGI_READ>
    
    switch(KeyState)
     d86:	c1 30       	cpi	r28, 0x01	; 1
     d88:	09 f4       	brne	.+2      	; 0xd8c <MangeKeys+0x38>
     d8a:	51 c0       	rjmp	.+162    	; 0xe2e <MangeKeys+0xda>
     d8c:	c1 30       	cpi	r28, 0x01	; 1
     d8e:	20 f0       	brcs	.+8      	; 0xd98 <MangeKeys+0x44>
     d90:	c2 30       	cpi	r28, 0x02	; 2
     d92:	09 f0       	breq	.+2      	; 0xd96 <MangeKeys+0x42>
     d94:	19 c1       	rjmp	.+562    	; 0xfc8 <MangeKeys+0x274>
     d96:	dc c0       	rjmp	.+440    	; 0xf50 <MangeKeys+0x1fc>
    {
        case STATE_NOT_PRESSED:
            if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
     d98:	f8 01       	movw	r30, r16
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	e6 57       	subi	r30, 0x76	; 118
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	98 17       	cp	r25, r24
     dae:	a1 f5       	brne	.+104    	; 0xe18 <MangeKeys+0xc4>
            {
                KeyInternalData[KeyID].KeyCounter++;
     db0:	f8 01       	movw	r30, r16
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	e0 0f       	add	r30, r16
     db8:	f1 1f       	adc	r31, r17
     dba:	e2 5f       	subi	r30, 0xF2	; 242
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	92 81       	ldd	r25, Z+2	; 0x02
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	92 83       	std	Z+2, r25	; 0x02
     dc6:	81 83       	std	Z+1, r24	; 0x01
                if(KeyArrayConfig[KeyID].ShortPress == 
     dc8:	f8 01       	movw	r30, r16
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e6 57       	subi	r30, 0x76	; 118
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	24 81       	ldd	r18, Z+4	; 0x04
     ddc:	35 81       	ldd	r19, Z+5	; 0x05
     dde:	82 17       	cp	r24, r18
     de0:	93 07       	cpc	r25, r19
     de2:	09 f0       	breq	.+2      	; 0xde6 <MangeKeys+0x92>
     de4:	fa c0       	rjmp	.+500    	; 0xfda <MangeKeys+0x286>
                                              KeyInternalData[KeyID].KeyCounter)
                {
                    KeyInternalData[KeyID].KeyState = NEW_STATE_SHORT_PRESS;
     de6:	f8 01       	movw	r30, r16
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e0 0f       	add	r30, r16
     dee:	f1 1f       	adc	r31, r17
     df0:	e2 5f       	subi	r30, 0xF2	; 242
     df2:	fe 4f       	sbci	r31, 0xFE	; 254
     df4:	81 e8       	ldi	r24, 0x81	; 129
     df6:	80 83       	st	Z, r24
                    KeyInternalData[KeyID].KeyCounter = 
                                          KeyArrayConfig[KeyID].ReleaseTicks;
     df8:	d8 01       	movw	r26, r16
     dfa:	aa 0f       	add	r26, r26
     dfc:	bb 1f       	adc	r27, r27
     dfe:	aa 0f       	add	r26, r26
     e00:	bb 1f       	adc	r27, r27
     e02:	aa 0f       	add	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	a6 57       	subi	r26, 0x76	; 118
     e08:	bf 4f       	sbci	r27, 0xFF	; 255
                KeyInternalData[KeyID].KeyCounter++;
                if(KeyArrayConfig[KeyID].ShortPress == 
                                              KeyInternalData[KeyID].KeyCounter)
                {
                    KeyInternalData[KeyID].KeyState = NEW_STATE_SHORT_PRESS;
                    KeyInternalData[KeyID].KeyCounter = 
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	8d 91       	ld	r24, X+
     e0e:	9c 91       	ld	r25, X
     e10:	13 97       	sbiw	r26, 0x03	; 3
     e12:	92 83       	std	Z+2, r25	; 0x02
     e14:	81 83       	std	Z+1, r24	; 0x01
     e16:	e1 c0       	rjmp	.+450    	; 0xfda <MangeKeys+0x286>
                                          KeyArrayConfig[KeyID].ReleaseTicks;
                }
            }
            else
            {
                KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
     e18:	f8 01       	movw	r30, r16
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	0e 0f       	add	r16, r30
     e20:	1f 1f       	adc	r17, r31
     e22:	f8 01       	movw	r30, r16
     e24:	e2 5f       	subi	r30, 0xF2	; 242
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	12 82       	std	Z+2, r1	; 0x02
     e2a:	11 82       	std	Z+1, r1	; 0x01
     e2c:	d6 c0       	rjmp	.+428    	; 0xfda <MangeKeys+0x286>
            }
            break;
        case STATE_SHORT_PRESS:
            if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
     e2e:	f8 01       	movw	r30, r16
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	e6 57       	subi	r30, 0x76	; 118
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	98 17       	cp	r25, r24
     e44:	09 f0       	breq	.+2      	; 0xe48 <MangeKeys+0xf4>
     e46:	4a c0       	rjmp	.+148    	; 0xedc <MangeKeys+0x188>
            {
                if ( KeyInternalData[KeyID].KeyCounter >= 
     e48:	f8 01       	movw	r30, r16
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	e0 0f       	add	r30, r16
     e50:	f1 1f       	adc	r31, r17
     e52:	e2 5f       	subi	r30, 0xF2	; 242
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	92 81       	ldd	r25, Z+2	; 0x02
                                             KeyArrayConfig[KeyID].ReleaseTicks)
     e5a:	f8 01       	movw	r30, r16
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e6 57       	subi	r30, 0x76	; 118
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	42 81       	ldd	r20, Z+2	; 0x02
     e6e:	53 81       	ldd	r21, Z+3	; 0x03
            }
            break;
        case STATE_SHORT_PRESS:
            if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
            {
                if ( KeyInternalData[KeyID].KeyCounter >= 
     e70:	84 17       	cp	r24, r20
     e72:	95 07       	cpc	r25, r21
     e74:	40 f1       	brcs	.+80     	; 0xec6 <MangeKeys+0x172>
                                             KeyArrayConfig[KeyID].ReleaseTicks)
                {
                    KeyInternalData[KeyID].KeyCounter++;
     e76:	9c 01       	movw	r18, r24
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	f8 01       	movw	r30, r16
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	e0 0f       	add	r30, r16
     e84:	f1 1f       	adc	r31, r17
     e86:	e2 5f       	subi	r30, 0xF2	; 242
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	32 83       	std	Z+2, r19	; 0x02
     e8c:	21 83       	std	Z+1, r18	; 0x01
                    if(KeyArrayConfig[KeyID].LongPress == 
     e8e:	f8 01       	movw	r30, r16
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e6 57       	subi	r30, 0x76	; 118
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	86 81       	ldd	r24, Z+6	; 0x06
     ea2:	97 81       	ldd	r25, Z+7	; 0x07
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	09 f0       	breq	.+2      	; 0xeac <MangeKeys+0x158>
     eaa:	97 c0       	rjmp	.+302    	; 0xfda <MangeKeys+0x286>
                                              KeyInternalData[KeyID].KeyCounter)
                    {
                        KeyInternalData[KeyID].KeyState = NEW_STATE_LONG_PRESS;
     eac:	f8 01       	movw	r30, r16
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	0e 0f       	add	r16, r30
     eb4:	1f 1f       	adc	r17, r31
     eb6:	f8 01       	movw	r30, r16
     eb8:	e2 5f       	subi	r30, 0xF2	; 242
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	82 e8       	ldi	r24, 0x82	; 130
     ebe:	80 83       	st	Z, r24
                        KeyInternalData[KeyID].KeyCounter = 
     ec0:	52 83       	std	Z+2, r21	; 0x02
     ec2:	41 83       	std	Z+1, r20	; 0x01
     ec4:	8a c0       	rjmp	.+276    	; 0xfda <MangeKeys+0x286>
                                             KeyArrayConfig[KeyID].ReleaseTicks;
                    }
                }
                else
                {
                        KeyInternalData[KeyID].KeyCounter = 
     ec6:	f8 01       	movw	r30, r16
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	0e 0f       	add	r16, r30
     ece:	1f 1f       	adc	r17, r31
     ed0:	f8 01       	movw	r30, r16
     ed2:	e2 5f       	subi	r30, 0xF2	; 242
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	52 83       	std	Z+2, r21	; 0x02
     ed8:	41 83       	std	Z+1, r20	; 0x01
     eda:	7f c0       	rjmp	.+254    	; 0xfda <MangeKeys+0x286>
                                            KeyArrayConfig[KeyID].ReleaseTicks;
                }
            }
            else
            {
                if ( KeyInternalData[KeyID].KeyCounter > 
     edc:	f8 01       	movw	r30, r16
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e0 0f       	add	r30, r16
     ee4:	f1 1f       	adc	r31, r17
     ee6:	e2 5f       	subi	r30, 0xF2	; 242
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	92 81       	ldd	r25, Z+2	; 0x02
                                             KeyArrayConfig[KeyID].ReleaseTicks)
     eee:	f8 01       	movw	r30, r16
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	e6 57       	subi	r30, 0x76	; 118
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	22 81       	ldd	r18, Z+2	; 0x02
     f02:	33 81       	ldd	r19, Z+3	; 0x03
                                            KeyArrayConfig[KeyID].ReleaseTicks;
                }
            }
            else
            {
                if ( KeyInternalData[KeyID].KeyCounter > 
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	58 f4       	brcc	.+22     	; 0xf20 <MangeKeys+0x1cc>
                                             KeyArrayConfig[KeyID].ReleaseTicks)
                {
                    KeyInternalData[KeyID].KeyCounter = 
     f0a:	f8 01       	movw	r30, r16
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	0e 0f       	add	r16, r30
     f12:	1f 1f       	adc	r17, r31
     f14:	f8 01       	movw	r30, r16
     f16:	e2 5f       	subi	r30, 0xF2	; 242
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	32 83       	std	Z+2, r19	; 0x02
     f1c:	21 83       	std	Z+1, r18	; 0x01
     f1e:	5d c0       	rjmp	.+186    	; 0xfda <MangeKeys+0x286>
                                            KeyArrayConfig[KeyID].ReleaseTicks;
                }
                else
                {
                    KeyInternalData[KeyID].KeyCounter--;
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f8 01       	movw	r30, r16
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e0 0f       	add	r30, r16
     f2a:	f1 1f       	adc	r31, r17
     f2c:	e2 5f       	subi	r30, 0xF2	; 242
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	92 83       	std	Z+2, r25	; 0x02
     f32:	81 83       	std	Z+1, r24	; 0x01
                    if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <MangeKeys+0x1e6>
     f38:	50 c0       	rjmp	.+160    	; 0xfda <MangeKeys+0x286>
                    {
                        KeyInternalData[KeyID].KeyState = CAPTURE_STATE_SHORT_PRESS;
     f3a:	f8 01       	movw	r30, r16
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	0e 0f       	add	r16, r30
     f42:	1f 1f       	adc	r17, r31
     f44:	f8 01       	movw	r30, r16
     f46:	e2 5f       	subi	r30, 0xF2	; 242
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	80 83       	st	Z, r24
     f4e:	45 c0       	rjmp	.+138    	; 0xfda <MangeKeys+0x286>
                    }
                }
            }
            break;
        case STATE_LONG_PRESS:
            if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
     f50:	f8 01       	movw	r30, r16
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	e6 57       	subi	r30, 0x76	; 118
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	98 17       	cp	r25, r24
     f66:	b9 f4       	brne	.+46     	; 0xf96 <MangeKeys+0x242>
            {
                        KeyInternalData[KeyID].KeyCounter = 
     f68:	f8 01       	movw	r30, r16
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e0 0f       	add	r30, r16
     f70:	f1 1f       	adc	r31, r17
     f72:	e2 5f       	subi	r30, 0xF2	; 242
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
                                            KeyArrayConfig[KeyID].ReleaseTicks;
     f76:	d8 01       	movw	r26, r16
     f78:	aa 0f       	add	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	aa 0f       	add	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	aa 0f       	add	r26, r26
     f82:	bb 1f       	adc	r27, r27
     f84:	a6 57       	subi	r26, 0x76	; 118
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
            }
            break;
        case STATE_LONG_PRESS:
            if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
            {
                        KeyInternalData[KeyID].KeyCounter = 
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	8d 91       	ld	r24, X+
     f8c:	9c 91       	ld	r25, X
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	92 83       	std	Z+2, r25	; 0x02
     f92:	81 83       	std	Z+1, r24	; 0x01
     f94:	22 c0       	rjmp	.+68     	; 0xfda <MangeKeys+0x286>
                                            KeyArrayConfig[KeyID].ReleaseTicks;
            }
            else
            {
                KeyInternalData[KeyID].KeyCounter--;
     f96:	f8 01       	movw	r30, r16
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	e0 0f       	add	r30, r16
     f9e:	f1 1f       	adc	r31, r17
     fa0:	e2 5f       	subi	r30, 0xF2	; 242
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	92 81       	ldd	r25, Z+2	; 0x02
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	92 83       	std	Z+2, r25	; 0x02
     fac:	81 83       	std	Z+1, r24	; 0x01
                if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	a1 f4       	brne	.+40     	; 0xfda <MangeKeys+0x286>
                {
                    KeyInternalData[KeyID].KeyState = CAPTURE_STATE_LONG_PRESS;
     fb2:	f8 01       	movw	r30, r16
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	0e 0f       	add	r16, r30
     fba:	1f 1f       	adc	r17, r31
     fbc:	f8 01       	movw	r30, r16
     fbe:	e2 5f       	subi	r30, 0xF2	; 242
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	80 83       	st	Z, r24
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <MangeKeys+0x286>
                }
            }
            break;
        default:
            KeyInternalData[KeyID].KeyState = STATE_NOT_PRESSED;
     fc8:	f8 01       	movw	r30, r16
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	0e 0f       	add	r16, r30
     fd0:	1f 1f       	adc	r17, r31
     fd2:	f8 01       	movw	r30, r16
     fd4:	e2 5f       	subi	r30, 0xF2	; 242
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	10 82       	st	Z, r1
            break;    
    }   
}
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <SwitchLedOnOff>:
(
	unsigned char bIsSwitchOn,
	unsigned char LedId
)
{
	bIsLedOn[LedId] = bIsSwitchOn;
     fe2:	e4 e1       	ldi	r30, 0x14	; 20
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	e6 0f       	add	r30, r22
     fe8:	f1 1d       	adc	r31, r1
     fea:	80 83       	st	Z, r24
}
     fec:	08 95       	ret

00000fee <ExclusiveSwitchLedOnOff>:
	unsigned char bIsSwitchOn,
	unsigned char LedId
)
{
	unsigned char LedLoopIndex;
	unsigned char OthersOnOff = (unsigned char)0x1 & ((unsigned char)(~bIsSwitchOn));
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	80 fd       	sbrc	r24, 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
	bIsLedOn[LedId] = bIsSwitchOn;
     ff4:	e4 e1       	ldi	r30, 0x14	; 20
     ff6:	f1 e0       	ldi	r31, 0x01	; 1
     ff8:	df 01       	movw	r26, r30
     ffa:	a6 0f       	add	r26, r22
     ffc:	b1 1d       	adc	r27, r1
     ffe:	8c 93       	st	X, r24
	for(LedLoopIndex = (unsigned char)0 ; LedLoopIndex < NUMBER_LEDS ; LedLoopIndex++)
    1000:	80 e0       	ldi	r24, 0x00	; 0
	{
		if( LedLoopIndex != LedId)
    1002:	86 13       	cpse	r24, r22
		{
			bIsLedOn[LedLoopIndex] = OthersOnOff;
    1004:	90 83       	st	Z, r25
)
{
	unsigned char LedLoopIndex;
	unsigned char OthersOnOff = (unsigned char)0x1 & ((unsigned char)(~bIsSwitchOn));
	bIsLedOn[LedId] = bIsSwitchOn;
	for(LedLoopIndex = (unsigned char)0 ; LedLoopIndex < NUMBER_LEDS ; LedLoopIndex++)
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	31 96       	adiw	r30, 0x01	; 1
    100a:	87 30       	cpi	r24, 0x07	; 7
    100c:	d1 f7       	brne	.-12     	; 0x1002 <ExclusiveSwitchLedOnOff+0x14>
		else
		{
			
		}
	}
}
    100e:	08 95       	ret

00001010 <BlinkLedOnOff>:
	unsigned char LedId , 
	unsigned char BlinkRate ,
	unsigned char bIsBlink
)
{
	BlinkDuration[LedId] = BlinkRate;
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fc 01       	movw	r30, r24
    1014:	e5 5e       	subi	r30, 0xE5	; 229
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	60 83       	st	Z, r22
	bIsBlinkLed[LedId] = bIsBlink;
    101a:	8e 5d       	subi	r24, 0xDE	; 222
    101c:	9e 4f       	sbci	r25, 0xFE	; 254
    101e:	fc 01       	movw	r30, r24
    1020:	40 83       	st	Z, r20
}
    1022:	08 95       	ret

00001024 <InitializeLed>:

PUBLIC void InitializeLed(void)
{
	memset(&BlinkDuration , 0 , sizeof(BlinkDuration));
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	eb e1       	ldi	r30, 0x1B	; 27
    1028:	f1 e0       	ldi	r31, 0x01	; 1
    102a:	df 01       	movw	r26, r30
    102c:	98 2f       	mov	r25, r24
    102e:	1d 92       	st	X+, r1
    1030:	9a 95       	dec	r25
    1032:	e9 f7       	brne	.-6      	; 0x102e <InitializeLed+0xa>
	memset(&bIsBlinkLed , 0 , sizeof(bIsBlinkLed));
    1034:	e2 e2       	ldi	r30, 0x22	; 34
    1036:	f1 e0       	ldi	r31, 0x01	; 1
    1038:	df 01       	movw	r26, r30
    103a:	98 2f       	mov	r25, r24
    103c:	1d 92       	st	X+, r1
    103e:	9a 95       	dec	r25
    1040:	e9 f7       	brne	.-6      	; 0x103c <InitializeLed+0x18>
	memset(&bIsLedOn , 0 , sizeof(bIsLedOn));
    1042:	e4 e1       	ldi	r30, 0x14	; 20
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	df 01       	movw	r26, r30
    1048:	98 2f       	mov	r25, r24
    104a:	1d 92       	st	X+, r1
    104c:	9a 95       	dec	r25
    104e:	e9 f7       	brne	.-6      	; 0x104a <InitializeLed+0x26>
	memset(&BlinkLedCntr , 0 ,sizeof(BlinkLedCntr));
    1050:	e9 e2       	ldi	r30, 0x29	; 41
    1052:	f1 e0       	ldi	r31, 0x01	; 1
    1054:	df 01       	movw	r26, r30
    1056:	98 2f       	mov	r25, r24
    1058:	1d 92       	st	X+, r1
    105a:	9a 95       	dec	r25
    105c:	e9 f7       	brne	.-6      	; 0x1058 <InitializeLed+0x34>
	memset(&LedturnOnOffFlag , 0 , sizeof(LedturnOnOffFlag));
    105e:	e0 e3       	ldi	r30, 0x30	; 48
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	df 01       	movw	r26, r30
    1064:	1d 92       	st	X+, r1
    1066:	8a 95       	dec	r24
    1068:	e9 f7       	brne	.-6      	; 0x1064 <InitializeLed+0x40>
}
    106a:	08 95       	ret

0000106c <ManageLeds>:

PUBLIC void ManageLeds(unsigned char LedId)
{	
	if((unsigned char)1 == bIsLedOn[LedId])
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	ec 5e       	subi	r30, 0xEC	; 236
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	20 81       	ld	r18, Z
    1076:	21 30       	cpi	r18, 0x01	; 1
    1078:	61 f5       	brne	.+88     	; 0x10d2 <ManageLeds+0x66>
	{
		if( (unsigned char)1 == bIsBlinkLed[LedId])
    107a:	fc 01       	movw	r30, r24
    107c:	ee 5d       	subi	r30, 0xDE	; 222
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	20 81       	ld	r18, Z
    1082:	21 30       	cpi	r18, 0x01	; 1
    1084:	e1 f4       	brne	.+56     	; 0x10be <ManageLeds+0x52>
		{
			if(BlinkLedCntr[LedId] >= BlinkDuration[LedId])
    1086:	fc 01       	movw	r30, r24
    1088:	e7 5d       	subi	r30, 0xD7	; 215
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	20 81       	ld	r18, Z
    108e:	fc 01       	movw	r30, r24
    1090:	e5 5e       	subi	r30, 0xE5	; 229
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	30 81       	ld	r19, Z
    1096:	23 17       	cp	r18, r19
    1098:	60 f0       	brcs	.+24     	; 0x10b2 <ManageLeds+0x46>
			{
				BlinkLedCntr[LedId] = (unsigned char)0;
    109a:	fc 01       	movw	r30, r24
    109c:	e7 5d       	subi	r30, 0xD7	; 215
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	10 82       	st	Z, r1
				LedturnOnOffFlag[LedId] ^= (unsigned char)1;
    10a2:	fc 01       	movw	r30, r24
    10a4:	e0 5d       	subi	r30, 0xD0	; 208
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	30 81       	ld	r19, Z
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	23 27       	eor	r18, r19
    10ae:	20 83       	st	Z, r18
    10b0:	18 c0       	rjmp	.+48     	; 0x10e2 <ManageLeds+0x76>
			}
			else
			{
				BlinkLedCntr[LedId]++;
    10b2:	fc 01       	movw	r30, r24
    10b4:	e7 5d       	subi	r30, 0xD7	; 215
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	20 83       	st	Z, r18
    10bc:	12 c0       	rjmp	.+36     	; 0x10e2 <ManageLeds+0x76>
			}
		}
		else
		{
			LedturnOnOffFlag[LedId] = (unsigned char)1;
    10be:	fc 01       	movw	r30, r24
    10c0:	e0 5d       	subi	r30, 0xD0	; 208
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	21 e0       	ldi	r18, 0x01	; 1
    10c6:	20 83       	st	Z, r18
			BlinkLedCntr[LedId] = (unsigned char)0;	
    10c8:	fc 01       	movw	r30, r24
    10ca:	e7 5d       	subi	r30, 0xD7	; 215
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	10 82       	st	Z, r1
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <ManageLeds+0x76>
		}
	}
	else
	{
		LedturnOnOffFlag[LedId] = (unsigned char)0;
    10d2:	fc 01       	movw	r30, r24
    10d4:	e0 5d       	subi	r30, 0xD0	; 208
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	10 82       	st	Z, r1
		BlinkLedCntr[LedId] = (unsigned char)0;	
    10da:	fc 01       	movw	r30, r24
    10dc:	e7 5d       	subi	r30, 0xD7	; 215
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	10 82       	st	Z, r1
	}
	HWI_DIGI_WRITE(LEDS_CONFIG_ARRAY[LedId] , LedturnOnOffFlag[LedId]);
    10e2:	dc 01       	movw	r26, r24
    10e4:	a6 56       	subi	r26, 0x66	; 102
    10e6:	bf 4f       	sbci	r27, 0xFF	; 255
    10e8:	fc 01       	movw	r30, r24
    10ea:	e0 5d       	subi	r30, 0xD0	; 208
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	8c 91       	ld	r24, X
    10f0:	60 81       	ld	r22, Z
    10f2:	9d d1       	rcall	.+826    	; 0x142e <HWI_DIGI_WRITE>
}
    10f4:	08 95       	ret

000010f6 <SpeedCalcNotifyInitialize>:
volatile unsigned char HwTimerOVFLcount = (unsigned char)0;
 
PUBLIC void SpeedCalcNotifyInitialize(void)
{
   
}
    10f6:	08 95       	ret

000010f8 <SensorOneNotify>:

PUBLIC void SensorOneNotify(void)
{
    if( (unsigned char)1 == NotifyFlag )
    10f8:	80 91 3b 01 	lds	r24, 0x013B
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	19 f4       	brne	.+6      	; 0x1106 <SensorOneNotify+0xe>
    {
        NotifyFlag = (unsigned char)0;
    1100:	10 92 3b 01 	sts	0x013B, r1
    1104:	08 95       	ret
    }
    else
    {
        if(LapCounter != (unsigned char)0)
    1106:	80 91 3a 01 	lds	r24, 0x013A
    110a:	88 23       	and	r24, r24
    110c:	29 f0       	breq	.+10     	; 0x1118 <SensorOneNotify+0x20>
        {
            LapCounter--;
    110e:	80 91 3a 01 	lds	r24, 0x013A
    1112:	81 50       	subi	r24, 0x01	; 1
    1114:	80 93 3a 01 	sts	0x013A, r24
    1118:	08 95       	ret

0000111a <SensorTwoNotify>:
    }
}

PUBLIC void SensorTwoNotify(void)
{
    if( (unsigned char)0 == NotifyFlag )
    111a:	80 91 3b 01 	lds	r24, 0x013B
    111e:	88 23       	and	r24, r24
    1120:	a9 f4       	brne	.+42     	; 0x114c <SensorTwoNotify+0x32>
    {
        NotifyFlag = (unsigned char)1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 3b 01 	sts	0x013B, r24
        LapCounter++; 
    1128:	80 91 3a 01 	lds	r24, 0x013A
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	80 93 3a 01 	sts	0x013A, r24
        HWtimerCount = ReloadHWtimer(HW_TIMER_ID);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	33 d2       	rcall	.+1126   	; 0x159c <ReloadHWtimer>
    1136:	90 93 39 01 	sts	0x0139, r25
    113a:	80 93 38 01 	sts	0x0138, r24
        TimerOVFLcount = HwTimerOVFLcount;       
    113e:	80 91 37 01 	lds	r24, 0x0137
    1142:	80 93 3c 01 	sts	0x013C, r24
        HwTimerOVFLcount = (unsigned char)0;
    1146:	10 92 37 01 	sts	0x0137, r1
    114a:	08 95       	ret
    }
    else
    {
        if(LapCounter != (unsigned char)0)
    114c:	80 91 3a 01 	lds	r24, 0x013A
    1150:	88 23       	and	r24, r24
    1152:	29 f0       	breq	.+10     	; 0x115e <SensorTwoNotify+0x44>
        {
            LapCounter--;
    1154:	80 91 3a 01 	lds	r24, 0x013A
    1158:	81 50       	subi	r24, 0x01	; 1
    115a:	80 93 3a 01 	sts	0x013A, r24
    115e:	08 95       	ret

00001160 <SpeedCalcManage>:

PUBLIC void SpeedCalcManage(void)
{  
    unsigned short HundredMeterReference; 
    
    LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
    1160:	40 91 38 01 	lds	r20, 0x0138
    1164:	50 91 39 01 	lds	r21, 0x0139
                        ((unsigned short)TimerOVFLcount * (unsigned short)655);       
    1168:	20 91 3c 01 	lds	r18, 0x013C
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8f e8       	ldi	r24, 0x8F	; 143
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	28 9f       	mul	r18, r24
    1174:	f0 01       	movw	r30, r0
    1176:	29 9f       	mul	r18, r25
    1178:	f0 0d       	add	r31, r0
    117a:	38 9f       	mul	r19, r24
    117c:	f0 0d       	add	r31, r0
    117e:	11 24       	eor	r1, r1

PUBLIC void SpeedCalcManage(void)
{  
    unsigned short HundredMeterReference; 
    
    LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
    1180:	ca 01       	movw	r24, r20
    1182:	64 e6       	ldi	r22, 0x64	; 100
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	f4 d2       	rcall	.+1512   	; 0x1770 <__udivmodhi4>
    1188:	e6 0f       	add	r30, r22
    118a:	f7 1f       	adc	r31, r23
    118c:	f0 93 3e 01 	sts	0x013E, r31
    1190:	e0 93 3d 01 	sts	0x013D, r30
                        ((unsigned short)TimerOVFLcount * (unsigned short)655);       
        
    
	if((unsigned char)0 == DistTravelCntrDisable)
    1194:	80 91 3f 01 	lds	r24, 0x013F
    1198:	88 23       	and	r24, r24
    119a:	b9 f5       	brne	.+110    	; 0x120a <SpeedCalcManage+0xaa>
	{		   
		HundredMeterReference = (unsigned short)(HundredMetersFactor /
		(unsigned long)CircumFactor);
    119c:	20 91 a1 00 	lds	r18, 0x00A1
    11a0:	30 91 a2 00 	lds	r19, 0x00A2
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
                        ((unsigned short)TimerOVFLcount * (unsigned short)655);       
        
    
	if((unsigned char)0 == DistTravelCntrDisable)
	{		   
		HundredMeterReference = (unsigned short)(HundredMetersFactor /
    11a8:	60 ea       	ldi	r22, 0xA0	; 160
    11aa:	76 e8       	ldi	r23, 0x86	; 134
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	f3 d2       	rcall	.+1510   	; 0x1798 <__udivmodsi4>
		(unsigned long)CircumFactor);
	
		LapDistanceCounter += LapCounter;
    11b2:	40 91 3a 01 	lds	r20, 0x013A
    11b6:	80 91 40 01 	lds	r24, 0x0140
    11ba:	90 91 41 01 	lds	r25, 0x0141
    11be:	84 0f       	add	r24, r20
    11c0:	91 1d       	adc	r25, r1
    11c2:	90 93 41 01 	sts	0x0141, r25
    11c6:	80 93 40 01 	sts	0x0140, r24
		LapCounter = (unsigned char)0;
    11ca:	10 92 3a 01 	sts	0x013A, r1

		if(LapDistanceCounter >= HundredMeterReference)
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	e8 f0       	brcs	.+58     	; 0x120e <SpeedCalcManage+0xae>
		{
			DistTravelCntr ++;
    11d4:	40 91 42 01 	lds	r20, 0x0142
    11d8:	50 91 43 01 	lds	r21, 0x0143
    11dc:	60 91 44 01 	lds	r22, 0x0144
    11e0:	70 91 45 01 	lds	r23, 0x0145
    11e4:	4f 5f       	subi	r20, 0xFF	; 255
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	6f 4f       	sbci	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	40 93 42 01 	sts	0x0142, r20
    11f0:	50 93 43 01 	sts	0x0143, r21
    11f4:	60 93 44 01 	sts	0x0144, r22
    11f8:	70 93 45 01 	sts	0x0145, r23
			LapDistanceCounter -= HundredMeterReference;
    11fc:	82 1b       	sub	r24, r18
    11fe:	93 0b       	sbc	r25, r19
    1200:	90 93 41 01 	sts	0x0141, r25
    1204:	80 93 40 01 	sts	0x0140, r24
    1208:	08 95       	ret

		}		
	}
	else
	{
		LapCounter = (unsigned char)0;
    120a:	10 92 3a 01 	sts	0x013A, r1
    120e:	08 95       	ret

00001210 <DisableDistanceCntr>:
	}
}

PUBLIC void DisableDistanceCntr(unsigned char bIsDisabled)
{
	DistTravelCntrDisable = bIsDisabled;
    1210:	80 93 3f 01 	sts	0x013F, r24
}
    1214:	08 95       	ret

00001216 <SetDistance>:

PUBLIC void SetDistance(unsigned long Distance)
{
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    DistTravelCntr = Distance;
    121a:	80 93 42 01 	sts	0x0142, r24
    121e:	90 93 43 01 	sts	0x0143, r25
    1222:	a0 93 44 01 	sts	0x0144, r26
    1226:	b0 93 45 01 	sts	0x0145, r27
	LapDistanceCounter = (unsigned short)0;
    122a:	10 92 41 01 	sts	0x0141, r1
    122e:	10 92 40 01 	sts	0x0140, r1
}
    1232:	08 95       	ret

00001234 <GetDistance>:

PUBLIC unsigned long GetDistance(void)
{
    return DistTravelCntr;
    1234:	60 91 42 01 	lds	r22, 0x0142
    1238:	70 91 43 01 	lds	r23, 0x0143
}
    123c:	80 91 44 01 	lds	r24, 0x0144
    1240:	90 91 45 01 	lds	r25, 0x0145
    1244:	08 95       	ret

00001246 <SetCircumfirunce>:

// in cm
PUBLIC void SetCircumfirunce(unsigned short Circum)
{
    CircumFactor = (unsigned short)Circum;
    1246:	90 93 a2 00 	sts	0x00A2, r25
    124a:	80 93 a1 00 	sts	0x00A1, r24
}
    124e:	08 95       	ret

00001250 <GetAvgSpeed>:

// Time Ms 
PUBLIC unsigned short GetAvgSpeed(unsigned char bIsKph)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    unsigned short AvgSpeedKphMph = (unsigned short)0;
    unsigned long KphMphFactor;
    
    if( (unsigned char)1 == bIsKph )
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	29 f4       	brne	.+10     	; 0x1262 <GetAvgSpeed+0x12>
    {
        KphMphFactor = (unsigned long)360;
    1258:	68 e6       	ldi	r22, 0x68	; 104
    125a:	71 e0       	ldi	r23, 0x01	; 1
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	04 c0       	rjmp	.+8      	; 0x126a <GetAvgSpeed+0x1a>
    }
    else
    {
        KphMphFactor = (unsigned long)225;
    1262:	61 ee       	ldi	r22, 0xE1	; 225
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    }
 
    if(LapTimeTenthMilli != (unsigned short)0)
    126a:	c0 91 3d 01 	lds	r28, 0x013D
    126e:	d0 91 3e 01 	lds	r29, 0x013E
    1272:	20 97       	sbiw	r28, 0x00	; 0
    1274:	69 f0       	breq	.+26     	; 0x1290 <GetAvgSpeed+0x40>
	{
		AvgSpeedKphMph = (unsigned short)
		                 ((KphMphFactor * (unsigned long)CircumFactor )
    1276:	20 91 a1 00 	lds	r18, 0x00A1
    127a:	30 91 a2 00 	lds	r19, 0x00A2
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	57 d2       	rcall	.+1198   	; 0x1732 <__mulsi3>
		                              /  (unsigned long)LapTimeTenthMilli);
    1284:	9e 01       	movw	r18, r28
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	86 d2       	rcall	.+1292   	; 0x1798 <__udivmodsi4>
        KphMphFactor = (unsigned long)225;
    }
 
    if(LapTimeTenthMilli != (unsigned short)0)
	{
		AvgSpeedKphMph = (unsigned short)
    128c:	c9 01       	movw	r24, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GetAvgSpeed+0x44>
}

// Time Ms 
PUBLIC unsigned short GetAvgSpeed(unsigned char bIsKph)
{
    unsigned short AvgSpeedKphMph = (unsigned short)0;
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
		AvgSpeedKphMph = (unsigned short)
		                 ((KphMphFactor * (unsigned long)CircumFactor )
		                              /  (unsigned long)LapTimeTenthMilli);
	}		
    
	if( (unsigned char)64 == HwTimerOVFLcount)
    1294:	20 91 37 01 	lds	r18, 0x0137
    1298:	20 34       	cpi	r18, 0x40	; 64
    129a:	11 f4       	brne	.+4      	; 0x12a0 <GetAvgSpeed+0x50>
	{
		AvgSpeedKphMph = (unsigned short)0;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
	}		
    return AvgSpeedKphMph;
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <HWtimerCallback>:

PUBLIC void HWtimerCallback (void)
{
    if(HwTimerOVFLcount < 64)
    12a6:	80 91 37 01 	lds	r24, 0x0137
    12aa:	80 34       	cpi	r24, 0x40	; 64
    12ac:	28 f4       	brcc	.+10     	; 0x12b8 <HWtimerCallback+0x12>
    {
        HwTimerOVFLcount++;
    12ae:	80 91 37 01 	lds	r24, 0x0137
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 37 01 	sts	0x0137, r24
    12b8:	08 95       	ret

000012ba <APP_ISR1>:
#include "Alloc.h"
 #include "AppInterrupts.h"

PUBLIC void APP_ISR1(void)
{
    SensorOneNotify();
    12ba:	1e df       	rcall	.-452    	; 0x10f8 <SensorOneNotify>
}
    12bc:	08 95       	ret

000012be <APP_ISR2>:

PUBLIC void APP_ISR2(void)
{
    SensorTwoNotify();  
    12be:	2d df       	rcall	.-422    	; 0x111a <SensorTwoNotify>
}
    12c0:	08 95       	ret

000012c2 <APP_ISR3>:

PUBLIC void APP_ISR3(void)
{
    HWtimerCallback();
    12c2:	f1 df       	rcall	.-30     	; 0x12a6 <HWtimerCallback>
    12c4:	08 95       	ret

000012c6 <ManageDrivers>:
{       
    SpeedCalcManage();
}

void ManageDrivers(void)
{
    12c6:	cf 93       	push	r28
    unsigned char LoopIndex;
    for(LoopIndex = (unsigned char)0 ; LoopIndex < NUMBER_KEYS ; LoopIndex++)
    {
        MangeKeys(LoopIndex);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	44 dd       	rcall	.-1400   	; 0xd54 <MangeKeys>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	42 dd       	rcall	.-1404   	; 0xd54 <MangeKeys>
    }
    EepromManage();
    12d0:	05 dd       	rcall	.-1526   	; 0xcdc <EepromManage>
	for(LoopIndex = (unsigned char)0 ; LoopIndex < NUMBER_LEDS ; LoopIndex++)
    12d2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ManageLeds(LoopIndex);
    12d4:	8c 2f       	mov	r24, r28
    12d6:	ca de       	rcall	.-620    	; 0x106c <ManageLeds>
    for(LoopIndex = (unsigned char)0 ; LoopIndex < NUMBER_KEYS ; LoopIndex++)
    {
        MangeKeys(LoopIndex);
    }
    EepromManage();
	for(LoopIndex = (unsigned char)0 ; LoopIndex < NUMBER_LEDS ; LoopIndex++)
    12d8:	cf 5f       	subi	r28, 0xFF	; 255
    12da:	c7 30       	cpi	r28, 0x07	; 7
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <ManageDrivers+0xe>
	{
		ManageLeds(LoopIndex);
	}
}
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <ManageSpeedCalc>:
{      
    APP_MANAGE();
}
void ManageSpeedCalc(void)
{       
    SpeedCalcManage();
    12e2:	3e df       	rcall	.-388    	; 0x1160 <SpeedCalcManage>
}
    12e4:	08 95       	ret

000012e6 <ManageApplication>:
{
    BCDManage7segment();
}
void ManageApplication (void)
{      
    APP_MANAGE();
    12e6:	c6 d7       	rcall	.+3980   	; 0x2274 <__data_load_end+0xa50>
}
    12e8:	08 95       	ret

000012ea <DisplayAlphaNumeric>:
}


void DisplayAlphaNumeric (void)
{
    BCDManage7segment();
    12ea:	c7 db       	rcall	.-2162   	; 0xa7a <BCDManage7segment>
}
    12ec:	08 95       	ret

000012ee <Start_App>:
void ManageSpeedCalc(void);
void ManageDrivers(void);

PUBLIC void Start_App(void)
{
	HWI_InitOscilatorCalib();
    12ee:	0b d2       	rcall	.+1046   	; 0x1706 <HWI_InitOscilatorCalib>
    HWI_INTERRUPTS_INTITALIZE();
    12f0:	32 d1       	rcall	.+612    	; 0x1556 <HWI_INTERRUPTS_INTITALIZE>
    HWI_DIGITAL_INITIALIZE();
    12f2:	7d d0       	rcall	.+250    	; 0x13ee <HWI_DIGITAL_INITIALIZE>
    SpeedCalcNotifyInitialize();
    12f4:	00 df       	rcall	.-512    	; 0x10f6 <SpeedCalcNotifyInitialize>
    APP_INITIALIZE();
    12f6:	4b d7       	rcall	.+3734   	; 0x218e <__data_load_end+0x96a>
	BCDInitialize(1);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	18 db       	rcall	.-2512   	; 0x92c <BCDInitialize>
	InitializeLed();
    12fc:	93 de       	rcall	.-730    	; 0x1024 <InitializeLed>

    CreateTask( ManageSpeedCalc, (unsigned char)0  , (unsigned char) 20);
    12fe:	81 e7       	ldi	r24, 0x71	; 113
    1300:	99 e0       	ldi	r25, 0x09	; 9
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	44 e1       	ldi	r20, 0x14	; 20
    1306:	11 d0       	rcall	.+34     	; 0x132a <CreateTask>
    
    CreateTask( ManageApplication, (unsigned char)2  , (unsigned char) 50);
    1308:	83 e7       	ldi	r24, 0x73	; 115
    130a:	99 e0       	ldi	r25, 0x09	; 9
    130c:	62 e0       	ldi	r22, 0x02	; 2
    130e:	42 e3       	ldi	r20, 0x32	; 50
    1310:	0c d0       	rcall	.+24     	; 0x132a <CreateTask>
    
    CreateTask( DisplayAlphaNumeric, (unsigned char)1  , (unsigned char) 2);
    1312:	85 e7       	ldi	r24, 0x75	; 117
    1314:	99 e0       	ldi	r25, 0x09	; 9
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	42 e0       	ldi	r20, 0x02	; 2
    131a:	07 d0       	rcall	.+14     	; 0x132a <CreateTask>
    
    CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
    131c:	83 e6       	ldi	r24, 0x63	; 99
    131e:	99 e0       	ldi	r25, 0x09	; 9
    1320:	63 e0       	ldi	r22, 0x03	; 3
    1322:	4a e0       	ldi	r20, 0x0A	; 10
    1324:	02 d0       	rcall	.+4      	; 0x132a <CreateTask>

    RunScheduler();
    1326:	1c d0       	rcall	.+56     	; 0x1360 <RunScheduler>
}
    1328:	08 95       	ret

0000132a <CreateTask>:

static TaskConfig ArrayTask[NUM_TASKS];

PUBLIC void CreateTask( PointerVoid MangeFunction , unsigned char TaskId , unsigned char Period)
{
    if(TaskId < NUM_TASKS)
    132a:	64 30       	cpi	r22, 0x04	; 4
    132c:	60 f4       	brcc	.+24     	; 0x1346 <CreateTask+0x1c>
    {
        ArrayTask[TaskId].ManageFunction = MangeFunction;
    132e:	e6 2f       	mov	r30, r22
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ea 5b       	subi	r30, 0xBA	; 186
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
        ArrayTask[TaskId].Period = Period;
    1342:	42 83       	std	Z+2, r20	; 0x02
        ArrayTask[TaskId].TickCounter = (unsigned char)0;
    1344:	13 82       	std	Z+3, r1	; 0x03
    1346:	08 95       	ret

00001348 <SchedulerTick>:
    }
}

PUBLIC void SchedulerTick(void)
{
    1348:	e9 e4       	ldi	r30, 0x49	; 73
    134a:	f1 e0       	ldi	r31, 0x01	; 1
        ArrayTask[TaskId].Period = Period;
        ArrayTask[TaskId].TickCounter = (unsigned char)0;
    }
}

PUBLIC void SchedulerTick(void)
    134c:	cf 01       	movw	r24, r30
    134e:	40 96       	adiw	r24, 0x10	; 16
{
    unsigned char TaskIndex;
    for(TaskIndex = (unsigned char)0 ;TaskIndex < NUM_TASKS ; TaskIndex++)
    {
        ArrayTask[TaskIndex].TickCounter ++;
    1350:	20 81       	ld	r18, Z
    1352:	2f 5f       	subi	r18, 0xFF	; 255
    1354:	20 83       	st	Z, r18
    1356:	34 96       	adiw	r30, 0x04	; 4
}

PUBLIC void SchedulerTick(void)
{
    unsigned char TaskIndex;
    for(TaskIndex = (unsigned char)0 ;TaskIndex < NUM_TASKS ; TaskIndex++)
    1358:	e8 17       	cp	r30, r24
    135a:	f9 07       	cpc	r31, r25
    135c:	c9 f7       	brne	.-14     	; 0x1350 <SchedulerTick+0x8>
    {
        ArrayTask[TaskIndex].TickCounter ++;
    }   
}
    135e:	08 95       	ret

00001360 <RunScheduler>:
    static unsigned char TaskIndex;
    for(;;)
    {
        for(TaskIndex = (unsigned char)0 ; TaskIndex < NUM_TASKS ; TaskIndex++)
        {
            if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
    1360:	c6 e4       	ldi	r28, 0x46	; 70
    1362:	d1 e0       	ldi	r29, 0x01	; 1
PUBLIC void RunScheduler(void)
{
    static unsigned char TaskIndex;
    for(;;)
    {
        for(TaskIndex = (unsigned char)0 ; TaskIndex < NUM_TASKS ; TaskIndex++)
    1364:	10 92 56 01 	sts	0x0156, r1
    1368:	80 e0       	ldi	r24, 0x00	; 0
        {
            if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	ec 0f       	add	r30, r28
    1378:	fd 1f       	adc	r31, r29
    137a:	32 81       	ldd	r19, Z+2	; 0x02
    137c:	23 81       	ldd	r18, Z+3	; 0x03
    137e:	23 17       	cp	r18, r19
    1380:	a8 f0       	brcs	.+42     	; 0x13ac <RunScheduler+0x4c>
            {
                ArrayTask[TaskIndex].ManageFunction();
    1382:	fc 01       	movw	r30, r24
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ec 0f       	add	r30, r28
    138e:	fd 1f       	adc	r31, r29
    1390:	01 90       	ld	r0, Z+
    1392:	f0 81       	ld	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	09 95       	icall
                ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
    1398:	e0 91 56 01 	lds	r30, 0x0156
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ec 0f       	add	r30, r28
    13a8:	fd 1f       	adc	r31, r29
    13aa:	13 82       	std	Z+3, r1	; 0x03
PUBLIC void RunScheduler(void)
{
    static unsigned char TaskIndex;
    for(;;)
    {
        for(TaskIndex = (unsigned char)0 ; TaskIndex < NUM_TASKS ; TaskIndex++)
    13ac:	80 91 56 01 	lds	r24, 0x0156
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 56 01 	sts	0x0156, r24
    13b6:	84 30       	cpi	r24, 0x04	; 4
    13b8:	a8 f6       	brcc	.-86     	; 0x1364 <RunScheduler+0x4>
    13ba:	d7 cf       	rjmp	.-82     	; 0x136a <RunScheduler+0xa>

000013bc <HWIeeprom_Write>:
PUBLIC unsigned char HWIeeprom_Write(unsigned char address , unsigned char Data)
{
    unsigned char WriteSuccess;
	/* Wait for completion of previous write */

    if((unsigned char)0 == (EECR & (1<<EEWE)) )
    13bc:	e1 99       	sbic	0x1c, 1	; 28
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <HWIeeprom_Write+0x14>
    {
        /* Set up address and data registers */
        EEAR = address;
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9f bb       	out	0x1f, r25	; 31
    13c4:	8e bb       	out	0x1e, r24	; 30
        EEDR = Data;
    13c6:	6d bb       	out	0x1d, r22	; 29
        /* Write logical one to EEMWE */
        EECR |= (1<<EEMWE);
    13c8:	e2 9a       	sbi	0x1c, 2	; 28
        /* Start eeprom write by setting EEWE */
        EECR |= (1<<EEWE);
    13ca:	e1 9a       	sbi	0x1c, 1	; 28
		WriteSuccess = (unsigned char)1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	08 95       	ret
    }
    else
    {
        WriteSuccess = (unsigned char)0;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    }
   
    return WriteSuccess;
}
    13d2:	08 95       	ret

000013d4 <HWIeeprom_Read>:
PUBLIC unsigned char HWIeeprom_Read(unsigned char address , unsigned char *Data)
{
    unsigned char ReadSuccess;
	/* Wait for completion of previous write */

    if((unsigned char)0 == (EECR & (1<<EEWE)) )
    13d4:	e1 99       	sbic	0x1c, 1	; 28
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <HWIeeprom_Read+0x16>
    {
        /* Set up address register */
        EEAR = address;
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9f bb       	out	0x1f, r25	; 31
    13dc:	8e bb       	out	0x1e, r24	; 30
        /* Start eeprom read by writing EERE */
        EECR |= (1<<EERE);
    13de:	e0 9a       	sbi	0x1c, 0	; 28
        /* Return data from data register */
        *Data = EEDR;
    13e0:	8d b3       	in	r24, 0x1d	; 29
    13e2:	fb 01       	movw	r30, r22
    13e4:	80 83       	st	Z, r24
        ReadSuccess = (unsigned char)1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	08 95       	ret
    }
    else
    {
        ReadSuccess = (unsigned char)0;
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    return ReadSuccess;
    13ec:	08 95       	ret

000013ee <HWI_DIGITAL_INITIALIZE>:
  #include "HWI_func.h"
  

PUBLIC void HWI_DIGITAL_INITIALIZE(void)
{
	DDRB = 0xFF;
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
    13f2:	84 bb       	out	0x14, r24	; 20
	DDRD = (1<<PIND0) | (1<<PIND1) | (1<<PIND7);
    13f4:	83 e8       	ldi	r24, 0x83	; 131
    13f6:	81 bb       	out	0x11, r24	; 17
	PORTD = (unsigned char)~((1<<PIND0) | (1<<PIND1) | (1<<PIND7));
    13f8:	8c e7       	ldi	r24, 0x7C	; 124
    13fa:	82 bb       	out	0x12, r24	; 18
}
    13fc:	08 95       	ret

000013fe <HWI_DIGITAL_SLEEP>:

PUBLIC void HWI_DIGITAL_SLEEP(void)
{
	/* got to tri-state */
	DDRB = 0x0;
    13fe:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x0;
    1400:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x0;
    1402:	11 ba       	out	0x11, r1	; 17
	
	PORTB = 0x00;
    1404:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
    1406:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
    1408:	12 ba       	out	0x12, r1	; 18
}	
    140a:	08 95       	ret

0000140c <HWI_DIGI_READ>:
  
PUBLIC unsigned char HWI_DIGI_READ(unsigned char pin)
{
	unsigned char HWIread;
	    
	switch (pin)
    140c:	80 31       	cpi	r24, 0x10	; 16
    140e:	39 f0       	breq	.+14     	; 0x141e <HWI_DIGI_READ+0x12>
    1410:	81 31       	cpi	r24, 0x11	; 17
    1412:	41 f0       	breq	.+16     	; 0x1424 <HWI_DIGI_READ+0x18>
    1414:	8f 30       	cpi	r24, 0x0F	; 15
    1416:	49 f4       	brne	.+18     	; 0x142a <HWI_DIGI_READ+0x1e>
	{
		case 15:
			HWIread = PIND & (1 << PIND4);
    1418:	80 b3       	in	r24, 0x10	; 16
    141a:	80 71       	andi	r24, 0x10	; 16
			break;
    141c:	08 95       	ret
		case 16:
			HWIread = PIND & (1 << PIND5);
    141e:	80 b3       	in	r24, 0x10	; 16
    1420:	80 72       	andi	r24, 0x20	; 32
			break;
    1422:	08 95       	ret
		case 17:
			HWIread = PIND & (1 << PIND6);
    1424:	80 b3       	in	r24, 0x10	; 16
    1426:	80 74       	andi	r24, 0x40	; 64
			break;
    1428:	08 95       	ret
		default:
		    HWIread = (unsigned char)0;
    142a:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return HWIread;
}
    142c:	08 95       	ret

0000142e <HWI_DIGI_WRITE>:
PUBLIC void HWI_DIGI_WRITE(unsigned char pin,unsigned char val)
{
	switch(pin)
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	21 f1       	breq	.+72     	; 0x147a <HWI_DIGI_WRITE+0x4c>
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	30 f4       	brcc	.+12     	; 0x1442 <HWI_DIGI_WRITE+0x14>
    1436:	88 23       	and	r24, r24
    1438:	69 f0       	breq	.+26     	; 0x1454 <HWI_DIGI_WRITE+0x26>
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	09 f0       	breq	.+2      	; 0x1440 <HWI_DIGI_WRITE+0x12>
    143e:	57 c0       	rjmp	.+174    	; 0x14ee <HWI_DIGI_WRITE+0xc0>
    1440:	10 c0       	rjmp	.+32     	; 0x1462 <HWI_DIGI_WRITE+0x34>
    1442:	85 30       	cpi	r24, 0x05	; 5
    1444:	a9 f1       	breq	.+106    	; 0x14b0 <HWI_DIGI_WRITE+0x82>
    1446:	86 30       	cpi	r24, 0x06	; 6
    1448:	09 f4       	brne	.+2      	; 0x144c <HWI_DIGI_WRITE+0x1e>
    144a:	42 c0       	rjmp	.+132    	; 0x14d0 <HWI_DIGI_WRITE+0xa2>
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	09 f0       	breq	.+2      	; 0x1452 <HWI_DIGI_WRITE+0x24>
    1450:	4e c0       	rjmp	.+156    	; 0x14ee <HWI_DIGI_WRITE+0xc0>
    1452:	1c c0       	rjmp	.+56     	; 0x148c <HWI_DIGI_WRITE+0x5e>
	{
		case 0:
			PORTD = (PORTD & ((unsigned char)~(1<<PIND0))) | ((val & (unsigned char)0x1)<<PIND0);
    1454:	92 b3       	in	r25, 0x12	; 18
    1456:	86 2f       	mov	r24, r22
    1458:	81 70       	andi	r24, 0x01	; 1
    145a:	9e 7f       	andi	r25, 0xFE	; 254
    145c:	89 2b       	or	r24, r25
    145e:	82 bb       	out	0x12, r24	; 18
			break;
    1460:	08 95       	ret
		case 1:
			PORTD = (PORTD & ((unsigned char)~(1<<PIND1))) | ((val & (unsigned char)0x1)<<PIND1);
    1462:	22 b3       	in	r18, 0x12	; 18
    1464:	86 2f       	mov	r24, r22
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	92 2f       	mov	r25, r18
    1472:	9d 7f       	andi	r25, 0xFD	; 253
    1474:	89 2b       	or	r24, r25
    1476:	82 bb       	out	0x12, r24	; 18
			break;
    1478:	08 95       	ret
		case 2:
			PORTD = (PORTD & ((unsigned char)~(1<<PIND7))) | ((val & (unsigned char)0x1)<<PIND7);
    147a:	92 b3       	in	r25, 0x12	; 18
    147c:	86 2f       	mov	r24, r22
    147e:	87 95       	ror	r24
    1480:	88 27       	eor	r24, r24
    1482:	87 95       	ror	r24
    1484:	9f 77       	andi	r25, 0x7F	; 127
    1486:	89 2b       	or	r24, r25
    1488:	82 bb       	out	0x12, r24	; 18
			break;
    148a:	08 95       	ret
		case 3:
			PORTC = (PORTC & ((unsigned char)~(1<<PINC5))) | ((val & (unsigned char)0x1)<<PINC5);
    148c:	25 b3       	in	r18, 0x15	; 21
    148e:	86 2f       	mov	r24, r22
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	82 95       	swap	r24
    149c:	92 95       	swap	r25
    149e:	90 7f       	andi	r25, 0xF0	; 240
    14a0:	98 27       	eor	r25, r24
    14a2:	80 7f       	andi	r24, 0xF0	; 240
    14a4:	98 27       	eor	r25, r24
    14a6:	92 2f       	mov	r25, r18
    14a8:	9f 7d       	andi	r25, 0xDF	; 223
    14aa:	89 2b       	or	r24, r25
    14ac:	85 bb       	out	0x15, r24	; 21
			break;
    14ae:	08 95       	ret
		case 4:
			break;
		case 5:
			PORTC = (PORTC & ((unsigned char)~(1<<PINC4))) | ((val & (unsigned char)0x1)<<PINC4);
    14b0:	25 b3       	in	r18, 0x15	; 21
    14b2:	86 2f       	mov	r24, r22
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	82 95       	swap	r24
    14bc:	92 95       	swap	r25
    14be:	90 7f       	andi	r25, 0xF0	; 240
    14c0:	98 27       	eor	r25, r24
    14c2:	80 7f       	andi	r24, 0xF0	; 240
    14c4:	98 27       	eor	r25, r24
    14c6:	92 2f       	mov	r25, r18
    14c8:	9f 7e       	andi	r25, 0xEF	; 239
    14ca:	89 2b       	or	r24, r25
    14cc:	85 bb       	out	0x15, r24	; 21
			break;
    14ce:	08 95       	ret
		case 6:
			PORTC = (PORTC & ((unsigned char)~(1<<PINC3))) | ((val & (unsigned char)0x1)<<PINC3);
    14d0:	25 b3       	in	r18, 0x15	; 21
    14d2:	86 2f       	mov	r24, r22
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	92 2f       	mov	r25, r18
    14e8:	97 7f       	andi	r25, 0xF7	; 247
    14ea:	89 2b       	or	r24, r25
    14ec:	85 bb       	out	0x15, r24	; 21
    14ee:	08 95       	ret

000014f0 <HWI_4Digit_WRITE>:
	}
}

PUBLIC void HWI_4Digit_WRITE(unsigned char port,unsigned char val)
{
	switch (port)
    14f0:	88 23       	and	r24, r24
    14f2:	19 f0       	breq	.+6      	; 0x14fa <HWI_4Digit_WRITE+0xa>
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	59 f4       	brne	.+22     	; 0x150e <HWI_4Digit_WRITE+0x1e>
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <HWI_4Digit_WRITE+0x14>
	{
		case 0:
			PORTC = (PORTC & 0xF8) | val;
    14fa:	85 b3       	in	r24, 0x15	; 21
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	68 2b       	or	r22, r24
    1500:	65 bb       	out	0x15, r22	; 21
			break;
    1502:	08 95       	ret
		case 1:
			PORTB = (PORTB & 0xF0) | val;
    1504:	88 b3       	in	r24, 0x18	; 24
    1506:	80 7f       	andi	r24, 0xF0	; 240
    1508:	68 2b       	or	r22, r24
    150a:	68 bb       	out	0x18, r22	; 24
			break;
    150c:	08 95       	ret
		default:
			PORTB = (PORTB & 0xF0) | val;
    150e:	88 b3       	in	r24, 0x18	; 24
    1510:	80 7f       	andi	r24, 0xF0	; 240
    1512:	68 2b       	or	r22, r24
    1514:	68 bb       	out	0x18, r22	; 24
    1516:	08 95       	ret

00001518 <HWI_4Digit_READ>:
	
}
PUBLIC unsigned char HWI_4Digit_READ(unsigned char port)
{
	unsigned char PortValue;
	switch (port)
    1518:	88 23       	and	r24, r24
    151a:	19 f0       	breq	.+6      	; 0x1522 <HWI_4Digit_READ+0xa>
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	39 f4       	brne	.+14     	; 0x152e <HWI_4Digit_READ+0x16>
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <HWI_4Digit_READ+0x10>
	{
		case 0:
			PortValue = PINC & 0x0f;
    1522:	83 b3       	in	r24, 0x13	; 19
    1524:	8f 70       	andi	r24, 0x0F	; 15
			break;
    1526:	08 95       	ret
		case 1:
			PortValue = PINB & 0x0f;
    1528:	86 b3       	in	r24, 0x16	; 22
    152a:	8f 70       	andi	r24, 0x0F	; 15
			break;
    152c:	08 95       	ret
		default:
			PortValue = PINB & 0x0f;
    152e:	86 b3       	in	r24, 0x16	; 22
    1530:	8f 70       	andi	r24, 0x0F	; 15
			break;
	}
	return PortValue;
}
    1532:	08 95       	ret

00001534 <HWI_8Digit_WRITE>:

PUBLIC void HWI_8Digit_WRITE(unsigned char port,unsigned char val)
{
	switch (port)
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <HWI_8Digit_WRITE+0xa>
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	29 f4       	brne	.+10     	; 0x1546 <HWI_8Digit_WRITE+0x12>
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <HWI_8Digit_WRITE+0xe>
	{
		case 0:
			PORTC = val;
    153e:	65 bb       	out	0x15, r22	; 21
			break;
    1540:	08 95       	ret
		case 1:
			PORTB = val;
    1542:	68 bb       	out	0x18, r22	; 24
			break;
    1544:	08 95       	ret
		default:
			PORTB = val;
    1546:	68 bb       	out	0x18, r22	; 24
    1548:	08 95       	ret

0000154a <HWI8Digit_READ>:
	
}
PUBLIC unsigned char HWI8Digit_READ(unsigned char port)
{
	unsigned char PortValue;
	switch (port)
    154a:	88 23       	and	r24, r24
    154c:	11 f0       	breq	.+4      	; 0x1552 <HWI8Digit_READ+0x8>
	{
		case 0:
			PortValue = PINC;
			break;
		case 1:
			PortValue = PINB;
    154e:	86 b3       	in	r24, 0x16	; 22
    1550:	08 95       	ret
{
	unsigned char PortValue;
	switch (port)
	{
		case 0:
			PortValue = PINC;
    1552:	83 b3       	in	r24, 0x13	; 19
			PortValue = PINB;
			break;
	}
	return PortValue;
	
}
    1554:	08 95       	ret

00001556 <HWI_INTERRUPTS_INTITALIZE>:
 #include "HWI_func.h"
 
PUBLIC void HWI_INTERRUPTS_INTITALIZE(void)
{
	//Timer 1 configuration
	TCCR1B |= (1<<CS11);
    1556:	8e b5       	in	r24, 0x2e	; 46
    1558:	82 60       	ori	r24, 0x02	; 2
    155a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = (unsigned short)0x7FFF;
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f e7       	ldi	r25, 0x7F	; 127
    1560:	9d bd       	out	0x2d, r25	; 45
    1562:	8c bd       	out	0x2c, r24	; 44
	
	//Timer 0 configuration
	TCCR0 |= (1<<CS01)|(1<<CS00);
    1564:	83 b7       	in	r24, 0x33	; 51
    1566:	83 60       	ori	r24, 0x03	; 3
    1568:	83 bf       	out	0x33, r24	; 51
	TCNT0 = (unsigned char)194;
    156a:	82 ec       	ldi	r24, 0xC2	; 194
    156c:	82 bf       	out	0x32, r24	; 50
	
	// enable overflow interrupt
	TIMSK |= (1 << TOIE0);
    156e:	89 b7       	in	r24, 0x39	; 57
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << TOIE1);
    1574:	89 b7       	in	r24, 0x39	; 57
    1576:	84 60       	ori	r24, 0x04	; 4
    1578:	89 bf       	out	0x39, r24	; 57
	
	GICR |= (1 << INT0);                    //Enable INT0
    157a:	8b b7       	in	r24, 0x3b	; 59
    157c:	80 64       	ori	r24, 0x40	; 64
    157e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01)|(1<<ISC00);         //INT0 is executed on every edge
    1580:	85 b7       	in	r24, 0x35	; 53
    1582:	83 60       	ori	r24, 0x03	; 3
    1584:	85 bf       	out	0x35, r24	; 53
	    
	GICR |= (1 << INT1);                    //Enable INT1
    1586:	8b b7       	in	r24, 0x3b	; 59
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC11)|(1<<ISC10);         //INT1 is executed on every edge
    158c:	85 b7       	in	r24, 0x35	; 53
    158e:	8c 60       	ori	r24, 0x0C	; 12
    1590:	85 bf       	out	0x35, r24	; 53

		
	DDRD |= (1<<DDRD2)|(1<<DDRD3);
    1592:	81 b3       	in	r24, 0x11	; 17
    1594:	8c 60       	ori	r24, 0x0C	; 12
    1596:	81 bb       	out	0x11, r24	; 17
	
	// enable global interrupts
	sei();
    1598:	78 94       	sei
}
    159a:	08 95       	ret

0000159c <ReloadHWtimer>:

PUBLIC unsigned short ReloadHWtimer(unsigned char TimerId)
{
	unsigned short TimeExe = (unsigned short)0;
	switch(TimerId)
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	58 f4       	brcc	.+22     	; 0x15b6 <ReloadHWtimer+0x1a>
	{
		case 0:
		case 1:
		case 2:
		    TimeExe = (TCNT1 - (unsigned short)0x7FFF) <<(unsigned char)1;
    15a0:	8c b5       	in	r24, 0x2c	; 44
    15a2:	9d b5       	in	r25, 0x2d	; 45
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	9f 47       	sbci	r25, 0x7F	; 127
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
			TCNT1 = (unsigned short)0x7FFF;
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	3f e7       	ldi	r19, 0x7F	; 127
    15b0:	3d bd       	out	0x2d, r19	; 45
    15b2:	2c bd       	out	0x2c, r18	; 44
			break;
    15b4:	08 95       	ret
	sei();
}

PUBLIC unsigned short ReloadHWtimer(unsigned char TimerId)
{
	unsigned short TimeExe = (unsigned short)0;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;	
	}
	return TimeExe;
}
    15ba:	08 95       	ret

000015bc <__vector_9>:

// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER0_OVF_vect)
{
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
	TCNT0 = (unsigned char)194;
    15de:	82 ec       	ldi	r24, 0xC2	; 194
    15e0:	82 bf       	out	0x32, r24	; 50
	SchedulerTick();	
    15e2:	b2 de       	rcall	.-668    	; 0x1348 <SchedulerTick>
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
	TCNT1 = (unsigned short)0x7FFF;
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9f e7       	ldi	r25, 0x7F	; 127
    162c:	9d bd       	out	0x2d, r25	; 45
    162e:	8c bd       	out	0x2c, r24	; 44
	APP_ISR3();
    1630:	48 de       	rcall	.-880    	; 0x12c2 <APP_ISR3>
}
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_1>:

ISR(INT0_vect)
{
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
	APP_ISR1(); 
    1676:	21 de       	rcall	.-958    	; 0x12ba <APP_ISR1>
	/* work around to change interrupt from level based to falling edge
	  after wakeup */
	MCUCR |= (1<<ISC01)|(1<<ISC00);
    1678:	85 b7       	in	r24, 0x35	; 53
    167a:	83 60       	ori	r24, 0x03	; 3
    167c:	85 bf       	out	0x35, r24	; 53
}
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_2>:

ISR(INT1_vect)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	APP_ISR2();	
    16c2:	fd dd       	rcall	.-1030   	; 0x12be <APP_ISR2>
}
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	7f 91       	pop	r23
    16d2:	6f 91       	pop	r22
    16d4:	5f 91       	pop	r21
    16d6:	4f 91       	pop	r20
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <SendMCUtoSleep>:


PUBLIC void SendMCUtoSleep(void)
{	
	/* change INT0 interrupt source to level */
	MCUCR &= (unsigned char)~((1<<ISC01)|(1<<ISC00));         
    16e6:	85 b7       	in	r24, 0x35	; 53
    16e8:	8c 7f       	andi	r24, 0xFC	; 252
    16ea:	85 bf       	out	0x35, r24	; 53
	/* set sleep Mode */
	MCUCR |= POWER_DOWN;
    16ec:	85 b7       	in	r24, 0x35	; 53
    16ee:	80 62       	ori	r24, 0x20	; 32
    16f0:	85 bf       	out	0x35, r24	; 53
	cli();
    16f2:	f8 94       	cli
	/* sleep enable */
	MCUCR |= (unsigned char)(1<<SE);
    16f4:	85 b7       	in	r24, 0x35	; 53
    16f6:	80 68       	ori	r24, 0x80	; 128
    16f8:	85 bf       	out	0x35, r24	; 53
	sei();
    16fa:	78 94       	sei
	/* Sleep Instruction */
	__asm__ __volatile__ ( "sleep" "\n\t" :: );
    16fc:	88 95       	sleep
	/* Disable sleep */
	MCUCR &= (unsigned char) (~(unsigned char)(1<<SE));
    16fe:	85 b7       	in	r24, 0x35	; 53
    1700:	8f 77       	andi	r24, 0x7F	; 127
    1702:	85 bf       	out	0x35, r24	; 53
    1704:	08 95       	ret

00001706 <HWI_InitOscilatorCalib>:
  #include "HWI_func.h"
  
  
  
 PUBLIC void HWI_InitOscilatorCalib(void)
 {
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	 unsigned char OscilatorCalibration;
	 unsigned char bIsreadSuccess = (unsigned char)0;
	 
	 while ((unsigned char)0 == bIsreadSuccess)
	 {
		 bIsreadSuccess = HWIeeprom_Read(0,&OscilatorCalibration);		 
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	be 01       	movw	r22, r28
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	5d de       	rcall	.-838    	; 0x13d4 <HWIeeprom_Read>
 PUBLIC void HWI_InitOscilatorCalib(void)
 {
	 unsigned char OscilatorCalibration;
	 unsigned char bIsreadSuccess = (unsigned char)0;
	 
	 while ((unsigned char)0 == bIsreadSuccess)
    171a:	88 23       	and	r24, r24
    171c:	c9 f3       	breq	.-14     	; 0x1710 <HWI_InitOscilatorCalib+0xa>
	 {
		 bIsreadSuccess = HWIeeprom_Read(0,&OscilatorCalibration);		 
	 }
	 OSCCAL = OscilatorCalibration;
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	81 bf       	out	0x31, r24	; 49
	
 } 
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <main>:
#include "Extern.h"
	#include "OS_manage.h"

int main(void)
{
	Start_App();
    172a:	e1 dd       	rcall	.-1086   	; 0x12ee <Start_App>
	return 0;
}
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	08 95       	ret

00001732 <__mulsi3>:
    1732:	62 9f       	mul	r22, r18
    1734:	d0 01       	movw	r26, r0
    1736:	73 9f       	mul	r23, r19
    1738:	f0 01       	movw	r30, r0
    173a:	82 9f       	mul	r24, r18
    173c:	e0 0d       	add	r30, r0
    173e:	f1 1d       	adc	r31, r1
    1740:	64 9f       	mul	r22, r20
    1742:	e0 0d       	add	r30, r0
    1744:	f1 1d       	adc	r31, r1
    1746:	92 9f       	mul	r25, r18
    1748:	f0 0d       	add	r31, r0
    174a:	83 9f       	mul	r24, r19
    174c:	f0 0d       	add	r31, r0
    174e:	74 9f       	mul	r23, r20
    1750:	f0 0d       	add	r31, r0
    1752:	65 9f       	mul	r22, r21
    1754:	f0 0d       	add	r31, r0
    1756:	99 27       	eor	r25, r25
    1758:	72 9f       	mul	r23, r18
    175a:	b0 0d       	add	r27, r0
    175c:	e1 1d       	adc	r30, r1
    175e:	f9 1f       	adc	r31, r25
    1760:	63 9f       	mul	r22, r19
    1762:	b0 0d       	add	r27, r0
    1764:	e1 1d       	adc	r30, r1
    1766:	f9 1f       	adc	r31, r25
    1768:	bd 01       	movw	r22, r26
    176a:	cf 01       	movw	r24, r30
    176c:	11 24       	eor	r1, r1
    176e:	08 95       	ret

00001770 <__udivmodhi4>:
    1770:	aa 1b       	sub	r26, r26
    1772:	bb 1b       	sub	r27, r27
    1774:	51 e1       	ldi	r21, 0x11	; 17
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <__udivmodhi4_ep>

00001778 <__udivmodhi4_loop>:
    1778:	aa 1f       	adc	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	a6 17       	cp	r26, r22
    177e:	b7 07       	cpc	r27, r23
    1780:	10 f0       	brcs	.+4      	; 0x1786 <__udivmodhi4_ep>
    1782:	a6 1b       	sub	r26, r22
    1784:	b7 0b       	sbc	r27, r23

00001786 <__udivmodhi4_ep>:
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	5a 95       	dec	r21
    178c:	a9 f7       	brne	.-22     	; 0x1778 <__udivmodhi4_loop>
    178e:	80 95       	com	r24
    1790:	90 95       	com	r25
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	08 95       	ret

00001798 <__udivmodsi4>:
    1798:	a1 e2       	ldi	r26, 0x21	; 33
    179a:	1a 2e       	mov	r1, r26
    179c:	aa 1b       	sub	r26, r26
    179e:	bb 1b       	sub	r27, r27
    17a0:	fd 01       	movw	r30, r26
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <__udivmodsi4_ep>

000017a4 <__udivmodsi4_loop>:
    17a4:	aa 1f       	adc	r26, r26
    17a6:	bb 1f       	adc	r27, r27
    17a8:	ee 1f       	adc	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	a2 17       	cp	r26, r18
    17ae:	b3 07       	cpc	r27, r19
    17b0:	e4 07       	cpc	r30, r20
    17b2:	f5 07       	cpc	r31, r21
    17b4:	20 f0       	brcs	.+8      	; 0x17be <__udivmodsi4_ep>
    17b6:	a2 1b       	sub	r26, r18
    17b8:	b3 0b       	sbc	r27, r19
    17ba:	e4 0b       	sbc	r30, r20
    17bc:	f5 0b       	sbc	r31, r21

000017be <__udivmodsi4_ep>:
    17be:	66 1f       	adc	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	1a 94       	dec	r1
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <__udivmodsi4_loop>
    17ca:	60 95       	com	r22
    17cc:	70 95       	com	r23
    17ce:	80 95       	com	r24
    17d0:	90 95       	com	r25
    17d2:	9b 01       	movw	r18, r22
    17d4:	ac 01       	movw	r20, r24
    17d6:	bd 01       	movw	r22, r26
    17d8:	cf 01       	movw	r24, r30
    17da:	08 95       	ret

000017dc <_exit>:
    17dc:	f8 94       	cli

000017de <__stop_program>:
    17de:	ff cf       	rjmp	.-2      	; 0x17de <__stop_program>
