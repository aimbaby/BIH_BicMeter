

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr 22 17:19:18 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4520 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  000E00                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _CircumFactor
    88  000E00  00C8               	dw	200
    89                           
    90                           	psect	smallconst
    91  000600                     __psmallconst:
    92                           	opt stack 0
    93  000600  00                 	db	0
    94  000601                     _SevenSegmentMAP:
    95                           	opt stack 0
    96  000601  FC                 	db	252
    97  000602  60                 	db	96
    98  000603  DA                 	db	218
    99  000604  F2                 	db	242
   100  000605  66                 	db	102
   101  000606  B6                 	db	182
   102  000607  BE                 	db	190
   103  000608  E0                 	db	224
   104  000609  FE                 	db	254
   105  00060A  F6                 	db	246
   106  00060B  01                 	db	1
   107  00060C                     __end_of_SevenSegmentMAP:
   108                           	opt stack 0
   109  0000                     _TMR3H	set	4019
   110  0000                     _TMR3L	set	4018
   111  0000                     _TMR1H	set	4047
   112  0000                     _TMR1L	set	4046
   113  0000                     _TMR0L	set	4054
   114  0000                     _INTCON2bits	set	4081
   115  0000                     _T3CON	set	4017
   116  0000                     _T1CON	set	4045
   117  0000                     _T0CON	set	4053
   118  0000                     _INTCON3	set	4080
   119  0000                     _INTCON	set	4082
   120  0000                     _TRISBbits	set	3987
   121  0000                     _TRISC	set	3988
   122  0000                     _TRISD	set	3989
   123  0000                     _LATD	set	3980
   124  0000                     _PORTD	set	3971
   125  0000                     _LATC	set	3979
   126  0000                     _PORTC	set	3970
   127  0000                     _INT1IF	set	32640
   128  0000                     _INT0IF	set	32657
   129  0000                     _TMR0IF	set	32658
   130  0000                     _TMR3IE	set	32001
   131  0000                     _TMR3IF	set	32009
   132  0000                     _TMR1IE	set	31976
   133  0000                     _TMR1IF	set	31984
   134                           
   135                           ; #config settings
   136  00060C  00                 	db	0	; dummy byte at the end
   137  0000                     
   138                           	psect	cinit
   139  000C20                     __pcinit:
   140                           	opt stack 0
   141  000C20                     start_initialization:
   142                           	opt stack 0
   143  000C20                     __initialization:
   144                           	opt stack 0
   145                           
   146                           ; Initialize objects allocated to COMRAM (2 bytes)
   147                           ; load TBLPTR registers with __pidataCOMRAM
   148  000C20  0E00               	movlw	low __pidataCOMRAM
   149  000C22  6EF6               	movwf	tblptrl,c
   150  000C24  0E0E               	movlw	high __pidataCOMRAM
   151  000C26  6EF7               	movwf	tblptrh,c
   152  000C28  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   153  000C2A  6EF8               	movwf	tblptru,c
   154  000C2C  0009               	tblrd		*+	;fetch initializer
   155  000C2E  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   156  000C32  0009               	tblrd		*+	;fetch initializer
   157  000C34  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   158                           
   159                           ; Clear objects allocated to BANK0 (36 bytes)
   160  000C38  EE00  F080         	lfsr	0,__pbssBANK0
   161  000C3C  0E24               	movlw	36
   162  000C3E                     clear_0:
   163  000C3E  6AEE               	clrf	postinc0,c
   164  000C40  06E8               	decf	wreg,f,c
   165  000C42  E1FD               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to COMRAM (34 bytes)
   168  000C44  EE00  F03C         	lfsr	0,__pbssCOMRAM
   169  000C48  0E22               	movlw	34
   170  000C4A                     clear_1:
   171  000C4A  6AEE               	clrf	postinc0,c
   172  000C4C  06E8               	decf	wreg,f,c
   173  000C4E  E1FD               	bnz	clear_1
   174  000C50                     end_of_initialization:
   175                           	opt stack 0
   176  000C50                     __end_of__initialization:
   177                           	opt stack 0
   178  000C50  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   179  000C52  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   180  000C54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  000C56  6EF8               	movwf	tblptru,c
   182  000C58  0100               	movlb	0
   183  000C5A  EF95  F005         	goto	_main	;jump to C main() function
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	bssCOMRAM
   192  00003C                     __pbssCOMRAM:
   193                           	opt stack 0
   194  00003C                     _ArrayTask:
   195                           	opt stack 0
   196  00003C                     	ds	12
   197  000048                     _BCDNumber:
   198                           	opt stack 0
   199  000048                     	ds	8
   200  000050                     _DistTravelCntr:
   201                           	opt stack 0
   202  000050                     	ds	4
   203  000054                     _LapDistanceCounter:
   204                           	opt stack 0
   205  000054                     	ds	2
   206  000056                     _LapCounterAvg:
   207                           	opt stack 0
   208  000056                     	ds	2
   209  000058                     RunScheduler@TaskIndex:
   210                           	opt stack 0
   211  000058                     	ds	1
   212  000059                     SpeedCalcManage@LapSampleIndex:
   213                           	opt stack 0
   214  000059                     	ds	1
   215  00005A                     SpeedCalcManage@LapTime:
   216                           	opt stack 0
   217  00005A                     	ds	1
   218  00005B                     _LapCounter:
   219                           	opt stack 0
   220  00005B                     	ds	1
   221  00005C                     _NotifyFlag:
   222                           	opt stack 0
   223  00005C                     	ds	1
   224  00005D                     BCDManage7segment@DigitIndex:
   225                           	opt stack 0
   226  00005D                     	ds	1
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	dataCOMRAM
   235  00005E                     __pdataCOMRAM:
   236                           	opt stack 0
   237  00005E                     _CircumFactor:
   238                           	opt stack 0
   239  00005E                     	ds	2
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247                           	psect	bssBANK0
   248  000080                     __pbssBANK0:
   249                           	opt stack 0
   250  000080                     _LapCounterBuffer:
   251                           	opt stack 0
   252  000080                     	ds	36
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	cstackCOMRAM
   261  000001                     __pcstackCOMRAM:
   262                           	opt stack 0
   263  000001                     SchedulerTick@TaskIndex:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x0
   267  000001                     	ds	1
   268  000002                     ??_ISR:
   269                           
   270                           ; 1 bytes @ 0x1
   271  000002                     	ds	14
   272  000010                     ?___wmul:
   273                           	opt stack 0
   274  000010                     ?___lwdiv:
   275                           	opt stack 0
   276  000010                     ?_GetDistance:
   277                           	opt stack 0
   278  000010                     ?___lmul:
   279                           	opt stack 0
   280  000010                     HWI_4Digit_WRITE@value:
   281                           	opt stack 0
   282  000010                     HWI_8Digit_WRITE@value:
   283                           	opt stack 0
   284  000010                     SetCircumfirunce@Circum:
   285                           	opt stack 0
   286  000010                     CreateTask@MangeFunction:
   287                           	opt stack 0
   288  000010                     ___wmul@multiplier:
   289                           	opt stack 0
   290  000010                     ___lwdiv@dividend:
   291                           	opt stack 0
   292  000010                     memset@p1:
   293                           	opt stack 0
   294  000010                     ___lmul@multiplier:
   295                           	opt stack 0
   296                           
   297                           ; 4 bytes @ 0xF
   298  000010                     	ds	1
   299  000011                     HWI_4Digit_WRITE@port:
   300                           	opt stack 0
   301  000011                     HWI_8Digit_WRITE@port:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x10
   305  000011                     	ds	1
   306  000012                     ??_BCDManage7segment:
   307  000012                     CreateTask@TaskId:
   308                           	opt stack 0
   309  000012                     ___wmul@multiplicand:
   310                           	opt stack 0
   311  000012                     ___lwdiv@divisor:
   312                           	opt stack 0
   313  000012                     memset@c:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x11
   317  000012                     	ds	1
   318  000013                     CreateTask@Period:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x12
   322  000013                     	ds	1
   323  000014                     ___wmul@product:
   324                           	opt stack 0
   325  000014                     ___lwdiv@quotient:
   326                           	opt stack 0
   327  000014                     memset@n:
   328                           	opt stack 0
   329  000014                     ___lmul@multiplicand:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x13
   333  000014                     	ds	1
   334  000015                     
   335                           ; 1 bytes @ 0x14
   336  000015                     	ds	1
   337  000016                     ___lwdiv@counter:
   338                           	opt stack 0
   339  000016                     memset@p:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x15
   343  000016                     	ds	1
   344  000017                     BCDsendNumber@Number:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x16
   348  000017                     	ds	1
   349  000018                     ___lmul@product:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x17
   353  000018                     	ds	1
   354  000019                     BCDsendNumber@DecimalPlace:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x18
   358  000019                     	ds	1
   359  00001A                     ??_BCDsendNumber:
   360                           
   361                           ; 1 bytes @ 0x19
   362  00001A                     	ds	2
   363  00001C                     ?___lldiv:
   364                           	opt stack 0
   365  00001C                     BCDsendNumber@Link:
   366                           	opt stack 0
   367  00001C                     ___lldiv@dividend:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x1B
   371  00001C                     	ds	2
   372  00001E                     BCDsendNumber@Output:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x1D
   376  00001E                     	ds	2
   377  000020                     BCDsendNumber@Buffer:
   378                           	opt stack 0
   379  000020                     ___lldiv@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x1F
   383  000020                     	ds	2
   384  000022                     BCDsendNumber@LoopIndex:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x21
   388  000022                     	ds	2
   389  000024                     ___lldiv@quotient:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x23
   393  000024                     	ds	4
   394  000028                     ___lldiv@counter:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x27
   398  000028                     	ds	1
   399  000029                     ??_SpeedCalcManage:
   400  000029                     ?_GetAvgSpeed:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x28
   404  000029                     	ds	1
   405  00002A                     SpeedCalcManage@HundredMeterReference:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x29
   409  00002A                     	ds	1
   410  00002B                     _GetAvgSpeed$870:
   411                           	opt stack 0
   412                           
   413                           ; 4 bytes @ 0x2A
   414  00002B                     	ds	1
   415  00002C                     
   416                           ; 1 bytes @ 0x2B
   417  00002C                     	ds	3
   418  00002F                     GetAvgSpeed@AvgSpeedKphMph:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x2E
   422  00002F                     	ds	2
   423  000031                     GetAvgSpeed@bIsKph:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x30
   427  000031                     	ds	1
   428  000032                     GetAvgSpeed@KphMphFactor:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x31
   432  000032                     	ds	4
   433  000036                     APP_MANAGE@AvgSpeedKph:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x35
   437  000036                     	ds	2
   438  000038                     APP_MANAGE@TravelledDistance:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x37
   442  000038                     	ds	2
   443  00003A                     
   444                           ; 1 bytes @ 0x39
   445  00003A                     	ds	2
   446  00003C                     tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           
   453                           ; 1 bytes @ 0x3B
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 86 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   473 ;;      Params:         0       0       0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0
   476 ;;      Totals:         0       0       0       0       0       0       0
   477 ;;Total ram usage:        0 bytes
   478 ;; Hardware stack levels required when called:    8
   479 ;; This function calls:
   480 ;;		_APP_INITIALIZE
   481 ;;		_CreateTask
   482 ;;		_HWI_DIGITAL_INITIALIZE
   483 ;;		_HWI_INTERRUPTS_INTITALIZE
   484 ;;		_RunScheduler
   485 ;;		_SpeedCalcNotifyInitialize
   486 ;; This function is called by:
   487 ;;		Startup code after reset
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text0
   492  000B2A                     __ptext0:
   493                           	opt stack 0
   494  000B2A                     _main:
   495                           	opt stack 23
   496                           
   497                           ;main.c: 87: HWI_INTERRUPTS_INTITALIZE();
   498                           
   499                           ;incstack = 0
   500  000B2A  EC2F  F006         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   501                           
   502                           ;main.c: 88: HWI_DIGITAL_INITIALIZE();
   503  000B2E  ECE5  F006         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   504                           
   505                           ;main.c: 89: SpeedCalcNotifyInitialize();
   506  000B32  ECB6  F006         	call	_SpeedCalcNotifyInitialize	;wreg free
   507                           
   508                           ;main.c: 90: APP_INITIALIZE();
   509  000B36  EC01  F007         	call	_APP_INITIALIZE	;wreg free
   510                           
   511                           ;main.c: 92: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   512  000B3A  0EEE               	movlw	low _ManageSpeedCalc
   513  000B3C  6E10               	movwf	CreateTask@MangeFunction,c
   514  000B3E  0E0D               	movlw	high _ManageSpeedCalc
   515  000B40  6E11               	movwf	CreateTask@MangeFunction+1,c
   516  000B42  0E00               	movlw	0
   517  000B44  6E12               	movwf	CreateTask@TaskId,c
   518  000B46  0E14               	movlw	20
   519  000B48  6E13               	movwf	CreateTask@Period,c
   520  000B4A  EC3E  F005         	call	_CreateTask	;wreg free
   521                           
   522                           ;main.c: 94: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100);
   523  000B4E  0EE8               	movlw	low _ManageApplication
   524  000B50  6E10               	movwf	CreateTask@MangeFunction,c
   525  000B52  0E0D               	movlw	high _ManageApplication
   526  000B54  6E11               	movwf	CreateTask@MangeFunction+1,c
   527  000B56  0E02               	movlw	2
   528  000B58  6E12               	movwf	CreateTask@TaskId,c
   529  000B5A  0E64               	movlw	100
   530  000B5C  6E13               	movwf	CreateTask@Period,c
   531  000B5E  EC3E  F005         	call	_CreateTask	;wreg free
   532                           
   533                           ;main.c: 96: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 50);
   534  000B62  0EE2               	movlw	low _DisplayAlphaNumeric
   535  000B64  6E10               	movwf	CreateTask@MangeFunction,c
   536  000B66  0E0D               	movlw	high _DisplayAlphaNumeric
   537  000B68  6E11               	movwf	CreateTask@MangeFunction+1,c
   538  000B6A  0E01               	movlw	1
   539  000B6C  6E12               	movwf	CreateTask@TaskId,c
   540  000B6E  0E32               	movlw	50
   541  000B70  6E13               	movwf	CreateTask@Period,c
   542  000B72  EC3E  F005         	call	_CreateTask	;wreg free
   543                           
   544                           ;main.c: 99: RunScheduler();
   545  000B76  EC84  F004         	call	_RunScheduler	;wreg free
   546                           
   547                           ;main.c: 101: return;
   548  000B7A  EF07  F000         	goto	start
   549  000B7E                     __end_of_main:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           
   558 ;; *************** function _SpeedCalcNotifyInitialize *****************
   559 ;; Defined at:
   560 ;;		line 21 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   574 ;;      Params:         0       0       0       0       0       0       0
   575 ;;      Locals:         0       0       0       0       0       0       0
   576 ;;      Temps:          0       0       0       0       0       0       0
   577 ;;      Totals:         0       0       0       0       0       0       0
   578 ;;Total ram usage:        0 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    4
   581 ;; This function calls:
   582 ;;		_memset
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           	psect	text1
   589  000D6C                     __ptext1:
   590                           	opt stack 0
   591  000D6C                     _SpeedCalcNotifyInitialize:
   592                           	opt stack 26
   593                           
   594                           ;SpeedCalc.c: 23: memset(LapCounterBuffer , 0 , sizeof(LapCounterBuffer));
   595                           
   596                           ;incstack = 0
   597  000D6C  0E80               	movlw	low _LapCounterBuffer
   598  000D6E  6E10               	movwf	memset@p1,c
   599  000D70  0E00               	movlw	high _LapCounterBuffer
   600  000D72  6E11               	movwf	memset@p1+1,c
   601  000D74  0E00               	movlw	0
   602  000D76  6E13               	movwf	memset@c+1,c
   603  000D78  0E00               	movlw	0
   604  000D7A  6E12               	movwf	memset@c,c
   605  000D7C  0E00               	movlw	0
   606  000D7E  6E15               	movwf	memset@n+1,c
   607  000D80  0E24               	movlw	36
   608  000D82  6E14               	movwf	memset@n,c
   609  000D84  EC65  F006         	call	_memset	;wreg free
   610  000D88  0012               	return		;funcret
   611  000D8A                     __end_of_SpeedCalcNotifyInitialize:
   612                           	opt stack 0
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           
   620 ;; *************** function _memset *****************
   621 ;; Defined at:
   622 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memset.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  p1              2   15[COMRAM] PTR void 
   625 ;;		 -> LapCounterBuffer(36), 
   626 ;;  c               2   17[COMRAM] int 
   627 ;;  n               2   19[COMRAM] unsigned int 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  p               2   21[COMRAM] PTR unsigned char 
   630 ;;		 -> LapCounterBuffer(36), 
   631 ;; Return value:  Size  Location     Type
   632 ;;                  2   15[COMRAM] PTR void 
   633 ;; Registers used:
   634 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   640 ;;      Params:         6       0       0       0       0       0       0
   641 ;;      Locals:         2       0       0       0       0       0       0
   642 ;;      Temps:          0       0       0       0       0       0       0
   643 ;;      Totals:         8       0       0       0       0       0       0
   644 ;;Total ram usage:        8 bytes
   645 ;; Hardware stack levels used:    1
   646 ;; Hardware stack levels required when called:    3
   647 ;; This function calls:
   648 ;;		Nothing
   649 ;; This function is called by:
   650 ;;		_SpeedCalcNotifyInitialize
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text2
   655  000CCA                     __ptext2:
   656                           	opt stack 0
   657  000CCA                     _memset:
   658                           	opt stack 26
   659                           
   660                           ;incstack = 0
   661  000CCA  C010  F016         	movff	memset@p1,memset@p
   662  000CCE  C011  F017         	movff	memset@p1+1,memset@p+1
   663  000CD2  D008               	goto	l1400
   664  000CD4                     l1396:
   665  000CD4  C016  FFD9         	movff	memset@p,fsr2l
   666  000CD8  C017  FFDA         	movff	memset@p+1,fsr2h
   667  000CDC  C012  FFDF         	movff	memset@c,indf2
   668  000CE0  4A16               	infsnz	memset@p,f,c
   669  000CE2  2A17               	incf	memset@p+1,f,c
   670  000CE4                     l1400:
   671  000CE4  0614               	decf	memset@n,f,c
   672  000CE6  A0D8               	btfss	status,0,c
   673  000CE8  0615               	decf	memset@n+1,f,c
   674  000CEA  2814               	incf	memset@n,w,c
   675  000CEC  E1F3               	bnz	l1396
   676  000CEE  2815               	incf	memset@n+1,w,c
   677  000CF0  B4D8               	btfsc	status,2,c
   678  000CF2  0012               	return	
   679  000CF4  D7EF               	goto	l1396
   680  000CF6                     __end_of_memset:
   681                           	opt stack 0
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           indf2	equ	0xFDF
   689                           fsr2h	equ	0xFDA
   690                           fsr2l	equ	0xFD9
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _RunScheduler *****************
   694 ;; Defined at:
   695 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   709 ;;      Params:         0       0       0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0       0       0
   711 ;;      Temps:          2       0       0       0       0       0       0
   712 ;;      Totals:         2       0       0       0       0       0       0
   713 ;;Total ram usage:        2 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    7
   716 ;; This function calls:
   717 ;;		_DisplayAlphaNumeric
   718 ;;		_ManageApplication
   719 ;;		_ManageSpeedCalc
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text3
   726  000908                     __ptext3:
   727                           	opt stack 0
   728  000908                     _RunScheduler:
   729                           	opt stack 23
   730  000908                     
   731                           ;Scheduler.c: 29: {
   732                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 3 ; TaskIndex++)
   733  000908  0E00               	movlw	0
   734  00090A  6E58               	movwf	RunScheduler@TaskIndex,c
   735  00090C                     l1416:
   736  00090C  0E02               	movlw	2
   737  00090E  6458               	cpfsgt	RunScheduler@TaskIndex,c
   738  000910  D001               	goto	l1420
   739  000912  D7FA               	goto	l1414
   740  000914                     l1420:
   741                           
   742                           ;Scheduler.c: 31: {
   743                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   744  000914  5058               	movf	RunScheduler@TaskIndex,w,c
   745  000916  0D04               	mullw	4
   746  000918  0E02               	movlw	2
   747  00091A  26F3               	addwf	prodl,f,c
   748  00091C  0E00               	movlw	0
   749  00091E  22F4               	addwfc	prodh,f,c
   750  000920  0E3C               	movlw	low _ArrayTask
   751  000922  24F3               	addwf	prodl,w,c
   752  000924  6ED9               	movwf	fsr2l,c
   753  000926  0E00               	movlw	high _ArrayTask
   754  000928  20F4               	addwfc	prodh,w,c
   755  00092A  6EDA               	movwf	fsr2h,c
   756  00092C  5058               	movf	RunScheduler@TaskIndex,w,c
   757  00092E  0D04               	mullw	4
   758  000930  0E03               	movlw	3
   759  000932  26F3               	addwf	prodl,f,c
   760  000934  0E00               	movlw	0
   761  000936  22F4               	addwfc	prodh,f,c
   762  000938  0E3C               	movlw	low _ArrayTask
   763  00093A  24F3               	addwf	prodl,w,c
   764  00093C  6EE1               	movwf	fsr1l,c
   765  00093E  0E00               	movlw	high _ArrayTask
   766  000940  20F4               	addwfc	prodh,w,c
   767  000942  6EE2               	movwf	fsr1h,c
   768  000944  50DE               	movf	postinc2,w,c
   769  000946  5CE6               	subwf	postinc1,w,c
   770  000948  A0D8               	btfss	status,0,c
   771  00094A  D022               	goto	l1426
   772                           
   773                           ;Scheduler.c: 33: {
   774                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
   775  00094C  5058               	movf	RunScheduler@TaskIndex,w,c
   776  00094E  0D04               	mullw	4
   777  000950  0E3C               	movlw	low _ArrayTask
   778  000952  24F3               	addwf	prodl,w,c
   779  000954  6ED9               	movwf	fsr2l,c
   780  000956  0E00               	movlw	high _ArrayTask
   781  000958  20F4               	addwfc	prodh,w,c
   782  00095A  6EDA               	movwf	fsr2h,c
   783  00095C  D801               	call	u628
   784  00095E  D00A               	goto	l1424
   785  000960                     u628:
   786  000960  0005               	push	
   787  000962  6EFA               	movwf	pclath,c
   788  000964  50DE               	movf	postinc2,w,c
   789  000966  6EFD               	movwf	tosl,c
   790  000968  50DE               	movf	postinc2,w,c
   791  00096A  6EFE               	movwf	tosh,c
   792  00096C  50F8               	movf	tblptru,w,c
   793  00096E  6EFF               	movwf	tosu,c
   794  000970  50FA               	movf	pclath,w,c
   795  000972  0012               	return		;indir
   796  000974                     l1424:
   797                           
   798                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
   799  000974  5058               	movf	RunScheduler@TaskIndex,w,c
   800  000976  0D04               	mullw	4
   801  000978  0E03               	movlw	3
   802  00097A  26F3               	addwf	prodl,f,c
   803  00097C  0E00               	movlw	0
   804  00097E  22F4               	addwfc	prodh,f,c
   805  000980  0E3C               	movlw	low _ArrayTask
   806  000982  24F3               	addwf	prodl,w,c
   807  000984  6ED9               	movwf	fsr2l,c
   808  000986  0E00               	movlw	high _ArrayTask
   809  000988  20F4               	addwfc	prodh,w,c
   810  00098A  6EDA               	movwf	fsr2h,c
   811  00098C  0E00               	movlw	0
   812  00098E  6EDF               	movwf	indf2,c
   813  000990                     l1426:
   814  000990  2A58               	incf	RunScheduler@TaskIndex,f,c
   815  000992  D7BC               	goto	l1416
   816  000994                     __end_of_RunScheduler:
   817                           	opt stack 0
   818                           tosu	equ	0xFFF
   819                           tosh	equ	0xFFE
   820                           tosl	equ	0xFFD
   821                           pclath	equ	0xFFA
   822                           tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           tblptrl	equ	0xFF6
   825                           tablat	equ	0xFF5
   826                           prodh	equ	0xFF4
   827                           prodl	equ	0xFF3
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postinc1	equ	0xFE6
   831                           fsr1h	equ	0xFE2
   832                           fsr1l	equ	0xFE1
   833                           indf2	equ	0xFDF
   834                           postinc2	equ	0xFDE
   835                           fsr2h	equ	0xFDA
   836                           fsr2l	equ	0xFD9
   837                           status	equ	0xFD8
   838                           
   839 ;; *************** function _DisplayAlphaNumeric *****************
   840 ;; Defined at:
   841 ;;		line 104 in file "main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   855 ;;      Params:         0       0       0       0       0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0
   858 ;;      Totals:         0       0       0       0       0       0       0
   859 ;;Total ram usage:        0 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    5
   862 ;; This function calls:
   863 ;;		_BCDManage7segment
   864 ;; This function is called by:
   865 ;;		_main
   866 ;;		_RunScheduler
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text4
   871  000DE2                     __ptext4:
   872                           	opt stack 0
   873  000DE2                     _DisplayAlphaNumeric:
   874                           	opt stack 24
   875                           
   876                           ;main.c: 106: BCDManage7segment();
   877                           
   878                           ;incstack = 0
   879  000DE2  ECE8  F005         	call	_BCDManage7segment	;wreg free
   880  000DE6  0012               	return		;funcret
   881  000DE8                     __end_of_DisplayAlphaNumeric:
   882                           	opt stack 0
   883                           tosu	equ	0xFFF
   884                           tosh	equ	0xFFE
   885                           tosl	equ	0xFFD
   886                           pclath	equ	0xFFA
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           prodh	equ	0xFF4
   892                           prodl	equ	0xFF3
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postinc1	equ	0xFE6
   896                           fsr1h	equ	0xFE2
   897                           fsr1l	equ	0xFE1
   898                           indf2	equ	0xFDF
   899                           postinc2	equ	0xFDE
   900                           fsr2h	equ	0xFDA
   901                           fsr2l	equ	0xFD9
   902                           status	equ	0xFD8
   903                           
   904 ;; *************** function _ManageApplication *****************
   905 ;; Defined at:
   906 ;;		line 108 in file "main.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;		None
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   920 ;;      Params:         0       0       0       0       0       0       0
   921 ;;      Locals:         0       0       0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0
   923 ;;      Totals:         0       0       0       0       0       0       0
   924 ;;Total ram usage:        0 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; Hardware stack levels required when called:    6
   927 ;; This function calls:
   928 ;;		_APP_MANAGE
   929 ;; This function is called by:
   930 ;;		_main
   931 ;;		_RunScheduler
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text5
   936  000DE8                     __ptext5:
   937                           	opt stack 0
   938  000DE8                     _ManageApplication:
   939                           	opt stack 23
   940                           
   941                           ;main.c: 110: APP_MANAGE();
   942                           
   943                           ;incstack = 0
   944  000DE8  EC0B  F005         	call	_APP_MANAGE	;wreg free
   945  000DEC  0012               	return		;funcret
   946  000DEE                     __end_of_ManageApplication:
   947                           	opt stack 0
   948                           tosu	equ	0xFFF
   949                           tosh	equ	0xFFE
   950                           tosl	equ	0xFFD
   951                           pclath	equ	0xFFA
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           prodh	equ	0xFF4
   957                           prodl	equ	0xFF3
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postinc1	equ	0xFE6
   961                           fsr1h	equ	0xFE2
   962                           fsr1l	equ	0xFE1
   963                           indf2	equ	0xFDF
   964                           postinc2	equ	0xFDE
   965                           fsr2h	equ	0xFDA
   966                           fsr2l	equ	0xFD9
   967                           status	equ	0xFD8
   968                           
   969 ;; *************** function _ManageSpeedCalc *****************
   970 ;; Defined at:
   971 ;;		line 112 in file "main.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   985 ;;      Params:         0       0       0       0       0       0       0
   986 ;;      Locals:         0       0       0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0       0
   988 ;;      Totals:         0       0       0       0       0       0       0
   989 ;;Total ram usage:        0 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; Hardware stack levels required when called:    5
   992 ;; This function calls:
   993 ;;		_SpeedCalcManage
   994 ;; This function is called by:
   995 ;;		_main
   996 ;;		_RunScheduler
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text6
  1001  000DEE                     __ptext6:
  1002                           	opt stack 0
  1003  000DEE                     _ManageSpeedCalc:
  1004                           	opt stack 24
  1005                           
  1006                           ;main.c: 114: SpeedCalcManage();
  1007                           
  1008                           ;incstack = 0
  1009  000DEE  ECDC  F003         	call	_SpeedCalcManage	;wreg free
  1010  000DF2  0012               	return		;funcret
  1011  000DF4                     __end_of_ManageSpeedCalc:
  1012                           	opt stack 0
  1013                           tosu	equ	0xFFF
  1014                           tosh	equ	0xFFE
  1015                           tosl	equ	0xFFD
  1016                           pclath	equ	0xFFA
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postinc1	equ	0xFE6
  1026                           fsr1h	equ	0xFE2
  1027                           fsr1l	equ	0xFE1
  1028                           indf2	equ	0xFDF
  1029                           postinc2	equ	0xFDE
  1030                           fsr2h	equ	0xFDA
  1031                           fsr2l	equ	0xFD9
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _SpeedCalcManage *****************
  1035 ;; Defined at:
  1036 ;;		line 57 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  HundredMeter    2   41[COMRAM] unsigned short 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1050 ;;      Params:         0       0       0       0       0       0       0
  1051 ;;      Locals:         2       0       0       0       0       0       0
  1052 ;;      Temps:          1       0       0       0       0       0       0
  1053 ;;      Totals:         3       0       0       0       0       0       0
  1054 ;;Total ram usage:        3 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    4
  1057 ;; This function calls:
  1058 ;;		___lldiv
  1059 ;; This function is called by:
  1060 ;;		_ManageSpeedCalc
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text7
  1065  0007B8                     __ptext7:
  1066                           	opt stack 0
  1067  0007B8                     _SpeedCalcManage:
  1068                           	opt stack 24
  1069                           
  1070                           ;SpeedCalc.c: 59: static unsigned char LapTime = (unsigned char)0;
  1071                           ;SpeedCalc.c: 60: static unsigned char LapSampleIndex = (unsigned char)0;
  1072                           ;SpeedCalc.c: 62: unsigned short HundredMeterReference;
  1073                           ;SpeedCalc.c: 64: LapTime ++;
  1074                           
  1075                           ;incstack = 0
  1076  0007B8  2A5A               	incf	SpeedCalcManage@LapTime,f,c
  1077                           
  1078                           ;SpeedCalc.c: 67: if((unsigned char)10 == LapTime)
  1079  0007BA  0E0A               	movlw	10
  1080  0007BC  185A               	xorwf	SpeedCalcManage@LapTime,w,c
  1081  0007BE  A4D8               	btfss	status,2,c
  1082  0007C0  0012               	return	
  1083                           
  1084                           ;SpeedCalc.c: 68: {
  1085                           ;SpeedCalc.c: 69: LapTime = (unsigned char)0;
  1086  0007C2  0E00               	movlw	0
  1087  0007C4  6E5A               	movwf	SpeedCalcManage@LapTime,c
  1088                           
  1089                           ;SpeedCalc.c: 70: LapCounterAvg += (unsigned short)LapCounter;
  1090  0007C6  505B               	movf	_LapCounter,w,c
  1091  0007C8  2656               	addwf	_LapCounterAvg,f,c
  1092  0007CA  0E00               	movlw	0
  1093  0007CC  2257               	addwfc	_LapCounterAvg+1,f,c
  1094                           
  1095                           ;SpeedCalc.c: 71: LapCounterAvg -= (unsigned short)LapCounterBuffer[LapSampleIndex];
  1096  0007CE  5059               	movf	SpeedCalcManage@LapSampleIndex,w,c
  1097  0007D0  0D01               	mullw	1
  1098  0007D2  0E80               	movlw	low _LapCounterBuffer
  1099  0007D4  24F3               	addwf	prodl,w,c
  1100  0007D6  6ED9               	movwf	fsr2l,c
  1101  0007D8  0E00               	movlw	high _LapCounterBuffer
  1102  0007DA  20F4               	addwfc	prodh,w,c
  1103  0007DC  6EDA               	movwf	fsr2h,c
  1104  0007DE  50DF               	movf	indf2,w,c
  1105  0007E0  6E29               	movwf	??_SpeedCalcManage& (0+255),c
  1106  0007E2  5029               	movf	??_SpeedCalcManage,w,c
  1107  0007E4  5E56               	subwf	_LapCounterAvg,f,c
  1108  0007E6  0E00               	movlw	0
  1109  0007E8  5A57               	subwfb	_LapCounterAvg+1,f,c
  1110                           
  1111                           ;SpeedCalc.c: 73: LapCounterBuffer[LapSampleIndex] = LapCounter;
  1112  0007EA  5059               	movf	SpeedCalcManage@LapSampleIndex,w,c
  1113  0007EC  0D01               	mullw	1
  1114  0007EE  0E80               	movlw	low _LapCounterBuffer
  1115  0007F0  24F3               	addwf	prodl,w,c
  1116  0007F2  6ED9               	movwf	fsr2l,c
  1117  0007F4  0E00               	movlw	high _LapCounterBuffer
  1118  0007F6  20F4               	addwfc	prodh,w,c
  1119  0007F8  6EDA               	movwf	fsr2h,c
  1120  0007FA  C05B  FFDF         	movff	_LapCounter,indf2
  1121                           
  1122                           ;SpeedCalc.c: 74: LapDistanceCounter += LapCounter;
  1123  0007FE  505B               	movf	_LapCounter,w,c
  1124  000800  2654               	addwf	_LapDistanceCounter,f,c
  1125  000802  0E00               	movlw	0
  1126  000804  2255               	addwfc	_LapDistanceCounter+1,f,c
  1127                           
  1128                           ;SpeedCalc.c: 75: LapCounter = (unsigned char)0;
  1129  000806  0E00               	movlw	0
  1130  000808  6E5B               	movwf	_LapCounter,c
  1131                           
  1132                           ;SpeedCalc.c: 77: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1133                           ;SpeedCalc.c: 78: (unsigned long)CircumFactor);
  1134  00080A  0EA0               	movlw	160
  1135  00080C  6E1C               	movwf	___lldiv@dividend,c
  1136  00080E  0E86               	movlw	134
  1137  000810  6E1D               	movwf	___lldiv@dividend+1,c
  1138  000812  0E01               	movlw	1
  1139  000814  6E1E               	movwf	___lldiv@dividend+2,c
  1140  000816  0E00               	movlw	0
  1141  000818  6E1F               	movwf	___lldiv@dividend+3,c
  1142  00081A  C05E  F020         	movff	_CircumFactor,___lldiv@divisor
  1143  00081E  C05F  F021         	movff	_CircumFactor+1,___lldiv@divisor+1
  1144  000822  6A22               	clrf	___lldiv@divisor+2,c
  1145  000824  6A23               	clrf	___lldiv@divisor+3,c
  1146  000826  ECCA  F004         	call	___lldiv	;wreg free
  1147  00082A  C01C  F02A         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1148  00082E  C01D  F02B         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1149                           
  1150                           ;SpeedCalc.c: 80: if(LapDistanceCounter >= HundredMeterReference)
  1151  000832  502A               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1152  000834  5C54               	subwf	_LapDistanceCounter,w,c
  1153  000836  502B               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1154  000838  5855               	subwfb	_LapDistanceCounter+1,w,c
  1155  00083A  A0D8               	btfss	status,0,c
  1156  00083C  D00A               	goto	l1388
  1157                           
  1158                           ;SpeedCalc.c: 81: {
  1159                           ;SpeedCalc.c: 82: DistTravelCntr ++;
  1160  00083E  0E01               	movlw	1
  1161  000840  2650               	addwf	_DistTravelCntr,f,c
  1162  000842  0E00               	movlw	0
  1163  000844  2251               	addwfc	_DistTravelCntr+1,f,c
  1164  000846  2252               	addwfc	_DistTravelCntr+2,f,c
  1165  000848  2253               	addwfc	_DistTravelCntr+3,f,c
  1166                           
  1167                           ;SpeedCalc.c: 83: LapDistanceCounter -= HundredMeterReference;
  1168  00084A  502A               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1169  00084C  5E54               	subwf	_LapDistanceCounter,f,c
  1170  00084E  502B               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1171  000850  5A55               	subwfb	_LapDistanceCounter+1,f,c
  1172  000852                     l1388:
  1173                           
  1174                           ;SpeedCalc.c: 88: }
  1175                           ;SpeedCalc.c: 92: LapSampleIndex ++;
  1176  000852  2A59               	incf	SpeedCalcManage@LapSampleIndex,f,c
  1177                           
  1178                           ;SpeedCalc.c: 94: if( (unsigned char)36 == LapSampleIndex )
  1179  000854  0E24               	movlw	36
  1180  000856  1859               	xorwf	SpeedCalcManage@LapSampleIndex,w,c
  1181  000858  A4D8               	btfss	status,2,c
  1182  00085A  0012               	return	
  1183                           
  1184                           ;SpeedCalc.c: 95: {
  1185                           ;SpeedCalc.c: 96: LapSampleIndex = (unsigned char)0;
  1186  00085C  0E00               	movlw	0
  1187  00085E  6E59               	movwf	SpeedCalcManage@LapSampleIndex,c
  1188                           
  1189                           ;SpeedCalc.c: 97: }
  1190                           ;SpeedCalc.c: 98: }
  1191  000860  0012               	return	
  1192  000862                     __end_of_SpeedCalcManage:
  1193                           	opt stack 0
  1194                           tosu	equ	0xFFF
  1195                           tosh	equ	0xFFE
  1196                           tosl	equ	0xFFD
  1197                           pclath	equ	0xFFA
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           prodh	equ	0xFF4
  1203                           prodl	equ	0xFF3
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           postinc1	equ	0xFE6
  1207                           fsr1h	equ	0xFE2
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           postinc2	equ	0xFDE
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _APP_MANAGE *****************
  1216 ;; Defined at:
  1217 ;;		line 15 in file "../../../../Common/App/APP.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  TravelledDis    2   55[COMRAM] unsigned short 
  1222 ;;  AvgSpeedKph     2   53[COMRAM] unsigned short 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         0       0       0       0       0       0       0
  1233 ;;      Locals:         4       0       0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0
  1235 ;;      Totals:         4       0       0       0       0       0       0
  1236 ;;Total ram usage:        4 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    5
  1239 ;; This function calls:
  1240 ;;		_BCDsendNumber
  1241 ;;		_GetAvgSpeed
  1242 ;;		_GetDistance
  1243 ;;		_SetCircumfirunce
  1244 ;;		___wmul
  1245 ;; This function is called by:
  1246 ;;		_ManageApplication
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text8
  1251  000A16                     __ptext8:
  1252                           	opt stack 0
  1253  000A16                     _APP_MANAGE:
  1254                           	opt stack 23
  1255                           
  1256                           ;APP.c: 17: unsigned short AvgSpeedKph;
  1257                           ;APP.c: 18: unsigned short TravelledDistance;
  1258                           ;APP.c: 22: SetCircumfirunce(2056);
  1259                           
  1260                           ;incstack = 0
  1261  000A16  0E08               	movlw	8
  1262  000A18  6E11               	movwf	SetCircumfirunce@Circum+1,c
  1263  000A1A  0E08               	movlw	8
  1264  000A1C  6E10               	movwf	SetCircumfirunce@Circum,c
  1265  000A1E  ECEC  F006         	call	_SetCircumfirunce	;wreg free
  1266                           
  1267                           ;APP.c: 24: AvgSpeedKph = GetAvgSpeed(0);
  1268  000A22  0E00               	movlw	0
  1269  000A24  EC31  F004         	call	_GetAvgSpeed
  1270  000A28  C029  F036         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  1271  000A2C  C02A  F037         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  1272                           
  1273                           ;APP.c: 25: TravelledDistance = GetDistance();
  1274  000A30  ECDC  F006         	call	_GetDistance	;wreg free
  1275  000A34  C010  F038         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  1276  000A38  C011  F039         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  1277                           
  1278                           ;APP.c: 26: TravelledDistance *= (unsigned short)10;
  1279  000A3C  C038  F010         	movff	APP_MANAGE@TravelledDistance,___wmul@multiplier
  1280  000A40  C039  F011         	movff	APP_MANAGE@TravelledDistance+1,___wmul@multiplier+1
  1281  000A44  0E00               	movlw	0
  1282  000A46  6E13               	movwf	___wmul@multiplicand+1,c
  1283  000A48  0E0A               	movlw	10
  1284  000A4A  6E12               	movwf	___wmul@multiplicand,c
  1285  000A4C  EC90  F006         	call	___wmul	;wreg free
  1286  000A50  C010  F038         	movff	?___wmul,APP_MANAGE@TravelledDistance
  1287  000A54  C011  F039         	movff	?___wmul+1,APP_MANAGE@TravelledDistance+1
  1288                           
  1289                           ;APP.c: 27: TravelledDistance /= (unsigned short)16;
  1290  000A58  3A38               	swapf	APP_MANAGE@TravelledDistance,f,c
  1291  000A5A  3A39               	swapf	APP_MANAGE@TravelledDistance+1,f,c
  1292  000A5C  0E0F               	movlw	15
  1293  000A5E  1638               	andwf	APP_MANAGE@TravelledDistance,f,c
  1294  000A60  5039               	movf	APP_MANAGE@TravelledDistance+1,w,c
  1295  000A62  0BF0               	andlw	240
  1296  000A64  1238               	iorwf	APP_MANAGE@TravelledDistance,f,c
  1297  000A66  0E0F               	movlw	15
  1298  000A68  1639               	andwf	APP_MANAGE@TravelledDistance+1,f,c
  1299                           
  1300                           ;APP.c: 40: BCDsendNumber(TravelledDistance,1);
  1301  000A6A  C038  F017         	movff	APP_MANAGE@TravelledDistance,BCDsendNumber@Number
  1302  000A6E  C039  F018         	movff	APP_MANAGE@TravelledDistance+1,BCDsendNumber@Number+1
  1303  000A72  0E01               	movlw	1
  1304  000A74  6E19               	movwf	BCDsendNumber@DecimalPlace,c
  1305  000A76  EC07  F003         	call	_BCDsendNumber	;wreg free
  1306  000A7A  0012               	return		;funcret
  1307  000A7C                     __end_of_APP_MANAGE:
  1308                           	opt stack 0
  1309                           tosu	equ	0xFFF
  1310                           tosh	equ	0xFFE
  1311                           tosl	equ	0xFFD
  1312                           pclath	equ	0xFFA
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           prodh	equ	0xFF4
  1318                           prodl	equ	0xFF3
  1319                           postinc0	equ	0xFEE
  1320                           wreg	equ	0xFE8
  1321                           postinc1	equ	0xFE6
  1322                           fsr1h	equ	0xFE2
  1323                           fsr1l	equ	0xFE1
  1324                           indf2	equ	0xFDF
  1325                           postinc2	equ	0xFDE
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330 ;; *************** function _SetCircumfirunce *****************
  1331 ;; Defined at:
  1332 ;;		line 116 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  Circum          2   15[COMRAM] unsigned short 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		None
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1346 ;;      Params:         2       0       0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0
  1349 ;;      Totals:         2       0       0       0       0       0       0
  1350 ;;Total ram usage:        2 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    3
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_APP_MANAGE
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text9
  1361  000DD8                     __ptext9:
  1362                           	opt stack 0
  1363  000DD8                     _SetCircumfirunce:
  1364                           	opt stack 24
  1365                           
  1366                           ;SpeedCalc.c: 118: CircumFactor = (unsigned short)Circum;
  1367                           
  1368                           ;incstack = 0
  1369  000DD8  C010  F05E         	movff	SetCircumfirunce@Circum,_CircumFactor
  1370  000DDC  C011  F05F         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  1371  000DE0  0012               	return		;funcret
  1372  000DE2                     __end_of_SetCircumfirunce:
  1373                           	opt stack 0
  1374                           tosu	equ	0xFFF
  1375                           tosh	equ	0xFFE
  1376                           tosl	equ	0xFFD
  1377                           pclath	equ	0xFFA
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           prodh	equ	0xFF4
  1383                           prodl	equ	0xFF3
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           postinc1	equ	0xFE6
  1387                           fsr1h	equ	0xFE2
  1388                           fsr1l	equ	0xFE1
  1389                           indf2	equ	0xFDF
  1390                           postinc2	equ	0xFDE
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _GetDistance *****************
  1396 ;; Defined at:
  1397 ;;		line 110 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  4   15[COMRAM] unsigned long 
  1404 ;; Registers used:
  1405 ;;		None
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1411 ;;      Params:         4       0       0       0       0       0       0
  1412 ;;      Locals:         0       0       0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0
  1414 ;;      Totals:         4       0       0       0       0       0       0
  1415 ;;Total ram usage:        4 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    3
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_APP_MANAGE
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text10
  1426  000DB8                     __ptext10:
  1427                           	opt stack 0
  1428  000DB8                     _GetDistance:
  1429                           	opt stack 24
  1430                           
  1431                           ;SpeedCalc.c: 112: return DistTravelCntr;
  1432                           
  1433                           ;incstack = 0
  1434  000DB8  C050  F010         	movff	_DistTravelCntr,?_GetDistance
  1435  000DBC  C051  F011         	movff	_DistTravelCntr+1,?_GetDistance+1
  1436  000DC0  C052  F012         	movff	_DistTravelCntr+2,?_GetDistance+2
  1437  000DC4  C053  F013         	movff	_DistTravelCntr+3,?_GetDistance+3
  1438  000DC8  0012               	return		;funcret
  1439  000DCA                     __end_of_GetDistance:
  1440                           	opt stack 0
  1441                           tosu	equ	0xFFF
  1442                           tosh	equ	0xFFE
  1443                           tosl	equ	0xFFD
  1444                           pclath	equ	0xFFA
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           prodh	equ	0xFF4
  1450                           prodl	equ	0xFF3
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postinc1	equ	0xFE6
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           indf2	equ	0xFDF
  1457                           postinc2	equ	0xFDE
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _GetAvgSpeed *****************
  1463 ;; Defined at:
  1464 ;;		line 122 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  bIsKph          1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  bIsKph          1   48[COMRAM] unsigned char 
  1469 ;;  KphMphFactor    4   49[COMRAM] unsigned long 
  1470 ;;  AvgSpeedKphM    2   46[COMRAM] unsigned short 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2   40[COMRAM] unsigned short 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1480 ;;      Params:         2       0       0       0       0       0       0
  1481 ;;      Locals:        11       0       0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0
  1483 ;;      Totals:        13       0       0       0       0       0       0
  1484 ;;Total ram usage:       13 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    4
  1487 ;; This function calls:
  1488 ;;		___lldiv
  1489 ;;		___lmul
  1490 ;; This function is called by:
  1491 ;;		_APP_MANAGE
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text11
  1496  000862                     __ptext11:
  1497                           	opt stack 0
  1498  000862                     _GetAvgSpeed:
  1499                           	opt stack 23
  1500                           
  1501                           ;incstack = 0
  1502                           ;GetAvgSpeed@bIsKph stored from wreg
  1503  000862  6E31               	movwf	GetAvgSpeed@bIsKph,c
  1504                           
  1505                           ;SpeedCalc.c: 124: unsigned short AvgSpeedKphMph;
  1506                           ;SpeedCalc.c: 125: unsigned long KphMphFactor;
  1507                           ;SpeedCalc.c: 127: if( (unsigned char)1 == bIsKph )
  1508  000864  0431               	decf	GetAvgSpeed@bIsKph,w,c
  1509  000866  A4D8               	btfss	status,2,c
  1510  000868  D004               	goto	l1288
  1511                           
  1512                           ;SpeedCalc.c: 128: {
  1513                           ;SpeedCalc.c: 129: KphMphFactor = (unsigned long)360;
  1514  00086A  0E68               	movlw	104
  1515  00086C  6E32               	movwf	GetAvgSpeed@KphMphFactor,c
  1516  00086E  0E01               	movlw	1
  1517  000870  D003               	goto	L1
  1518  000872                     l1288:
  1519                           
  1520                           ;SpeedCalc.c: 131: else
  1521                           ;SpeedCalc.c: 132: {
  1522                           ;SpeedCalc.c: 133: KphMphFactor = (unsigned long)225;
  1523  000872  0EE1               	movlw	225
  1524  000874  6E32               	movwf	GetAvgSpeed@KphMphFactor,c
  1525  000876  0E00               	movlw	0
  1526  000878                     L1:
  1527  000878  6E33               	movwf	GetAvgSpeed@KphMphFactor+1,c
  1528  00087A  0E00               	movlw	0
  1529  00087C  6E34               	movwf	GetAvgSpeed@KphMphFactor+2,c
  1530  00087E  0E00               	movlw	0
  1531  000880  6E35               	movwf	GetAvgSpeed@KphMphFactor+3,c
  1532                           
  1533                           ;SpeedCalc.c: 134: }
  1534                           ;SpeedCalc.c: 136: AvgSpeedKphMph = (unsigned short)(
  1535                           ;SpeedCalc.c: 137: (KphMphFactor * CircumFactor * (unsigned long)LapCounterAvg)
  1536                           ;SpeedCalc.c: 138: /((unsigned long)20 *
  1537                           ;SpeedCalc.c: 139: (unsigned long)100
  1538                           ;SpeedCalc.c: 140: * (unsigned long)36)
  1539                           ;SpeedCalc.c: 141: );
  1540  000882  C05E  F010         	movff	_CircumFactor,___lmul@multiplier
  1541  000886  C05F  F011         	movff	_CircumFactor+1,___lmul@multiplier+1
  1542  00088A  6A12               	clrf	___lmul@multiplier+2,c
  1543  00088C  6A13               	clrf	___lmul@multiplier+3,c
  1544  00088E  C056  F014         	movff	_LapCounterAvg,___lmul@multiplicand
  1545  000892  C057  F015         	movff	_LapCounterAvg+1,___lmul@multiplicand+1
  1546  000896  6A16               	clrf	___lmul@multiplicand+2,c
  1547  000898  6A17               	clrf	___lmul@multiplicand+3,c
  1548  00089A  EC6A  F005         	call	___lmul	;wreg free
  1549  00089E  C010  F02B         	movff	?___lmul,_GetAvgSpeed$870
  1550  0008A2  C011  F02C         	movff	?___lmul+1,_GetAvgSpeed$870+1
  1551  0008A6  C012  F02D         	movff	?___lmul+2,_GetAvgSpeed$870+2
  1552  0008AA  C013  F02E         	movff	?___lmul+3,_GetAvgSpeed$870+3
  1553                           
  1554                           ;SpeedCalc.c: 134: }
  1555                           ;SpeedCalc.c: 136: AvgSpeedKphMph = (unsigned short)(
  1556                           ;SpeedCalc.c: 137: (KphMphFactor * CircumFactor * (unsigned long)LapCounterAvg)
  1557                           ;SpeedCalc.c: 138: /((unsigned long)20 *
  1558                           ;SpeedCalc.c: 139: (unsigned long)100
  1559                           ;SpeedCalc.c: 140: * (unsigned long)36)
  1560                           ;SpeedCalc.c: 141: );
  1561  0008AE  C02B  F010         	movff	_GetAvgSpeed$870,___lmul@multiplier
  1562  0008B2  C02C  F011         	movff	_GetAvgSpeed$870+1,___lmul@multiplier+1
  1563  0008B6  C02D  F012         	movff	_GetAvgSpeed$870+2,___lmul@multiplier+2
  1564  0008BA  C02E  F013         	movff	_GetAvgSpeed$870+3,___lmul@multiplier+3
  1565  0008BE  C032  F014         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  1566  0008C2  C033  F015         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  1567  0008C6  C034  F016         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  1568  0008CA  C035  F017         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  1569  0008CE  EC6A  F005         	call	___lmul	;wreg free
  1570  0008D2  C010  F01C         	movff	?___lmul,___lldiv@dividend
  1571  0008D6  C011  F01D         	movff	?___lmul+1,___lldiv@dividend+1
  1572  0008DA  C012  F01E         	movff	?___lmul+2,___lldiv@dividend+2
  1573  0008DE  C013  F01F         	movff	?___lmul+3,___lldiv@dividend+3
  1574  0008E2  0E40               	movlw	64
  1575  0008E4  6E20               	movwf	___lldiv@divisor,c
  1576  0008E6  0E19               	movlw	25
  1577  0008E8  6E21               	movwf	___lldiv@divisor+1,c
  1578  0008EA  0E01               	movlw	1
  1579  0008EC  6E22               	movwf	___lldiv@divisor+2,c
  1580  0008EE  0E00               	movlw	0
  1581  0008F0  6E23               	movwf	___lldiv@divisor+3,c
  1582  0008F2  ECCA  F004         	call	___lldiv	;wreg free
  1583  0008F6  C01C  F02F         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  1584  0008FA  C01D  F030         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  1585                           
  1586                           ;SpeedCalc.c: 142: return AvgSpeedKphMph;
  1587  0008FE  C02F  F029         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  1588  000902  C030  F02A         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  1589  000906  0012               	return	
  1590  000908                     __end_of_GetAvgSpeed:
  1591                           	opt stack 0
  1592                           tosu	equ	0xFFF
  1593                           tosh	equ	0xFFE
  1594                           tosl	equ	0xFFD
  1595                           pclath	equ	0xFFA
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           postinc1	equ	0xFE6
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           indf2	equ	0xFDF
  1608                           postinc2	equ	0xFDE
  1609                           fsr2h	equ	0xFDA
  1610                           fsr2l	equ	0xFD9
  1611                           status	equ	0xFD8
  1612                           
  1613 ;; *************** function ___lmul *****************
  1614 ;; Defined at:
  1615 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;  multiplier      4   15[COMRAM] unsigned long 
  1618 ;;  multiplicand    4   19[COMRAM] unsigned long 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  product         4   23[COMRAM] unsigned long 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  4   15[COMRAM] unsigned long 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         8       0       0       0       0       0       0
  1631 ;;      Locals:         4       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0
  1633 ;;      Totals:        12       0       0       0       0       0       0
  1634 ;;Total ram usage:       12 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    3
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_GetAvgSpeed
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text12
  1645  000AD4                     __ptext12:
  1646                           	opt stack 0
  1647  000AD4                     ___lmul:
  1648                           	opt stack 23
  1649                           
  1650                           ;incstack = 0
  1651  000AD4  0E00               	movlw	0
  1652  000AD6  6E18               	movwf	___lmul@product,c
  1653  000AD8  0E00               	movlw	0
  1654  000ADA  6E19               	movwf	___lmul@product+1,c
  1655  000ADC  0E00               	movlw	0
  1656  000ADE  6E1A               	movwf	___lmul@product+2,c
  1657  000AE0  0E00               	movlw	0
  1658  000AE2  6E1B               	movwf	___lmul@product+3,c
  1659  000AE4                     l1230:
  1660  000AE4  A010               	btfss	___lmul@multiplier,0,c
  1661  000AE6  D008               	goto	l1234
  1662  000AE8  5014               	movf	___lmul@multiplicand,w,c
  1663  000AEA  2618               	addwf	___lmul@product,f,c
  1664  000AEC  5015               	movf	___lmul@multiplicand+1,w,c
  1665  000AEE  2219               	addwfc	___lmul@product+1,f,c
  1666  000AF0  5016               	movf	___lmul@multiplicand+2,w,c
  1667  000AF2  221A               	addwfc	___lmul@product+2,f,c
  1668  000AF4  5017               	movf	___lmul@multiplicand+3,w,c
  1669  000AF6  221B               	addwfc	___lmul@product+3,f,c
  1670  000AF8                     l1234:
  1671  000AF8  90D8               	bcf	status,0,c
  1672  000AFA  3614               	rlcf	___lmul@multiplicand,f,c
  1673  000AFC  3615               	rlcf	___lmul@multiplicand+1,f,c
  1674  000AFE  3616               	rlcf	___lmul@multiplicand+2,f,c
  1675  000B00  3617               	rlcf	___lmul@multiplicand+3,f,c
  1676  000B02  90D8               	bcf	status,0,c
  1677  000B04  3213               	rrcf	___lmul@multiplier+3,f,c
  1678  000B06  3212               	rrcf	___lmul@multiplier+2,f,c
  1679  000B08  3211               	rrcf	___lmul@multiplier+1,f,c
  1680  000B0A  3210               	rrcf	___lmul@multiplier,f,c
  1681  000B0C  5010               	movf	___lmul@multiplier,w,c
  1682  000B0E  1011               	iorwf	___lmul@multiplier+1,w,c
  1683  000B10  1012               	iorwf	___lmul@multiplier+2,w,c
  1684  000B12  1013               	iorwf	___lmul@multiplier+3,w,c
  1685  000B14  A4D8               	btfss	status,2,c
  1686  000B16  D7E6               	goto	l1230
  1687  000B18  C018  F010         	movff	___lmul@product,?___lmul
  1688  000B1C  C019  F011         	movff	___lmul@product+1,?___lmul+1
  1689  000B20  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  1690  000B24  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  1691  000B28  0012               	return		;funcret
  1692  000B2A                     __end_of___lmul:
  1693                           	opt stack 0
  1694                           tosu	equ	0xFFF
  1695                           tosh	equ	0xFFE
  1696                           tosl	equ	0xFFD
  1697                           pclath	equ	0xFFA
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           prodh	equ	0xFF4
  1703                           prodl	equ	0xFF3
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postinc1	equ	0xFE6
  1707                           fsr1h	equ	0xFE2
  1708                           fsr1l	equ	0xFE1
  1709                           indf2	equ	0xFDF
  1710                           postinc2	equ	0xFDE
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function ___lldiv *****************
  1716 ;; Defined at:
  1717 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  dividend        4   27[COMRAM] unsigned long 
  1720 ;;  divisor         4   31[COMRAM] unsigned long 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;  quotient        4   35[COMRAM] unsigned long 
  1723 ;;  counter         1   39[COMRAM] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  4   27[COMRAM] unsigned long 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1733 ;;      Params:         8       0       0       0       0       0       0
  1734 ;;      Locals:         5       0       0       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0
  1736 ;;      Totals:        13       0       0       0       0       0       0
  1737 ;;Total ram usage:       13 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_SpeedCalcManage
  1744 ;;		_GetAvgSpeed
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text13
  1749  000994                     __ptext13:
  1750                           	opt stack 0
  1751  000994                     ___lldiv:
  1752                           	opt stack 24
  1753                           
  1754                           ;incstack = 0
  1755  000994  0E00               	movlw	0
  1756  000996  6E24               	movwf	___lldiv@quotient,c
  1757  000998  0E00               	movlw	0
  1758  00099A  6E25               	movwf	___lldiv@quotient+1,c
  1759  00099C  0E00               	movlw	0
  1760  00099E  6E26               	movwf	___lldiv@quotient+2,c
  1761  0009A0  0E00               	movlw	0
  1762  0009A2  6E27               	movwf	___lldiv@quotient+3,c
  1763  0009A4  5020               	movf	___lldiv@divisor,w,c
  1764  0009A6  1021               	iorwf	___lldiv@divisor+1,w,c
  1765  0009A8  1022               	iorwf	___lldiv@divisor+2,w,c
  1766  0009AA  1023               	iorwf	___lldiv@divisor+3,w,c
  1767  0009AC  B4D8               	btfsc	status,2,c
  1768  0009AE  D02A               	goto	l622
  1769  0009B0  0E01               	movlw	1
  1770  0009B2  6E28               	movwf	___lldiv@counter,c
  1771  0009B4  D006               	goto	l1246
  1772  0009B6                     l1244:
  1773  0009B6  90D8               	bcf	status,0,c
  1774  0009B8  3620               	rlcf	___lldiv@divisor,f,c
  1775  0009BA  3621               	rlcf	___lldiv@divisor+1,f,c
  1776  0009BC  3622               	rlcf	___lldiv@divisor+2,f,c
  1777  0009BE  3623               	rlcf	___lldiv@divisor+3,f,c
  1778  0009C0  2A28               	incf	___lldiv@counter,f,c
  1779  0009C2                     l1246:
  1780  0009C2  AE23               	btfss	___lldiv@divisor+3,7,c
  1781  0009C4  D7F8               	goto	l1244
  1782  0009C6                     l1248:
  1783  0009C6  90D8               	bcf	status,0,c
  1784  0009C8  3624               	rlcf	___lldiv@quotient,f,c
  1785  0009CA  3625               	rlcf	___lldiv@quotient+1,f,c
  1786  0009CC  3626               	rlcf	___lldiv@quotient+2,f,c
  1787  0009CE  3627               	rlcf	___lldiv@quotient+3,f,c
  1788  0009D0  5020               	movf	___lldiv@divisor,w,c
  1789  0009D2  5C1C               	subwf	___lldiv@dividend,w,c
  1790  0009D4  5021               	movf	___lldiv@divisor+1,w,c
  1791  0009D6  581D               	subwfb	___lldiv@dividend+1,w,c
  1792  0009D8  5022               	movf	___lldiv@divisor+2,w,c
  1793  0009DA  581E               	subwfb	___lldiv@dividend+2,w,c
  1794  0009DC  5023               	movf	___lldiv@divisor+3,w,c
  1795  0009DE  581F               	subwfb	___lldiv@dividend+3,w,c
  1796  0009E0  A0D8               	btfss	status,0,c
  1797  0009E2  D009               	goto	l1256
  1798  0009E4  5020               	movf	___lldiv@divisor,w,c
  1799  0009E6  5E1C               	subwf	___lldiv@dividend,f,c
  1800  0009E8  5021               	movf	___lldiv@divisor+1,w,c
  1801  0009EA  5A1D               	subwfb	___lldiv@dividend+1,f,c
  1802  0009EC  5022               	movf	___lldiv@divisor+2,w,c
  1803  0009EE  5A1E               	subwfb	___lldiv@dividend+2,f,c
  1804  0009F0  5023               	movf	___lldiv@divisor+3,w,c
  1805  0009F2  5A1F               	subwfb	___lldiv@dividend+3,f,c
  1806  0009F4  8024               	bsf	___lldiv@quotient,0,c
  1807  0009F6                     l1256:
  1808  0009F6  90D8               	bcf	status,0,c
  1809  0009F8  3223               	rrcf	___lldiv@divisor+3,f,c
  1810  0009FA  3222               	rrcf	___lldiv@divisor+2,f,c
  1811  0009FC  3221               	rrcf	___lldiv@divisor+1,f,c
  1812  0009FE  3220               	rrcf	___lldiv@divisor,f,c
  1813  000A00  2E28               	decfsz	___lldiv@counter,f,c
  1814  000A02  D7E1               	goto	l1248
  1815  000A04                     l622:
  1816  000A04  C024  F01C         	movff	___lldiv@quotient,?___lldiv
  1817  000A08  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
  1818  000A0C  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
  1819  000A10  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
  1820  000A14  0012               	return		;funcret
  1821  000A16                     __end_of___lldiv:
  1822                           	opt stack 0
  1823                           tosu	equ	0xFFF
  1824                           tosh	equ	0xFFE
  1825                           tosl	equ	0xFFD
  1826                           pclath	equ	0xFFA
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postinc1	equ	0xFE6
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           indf2	equ	0xFDF
  1839                           postinc2	equ	0xFDE
  1840                           fsr2h	equ	0xFDA
  1841                           fsr2l	equ	0xFD9
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _BCDsendNumber *****************
  1845 ;; Defined at:
  1846 ;;		line 25 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  Number          2   22[COMRAM] unsigned short 
  1849 ;;  DecimalPlace    1   24[COMRAM] unsigned char 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  Buffer          2   31[COMRAM] unsigned short 
  1852 ;;  Output          2   29[COMRAM] unsigned short 
  1853 ;;  Link            2   27[COMRAM] unsigned short 
  1854 ;;  LoopIndex       1   33[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1864 ;;      Params:         3       0       0       0       0       0       0
  1865 ;;      Locals:         7       0       0       0       0       0       0
  1866 ;;      Temps:          2       0       0       0       0       0       0
  1867 ;;      Totals:        12       0       0       0       0       0       0
  1868 ;;Total ram usage:       12 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    4
  1871 ;; This function calls:
  1872 ;;		___lwdiv
  1873 ;;		___wmul
  1874 ;; This function is called by:
  1875 ;;		_APP_MANAGE
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text14
  1880  00060E                     __ptext14:
  1881                           	opt stack 0
  1882  00060E                     _BCDsendNumber:
  1883                           	opt stack 23
  1884                           
  1885                           ;BCDdisplay.c: 27: unsigned short Link,Output,Buffer;
  1886                           ;BCDdisplay.c: 28: unsigned char LoopIndex;
  1887                           ;BCDdisplay.c: 31: Buffer = Number;
  1888                           
  1889                           ;incstack = 0
  1890  00060E  C017  F020         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  1891  000612  C018  F021         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  1892                           
  1893                           ;BCDdisplay.c: 32: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  1894  000616  0E00               	movlw	0
  1895  000618  6E22               	movwf	BCDsendNumber@LoopIndex,c
  1896  00061A                     l1304:
  1897  00061A  0E03               	movlw	3
  1898  00061C  6422               	cpfsgt	BCDsendNumber@LoopIndex,c
  1899  00061E  D001               	goto	l1308
  1900  000620  D05C               	goto	l1328
  1901  000622                     l1308:
  1902                           
  1903                           ;BCDdisplay.c: 33: {
  1904                           ;BCDdisplay.c: 34: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  1905  000622  5020               	movf	BCDsendNumber@Buffer,w,c
  1906  000624  1021               	iorwf	BCDsendNumber@Buffer+1,w,c
  1907  000626  A4D8               	btfss	status,2,c
  1908  000628  D004               	goto	l29
  1909  00062A  5022               	movf	BCDsendNumber@LoopIndex,w,c
  1910  00062C  5C19               	subwf	BCDsendNumber@DecimalPlace,w,c
  1911  00062E  A0D8               	btfss	status,0,c
  1912  000630  D02D               	goto	l1318
  1913  000632                     l29:
  1914                           
  1915                           ;BCDdisplay.c: 35: {
  1916                           ;BCDdisplay.c: 36: Link = Buffer;
  1917  000632  C020  F01C         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  1918  000636  C021  F01D         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  1919                           
  1920                           ;BCDdisplay.c: 37: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  1921  00063A  C020  F010         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  1922  00063E  C021  F011         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  1923  000642  0E00               	movlw	0
  1924  000644  6E13               	movwf	___lwdiv@divisor+1,c
  1925  000646  0E0A               	movlw	10
  1926  000648  6E12               	movwf	___lwdiv@divisor,c
  1927  00064A  ECBF  F005         	call	___lwdiv	;wreg free
  1928  00064E  C010  F020         	movff	?___lwdiv,BCDsendNumber@Buffer
  1929  000652  C011  F021         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  1930                           
  1931                           ;BCDdisplay.c: 38: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  1932  000656  C020  F010         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  1933  00065A  C021  F011         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  1934  00065E  0E00               	movlw	0
  1935  000660  6E13               	movwf	___wmul@multiplicand+1,c
  1936  000662  0E0A               	movlw	10
  1937  000664  6E12               	movwf	___wmul@multiplicand,c
  1938  000666  EC90  F006         	call	___wmul	;wreg free
  1939  00066A  1E10               	comf	?___wmul,f,c
  1940  00066C  1E11               	comf	?___wmul+1,f,c
  1941  00066E  4A10               	infsnz	?___wmul,f,c
  1942  000670  2A11               	incf	?___wmul+1,f,c
  1943  000672  501C               	movf	BCDsendNumber@Link,w,c
  1944  000674  2410               	addwf	?___wmul,w,c
  1945  000676  6E1E               	movwf	BCDsendNumber@Output,c
  1946  000678  501D               	movf	BCDsendNumber@Link+1,w,c
  1947  00067A  2011               	addwfc	?___wmul+1,w,c
  1948  00067C  6E1F               	movwf	BCDsendNumber@Output+1,c
  1949                           
  1950                           ;BCDdisplay.c: 40: BCDNumber[LoopIndex] = SevenSegmentMAP[Output];
  1951  00067E  0E01               	movlw	low _SevenSegmentMAP
  1952  000680  241E               	addwf	BCDsendNumber@Output,w,c
  1953  000682  6EF6               	movwf	tblptrl,c
  1954  000684  0E06               	movlw	high _SevenSegmentMAP
  1955  000686  201F               	addwfc	BCDsendNumber@Output+1,w,c
  1956  000688  6EF7               	movwf	tblptrh,c
  1957  00068A                     	if	0	;There are less than 3 active tblptr bytes
  1958  00068A  D008               	goto	L2
  1959  00068C                     l1318:
  1960                           
  1961                           ;BCDdisplay.c: 42: else if (LoopIndex <= DecimalPlace)
  1962  00068C  5022               	movf	BCDsendNumber@LoopIndex,w,c
  1963  00068E  5C19               	subwf	BCDsendNumber@DecimalPlace,w,c
  1964  000690  A0D8               	btfss	status,0,c
  1965  000692  D015               	goto	l1322
  1966                           
  1967                           ;BCDdisplay.c: 43: {
  1968                           ;BCDdisplay.c: 44: BCDNumber[LoopIndex] = SevenSegmentMAP[0];
  1969  000694  0E01               	movlw	low _SevenSegmentMAP
  1970  000696  6EF6               	movwf	tblptrl,c
  1971  000698                     	if	1	;There is more than 1 active tblptr byte
  1972  000698  0E06               	movlw	high _SevenSegmentMAP
  1973  00069A  6EF7               	movwf	tblptrh,c
  1974  00069C                     	endif
  1975  00069C                     	if	0	;There are less than 3 active tblptr bytes
  1976  00069C                     L2:
  1977  00069C                     	endif
  1978  00069C  0008               	tblrd		*
  1979  00069E  50F5               	movf	tablat,w,c
  1980  0006A0  6E1A               	movwf	??_BCDsendNumber& (0+255),c
  1981  0006A2  6A1B               	clrf	(??_BCDsendNumber+1)& (0+255),c
  1982  0006A4  5022               	movf	BCDsendNumber@LoopIndex,w,c
  1983  0006A6  0D02               	mullw	2
  1984  0006A8  0E48               	movlw	low _BCDNumber
  1985  0006AA  24F3               	addwf	prodl,w,c
  1986  0006AC  6ED9               	movwf	fsr2l,c
  1987  0006AE  0E00               	movlw	high _BCDNumber
  1988  0006B0  20F4               	addwfc	prodh,w,c
  1989  0006B2  6EDA               	movwf	fsr2h,c
  1990  0006B4  C01A  FFDE         	movff	??_BCDsendNumber,postinc2
  1991  0006B8  C01B  FFDD         	movff	??_BCDsendNumber+1,postdec2
  1992                           
  1993                           ;BCDdisplay.c: 45: }
  1994  0006BC  D00C               	goto	l1324
  1995  0006BE                     l1322:
  1996                           
  1997                           ;BCDdisplay.c: 46: else
  1998                           ;BCDdisplay.c: 47: {
  1999                           ;BCDdisplay.c: 48: BCDNumber[LoopIndex] = 0x0;
  2000  0006BE  5022               	movf	BCDsendNumber@LoopIndex,w,c
  2001  0006C0  0D02               	mullw	2
  2002  0006C2  0E48               	movlw	low _BCDNumber
  2003  0006C4  24F3               	addwf	prodl,w,c
  2004  0006C6  6ED9               	movwf	fsr2l,c
  2005  0006C8  0E00               	movlw	high _BCDNumber
  2006  0006CA  20F4               	addwfc	prodh,w,c
  2007  0006CC  6EDA               	movwf	fsr2h,c
  2008  0006CE  0E00               	movlw	0
  2009  0006D0  6EDE               	movwf	postinc2,c
  2010  0006D2  0E00               	movlw	0
  2011  0006D4  6EDD               	movwf	postdec2,c
  2012  0006D6                     l1324:
  2013  0006D6  2A22               	incf	BCDsendNumber@LoopIndex,f,c
  2014  0006D8  D7A0               	goto	l1304
  2015  0006DA                     l1328:
  2016                           
  2017                           ;BCDdisplay.c: 49: }
  2018                           ;BCDdisplay.c: 50: }
  2019                           ;BCDdisplay.c: 51: if(DecimalPlace != (unsigned char)0)
  2020  0006DA  5019               	movf	BCDsendNumber@DecimalPlace,w,c
  2021  0006DC  B4D8               	btfsc	status,2,c
  2022  0006DE  0012               	return	
  2023                           
  2024                           ;BCDdisplay.c: 52: {
  2025                           ;BCDdisplay.c: 53: BCDNumber[DecimalPlace] |= SevenSegmentMAP[10];
  2026  0006E0  5019               	movf	BCDsendNumber@DecimalPlace,w,c
  2027  0006E2  0D02               	mullw	2
  2028  0006E4  0E48               	movlw	low _BCDNumber
  2029  0006E6  24F3               	addwf	prodl,w,c
  2030  0006E8  6ED9               	movwf	fsr2l,c
  2031  0006EA  0E00               	movlw	high _BCDNumber
  2032  0006EC  20F4               	addwfc	prodh,w,c
  2033  0006EE  6EDA               	movwf	fsr2h,c
  2034  0006F0  0E0B               	movlw	low (_SevenSegmentMAP+10)
  2035  0006F2  6EF6               	movwf	tblptrl,c
  2036  0006F4  0E06               	movlw	high (_SevenSegmentMAP+10)
  2037  0006F6  6EF7               	movwf	tblptrh,c
  2038  0006F8                     	if	0	;tblptru may be non-zero
  2039  0006F8                     	endif
  2040  0006F8                     	if	0	;tblptru may be non-zero
  2041  0006F8                     	endif
  2042  0006F8  0008               	tblrd		*
  2043  0006FA  50F5               	movf	tablat,w,c
  2044  0006FC  12DE               	iorwf	postinc2,f,c
  2045  0006FE  0E00               	movlw	0
  2046  000700  12DD               	iorwf	postdec2,f,c
  2047  000702  0012               	return	
  2048  000704                     __end_of_BCDsendNumber:
  2049                           	opt stack 0
  2050                           tosu	equ	0xFFF
  2051                           tosh	equ	0xFFE
  2052                           tosl	equ	0xFFD
  2053                           pclath	equ	0xFFA
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postinc1	equ	0xFE6
  2063                           fsr1h	equ	0xFE2
  2064                           fsr1l	equ	0xFE1
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function ___wmul *****************
  2073 ;; Defined at:
  2074 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  multiplier      2   15[COMRAM] unsigned int 
  2077 ;;  multiplicand    2   17[COMRAM] unsigned int 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  product         2   19[COMRAM] unsigned int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2   15[COMRAM] unsigned int 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, prodl, prodh
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2089 ;;      Params:         4       0       0       0       0       0       0
  2090 ;;      Locals:         2       0       0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0
  2092 ;;      Totals:         6       0       0       0       0       0       0
  2093 ;;Total ram usage:        6 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    3
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_APP_MANAGE
  2100 ;;		_BCDsendNumber
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text15
  2105  000D20                     __ptext15:
  2106                           	opt stack 0
  2107  000D20                     ___wmul:
  2108                           	opt stack 24
  2109                           
  2110                           ;incstack = 0
  2111  000D20  5010               	movf	___wmul@multiplier,w,c
  2112  000D22  0212               	mulwf	___wmul@multiplicand,c
  2113  000D24  CFF3 F014          	movff	prodl,___wmul@product
  2114  000D28  CFF4 F015          	movff	prodh,___wmul@product+1
  2115  000D2C  5010               	movf	___wmul@multiplier,w,c
  2116  000D2E  0213               	mulwf	___wmul@multiplicand+1,c
  2117  000D30  50F3               	movf	prodl,w,c
  2118  000D32  2615               	addwf	___wmul@product+1,f,c
  2119  000D34  5011               	movf	___wmul@multiplier+1,w,c
  2120  000D36  0212               	mulwf	___wmul@multiplicand,c
  2121  000D38  50F3               	movf	prodl,w,c
  2122  000D3A  2615               	addwf	___wmul@product+1,f,c
  2123  000D3C  C014  F010         	movff	___wmul@product,?___wmul
  2124  000D40  C015  F011         	movff	___wmul@product+1,?___wmul+1
  2125  000D44  0012               	return	
  2126  000D46                     __end_of___wmul:
  2127                           	opt stack 0
  2128                           tosu	equ	0xFFF
  2129                           tosh	equ	0xFFE
  2130                           tosl	equ	0xFFD
  2131                           pclath	equ	0xFFA
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           prodh	equ	0xFF4
  2137                           prodl	equ	0xFF3
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           postinc1	equ	0xFE6
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function ___lwdiv *****************
  2151 ;; Defined at:
  2152 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  dividend        2   15[COMRAM] unsigned int 
  2155 ;;  divisor         2   17[COMRAM] unsigned int 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  quotient        2   19[COMRAM] unsigned int 
  2158 ;;  counter         1   21[COMRAM] unsigned char 
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  2   15[COMRAM] unsigned int 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         4       0       0       0       0       0       0
  2169 ;;      Locals:         3       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         7       0       0       0       0       0       0
  2172 ;;Total ram usage:        7 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    3
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_BCDsendNumber
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text16
  2183  000B7E                     __ptext16:
  2184                           	opt stack 0
  2185  000B7E                     ___lwdiv:
  2186                           	opt stack 23
  2187                           
  2188                           ;incstack = 0
  2189  000B7E  0E00               	movlw	0
  2190  000B80  6E15               	movwf	___lwdiv@quotient+1,c
  2191  000B82  0E00               	movlw	0
  2192  000B84  6E14               	movwf	___lwdiv@quotient,c
  2193  000B86  5012               	movf	___lwdiv@divisor,w,c
  2194  000B88  1013               	iorwf	___lwdiv@divisor+1,w,c
  2195  000B8A  B4D8               	btfsc	status,2,c
  2196  000B8C  D01C               	goto	l675
  2197  000B8E  0E01               	movlw	1
  2198  000B90  6E16               	movwf	___lwdiv@counter,c
  2199  000B92  D004               	goto	l1268
  2200  000B94                     l1266:
  2201  000B94  90D8               	bcf	status,0,c
  2202  000B96  3612               	rlcf	___lwdiv@divisor,f,c
  2203  000B98  3613               	rlcf	___lwdiv@divisor+1,f,c
  2204  000B9A  2A16               	incf	___lwdiv@counter,f,c
  2205  000B9C                     l1268:
  2206  000B9C  AE13               	btfss	___lwdiv@divisor+1,7,c
  2207  000B9E  D7FA               	goto	l1266
  2208  000BA0                     l1270:
  2209  000BA0  90D8               	bcf	status,0,c
  2210  000BA2  3614               	rlcf	___lwdiv@quotient,f,c
  2211  000BA4  3615               	rlcf	___lwdiv@quotient+1,f,c
  2212  000BA6  5012               	movf	___lwdiv@divisor,w,c
  2213  000BA8  5C10               	subwf	___lwdiv@dividend,w,c
  2214  000BAA  5013               	movf	___lwdiv@divisor+1,w,c
  2215  000BAC  5811               	subwfb	___lwdiv@dividend+1,w,c
  2216  000BAE  A0D8               	btfss	status,0,c
  2217  000BB0  D005               	goto	l1278
  2218  000BB2  5012               	movf	___lwdiv@divisor,w,c
  2219  000BB4  5E10               	subwf	___lwdiv@dividend,f,c
  2220  000BB6  5013               	movf	___lwdiv@divisor+1,w,c
  2221  000BB8  5A11               	subwfb	___lwdiv@dividend+1,f,c
  2222  000BBA  8014               	bsf	___lwdiv@quotient,0,c
  2223  000BBC                     l1278:
  2224  000BBC  90D8               	bcf	status,0,c
  2225  000BBE  3213               	rrcf	___lwdiv@divisor+1,f,c
  2226  000BC0  3212               	rrcf	___lwdiv@divisor,f,c
  2227  000BC2  2E16               	decfsz	___lwdiv@counter,f,c
  2228  000BC4  D7ED               	goto	l1270
  2229  000BC6                     l675:
  2230  000BC6  C014  F010         	movff	___lwdiv@quotient,?___lwdiv
  2231  000BCA  C015  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2232  000BCE  0012               	return		;funcret
  2233  000BD0                     __end_of___lwdiv:
  2234                           	opt stack 0
  2235                           tosu	equ	0xFFF
  2236                           tosh	equ	0xFFE
  2237                           tosl	equ	0xFFD
  2238                           pclath	equ	0xFFA
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           postinc1	equ	0xFE6
  2248                           fsr1h	equ	0xFE2
  2249                           fsr1l	equ	0xFE1
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _BCDManage7segment *****************
  2258 ;; Defined at:
  2259 ;;		line 57 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2273 ;;      Params:         0       0       0       0       0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0
  2275 ;;      Temps:          3       0       0       0       0       0       0
  2276 ;;      Totals:         3       0       0       0       0       0       0
  2277 ;;Total ram usage:        3 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    4
  2280 ;; This function calls:
  2281 ;;		_HWI_4Digit_WRITE
  2282 ;;		_HWI_8Digit_WRITE
  2283 ;; This function is called by:
  2284 ;;		_DisplayAlphaNumeric
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text17
  2289  000BD0                     __ptext17:
  2290                           	opt stack 0
  2291  000BD0                     _BCDManage7segment:
  2292                           	opt stack 24
  2293                           
  2294                           ;BCDdisplay.c: 59: static unsigned char DigitIndex = (unsigned char)0;
  2295                           ;BCDdisplay.c: 62: HWI_4Digit_WRITE(0,(~((unsigned char) 0x8 >> DigitIndex)));
  2296                           
  2297                           ;incstack = 0
  2298  000BD0  C05D  F012         	movff	BCDManage7segment@DigitIndex,??_BCDManage7segment
  2299  000BD4  0E08               	movlw	8
  2300  000BD6  6E13               	movwf	(??_BCDManage7segment+1)& (0+255),c
  2301  000BD8  0E00               	movlw	0
  2302  000BDA  6E14               	movwf	(??_BCDManage7segment+2)& (0+255),c
  2303  000BDC  2A12               	incf	??_BCDManage7segment,f,c
  2304  000BDE  D003               	goto	u534
  2305  000BE0                     u535:
  2306  000BE0  3414               	rlcf	??_BCDManage7segment+2,w,c
  2307  000BE2  3214               	rrcf	??_BCDManage7segment+2,f,c
  2308  000BE4  3213               	rrcf	??_BCDManage7segment+1,f,c
  2309  000BE6                     u534:
  2310  000BE6  2E12               	decfsz	??_BCDManage7segment,f,c
  2311  000BE8  D7FB               	goto	u535
  2312  000BEA  5013               	movf	??_BCDManage7segment+1,w,c
  2313  000BEC  0AFF               	xorlw	255
  2314  000BEE  6E10               	movwf	HWI_4Digit_WRITE@value,c
  2315  000BF0  0E00               	movlw	0
  2316  000BF2  EC4C  F006         	call	_HWI_4Digit_WRITE
  2317                           
  2318                           ;BCDdisplay.c: 63: HWI_8Digit_WRITE(1,BCDNumber[DigitIndex]);
  2319  000BF6  505D               	movf	BCDManage7segment@DigitIndex,w,c
  2320  000BF8  0D02               	mullw	2
  2321  000BFA  0E48               	movlw	low _BCDNumber
  2322  000BFC  24F3               	addwf	prodl,w,c
  2323  000BFE  6ED9               	movwf	fsr2l,c
  2324  000C00  0E00               	movlw	high _BCDNumber
  2325  000C02  20F4               	addwfc	prodh,w,c
  2326  000C04  6EDA               	movwf	fsr2h,c
  2327  000C06  50DF               	movf	indf2,w,c
  2328  000C08  6E10               	movwf	HWI_8Digit_WRITE@value,c
  2329  000C0A  0E01               	movlw	1
  2330  000C0C  ECA3  F006         	call	_HWI_8Digit_WRITE
  2331                           
  2332                           ;BCDdisplay.c: 70: DigitIndex ++;
  2333  000C10  2A5D               	incf	BCDManage7segment@DigitIndex,f,c
  2334                           
  2335                           ;BCDdisplay.c: 71: if(DigitIndex == 4)
  2336  000C12  0E04               	movlw	4
  2337  000C14  185D               	xorwf	BCDManage7segment@DigitIndex,w,c
  2338  000C16  A4D8               	btfss	status,2,c
  2339  000C18  0012               	return	
  2340                           
  2341                           ;BCDdisplay.c: 72: {
  2342                           ;BCDdisplay.c: 73: DigitIndex = (unsigned char)0;
  2343  000C1A  0E00               	movlw	0
  2344  000C1C  6E5D               	movwf	BCDManage7segment@DigitIndex,c
  2345  000C1E  0012               	return	
  2346  000C20                     __end_of_BCDManage7segment:
  2347                           	opt stack 0
  2348                           tosu	equ	0xFFF
  2349                           tosh	equ	0xFFE
  2350                           tosl	equ	0xFFD
  2351                           pclath	equ	0xFFA
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           postinc1	equ	0xFE6
  2361                           fsr1h	equ	0xFE2
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           postinc2	equ	0xFDE
  2365                           postdec2	equ	0xFDD
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _HWI_8Digit_WRITE *****************
  2371 ;; Defined at:
  2372 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  port            1    wreg     unsigned char 
  2375 ;;  value           1   15[COMRAM] unsigned char 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  port            1   16[COMRAM] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2387 ;;      Params:         1       0       0       0       0       0       0
  2388 ;;      Locals:         1       0       0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0
  2390 ;;      Totals:         2       0       0       0       0       0       0
  2391 ;;Total ram usage:        2 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    3
  2394 ;; This function calls:
  2395 ;;		Nothing
  2396 ;; This function is called by:
  2397 ;;		_BCDManage7segment
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text18
  2402  000D46                     __ptext18:
  2403                           	opt stack 0
  2404  000D46                     _HWI_8Digit_WRITE:
  2405                           	opt stack 24
  2406                           
  2407                           ;incstack = 0
  2408                           ;HWI_8Digit_WRITE@port stored from wreg
  2409  000D46  6E11               	movwf	HWI_8Digit_WRITE@port,c
  2410                           
  2411                           ;HWI_DIGITAL.c: 43: switch (port)
  2412  000D48  D009               	goto	l1344
  2413  000D4A                     l160:
  2414                           
  2415                           ;HWI_DIGITAL.c: 46: PORTC = value;
  2416  000D4A  C010  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  2417                           
  2418                           ;HWI_DIGITAL.c: 47: break;
  2419  000D4E  0012               	return	
  2420  000D50                     l162:
  2421                           
  2422                           ;HWI_DIGITAL.c: 49: PORTD = value;
  2423  000D50  C010  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2424                           
  2425                           ;HWI_DIGITAL.c: 50: break;
  2426  000D54  0012               	return	
  2427  000D56                     l163:
  2428                           
  2429                           ;HWI_DIGITAL.c: 52: PORTD = value;
  2430  000D56  C010  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  2431                           
  2432                           ;HWI_DIGITAL.c: 53: }
  2433  000D5A  0012               	return	
  2434  000D5C                     l1344:
  2435  000D5C  5011               	movf	HWI_8Digit_WRITE@port,w,c
  2436                           
  2437                           ; Switch size 1, requested type "space"
  2438                           ; Number of cases is 2, Range of values is 0 to 1
  2439                           ; switch strategies available:
  2440                           ; Name         Instructions Cycles
  2441                           ; simple_byte            7     4 (average)
  2442                           ;	Chosen strategy is simple_byte
  2443  000D5E  0A00               	xorlw	0	; case 0
  2444  000D60  B4D8               	btfsc	status,2,c
  2445  000D62  D7F3               	goto	l160
  2446  000D64  0A01               	xorlw	1	; case 1
  2447  000D66  B4D8               	btfsc	status,2,c
  2448  000D68  D7F3               	goto	l162
  2449  000D6A  D7F5               	goto	l163
  2450  000D6C                     __end_of_HWI_8Digit_WRITE:
  2451                           	opt stack 0
  2452                           tosu	equ	0xFFF
  2453                           tosh	equ	0xFFE
  2454                           tosl	equ	0xFFD
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postinc1	equ	0xFE6
  2465                           fsr1h	equ	0xFE2
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _HWI_4Digit_WRITE *****************
  2475 ;; Defined at:
  2476 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  port            1    wreg     unsigned char 
  2479 ;;  value           1   15[COMRAM] unsigned char 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  port            1   16[COMRAM] unsigned char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2491 ;;      Params:         1       0       0       0       0       0       0
  2492 ;;      Locals:         1       0       0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0
  2494 ;;      Totals:         2       0       0       0       0       0       0
  2495 ;;Total ram usage:        2 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    3
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_BCDManage7segment
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text19
  2506  000C98                     __ptext19:
  2507                           	opt stack 0
  2508  000C98                     _HWI_4Digit_WRITE:
  2509                           	opt stack 24
  2510                           
  2511                           ;incstack = 0
  2512                           ;HWI_4Digit_WRITE@port stored from wreg
  2513  000C98  6E11               	movwf	HWI_4Digit_WRITE@port,c
  2514                           
  2515                           ;HWI_DIGITAL.c: 10: switch (port)
  2516  000C9A  D00F               	goto	l1340
  2517  000C9C                     l1334:
  2518                           
  2519                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  2520  000C9C  508B               	movf	3979,w,c	;volatile
  2521  000C9E  0BF0               	andlw	240
  2522  000CA0  1010               	iorwf	HWI_4Digit_WRITE@value,w,c
  2523  000CA2  6E82               	movwf	3970,c	;volatile
  2524                           
  2525                           ;HWI_DIGITAL.c: 14: break;
  2526  000CA4  0012               	return	
  2527  000CA6                     l1336:
  2528                           
  2529                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  2530  000CA6  508C               	movf	3980,w,c	;volatile
  2531  000CA8  0BF0               	andlw	240
  2532  000CAA  1010               	iorwf	HWI_4Digit_WRITE@value,w,c
  2533  000CAC  6E83               	movwf	3971,c	;volatile
  2534                           
  2535                           ;HWI_DIGITAL.c: 17: break;
  2536  000CAE  0012               	return	
  2537  000CB0                     l1338:
  2538                           
  2539                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  2540  000CB0  508C               	movf	3980,w,c	;volatile
  2541  000CB2  0BF0               	andlw	240
  2542  000CB4  1010               	iorwf	HWI_4Digit_WRITE@value,w,c
  2543  000CB6  6E83               	movwf	3971,c	;volatile
  2544                           
  2545                           ;HWI_DIGITAL.c: 20: }
  2546  000CB8  0012               	return	
  2547  000CBA                     l1340:
  2548  000CBA  5011               	movf	HWI_4Digit_WRITE@port,w,c
  2549                           
  2550                           ; Switch size 1, requested type "space"
  2551                           ; Number of cases is 2, Range of values is 0 to 1
  2552                           ; switch strategies available:
  2553                           ; Name         Instructions Cycles
  2554                           ; simple_byte            7     4 (average)
  2555                           ;	Chosen strategy is simple_byte
  2556  000CBC  0A00               	xorlw	0	; case 0
  2557  000CBE  B4D8               	btfsc	status,2,c
  2558  000CC0  D7ED               	goto	l1334
  2559  000CC2  0A01               	xorlw	1	; case 1
  2560  000CC4  B4D8               	btfsc	status,2,c
  2561  000CC6  D7EF               	goto	l1336
  2562  000CC8  D7F3               	goto	l1338
  2563  000CCA                     __end_of_HWI_4Digit_WRITE:
  2564                           	opt stack 0
  2565                           tosu	equ	0xFFF
  2566                           tosh	equ	0xFFE
  2567                           tosl	equ	0xFFD
  2568                           pclath	equ	0xFFA
  2569                           tblptru	equ	0xFF8
  2570                           tblptrh	equ	0xFF7
  2571                           tblptrl	equ	0xFF6
  2572                           tablat	equ	0xFF5
  2573                           prodh	equ	0xFF4
  2574                           prodl	equ	0xFF3
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           postinc1	equ	0xFE6
  2578                           fsr1h	equ	0xFE2
  2579                           fsr1l	equ	0xFE1
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  2588 ;; Defined at:
  2589 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2603 ;;      Params:         0       0       0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0
  2606 ;;      Totals:         0       0       0       0       0       0       0
  2607 ;;Total ram usage:        0 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    3
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_main
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text20
  2618  000C5E                     __ptext20:
  2619                           	opt stack 0
  2620  000C5E                     _HWI_INTERRUPTS_INTITALIZE:
  2621                           	opt stack 27
  2622                           
  2623                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  2624                           
  2625                           ;incstack = 0
  2626  000C5E  8093               	bsf	3987,0,c	;volatile
  2627                           
  2628                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  2629  000C60  8293               	bsf	3987,1,c	;volatile
  2630                           
  2631                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  2632  000C62  0EF0               	movlw	240
  2633  000C64  6EF2               	movwf	intcon,c	;volatile
  2634                           
  2635                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  2636  000C66  0E08               	movlw	8
  2637  000C68  6EF0               	movwf	intcon3,c	;volatile
  2638                           
  2639                           ;HWI_Interrupts.c: 18: T0CON =0b11010001;
  2640  000C6A  0ED1               	movlw	209
  2641  000C6C  6ED5               	movwf	4053,c	;volatile
  2642                           
  2643                           ;HWI_Interrupts.c: 19: T1CON =0b10000101;
  2644  000C6E  0E85               	movlw	133
  2645  000C70  6ECD               	movwf	4045,c	;volatile
  2646                           
  2647                           ;HWI_Interrupts.c: 20: T3CON =0b10011101;
  2648  000C72  0E9D               	movlw	157
  2649  000C74  6EB1               	movwf	4017,c	;volatile
  2650                           
  2651                           ;HWI_Interrupts.c: 23: INTCON2bits.INTEDG0 = 1;
  2652  000C76  8CF1               	bsf	intcon2,6,c	;volatile
  2653                           
  2654                           ;HWI_Interrupts.c: 24: INTCON2bits.INTEDG1 = 1;
  2655  000C78  8AF1               	bsf	intcon2,5,c	;volatile
  2656                           
  2657                           ;HWI_Interrupts.c: 26: TMR0L= 19;
  2658  000C7A  0E13               	movlw	19
  2659  000C7C  6ED6               	movwf	4054,c	;volatile
  2660                           
  2661                           ;HWI_Interrupts.c: 29: TMR1IF=0;
  2662  000C7E  909E               	bcf	3998,0,c	;volatile
  2663                           
  2664                           ;HWI_Interrupts.c: 30: TMR1IE=1;
  2665  000C80  809D               	bsf	3997,0,c	;volatile
  2666                           
  2667                           ;HWI_Interrupts.c: 33: TMR3IF=0;
  2668  000C82  92A1               	bcf	4001,1,c	;volatile
  2669                           
  2670                           ;HWI_Interrupts.c: 34: TMR3IE=1;
  2671  000C84  82A0               	bsf	4000,1,c	;volatile
  2672                           
  2673                           ;HWI_Interrupts.c: 37: TMR1L=0;
  2674  000C86  0E00               	movlw	0
  2675  000C88  6ECE               	movwf	4046,c	;volatile
  2676                           
  2677                           ;HWI_Interrupts.c: 38: TMR1H=0xAA;
  2678  000C8A  0EAA               	movlw	170
  2679  000C8C  6ECF               	movwf	4047,c	;volatile
  2680                           
  2681                           ;HWI_Interrupts.c: 40: TMR3L=0;
  2682  000C8E  0E00               	movlw	0
  2683  000C90  6EB2               	movwf	4018,c	;volatile
  2684                           
  2685                           ;HWI_Interrupts.c: 41: TMR3H=0;
  2686  000C92  0E00               	movlw	0
  2687  000C94  6EB3               	movwf	4019,c	;volatile
  2688  000C96  0012               	return		;funcret
  2689  000C98                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  2690                           	opt stack 0
  2691                           tosu	equ	0xFFF
  2692                           tosh	equ	0xFFE
  2693                           tosl	equ	0xFFD
  2694                           pclath	equ	0xFFA
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           intcon2	equ	0xFF1
  2703                           intcon3	equ	0xFF0
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postinc1	equ	0xFE6
  2707                           fsr1h	equ	0xFE2
  2708                           fsr1l	equ	0xFE1
  2709                           indf2	equ	0xFDF
  2710                           postinc2	equ	0xFDE
  2711                           postdec2	equ	0xFDD
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  2717 ;; Defined at:
  2718 ;;		line 74 in file "../../HWIsource/HWI_DIGITAL.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2732 ;;      Params:         0       0       0       0       0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0
  2735 ;;      Totals:         0       0       0       0       0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    3
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text21
  2747  000DCA                     __ptext21:
  2748                           	opt stack 0
  2749  000DCA                     _HWI_DIGITAL_INITIALIZE:
  2750                           	opt stack 27
  2751                           
  2752                           ;HWI_DIGITAL.c: 77: TRISD = 0x0;
  2753                           
  2754                           ;incstack = 0
  2755  000DCA  0E00               	movlw	0
  2756  000DCC  6E95               	movwf	3989,c	;volatile
  2757                           
  2758                           ;HWI_DIGITAL.c: 78: PORTD = 0x0;
  2759  000DCE  0E00               	movlw	0
  2760  000DD0  6E83               	movwf	3971,c	;volatile
  2761                           
  2762                           ;HWI_DIGITAL.c: 80: TRISC = 0x0;
  2763  000DD2  0E00               	movlw	0
  2764  000DD4  6E94               	movwf	3988,c	;volatile
  2765  000DD6  0012               	return		;funcret
  2766  000DD8                     __end_of_HWI_DIGITAL_INITIALIZE:
  2767                           	opt stack 0
  2768                           tosu	equ	0xFFF
  2769                           tosh	equ	0xFFE
  2770                           tosl	equ	0xFFD
  2771                           pclath	equ	0xFFA
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           intcon2	equ	0xFF1
  2780                           intcon3	equ	0xFF0
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postinc1	equ	0xFE6
  2784                           fsr1h	equ	0xFE2
  2785                           fsr1l	equ	0xFE1
  2786                           indf2	equ	0xFDF
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _CreateTask *****************
  2794 ;; Defined at:
  2795 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  MangeFunctio    2   15[COMRAM] PTR FTN()void 
  2798 ;;		 -> DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  2799 ;;  TaskId          1   17[COMRAM] unsigned char 
  2800 ;;  Period          1   18[COMRAM] unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         4       0       0       0       0       0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         4       0       0       0       0       0       0
  2816 ;;Total ram usage:        4 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text22
  2827  000A7C                     __ptext22:
  2828                           	opt stack 0
  2829  000A7C                     _CreateTask:
  2830                           	opt stack 27
  2831                           
  2832                           ;Scheduler.c: 8: if(TaskId < 3)
  2833                           
  2834                           ;incstack = 0
  2835  000A7C  0E03               	movlw	3
  2836  000A7E  6012               	cpfslt	CreateTask@TaskId,c
  2837  000A80  0012               	return	
  2838                           
  2839                           ;Scheduler.c: 9: {
  2840                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  2841  000A82  5012               	movf	CreateTask@TaskId,w,c
  2842  000A84  0D04               	mullw	4
  2843  000A86  0E3C               	movlw	low _ArrayTask
  2844  000A88  24F3               	addwf	prodl,w,c
  2845  000A8A  6ED9               	movwf	fsr2l,c
  2846  000A8C  0E00               	movlw	high _ArrayTask
  2847  000A8E  20F4               	addwfc	prodh,w,c
  2848  000A90  6EDA               	movwf	fsr2h,c
  2849  000A92  C010  FFDE         	movff	CreateTask@MangeFunction,postinc2
  2850  000A96  C011  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  2851                           
  2852                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  2853  000A9A  5012               	movf	CreateTask@TaskId,w,c
  2854  000A9C  0D04               	mullw	4
  2855  000A9E  0E02               	movlw	2
  2856  000AA0  26F3               	addwf	prodl,f,c
  2857  000AA2  0E00               	movlw	0
  2858  000AA4  22F4               	addwfc	prodh,f,c
  2859  000AA6  0E3C               	movlw	low _ArrayTask
  2860  000AA8  24F3               	addwf	prodl,w,c
  2861  000AAA  6ED9               	movwf	fsr2l,c
  2862  000AAC  0E00               	movlw	high _ArrayTask
  2863  000AAE  20F4               	addwfc	prodh,w,c
  2864  000AB0  6EDA               	movwf	fsr2h,c
  2865  000AB2  C013  FFDF         	movff	CreateTask@Period,indf2
  2866                           
  2867                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  2868  000AB6  5012               	movf	CreateTask@TaskId,w,c
  2869  000AB8  0D04               	mullw	4
  2870  000ABA  0E03               	movlw	3
  2871  000ABC  26F3               	addwf	prodl,f,c
  2872  000ABE  0E00               	movlw	0
  2873  000AC0  22F4               	addwfc	prodh,f,c
  2874  000AC2  0E3C               	movlw	low _ArrayTask
  2875  000AC4  24F3               	addwf	prodl,w,c
  2876  000AC6  6ED9               	movwf	fsr2l,c
  2877  000AC8  0E00               	movlw	high _ArrayTask
  2878  000ACA  20F4               	addwfc	prodh,w,c
  2879  000ACC  6EDA               	movwf	fsr2h,c
  2880  000ACE  0E00               	movlw	0
  2881  000AD0  6EDF               	movwf	indf2,c
  2882  000AD2  0012               	return	
  2883  000AD4                     __end_of_CreateTask:
  2884                           	opt stack 0
  2885                           tosu	equ	0xFFF
  2886                           tosh	equ	0xFFE
  2887                           tosl	equ	0xFFD
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           intcon2	equ	0xFF1
  2897                           intcon3	equ	0xFF0
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postinc1	equ	0xFE6
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           indf2	equ	0xFDF
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _APP_INITIALIZE *****************
  2911 ;; Defined at:
  2912 ;;		line 10 in file "../../../../Common/App/APP.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		None
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2926 ;;      Params:         0       0       0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0
  2929 ;;      Totals:         0       0       0       0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    3
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_main
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text23
  2941  000E02                     __ptext23:
  2942                           	opt stack 0
  2943  000E02                     _APP_INITIALIZE:
  2944                           	opt stack 27
  2945                           
  2946                           ;incstack = 0
  2947  000E02  0012               	return		;funcret
  2948  000E04                     __end_of_APP_INITIALIZE:
  2949                           	opt stack 0
  2950                           tosu	equ	0xFFF
  2951                           tosh	equ	0xFFE
  2952                           tosl	equ	0xFFD
  2953                           pclath	equ	0xFFA
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           prodh	equ	0xFF4
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           intcon2	equ	0xFF1
  2962                           intcon3	equ	0xFF0
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postinc1	equ	0xFE6
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _ISR *****************
  2976 ;; Defined at:
  2977 ;;		line 46 in file "../../HWIsource/HWI_Interrupts.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         0       0       0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0       0       0
  2993 ;;      Temps:         14       0       0       0       0       0       0
  2994 ;;      Totals:        14       0       0       0       0       0       0
  2995 ;;Total ram usage:       14 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    2
  2998 ;; This function calls:
  2999 ;;		_APP_ISR1
  3000 ;;		_APP_ISR2
  3001 ;;		_SchedulerTick
  3002 ;; This function is called by:
  3003 ;;		Interrupt level 2
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	intcode
  3008  000008                     __pintcode:
  3009                           	opt stack 0
  3010  000008                     _ISR:
  3011                           	opt stack 23
  3012                           
  3013                           ;incstack = 0
  3014  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3015  00000A  ED82  F003         	call	int_func,f	;refresh shadow registers
  3016                           tosu	equ	0xFFF
  3017                           tosh	equ	0xFFE
  3018                           tosl	equ	0xFFD
  3019                           pclath	equ	0xFFA
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           intcon2	equ	0xFF1
  3028                           intcon3	equ	0xFF0
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           postinc1	equ	0xFE6
  3032                           fsr1h	equ	0xFE2
  3033                           fsr1l	equ	0xFE1
  3034                           indf2	equ	0xFDF
  3035                           postinc2	equ	0xFDE
  3036                           postdec2	equ	0xFDD
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041                           	psect	intcode_body
  3042  000704                     __pintcode_body:
  3043                           	opt stack 23
  3044  000704                     int_func:
  3045                           	opt stack 23
  3046  000704  0006               	pop		; remove dummy address from shadow register refresh
  3047  000706  CFFA F002          	movff	pclath,??_ISR
  3048  00070A  CFFB F003          	movff	pclatu,??_ISR+1
  3049  00070E  CFE9 F004          	movff	fsr0l,??_ISR+2
  3050  000712  CFEA F005          	movff	fsr0h,??_ISR+3
  3051  000716  CFE1 F006          	movff	fsr1l,??_ISR+4
  3052  00071A  CFE2 F007          	movff	fsr1h,??_ISR+5
  3053  00071E  CFD9 F008          	movff	fsr2l,??_ISR+6
  3054  000722  CFDA F009          	movff	fsr2h,??_ISR+7
  3055  000726  CFF3 F00A          	movff	prodl,??_ISR+8
  3056  00072A  CFF4 F00B          	movff	prodh,??_ISR+9
  3057  00072E  CFF6 F00C          	movff	tblptrl,??_ISR+10
  3058  000732  CFF7 F00D          	movff	tblptrh,??_ISR+11
  3059  000736  CFF8 F00E          	movff	tblptru,??_ISR+12
  3060  00073A  CFF5 F00F          	movff	tablat,??_ISR+13
  3061                           
  3062                           ;HWI_Interrupts.c: 48: if(TMR0IF)
  3063  00073E  A4F2               	btfss	intcon,2,c	;volatile
  3064  000740  D005               	goto	i2l1182
  3065                           
  3066                           ;HWI_Interrupts.c: 49: {
  3067                           ;HWI_Interrupts.c: 50: TMR0IF=0;
  3068  000742  94F2               	bcf	intcon,2,c	;volatile
  3069                           
  3070                           ;HWI_Interrupts.c: 51: TMR0L=18;
  3071  000744  0E12               	movlw	18
  3072  000746  6ED6               	movwf	4054,c	;volatile
  3073                           
  3074                           ;HWI_Interrupts.c: 52: SchedulerTick();
  3075  000748  EC7B  F006         	call	_SchedulerTick	;wreg free
  3076  00074C                     i2l1182:
  3077                           
  3078                           ;HWI_Interrupts.c: 53: }
  3079                           ;HWI_Interrupts.c: 54: if(TMR3IF)
  3080  00074C  A2A1               	btfss	4001,1,c	;volatile
  3081  00074E  D005               	goto	i2l1188
  3082                           
  3083                           ;HWI_Interrupts.c: 55: {
  3084                           ;HWI_Interrupts.c: 56: TMR3IF=0;
  3085  000750  92A1               	bcf	4001,1,c	;volatile
  3086                           
  3087                           ;HWI_Interrupts.c: 57: TMR3H = 0xEF;
  3088  000752  0EEF               	movlw	239
  3089  000754  6EB3               	movwf	4019,c	;volatile
  3090                           
  3091                           ;HWI_Interrupts.c: 58: TMR3L = 0;
  3092  000756  0E00               	movlw	0
  3093  000758  6EB2               	movwf	4018,c	;volatile
  3094  00075A                     i2l1188:
  3095                           
  3096                           ;HWI_Interrupts.c: 59: }
  3097                           ;HWI_Interrupts.c: 60: if(TMR1IF)
  3098  00075A  A09E               	btfss	3998,0,c	;volatile
  3099  00075C  D005               	goto	i2l1194
  3100                           
  3101                           ;HWI_Interrupts.c: 61: {
  3102                           ;HWI_Interrupts.c: 62: TMR1IF=0;
  3103  00075E  909E               	bcf	3998,0,c	;volatile
  3104                           
  3105                           ;HWI_Interrupts.c: 63: TMR1L=0;
  3106  000760  0E00               	movlw	0
  3107  000762  6ECE               	movwf	4046,c	;volatile
  3108                           
  3109                           ;HWI_Interrupts.c: 64: TMR1H=0xAA;
  3110  000764  0EAA               	movlw	170
  3111  000766  6ECF               	movwf	4047,c	;volatile
  3112  000768                     i2l1194:
  3113                           
  3114                           ;HWI_Interrupts.c: 65: }
  3115                           ;HWI_Interrupts.c: 67: if((unsigned char)1 == INT0IF)
  3116  000768  A2F2               	btfss	intcon,1,c	;volatile
  3117  00076A  D003               	goto	i2l1200
  3118                           
  3119                           ;HWI_Interrupts.c: 68: {
  3120                           ;HWI_Interrupts.c: 69: INT0IF = 0;
  3121  00076C  92F2               	bcf	intcon,1,c	;volatile
  3122                           
  3123                           ;HWI_Interrupts.c: 70: APP_ISR1();
  3124  00076E  ECFD  F006         	call	_APP_ISR1	;wreg free
  3125  000772                     i2l1200:
  3126                           
  3127                           ;HWI_Interrupts.c: 71: }
  3128                           ;HWI_Interrupts.c: 73: if((unsigned char)1 == INT1IF)
  3129  000772  A0F0               	btfss	intcon3,0,c	;volatile
  3130  000774  D003               	goto	i2l236
  3131                           
  3132                           ;HWI_Interrupts.c: 74: {
  3133                           ;HWI_Interrupts.c: 75: INT1IF = 0;
  3134  000776  90F0               	bcf	intcon3,0,c	;volatile
  3135                           
  3136                           ;HWI_Interrupts.c: 76: APP_ISR2();
  3137  000778  ECFA  F006         	call	_APP_ISR2	;wreg free
  3138  00077C                     i2l236:
  3139  00077C  C00F  FFF5         	movff	??_ISR+13,tablat
  3140  000780  C00E  FFF8         	movff	??_ISR+12,tblptru
  3141  000784  C00D  FFF7         	movff	??_ISR+11,tblptrh
  3142  000788  C00C  FFF6         	movff	??_ISR+10,tblptrl
  3143  00078C  C00B  FFF4         	movff	??_ISR+9,prodh
  3144  000790  C00A  FFF3         	movff	??_ISR+8,prodl
  3145  000794  C009  FFDA         	movff	??_ISR+7,fsr2h
  3146  000798  C008  FFD9         	movff	??_ISR+6,fsr2l
  3147  00079C  C007  FFE2         	movff	??_ISR+5,fsr1h
  3148  0007A0  C006  FFE1         	movff	??_ISR+4,fsr1l
  3149  0007A4  C005  FFEA         	movff	??_ISR+3,fsr0h
  3150  0007A8  C004  FFE9         	movff	??_ISR+2,fsr0l
  3151  0007AC  C003  FFFB         	movff	??_ISR+1,pclatu
  3152  0007B0  C002  FFFA         	movff	??_ISR,pclath
  3153  0007B4  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3154  0007B6  0011               	retfie		f
  3155  0007B8                     __end_of_ISR:
  3156                           	opt stack 0
  3157                           tosu	equ	0xFFF
  3158                           tosh	equ	0xFFE
  3159                           tosl	equ	0xFFD
  3160                           pclatu	equ	0xFFB
  3161                           pclath	equ	0xFFA
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           intcon	equ	0xFF2
  3169                           intcon2	equ	0xFF1
  3170                           intcon3	equ	0xFF0
  3171                           postinc0	equ	0xFEE
  3172                           fsr0h	equ	0xFEA
  3173                           fsr0l	equ	0xFE9
  3174                           wreg	equ	0xFE8
  3175                           postinc1	equ	0xFE6
  3176                           fsr1h	equ	0xFE2
  3177                           fsr1l	equ	0xFE1
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _SchedulerTick *****************
  3186 ;; Defined at:
  3187 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3201 ;;      Params:         0       0       0       0       0       0       0
  3202 ;;      Locals:         1       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0
  3204 ;;      Totals:         1       0       0       0       0       0       0
  3205 ;;Total ram usage:        1 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_ISR
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text25
  3215  000CF6                     __ptext25:
  3216                           	opt stack 0
  3217  000CF6                     _SchedulerTick:
  3218                           	opt stack 24
  3219                           
  3220                           ;Scheduler.c: 18: unsigned char TaskIndex;
  3221                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 3 ; TaskIndex++)
  3222                           
  3223                           ;incstack = 0
  3224  000CF6  0E00               	movlw	0
  3225  000CF8  6E01               	movwf	SchedulerTick@TaskIndex,c
  3226  000CFA                     i2l1108:
  3227  000CFA  0E02               	movlw	2
  3228  000CFC  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  3229  000CFE  D001               	goto	i2l1112
  3230  000D00  0012               	return	
  3231  000D02                     i2l1112:
  3232                           
  3233                           ;Scheduler.c: 20: {
  3234                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  3235  000D02  5001               	movf	SchedulerTick@TaskIndex,w,c
  3236  000D04  0D04               	mullw	4
  3237  000D06  0E03               	movlw	3
  3238  000D08  26F3               	addwf	prodl,f,c
  3239  000D0A  0E00               	movlw	0
  3240  000D0C  22F4               	addwfc	prodh,f,c
  3241  000D0E  0E3C               	movlw	low _ArrayTask
  3242  000D10  24F3               	addwf	prodl,w,c
  3243  000D12  6ED9               	movwf	fsr2l,c
  3244  000D14  0E00               	movlw	high _ArrayTask
  3245  000D16  20F4               	addwfc	prodh,w,c
  3246  000D18  6EDA               	movwf	fsr2h,c
  3247  000D1A  2ADF               	incf	indf2,f,c
  3248  000D1C  2A01               	incf	SchedulerTick@TaskIndex,f,c
  3249  000D1E  D7ED               	goto	i2l1108
  3250  000D20                     __end_of_SchedulerTick:
  3251                           	opt stack 0
  3252                           tosu	equ	0xFFF
  3253                           tosh	equ	0xFFE
  3254                           tosl	equ	0xFFD
  3255                           pclatu	equ	0xFFB
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           intcon2	equ	0xFF1
  3265                           intcon3	equ	0xFF0
  3266                           postinc0	equ	0xFEE
  3267                           fsr0h	equ	0xFEA
  3268                           fsr0l	equ	0xFE9
  3269                           wreg	equ	0xFE8
  3270                           postinc1	equ	0xFE6
  3271                           fsr1h	equ	0xFE2
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _APP_ISR2 *****************
  3281 ;; Defined at:
  3282 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, status,2, status,0, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3296 ;;      Params:         0       0       0       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0
  3299 ;;      Totals:         0       0       0       0       0       0       0
  3300 ;;Total ram usage:        0 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    1
  3303 ;; This function calls:
  3304 ;;		_SensorTwoNotify
  3305 ;; This function is called by:
  3306 ;;		_ISR
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text26
  3311  000DF4                     __ptext26:
  3312                           	opt stack 0
  3313  000DF4                     _APP_ISR2:
  3314                           	opt stack 23
  3315                           
  3316                           ;AppInterrupts.c: 15: SensorTwoNotify();
  3317                           
  3318                           ;incstack = 0
  3319  000DF4  ECC5  F006         	call	_SensorTwoNotify	;wreg free
  3320  000DF8  0012               	return		;funcret
  3321  000DFA                     __end_of_APP_ISR2:
  3322                           	opt stack 0
  3323                           tosu	equ	0xFFF
  3324                           tosh	equ	0xFFE
  3325                           tosl	equ	0xFFD
  3326                           pclatu	equ	0xFFB
  3327                           pclath	equ	0xFFA
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           intcon	equ	0xFF2
  3335                           intcon2	equ	0xFF1
  3336                           intcon3	equ	0xFF0
  3337                           postinc0	equ	0xFEE
  3338                           fsr0h	equ	0xFEA
  3339                           fsr0l	equ	0xFE9
  3340                           wreg	equ	0xFE8
  3341                           postinc1	equ	0xFE6
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           indf2	equ	0xFDF
  3345                           postinc2	equ	0xFDE
  3346                           postdec2	equ	0xFDD
  3347                           fsr2h	equ	0xFDA
  3348                           fsr2l	equ	0xFD9
  3349                           status	equ	0xFD8
  3350                           
  3351 ;; *************** function _SensorTwoNotify *****************
  3352 ;; Defined at:
  3353 ;;		line 41 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3367 ;;      Params:         0       0       0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0
  3370 ;;      Totals:         0       0       0       0       0       0       0
  3371 ;;Total ram usage:        0 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_APP_ISR2
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text27
  3381  000D8A                     __ptext27:
  3382                           	opt stack 0
  3383  000D8A                     _SensorTwoNotify:
  3384                           	opt stack 23
  3385                           
  3386                           ;SpeedCalc.c: 43: if( (unsigned char)0 == NotifyFlag )
  3387                           
  3388                           ;incstack = 0
  3389  000D8A  505C               	movf	_NotifyFlag,w,c
  3390  000D8C  A4D8               	btfss	status,2,c
  3391  000D8E  D004               	goto	i2l1086
  3392                           
  3393                           ;SpeedCalc.c: 44: {
  3394                           ;SpeedCalc.c: 45: NotifyFlag = (unsigned char)1;
  3395  000D90  0E01               	movlw	1
  3396  000D92  6E5C               	movwf	_NotifyFlag,c
  3397                           
  3398                           ;SpeedCalc.c: 46: LapCounter++;
  3399  000D94  2A5B               	incf	_LapCounter,f,c
  3400                           
  3401                           ;SpeedCalc.c: 47: }
  3402  000D96  0012               	return	
  3403  000D98                     i2l1086:
  3404                           
  3405                           ;SpeedCalc.c: 48: else
  3406                           ;SpeedCalc.c: 49: {
  3407                           ;SpeedCalc.c: 50: if(LapCounter != (unsigned char)0)
  3408  000D98  505B               	movf	_LapCounter,w,c
  3409  000D9A  B4D8               	btfsc	status,2,c
  3410  000D9C  0012               	return	
  3411                           
  3412                           ;SpeedCalc.c: 51: {
  3413                           ;SpeedCalc.c: 52: LapCounter--;
  3414  000D9E  065B               	decf	_LapCounter,f,c
  3415  000DA0  0012               	return	
  3416  000DA2                     __end_of_SensorTwoNotify:
  3417                           	opt stack 0
  3418                           tosu	equ	0xFFF
  3419                           tosh	equ	0xFFE
  3420                           tosl	equ	0xFFD
  3421                           pclatu	equ	0xFFB
  3422                           pclath	equ	0xFFA
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           intcon	equ	0xFF2
  3430                           intcon2	equ	0xFF1
  3431                           intcon3	equ	0xFF0
  3432                           postinc0	equ	0xFEE
  3433                           fsr0h	equ	0xFEA
  3434                           fsr0l	equ	0xFE9
  3435                           wreg	equ	0xFE8
  3436                           postinc1	equ	0xFE6
  3437                           fsr1h	equ	0xFE2
  3438                           fsr1l	equ	0xFE1
  3439                           indf2	equ	0xFDF
  3440                           postinc2	equ	0xFDE
  3441                           postdec2	equ	0xFDD
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _APP_ISR1 *****************
  3447 ;; Defined at:
  3448 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3462 ;;      Params:         0       0       0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0
  3465 ;;      Totals:         0       0       0       0       0       0       0
  3466 ;;Total ram usage:        0 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    1
  3469 ;; This function calls:
  3470 ;;		_SensorOneNotify
  3471 ;; This function is called by:
  3472 ;;		_ISR
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text28
  3477  000DFA                     __ptext28:
  3478                           	opt stack 0
  3479  000DFA                     _APP_ISR1:
  3480                           	opt stack 23
  3481                           
  3482                           ;AppInterrupts.c: 10: SensorOneNotify();
  3483                           
  3484                           ;incstack = 0
  3485  000DFA  ECD1  F006         	call	_SensorOneNotify	;wreg free
  3486  000DFE  0012               	return		;funcret
  3487  000E00                     __end_of_APP_ISR1:
  3488                           	opt stack 0
  3489                           tosu	equ	0xFFF
  3490                           tosh	equ	0xFFE
  3491                           tosl	equ	0xFFD
  3492                           pclatu	equ	0xFFB
  3493                           pclath	equ	0xFFA
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           intcon2	equ	0xFF1
  3502                           intcon3	equ	0xFF0
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           postinc1	equ	0xFE6
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function _SensorOneNotify *****************
  3518 ;; Defined at:
  3519 ;;		line 26 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;		None
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3533 ;;      Params:         0       0       0       0       0       0       0
  3534 ;;      Locals:         0       0       0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0
  3536 ;;      Totals:         0       0       0       0       0       0       0
  3537 ;;Total ram usage:        0 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_APP_ISR1
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text29
  3547  000DA2                     __ptext29:
  3548                           	opt stack 0
  3549  000DA2                     _SensorOneNotify:
  3550                           	opt stack 23
  3551                           
  3552                           ;SpeedCalc.c: 28: if( (unsigned char)1 == NotifyFlag )
  3553                           
  3554                           ;incstack = 0
  3555  000DA2  045C               	decf	_NotifyFlag,w,c
  3556  000DA4  A4D8               	btfss	status,2,c
  3557  000DA6  D003               	goto	i2l1076
  3558                           
  3559                           ;SpeedCalc.c: 29: {
  3560                           ;SpeedCalc.c: 30: NotifyFlag = (unsigned char)0;
  3561  000DA8  0E00               	movlw	0
  3562  000DAA  6E5C               	movwf	_NotifyFlag,c
  3563                           
  3564                           ;SpeedCalc.c: 31: }
  3565  000DAC  0012               	return	
  3566  000DAE                     i2l1076:
  3567                           
  3568                           ;SpeedCalc.c: 32: else
  3569                           ;SpeedCalc.c: 33: {
  3570                           ;SpeedCalc.c: 34: if(LapCounter != (unsigned char)0)
  3571  000DAE  505B               	movf	_LapCounter,w,c
  3572  000DB0  B4D8               	btfsc	status,2,c
  3573  000DB2  0012               	return	
  3574                           
  3575                           ;SpeedCalc.c: 35: {
  3576                           ;SpeedCalc.c: 36: LapCounter--;
  3577  000DB4  065B               	decf	_LapCounter,f,c
  3578  000DB6  0012               	return	
  3579  000DB8                     __end_of_SensorOneNotify:
  3580                           	opt stack 0
  3581                           tosu	equ	0xFFF
  3582                           tosh	equ	0xFFE
  3583                           tosl	equ	0xFFD
  3584                           pclatu	equ	0xFFB
  3585                           pclath	equ	0xFFA
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           intcon2	equ	0xFF1
  3594                           intcon3	equ	0xFF0
  3595                           postinc0	equ	0xFEE
  3596                           fsr0h	equ	0xFEA
  3597                           fsr0l	equ	0xFE9
  3598                           wreg	equ	0xFE8
  3599                           postinc1	equ	0xFE6
  3600                           fsr1h	equ	0xFE2
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           tosu	equ	0xFFF
  3609                           tosh	equ	0xFFE
  3610                           tosl	equ	0xFFD
  3611                           pclatu	equ	0xFFB
  3612                           pclath	equ	0xFFA
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           intcon2	equ	0xFF1
  3621                           intcon3	equ	0xFF0
  3622                           postinc0	equ	0xFEE
  3623                           fsr0h	equ	0xFEA
  3624                           fsr0l	equ	0xFE9
  3625                           wreg	equ	0xFE8
  3626                           postinc1	equ	0xFE6
  3627                           fsr1h	equ	0xFE2
  3628                           fsr1l	equ	0xFE1
  3629                           indf2	equ	0xFDF
  3630                           postinc2	equ	0xFDE
  3631                           postdec2	equ	0xFDD
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636                           	psect	text30
  3637  000000                     __ptext30:
  3638                           	opt stack 0
  3639                           tosu	equ	0xFFF
  3640                           tosh	equ	0xFFE
  3641                           tosl	equ	0xFFD
  3642                           pclatu	equ	0xFFB
  3643                           pclath	equ	0xFFA
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           intcon	equ	0xFF2
  3651                           intcon2	equ	0xFF1
  3652                           intcon3	equ	0xFF0
  3653                           postinc0	equ	0xFEE
  3654                           fsr0h	equ	0xFEA
  3655                           fsr0l	equ	0xFE9
  3656                           wreg	equ	0xFE8
  3657                           postinc1	equ	0xFE6
  3658                           fsr1h	equ	0xFE2
  3659                           fsr1l	equ	0xFE1
  3660                           indf2	equ	0xFDF
  3661                           postinc2	equ	0xFDE
  3662                           postdec2	equ	0xFDD
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667                           	psect	rparam
  3668  0000                     tosu	equ	0xFFF
  3669                           tosh	equ	0xFFE
  3670                           tosl	equ	0xFFD
  3671                           pclatu	equ	0xFFB
  3672                           pclath	equ	0xFFA
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           intcon2	equ	0xFF1
  3681                           intcon3	equ	0xFF0
  3682                           postinc0	equ	0xFEE
  3683                           fsr0h	equ	0xFEA
  3684                           fsr0l	equ	0xFE9
  3685                           wreg	equ	0xFE8
  3686                           postinc1	equ	0xFE6
  3687                           fsr1h	equ	0xFE2
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696                           	psect	temp
  3697  000060                     btemp:
  3698                           	opt stack 0
  3699  000060                     	ds	1
  3700  0000                     int$flags	set	btemp
  3701                           tosu	equ	0xFFF
  3702                           tosh	equ	0xFFE
  3703                           tosl	equ	0xFFD
  3704                           pclatu	equ	0xFFB
  3705                           pclath	equ	0xFFA
  3706                           tblptru	equ	0xFF8
  3707                           tblptrh	equ	0xFF7
  3708                           tblptrl	equ	0xFF6
  3709                           tablat	equ	0xFF5
  3710                           prodh	equ	0xFF4
  3711                           prodl	equ	0xFF3
  3712                           intcon	equ	0xFF2
  3713                           intcon2	equ	0xFF1
  3714                           intcon3	equ	0xFF0
  3715                           postinc0	equ	0xFEE
  3716                           fsr0h	equ	0xFEA
  3717                           fsr0l	equ	0xFE9
  3718                           wreg	equ	0xFE8
  3719                           postinc1	equ	0xFE6
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    11
    Data        2
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      95
    BANK0           128      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 36
		 -> LapCounterBuffer(BANK0[36]), 

    memset@p	PTR unsigned char  size(2) Largest target is 36
		 -> LapCounterBuffer(BANK0[36]), 

    S105$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 36
		 -> LapCounterBuffer(BANK0[36]), 


Critical Paths under _main in COMRAM

    _main->_RunScheduler
    _SpeedCalcNotifyInitialize->_memset
    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE

Critical Paths under _ISR in COMRAM

    _ISR->_SchedulerTick

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4507
                     _APP_INITIALIZE
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (1) _SpeedCalcNotifyInitialize                            0     0      0     288
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     288
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _RunScheduler                                         2     2      0    3511
                                             57 COMRAM     2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (2) _ManageSpeedCalc                                      0     0      0     463
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (3) _SpeedCalcManage                                      3     3      0     463
                                             40 COMRAM     3     3      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _ManageApplication                                    0     0      0    2744
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (3) _APP_MANAGE                                           4     4      0    2744
                                             53 COMRAM     4     4      0
                      _BCDsendNumber
                        _GetAvgSpeed
                        _GetDistance
                   _SetCircumfirunce
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetCircumfirunce                                     2     0      2      86
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetDistance                                          4     0      4       0
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GetAvgSpeed                                         13    11      2     960
                                             40 COMRAM    13    11      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     450
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     418
                                             27 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _BCDsendNumber                                       12     9      3    1235
                                             22 COMRAM    12     9      3
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     290
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayAlphaNumeric                                  0     0      0     304
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (3) _BCDManage7segment                                    3     3      0     304
                                             17 COMRAM     3     3      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (4) _HWI_8Digit_WRITE                                     2     1      1     152
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _HWI_4Digit_WRITE                                     2     1      1     152
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CreateTask                                           4     0      4     708
                                             15 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _APP_INITIALIZE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0      45
                                              1 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (7) _SchedulerTick                                        1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR2                                             0     0      0       0
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (8) _SensorTwoNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (8) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_INITIALIZE
   _CreateTask
   _HWI_DIGITAL_INITIALIZE
   _HWI_INTERRUPTS_INTITALIZE
   _RunScheduler
     _DisplayAlphaNumeric *
       _BCDManage7segment
         _HWI_4Digit_WRITE
         _HWI_8Digit_WRITE
     _ManageApplication *
       _APP_MANAGE
         _BCDsendNumber
           ___lwdiv
           ___wmul
         _GetAvgSpeed
           ___lldiv
             ___lmul (ARG)
           ___lmul
         _GetDistance
         _SetCircumfirunce
         ___wmul
     _ManageSpeedCalc *
       _SpeedCalcManage
         ___lldiv
           ___lmul (ARG)
   _SpeedCalcNotifyInitialize
     _memset

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      24       5       28.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83      15        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr 22 17:19:18 2017

                                  l29 0632                   __end_of_GetAvgSpeed 0908  
                 ___wmul@multiplicand 0012                           __CFG_BORV$3 000000  
                   GetAvgSpeed@bIsKph 0031                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                   __end_of_GetDistance 0DCA  
                         __CFG_OSC$XT 000000                           __CFG_LVP$ON 000000  
                                 l160 0D4A                                   l162 0D50  
                                 l163 0D56                                   l622 0A04  
                                 l675 0BC6                          __CFG_CPB$OFF 000000  
                        __CFG_CPD$OFF 000000                                   _ISR 0008  
                                 u534 0BE6                                   u535 0BE0  
                                 u628 0960                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                                ?_ISR 0001                          __CFG_WDT$OFF 000000  
                                l1230 0AE4                                  l1304 061A  
                                l1400 0CE4                                  l1322 06BE  
                                l1234 0AF8                                  l1340 0CBA  
                                l1324 06D6                                  l1308 0622  
                                l1244 09B6                                  l1420 0914  
                                l1334 0C9C                                  l1270 0BA0  
                                l1318 068C                                  l1246 09C2  
                                l1414 0908                                  l1336 0CA6  
                                l1344 0D5C                                  l1328 06DA  
                                l1256 09F6                                  l1248 09C6  
                                l1424 0974                                  l1416 090C  
                                l1338 0CB0                                  l1266 0B94  
                                l1426 0990                                  l1268 0B9C  
                                l1278 0BBC                                  l1288 0872  
                                l1388 0852                                  l1396 0CD4  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _main 0B2A                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0060                                  prodh 000FF4  
                                prodl 000FF3                     _BCDManage7segment 0BD0  
                                start 000E                         __CFG_IESO$OFF 000000  
                  ?_BCDManage7segment 0001              __size_of_SpeedCalcManage 00AA  
                        ___param_bank 000000                      __end_of_APP_ISR1 0E00  
                    __end_of_APP_ISR2 0DFA                                 ??_ISR 0002  
                 BCDsendNumber@Buffer 0020             _SpeedCalcNotifyInitialize 0D6C  
                     _GetAvgSpeed$870 002B                   BCDsendNumber@Number 0017  
                 __size_of_APP_MANAGE 0066                   ??_BCDManage7segment 0012  
                 BCDsendNumber@Output 001E                                 ?_main 0001  
                          _CreateTask 0A7C                       __end_of___lldiv 0A16  
                          _LapCounter 005B                                 _T0CON 000FD5  
                               _T1CON 000FCD                                 _T3CON 000FB1  
                     __end_of___lwdiv 0BD0                                 i2l236 077C  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                               _TMR1L 000FCE                                 _TMR3H 000FB3  
                               _TMR3L 000FB2                     _ManageApplication 0DE8  
                               _PORTC 000F82                                 _PORTD 000F83  
                               _TRISC 000F94                                 _TRISD 000F95  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                 ___lmul@multiplicand 0014                         __CFG_WRT3$OFF 000000  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
                      __CFG_EBTR1$OFF 000000                        __CFG_EBTR2$OFF 000000  
                      __CFG_EBTR3$OFF 000000                    ?_ManageApplication 0001  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
             CreateTask@MangeFunction 0010             BCDsendNumber@DecimalPlace 0019  
                               pclath 000FFA                                 tablat 000FF5  
                 ??_ManageApplication 003A                     ?_HWI_8Digit_WRITE 0010  
           __end_of_BCDManage7segment 0C20                                 status 000FD8  
               __end_of_BCDsendNumber 0704       __size_of_HWI_DIGITAL_INITIALIZE 000E  
                  ??_HWI_8Digit_WRITE 0011                           _GetAvgSpeed 0862  
                      __CFG_MCLRE$OFF 000000                       __initialization 0C20  
                         _GetDistance 0DB8                          __end_of_main 0B7E  
           __end_of_ManageApplication 0DEE                                ??_main 003C  
                       __activetblptr 000002                                _INT0IF 007F91  
                              _INT1IF 007F80                                i2l1112 0D02  
                              i2l1200 0772                                i2l1108 0CFA  
                              i2l1076 0DAE                                i2l1086 0D98  
                              i2l1182 074C                                i2l1194 0768  
                              i2l1188 075A           BCDManage7segment@DigitIndex 005D  
                              _INTCON 000FF2              __size_of_SensorOneNotify 0016  
            __size_of_ManageSpeedCalc 0006                  HWI_8Digit_WRITE@port 0011  
                              _TMR0IF 007F92                                _TMR1IE 007CE8  
                              _TMR1IF 007CF0                                _TMR3IE 007D01  
                              _TMR3IF 007D09                   _DisplayAlphaNumeric 0DE2  
                      __CFG_XINST$OFF 000000                            _NotifyFlag 005C  
                              ___lmul 0AD4                                ___wmul 0D20  
                      __CFG_STVREN$ON 000000                             ??___lldiv 0024  
                           ??___lwdiv 0014                                _memset 0CCA  
                              clear_0 0C3E                                clear_1 0C4A  
                   ??_SpeedCalcManage 0029                           ?_CreateTask 0010  
              _HWI_DIGITAL_INITIALIZE 0DCA                      CreateTask@Period 0013  
                    CreateTask@TaskId 0012                          __pdataCOMRAM 005E  
                ?_DisplayAlphaNumeric 0001                          __mediumconst 0000  
            __size_of_SensorTwoNotify 0018                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                        ??_APP_MANAGE 0036                             ?_APP_ISR1 0001  
                           ?_APP_ISR2 0001                __size_of_SchedulerTick 002A  
          __size_of_BCDManage7segment 0050                            __accesstop 0080  
             __end_of__initialization 0C50                       __CFG_PBADEN$OFF 000000  
                   ?_SetCircumfirunce 0010                         ___rparam_used 000001  
                  ??_SetCircumfirunce 0012                        __pcstackCOMRAM 0001  
                   BCDsendNumber@Link 001C             GetAvgSpeed@AvgSpeedKphMph 002F  
           __size_of_HWI_4Digit_WRITE 0032            __size_of_ManageApplication 0006  
                  __end_of_APP_MANAGE 0A7C                 ??_DisplayAlphaNumeric 0015  
SpeedCalcManage@HundredMeterReference 002A    __size_of_SpeedCalcNotifyInitialize 001E  
                          ??_APP_ISR1 0001                            ??_APP_ISR2 0001  
                          __pbssBANK0 0080                          _CircumFactor 005E  
                 __size_of_CreateTask 0058                     ??_SensorOneNotify 0001  
                   ??_ManageSpeedCalc 002C               __size_of_APP_INITIALIZE 0002  
                             ?___lmul 0010                SetCircumfirunce@Circum 0010  
                             ?___wmul 0010                         _SchedulerTick 0CF6  
                             ?_memset 0010                        ___lmul@product 0018  
  __size_of_HWI_INTERRUPTS_INTITALIZE 003A            ?_HWI_INTERRUPTS_INTITALIZE 0001  
                             _INTCON3 000FF0         SpeedCalcManage@LapSampleIndex 0059  
               HWI_8Digit_WRITE@value 0010                     ??_SensorTwoNotify 0001  
                             __Hparam 0000                          ?_GetAvgSpeed 0029  
                           _BCDNumber 0048                               __Lparam 0000  
                        ?_GetDistance 0010                       __size_of___lmul 0056  
                      ?_SchedulerTick 0001                               ___lldiv 0994  
                     __size_of___wmul 0026                               ___lwdiv 0B7E  
                        __psmallconst 0600             __size_of_HWI_8Digit_WRITE 0026  
                             __pcinit 0C20                       __size_of_memset 002C  
                             __ramtop 0600                               __ptext0 0B2A  
                             __ptext1 0D6C                               __ptext2 0CCA  
                             __ptext3 0908                               __ptext4 0DE2  
                             __ptext5 0DE8                               __ptext6 0DEE  
                             __ptext7 07B8                               __ptext8 0A16  
                             __ptext9 0DD8     __end_of_HWI_INTERRUPTS_INTITALIZE 0C98  
                        __size_of_ISR 07B0                         ?_RunScheduler 0001  
              SchedulerTick@TaskIndex 0001                        __pintcode_body 0704  
                end_of_initialization 0C50                               memset@c 0012  
                             memset@n 0014                               memset@p 0016  
                       __Lmediumconst 0000                               int_func 0704  
                     _SevenSegmentMAP 0601                       ___lldiv@divisor 0020  
                     _SpeedCalcManage 07B8                       ___lldiv@counter 0028  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
             ?_HWI_DIGITAL_INITIALIZE 0001           APP_MANAGE@TravelledDistance 0038  
                    _HWI_4Digit_WRITE 0C98                          ??_CreateTask 0014  
              __size_of_BCDsendNumber 00F6                        ??_RunScheduler 003A  
                           _TRISBbits 000F93                     __size_of_APP_ISR1 0006  
                   __size_of_APP_ISR2 0006                    __end_of_CreateTask 0AD4  
                      _APP_INITIALIZE 0E02                        _DistTravelCntr 0050  
                     ??_SchedulerTick 0001        __end_of_HWI_DIGITAL_INITIALIZE 0DD8  
                      __end_of___lmul 0B2A                        __end_of___wmul 0D46  
                       __pidataCOMRAM 0E00                             _ArrayTask 003C  
           __size_of_SetCircumfirunce 000A                        __end_of_memset 0CF6  
                 start_initialization 0C20                           __end_of_ISR 07B8  
                     _SensorOneNotify 0DA2               __end_of_SevenSegmentMAP 060C  
                     _ManageSpeedCalc 0DEE               __end_of_SpeedCalcManage 0862  
              __end_of_APP_INITIALIZE 0E04                         _BCDsendNumber 060E  
              SpeedCalcManage@LapTime 005A                              ??___lmul 0018  
                            ??___wmul 0014                  __size_of_GetAvgSpeed 00A6  
         __end_of_DisplayAlphaNumeric 0DE8                      __CFG_LPT1OSC$OFF 000000  
                __size_of_GetDistance 0012                      _HWI_8Digit_WRITE 0D46  
                            ??_memset 0016           ??_HWI_INTERRUPTS_INTITALIZE 0010  
                     _SensorTwoNotify 0D8A                           __pbssCOMRAM 003C  
              BCDsendNumber@LoopIndex 0022                 APP_MANAGE@AvgSpeedKph 0036  
                    _LapCounterBuffer 0080                 RunScheduler@TaskIndex 0058  
                      ?_BCDsendNumber 0017                       ?_APP_INITIALIZE 0001  
                    ___lwdiv@dividend 0010                  __end_of_RunScheduler 0994  
                   __CFG_CCP2MX$PORTC 000000                             __pintcode 0008  
                            ?___lldiv 001C                              ?___lwdiv 0010  
                         __smallconst 0600               __end_of_SensorOneNotify 0DB8  
             __end_of_ManageSpeedCalc 0DF4                 HWI_4Digit_WRITE@value 0010  
                    ___lwdiv@quotient 0014                         _LapCounterAvg 0056  
            __end_of_HWI_4Digit_WRITE 0CCA                              _APP_ISR1 0DFA  
                            _APP_ISR2 0DF4            ?_SpeedCalcNotifyInitialize 0001  
                    ?_SpeedCalcManage 0001             _HWI_INTERRUPTS_INTITALIZE 0C5E  
                      ___wmul@product 0014                      __CFG_WDTPS$32768 000000  
             __end_of_SensorTwoNotify 0DA2                      _SetCircumfirunce 0DD8  
                   ___wmul@multiplier 0010                     ___lmul@multiplier 0010  
                         _INTCON2bits 000FF1                       ??_BCDsendNumber 001A  
   __end_of_SpeedCalcNotifyInitialize 0D8A                              __Hrparam 0000  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                    __size_of___lldiv 0082                      __size_of___lwdiv 0052  
                    ?_SensorOneNotify 0001                      ?_ManageSpeedCalc 0001  
                     ___lwdiv@divisor 0012                       ___lwdiv@counter 0016  
                            __ptext10 0DB8                              __ptext11 0862  
                            __ptext20 0C5E                              __ptext12 0AD4  
                            __ptext21 0DCA                              __ptext13 0994  
                            __ptext30 0000                              __ptext22 0A7C  
                            __ptext14 060E                              __ptext23 0E02  
                            __ptext15 0D20                              __ptext16 0B7E  
                            __ptext25 0CF6                              __ptext17 0BD0  
                            __ptext26 0DF4                              __ptext18 0D46  
                            __ptext27 0D8A                              __ptext19 0C98  
                            __ptext28 0DFA                              __ptext29 0DA2  
                          _APP_MANAGE 0A16              __end_of_HWI_8Digit_WRITE 0D6C  
                  _LapDistanceCounter 0054                 __size_of_RunScheduler 008C  
                HWI_4Digit_WRITE@port 0011                         __size_of_main 0054  
                            int$flags 0060                 __end_of_SchedulerTick 0D20  
                    ?_SensorTwoNotify 0001               GetAvgSpeed@KphMphFactor 0032  
                        _RunScheduler 0908                              memset@p1 0010  
                    ??_APP_INITIALIZE 0010                              intlevel2 0000  
                    ___lldiv@dividend 001C                         ??_GetAvgSpeed 002B  
                       ??_GetDistance 0014                      ___lldiv@quotient 0024  
        __size_of_DisplayAlphaNumeric 0006                           ?_APP_MANAGE 0001  
         ??_SpeedCalcNotifyInitialize 0018                     ?_HWI_4Digit_WRITE 0010  
            __end_of_SetCircumfirunce 0DE2              ??_HWI_DIGITAL_INITIALIZE 0010  
                  ??_HWI_4Digit_WRITE 0011  
