

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jul 04 05:56:28 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.41
    65                           ; Generated 25/01/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4520 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  0017D8                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _CircumFactor
   104  0017D8  00C8               	dw	200
   105                           
   106                           	psect	smallconst
   107  000600                     __psmallconst:
   108                           	opt stack 0
   109  000600  00                 	db	0
   110  000601                     _Segment7ASCIItable:
   111                           	opt stack 0
   112  000601  EE                 	db	238
   113  000602  3E                 	db	62
   114  000603  9C                 	db	156
   115  000604  7A                 	db	122
   116  000605  9E                 	db	158
   117  000606  8E                 	db	142
   118  000607  F6                 	db	246
   119  000608  2E                 	db	46
   120  000609  0C                 	db	12
   121  00060A  78                 	db	120
   122  00060B  00                 	db	0
   123  00060C  00                 	db	0
   124  00060D  00                 	db	0
   125  00060E  00                 	db	0
   126  00060F  00                 	db	0
   127  000610  00                 	db	0
   128  000611  00                 	db	0
   129  000612  00                 	db	0
   130  000613  B6                 	db	182
   131  000614  00                 	db	0
   132  000615  00                 	db	0
   133  000616  7C                 	db	124
   134  000617  00                 	db	0
   135  000618  00                 	db	0
   136  000619  00                 	db	0
   137  00061A  00                 	db	0
   138  00061B                     __end_of_Segment7ASCIItable:
   139                           	opt stack 0
   140  00061B                     _KeyArrayConfig:
   141                           	opt stack 0
   142  00061B  0F                 	db	15
   143  00061C  00                 	db	0
   144  00061D  0006               	dw	6
   145  00061F  0006               	dw	6
   146  000621  0064               	dw	100
   147  000623  10                 	db	16
   148  000624  00                 	db	0
   149  000625  0006               	dw	6
   150  000627  0006               	dw	6
   151  000629  0064               	dw	100
   152  00062B  11                 	db	17
   153  00062C  00                 	db	0
   154  00062D  0006               	dw	6
   155  00062F  0006               	dw	6
   156  000631  0064               	dw	100
   157  000633                     __end_of_KeyArrayConfig:
   158                           	opt stack 0
   159  000633                     _SevenSegmentMAP:
   160                           	opt stack 0
   161  000633  FC                 	db	252
   162  000634  60                 	db	96
   163  000635  DA                 	db	218
   164  000636  F2                 	db	242
   165  000637  66                 	db	102
   166  000638  B6                 	db	182
   167  000639  BE                 	db	190
   168  00063A  E0                 	db	224
   169  00063B  FE                 	db	254
   170  00063C  F6                 	db	246
   171  00063D  01                 	db	1
   172  00063E                     __end_of_SevenSegmentMAP:
   173                           	opt stack 0
   174  0000                     _TMR1	set	4046
   175  0000                     _TMR3H	set	4019
   176  0000                     _TMR3L	set	4018
   177  0000                     _TMR0L	set	4054
   178  0000                     _INTCON2bits	set	4081
   179  0000                     _T3CON	set	4017
   180  0000                     _T1CON	set	4045
   181  0000                     _T0CON	set	4053
   182  0000                     _INTCON3	set	4080
   183  0000                     _INTCON	set	4082
   184  0000                     _PORTBbits	set	3969
   185  0000                     _TRISBbits	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _TRISD	set	3989
   188  0000                     _LATD	set	3980
   189  0000                     _PORTD	set	3971
   190  0000                     _LATC	set	3979
   191  0000                     _PORTC	set	3970
   192  0000                     _EECON2	set	4007
   193  0000                     _INTCONbits	set	4082
   194  0000                     _EEDATA	set	4008
   195  0000                     _EEADR	set	4009
   196  0000                     _EECON1bits	set	4006
   197  0000                     _INT1IF	set	32640
   198  0000                     _INT0IF	set	32657
   199  0000                     _TMR2IF	set	31985
   200  0000                     _TMR3IE	set	32001
   201  0000                     _TMR3IF	set	32009
   202  0000                     _TMR1IE	set	31976
   203  0000                     _TMR1IF	set	31984
   204  0000                     _TMR0IE	set	32661
   205  0000                     _TMR0IF	set	32658
   206                           
   207                           ; #config settings
   208  00063E  00                 	db	0	; dummy byte at the end
   209  0000                     
   210                           	psect	cinit
   211  0014AC                     __pcinit:
   212                           	opt stack 0
   213  0014AC                     start_initialization:
   214                           	opt stack 0
   215  0014AC                     __initialization:
   216                           	opt stack 0
   217                           
   218                           ; Initialize objects allocated to COMRAM (2 bytes)
   219                           ; load TBLPTR registers with __pidataCOMRAM
   220  0014AC  0ED8               	movlw	low __pidataCOMRAM
   221  0014AE  6EF6               	movwf	tblptrl,c
   222  0014B0  0E17               	movlw	high __pidataCOMRAM
   223  0014B2  6EF7               	movwf	tblptrh,c
   224  0014B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   225  0014B6  6EF8               	movwf	tblptru,c
   226  0014B8  0009               	tblrd		*+	;fetch initializer
   227  0014BA  CFF5 F066          	movff	tablat,__pdataCOMRAM
   228  0014BE  0009               	tblrd		*+	;fetch initializer
   229  0014C0  CFF5 F067          	movff	tablat,__pdataCOMRAM+1
   230                           
   231                           ; Clear objects allocated to BANK0 (82 bytes)
   232  0014C4  EE00  F080         	lfsr	0,__pbssBANK0
   233  0014C8  0E52               	movlw	82
   234  0014CA                     clear_0:
   235  0014CA  6AEE               	clrf	postinc0,c
   236  0014CC  06E8               	decf	wreg,f,c
   237  0014CE  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to COMRAM (45 bytes)
   240  0014D0  EE00  F039         	lfsr	0,__pbssCOMRAM
   241  0014D4  0E2D               	movlw	45
   242  0014D6                     clear_1:
   243  0014D6  6AEE               	clrf	postinc0,c
   244  0014D8  06E8               	decf	wreg,f,c
   245  0014DA  E1FD               	bnz	clear_1
   246  0014DC                     end_of_initialization:
   247                           	opt stack 0
   248  0014DC                     __end_of__initialization:
   249                           	opt stack 0
   250  0014DC  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   251  0014DE  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   252  0014E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   253  0014E2  6EF8               	movwf	tblptru,c
   254  0014E4  0100               	movlb	0
   255  0014E6  EFD2  F00B         	goto	_main	;jump to C main() function
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssCOMRAM
   264  000039                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000039                     _DistTravelCntr:
   267                           	opt stack 0
   268  000039                     	ds	4
   269  00003D                     _HWtimerCount:
   270                           	opt stack 0
   271  00003D                     	ds	2
   272  00003F                     _LapTimeTenthMilli:
   273                           	opt stack 0
   274  00003F                     	ds	2
   275  000041                     _LapDistanceCounter:
   276                           	opt stack 0
   277  000041                     	ds	2
   278  000043                     _WriteFnCallback:
   279                           	opt stack 0
   280  000043                     	ds	2
   281  000045                     APP_MANAGE@bIsBlinkMode:
   282                           	opt stack 0
   283  000045                     	ds	2
   284  000047                     APP_MANAGE@blinkIndex:
   285                           	opt stack 0
   286  000047                     	ds	2
   287  000049                     RunScheduler@TaskIndex:
   288                           	opt stack 0
   289  000049                     	ds	1
   290  00004A                     _HwTimerOVFLcount:
   291                           	opt stack 0
   292  00004A                     	ds	1
   293  00004B                     _TimerOVFLcount:
   294                           	opt stack 0
   295  00004B                     	ds	1
   296  00004C                     _LapCounter:
   297                           	opt stack 0
   298  00004C                     	ds	1
   299  00004D                     _NotifyFlag:
   300                           	opt stack 0
   301  00004D                     	ds	1
   302  00004E                     EepromManage@WriteIndex:
   303                           	opt stack 0
   304  00004E                     	ds	1
   305  00004F                     _DataSize:
   306                           	opt stack 0
   307  00004F                     	ds	1
   308  000050                     _EEPROMaddr:
   309                           	opt stack 0
   310  000050                     	ds	1
   311  000051                     _WriteRequest:
   312                           	opt stack 0
   313  000051                     	ds	1
   314  000052                     BCDManage7segment@LineIndex:
   315                           	opt stack 0
   316  000052                     	ds	1
   317  000053                     BCDManage7segment@BlinkCounter:
   318                           	opt stack 0
   319  000053                     	ds	1
   320  000054                     BCDManage7segment@DigitIndex:
   321                           	opt stack 0
   322  000054                     	ds	1
   323  000055                     _BlinkFlag:
   324                           	opt stack 0
   325  000055                     	ds	1
   326  000056                     _LineBlinkIndex:
   327                           	opt stack 0
   328  000056                     	ds	1
   329  000057                     _BlinkDuration:
   330                           	opt stack 0
   331  000057                     	ds	1
   332  000058                     _BlinkIndex:
   333                           	opt stack 0
   334  000058                     	ds	1
   335  000059                     _bIsAnodeUsed:
   336                           	opt stack 0
   337  000059                     	ds	1
   338  00005A                     _WriteFlag:
   339                           	opt stack 0
   340  00005A                     	ds	1
   341  00005B                     _KeyInternalData:
   342                           	opt stack 0
   343  00005B                     	ds	9
   344  000064                     _Circum:
   345                           	opt stack 0
   346  000064                     	ds	2
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	dataCOMRAM
   355  000066                     __pdataCOMRAM:
   356                           	opt stack 0
   357  000066                     _CircumFactor:
   358                           	opt stack 0
   359  000066                     	ds	2
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367                           	psect	bssBANK0
   368  000080                     __pbssBANK0:
   369                           	opt stack 0
   370  000080                     _DataArray:
   371                           	opt stack 0
   372  000080                     	ds	50
   373  0000B2                     _ArrayTask:
   374                           	opt stack 0
   375  0000B2                     	ds	16
   376  0000C2                     _BCDAlpha:
   377                           	opt stack 0
   378  0000C2                     	ds	16
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	cstackBANK0
   387  0000D2                     __pcstackBANK0:
   388                           	opt stack 0
   389  0000D2                     APP_MANAGE@AvgSpeedKph:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x0
   393  0000D2                     	ds	2
   394  0000D4                     APP_MANAGE@keystatus2:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x2
   398  0000D4                     	ds	1
   399  0000D5                     APP_MANAGE@TravelledDistance:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x3
   403  0000D5                     	ds	4
   404  0000D9                     APP_MANAGE@keystatus:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x7
   408  0000D9                     	ds	1
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           
   416                           	psect	cstackCOMRAM
   417  000001                     __pcstackCOMRAM:
   418                           	opt stack 0
   419  000001                     ?_ReloadHWtimer:
   420                           	opt stack 0
   421  000001                     SchedulerTick@TaskIndex:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x0
   425  000001                     	ds	2
   426  000003                     ReloadHWtimer@TimerId:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x2
   430  000003                     	ds	1
   431  000004                     ReloadHWtimer@ElapsedTime:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3
   435  000004                     	ds	2
   436  000006                     ??_ISR:
   437                           
   438                           ; 1 bytes @ 0x5
   439  000006                     	ds	14
   440  000014                     ?___wmul:
   441                           	opt stack 0
   442  000014                     ?___lwdiv:
   443                           	opt stack 0
   444  000014                     ?_GetDistance:
   445                           	opt stack 0
   446  000014                     ?___lmul:
   447                           	opt stack 0
   448  000014                     BCDInitialize@bIsCommonAnode:
   449                           	opt stack 0
   450  000014                     BlinkDigit@Line:
   451                           	opt stack 0
   452  000014                     GetKeyStatus@KeyStatus:
   453                           	opt stack 0
   454  000014                     HWIeeprom_Write@Data:
   455                           	opt stack 0
   456  000014                     HWI_4Digit_WRITE@value:
   457                           	opt stack 0
   458  000014                     HWI_8Digit_WRITE@value:
   459                           	opt stack 0
   460  000014                     HWI_DIGI_READ@pin:
   461                           	opt stack 0
   462  000014                     Eeprom_Write_Block@DataPtr:
   463                           	opt stack 0
   464  000014                     SetCircumfirunce@Circum:
   465                           	opt stack 0
   466  000014                     CreateTask@MangeFunction:
   467                           	opt stack 0
   468  000014                     HWIeeprom_Read@Data:
   469                           	opt stack 0
   470  000014                     ___wmul@multiplier:
   471                           	opt stack 0
   472  000014                     ___lwdiv@dividend:
   473                           	opt stack 0
   474  000014                     ___lmul@multiplier:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x13
   478  000014                     	ds	1
   479  000015                     BlinkDigit@duration:
   480                           	opt stack 0
   481  000015                     GetKeyStatus@KeyID:
   482                           	opt stack 0
   483  000015                     HWIeeprom_Write@address:
   484                           	opt stack 0
   485  000015                     HWI_4Digit_WRITE@port:
   486                           	opt stack 0
   487  000015                     HWI_8Digit_WRITE@port:
   488                           	opt stack 0
   489  000015                     HWI_DIGI_READ@HWIread:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x14
   493  000015                     	ds	1
   494  000016                     ??_BCDManage7segment:
   495  000016                     BlinkDigit@Index:
   496                           	opt stack 0
   497  000016                     Eeprom_Write_Block@BlockSize:
   498                           	opt stack 0
   499  000016                     CreateTask@TaskId:
   500                           	opt stack 0
   501  000016                     HWIeeprom_Write@WriteSuccess:
   502                           	opt stack 0
   503  000016                     HWIeeprom_Read@address:
   504                           	opt stack 0
   505  000016                     ___wmul@multiplicand:
   506                           	opt stack 0
   507  000016                     ___lwdiv@divisor:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x15
   511  000016                     	ds	1
   512  000017                     EepromManage@WriteSuccess:
   513                           	opt stack 0
   514  000017                     CreateTask@Period:
   515                           	opt stack 0
   516  000017                     HWIeeprom_Read@ReadSuccess:
   517                           	opt stack 0
   518  000017                     Eeprom_Write_Block@ptrFnCallback:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x16
   522  000017                     	ds	1
   523  000018                     BCDManage7segment@Index:
   524                           	opt stack 0
   525  000018                     MangeKeys@KeyState:
   526                           	opt stack 0
   527  000018                     ___lwdiv@counter:
   528                           	opt stack 0
   529  000018                     Eeprom_Read_Block@DataPtr:
   530                           	opt stack 0
   531  000018                     ___wmul@product:
   532                           	opt stack 0
   533  000018                     ___lmul@multiplicand:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x17
   537  000018                     	ds	1
   538  000019                     BCDManage7segment@BCD:
   539                           	opt stack 0
   540  000019                     Eeprom_Write_Block@WriteGranted:
   541                           	opt stack 0
   542  000019                     MangeKeys@HWIreading:
   543                           	opt stack 0
   544  000019                     ___lwdiv@quotient:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x18
   548  000019                     	ds	1
   549  00001A                     Eeprom_Write_Block@address:
   550                           	opt stack 0
   551  00001A                     Eeprom_Read_Block@BlockSize:
   552                           	opt stack 0
   553  00001A                     MangeKeys@KeyID:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x19
   557  00001A                     	ds	1
   558  00001B                     ?_IncrementDecrementSingleDigit:
   559                           	opt stack 0
   560  00001B                     Eeprom_Write_Block@LoopIndex:
   561                           	opt stack 0
   562  00001B                     Eeprom_Read_Block@ReadGranted:
   563                           	opt stack 0
   564  00001B                     ManageDrivers@LoopIndex:
   565                           	opt stack 0
   566  00001B                     IncrementDecrementSingleDigit@Number:
   567                           	opt stack 0
   568  00001B                     BCDsendNumber@Number:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x1A
   572  00001B                     	ds	1
   573  00001C                     Eeprom_Read_Block@address:
   574                           	opt stack 0
   575  00001C                     ___lmul@product:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x1B
   579  00001C                     	ds	1
   580  00001D                     IncrementDecrementSingleDigit@Index:
   581                           	opt stack 0
   582  00001D                     BCDsendNumber@Line:
   583                           	opt stack 0
   584  00001D                     Eeprom_Read_Block@ReadSuccess:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x1C
   588  00001D                     	ds	1
   589  00001E                     IncrementDecrementSingleDigit@bIsincrement:
   590                           	opt stack 0
   591  00001E                     BCDsendNumber@DecimalPlace:
   592                           	opt stack 0
   593  00001E                     Eeprom_Read_Block@LoopIndex:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x1D
   597  00001E                     	ds	1
   598  00001F                     ??_IncrementDecrementSingleDigit:
   599  00001F                     BCDsendNumber@EnableTranc:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x1E
   603  00001F                     	ds	1
   604  000020                     ??_BCDsendNumber:
   605  000020                     ?___lldiv:
   606                           	opt stack 0
   607  000020                     IncrementDecrementSingleDigit@Link:
   608                           	opt stack 0
   609  000020                     ___lldiv@dividend:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x1F
   613  000020                     	ds	2
   614  000022                     IncrementDecrementSingleDigit@NumberReturned:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x21
   618  000022                     	ds	2
   619  000024                     IncrementDecrementSingleDigit@PowIndex:
   620                           	opt stack 0
   621  000024                     BCDsendNumber@Link:
   622                           	opt stack 0
   623  000024                     ___lldiv@divisor:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x23
   627  000024                     	ds	1
   628  000025                     IncrementDecrementSingleDigit@unitPosition:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x24
   632  000025                     	ds	1
   633  000026                     BCDsendNumber@Output:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x25
   637  000026                     	ds	1
   638  000027                     IncrementDecrementSingleDigit@Output:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x26
   642  000027                     	ds	1
   643  000028                     BCDsendNumber@Buffer:
   644                           	opt stack 0
   645  000028                     ___lldiv@quotient:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x27
   649  000028                     	ds	2
   650  00002A                     BCDsendNumber@LoopIndex:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x29
   654  00002A                     	ds	1
   655  00002B                     IncrementDecrementSingleDigit@LoopIndex:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x2A
   659  00002B                     	ds	1
   660  00002C                     ___lldiv@counter:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x2B
   664  00002C                     	ds	1
   665  00002D                     ??_SpeedCalcManage:
   666  00002D                     ?_GetAvgSpeed:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2C
   670  00002D                     	ds	2
   671  00002F                     GetAvgSpeed@bIsKph:
   672                           	opt stack 0
   673  00002F                     SpeedCalcManage@HundredMeterReference:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2E
   677  00002F                     	ds	1
   678  000030                     GetAvgSpeed@KphMphFactor:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x2F
   682  000030                     	ds	1
   683  000031                     
   684                           ; 1 bytes @ 0x30
   685  000031                     	ds	3
   686  000034                     GetAvgSpeed@AvgSpeedKphMph:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x33
   690  000034                     	ds	2
   691  000036                     ??_APP_MANAGE:
   692                           
   693                           ; 1 bytes @ 0x35
   694  000036                     	ds	1
   695  000037                     
   696                           ; 1 bytes @ 0x36
   697  000037                     	ds	2
   698  000039                     tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           
   705                           ; 1 bytes @ 0x38
   706 ;;
   707 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   708 ;;
   709 ;; *************** function _main *****************
   710 ;; Defined at:
   711 ;;		line 78 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   725 ;;      Params:         0       0       0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0
   728 ;;      Totals:         0       0       0       0       0       0       0
   729 ;;Total ram usage:        0 bytes
   730 ;; Hardware stack levels required when called:   10
   731 ;; This function calls:
   732 ;;		_Start_App
   733 ;; This function is called by:
   734 ;;		Startup code after reset
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text0
   739  0017A4                     __ptext0:
   740                           	opt stack 0
   741  0017A4                     _main:
   742                           	opt stack 21
   743                           
   744                           ;main.c: 80: Start_App();
   745                           
   746                           ;incstack = 0
   747  0017A4  EC2E  F009         	call	_Start_App	;wreg free
   748                           
   749                           ;main.c: 81: return;
   750  0017A8  EF07  F000         	goto	start
   751  0017AC                     __end_of_main:
   752                           	opt stack 0
   753                           tblptru	equ	0xFF8
   754                           tblptrh	equ	0xFF7
   755                           tblptrl	equ	0xFF6
   756                           tablat	equ	0xFF5
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           
   760 ;; *************** function _Start_App *****************
   761 ;; Defined at:
   762 ;;		line 21 in file "../../../../OS/OS_manage/OS_manage.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   776 ;;      Params:         0       0       0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    9
   783 ;; This function calls:
   784 ;;		_APP_INITIALIZE
   785 ;;		_BCDInitialize
   786 ;;		_CreateTask
   787 ;;		_HWI_DIGITAL_INITIALIZE
   788 ;;		_HWI_INTERRUPTS_INTITALIZE
   789 ;;		_RunScheduler
   790 ;;		_SpeedCalcNotifyInitialize
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text1
   797  00125C                     __ptext1:
   798                           	opt stack 0
   799  00125C                     _Start_App:
   800                           	opt stack 21
   801                           
   802                           ;OS_manage.c: 23: HWI_INTERRUPTS_INTITALIZE();
   803                           
   804                           ;incstack = 0
   805  00125C  EC75  F00A         	call	_HWI_INTERRUPTS_INTITALIZE	;wreg free
   806                           
   807                           ;OS_manage.c: 24: HWI_DIGITAL_INITIALIZE();
   808  001260  EC9F  F00B         	call	_HWI_DIGITAL_INITIALIZE	;wreg free
   809                           
   810                           ;OS_manage.c: 25: SpeedCalcNotifyInitialize();
   811  001264  ECED  F00B         	call	_SpeedCalcNotifyInitialize	;wreg free
   812                           
   813                           ;OS_manage.c: 26: APP_INITIALIZE();
   814  001268  EC43  F00B         	call	_APP_INITIALIZE	;wreg free
   815                           
   816                           ;OS_manage.c: 27: BCDInitialize(1);
   817  00126C  0E01               	movlw	1
   818  00126E  ECD6  F00B         	call	_BCDInitialize
   819                           
   820                           ;OS_manage.c: 29: CreateTask( ManageSpeedCalc, (unsigned char)0 , (unsigned char) 20);
   821  001272  0EC0               	movlw	low _ManageSpeedCalc
   822  001274  6E14               	movwf	CreateTask@MangeFunction,c
   823  001276  0E17               	movlw	high _ManageSpeedCalc
   824  001278  6E15               	movwf	CreateTask@MangeFunction+1,c
   825  00127A  0E00               	movlw	0
   826  00127C  6E16               	movwf	CreateTask@TaskId,c
   827  00127E  0E14               	movlw	20
   828  001280  6E17               	movwf	CreateTask@Period,c
   829  001282  EC95  F009         	call	_CreateTask	;wreg free
   830                           
   831                           ;OS_manage.c: 31: CreateTask( ManageApplication, (unsigned char)2 , (unsigned char) 100)
      +                          ;
   832  001286  0EBA               	movlw	low _ManageApplication
   833  001288  6E14               	movwf	CreateTask@MangeFunction,c
   834  00128A  0E17               	movlw	high _ManageApplication
   835  00128C  6E15               	movwf	CreateTask@MangeFunction+1,c
   836  00128E  0E02               	movlw	2
   837  001290  6E16               	movwf	CreateTask@TaskId,c
   838  001292  0E64               	movlw	100
   839  001294  6E17               	movwf	CreateTask@Period,c
   840  001296  EC95  F009         	call	_CreateTask	;wreg free
   841                           
   842                           ;OS_manage.c: 33: CreateTask( DisplayAlphaNumeric, (unsigned char)1 , (unsigned char) 2)
      +                          ;
   843  00129A  0EB4               	movlw	low _DisplayAlphaNumeric
   844  00129C  6E14               	movwf	CreateTask@MangeFunction,c
   845  00129E  0E17               	movlw	high _DisplayAlphaNumeric
   846  0012A0  6E15               	movwf	CreateTask@MangeFunction+1,c
   847  0012A2  0E01               	movlw	1
   848  0012A4  6E16               	movwf	CreateTask@TaskId,c
   849  0012A6  0E02               	movlw	2
   850  0012A8  6E17               	movwf	CreateTask@Period,c
   851  0012AA  EC95  F009         	call	_CreateTask	;wreg free
   852                           
   853                           ;OS_manage.c: 35: CreateTask( ManageDrivers , (unsigned char)3 , (unsigned char) 10);
   854  0012AE  0E22               	movlw	low _ManageDrivers
   855  0012B0  6E14               	movwf	CreateTask@MangeFunction,c
   856  0012B2  0E17               	movlw	high _ManageDrivers
   857  0012B4  6E15               	movwf	CreateTask@MangeFunction+1,c
   858  0012B6  0E03               	movlw	3
   859  0012B8  6E16               	movwf	CreateTask@TaskId,c
   860  0012BA  0E0A               	movlw	10
   861  0012BC  6E17               	movwf	CreateTask@Period,c
   862  0012BE  EC95  F009         	call	_CreateTask	;wreg free
   863                           
   864                           ;OS_manage.c: 37: RunScheduler();
   865  0012C2  ECA7  F008         	call	_RunScheduler	;wreg free
   866  0012C6  0012               	return		;funcret
   867  0012C8                     __end_of_Start_App:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           
   876 ;; *************** function _SpeedCalcNotifyInitialize *****************
   877 ;; Defined at:
   878 ;;		line 24 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;		None
   881 ;; Auto vars:     Size  Location     Type
   882 ;;		None
   883 ;; Return value:  Size  Location     Type
   884 ;;                  1    wreg      void 
   885 ;; Registers used:
   886 ;;		None
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   892 ;;      Params:         0       0       0       0       0       0       0
   893 ;;      Locals:         0       0       0       0       0       0       0
   894 ;;      Temps:          0       0       0       0       0       0       0
   895 ;;      Totals:         0       0       0       0       0       0       0
   896 ;;Total ram usage:        0 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    4
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_Start_App
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text2
   907  0017DA                     __ptext2:
   908                           	opt stack 0
   909  0017DA                     _SpeedCalcNotifyInitialize:
   910                           	opt stack 25
   911                           
   912                           ;incstack = 0
   913  0017DA  0012               	return		;funcret
   914  0017DC                     __end_of_SpeedCalcNotifyInitialize:
   915                           	opt stack 0
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           
   923 ;; *************** function _RunScheduler *****************
   924 ;; Defined at:
   925 ;;		line 25 in file "../../../../OS/Scheduler/Scheduler.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   939 ;;      Params:         0       0       0       0       0       0       0
   940 ;;      Locals:         0       0       0       0       0       0       0
   941 ;;      Temps:          2       0       0       0       0       0       0
   942 ;;      Totals:         2       0       0       0       0       0       0
   943 ;;Total ram usage:        2 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    8
   946 ;; This function calls:
   947 ;;		_DisplayAlphaNumeric
   948 ;;		_ManageApplication
   949 ;;		_ManageDrivers
   950 ;;		_ManageSpeedCalc
   951 ;; This function is called by:
   952 ;;		_Start_App
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text3
   957  00114E                     __ptext3:
   958                           	opt stack 0
   959  00114E                     _RunScheduler:
   960                           	opt stack 21
   961  00114E                     
   962                           ;Scheduler.c: 29: {
   963                           ;Scheduler.c: 30: for(TaskIndex = (unsigned char)0 ; TaskIndex < 4 ; TaskIndex++)
   964  00114E  0E00               	movlw	0
   965  001150  6E49               	movwf	RunScheduler@TaskIndex,c
   966  001152                     l2771:
   967  001152  0E03               	movlw	3
   968  001154  6449               	cpfsgt	RunScheduler@TaskIndex,c
   969  001156  D001               	goto	l2775
   970  001158  D7FA               	goto	l2769
   971  00115A                     l2775:
   972                           
   973                           ;Scheduler.c: 31: {
   974                           ;Scheduler.c: 32: if(ArrayTask[TaskIndex].Period <= ArrayTask[TaskIndex].TickCounter)
   975  00115A  5049               	movf	RunScheduler@TaskIndex,w,c
   976  00115C  0D04               	mullw	4
   977  00115E  0E02               	movlw	2
   978  001160  26F3               	addwf	prodl,f,c
   979  001162  0E00               	movlw	0
   980  001164  22F4               	addwfc	prodh,f,c
   981  001166  0EB2               	movlw	low _ArrayTask
   982  001168  24F3               	addwf	prodl,w,c
   983  00116A  6ED9               	movwf	fsr2l,c
   984  00116C  0E00               	movlw	high _ArrayTask
   985  00116E  20F4               	addwfc	prodh,w,c
   986  001170  6EDA               	movwf	fsr2h,c
   987  001172  5049               	movf	RunScheduler@TaskIndex,w,c
   988  001174  0D04               	mullw	4
   989  001176  0E03               	movlw	3
   990  001178  26F3               	addwf	prodl,f,c
   991  00117A  0E00               	movlw	0
   992  00117C  22F4               	addwfc	prodh,f,c
   993  00117E  0EB2               	movlw	low _ArrayTask
   994  001180  24F3               	addwf	prodl,w,c
   995  001182  6EE1               	movwf	fsr1l,c
   996  001184  0E00               	movlw	high _ArrayTask
   997  001186  20F4               	addwfc	prodh,w,c
   998  001188  6EE2               	movwf	fsr1h,c
   999  00118A  50DE               	movf	postinc2,w,c
  1000  00118C  5CE6               	subwf	postinc1,w,c
  1001  00118E  A0D8               	btfss	status,0,c
  1002  001190  D022               	goto	l2781
  1003                           
  1004                           ;Scheduler.c: 33: {
  1005                           ;Scheduler.c: 34: ArrayTask[TaskIndex].ManageFunction();
  1006  001192  5049               	movf	RunScheduler@TaskIndex,w,c
  1007  001194  0D04               	mullw	4
  1008  001196  0EB2               	movlw	low _ArrayTask
  1009  001198  24F3               	addwf	prodl,w,c
  1010  00119A  6ED9               	movwf	fsr2l,c
  1011  00119C  0E00               	movlw	high _ArrayTask
  1012  00119E  20F4               	addwfc	prodh,w,c
  1013  0011A0  6EDA               	movwf	fsr2h,c
  1014  0011A2  D801               	call	u2228
  1015  0011A4  D00A               	goto	l2779
  1016  0011A6                     u2228:
  1017  0011A6  0005               	push	
  1018  0011A8  6EFA               	movwf	pclath,c
  1019  0011AA  50DE               	movf	postinc2,w,c
  1020  0011AC  6EFD               	movwf	tosl,c
  1021  0011AE  50DE               	movf	postinc2,w,c
  1022  0011B0  6EFE               	movwf	tosh,c
  1023  0011B2  50F8               	movf	tblptru,w,c
  1024  0011B4  6EFF               	movwf	tosu,c
  1025  0011B6  50FA               	movf	pclath,w,c
  1026  0011B8  0012               	return		;indir
  1027  0011BA                     l2779:
  1028                           
  1029                           ;Scheduler.c: 35: ArrayTask[TaskIndex].TickCounter = (unsigned char)0;
  1030  0011BA  5049               	movf	RunScheduler@TaskIndex,w,c
  1031  0011BC  0D04               	mullw	4
  1032  0011BE  0E03               	movlw	3
  1033  0011C0  26F3               	addwf	prodl,f,c
  1034  0011C2  0E00               	movlw	0
  1035  0011C4  22F4               	addwfc	prodh,f,c
  1036  0011C6  0EB2               	movlw	low _ArrayTask
  1037  0011C8  24F3               	addwf	prodl,w,c
  1038  0011CA  6ED9               	movwf	fsr2l,c
  1039  0011CC  0E00               	movlw	high _ArrayTask
  1040  0011CE  20F4               	addwfc	prodh,w,c
  1041  0011D0  6EDA               	movwf	fsr2h,c
  1042  0011D2  0E00               	movlw	0
  1043  0011D4  6EDF               	movwf	indf2,c
  1044  0011D6                     l2781:
  1045  0011D6  2A49               	incf	RunScheduler@TaskIndex,f,c
  1046  0011D8  D7BC               	goto	l2771
  1047  0011DA                     __end_of_RunScheduler:
  1048                           	opt stack 0
  1049                           tosu	equ	0xFFF
  1050                           tosh	equ	0xFFE
  1051                           tosl	equ	0xFFD
  1052                           pclath	equ	0xFFA
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           tblptrl	equ	0xFF6
  1056                           tablat	equ	0xFF5
  1057                           prodh	equ	0xFF4
  1058                           prodl	equ	0xFF3
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postinc1	equ	0xFE6
  1062                           fsr1h	equ	0xFE2
  1063                           fsr1l	equ	0xFE1
  1064                           indf2	equ	0xFDF
  1065                           postinc2	equ	0xFDE
  1066                           fsr2h	equ	0xFDA
  1067                           fsr2l	equ	0xFD9
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function _ManageDrivers *****************
  1071 ;; Defined at:
  1072 ;;		line 54 in file "../../../../OS/OS_manage/OS_manage.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1086 ;;      Params:         0       0       0       0       0       0       0
  1087 ;;      Locals:         1       0       0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0
  1089 ;;      Totals:         1       0       0       0       0       0       0
  1090 ;;Total ram usage:        1 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    6
  1093 ;; This function calls:
  1094 ;;		_EepromManage
  1095 ;;		_MangeKeys
  1096 ;; This function is called by:
  1097 ;;		_Start_App
  1098 ;;		_RunScheduler
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text4
  1103  001722                     __ptext4:
  1104                           	opt stack 0
  1105  001722                     _ManageDrivers:
  1106                           	opt stack 22
  1107                           
  1108                           ;OS_manage.c: 56: unsigned char LoopIndex;
  1109                           ;OS_manage.c: 57: for(LoopIndex = (unsigned char)0 ; LoopIndex < (unsigned char)3 ; Loop
      +                          Index++)
  1110                           
  1111                           ;incstack = 0
  1112  001722  0E00               	movlw	0
  1113  001724  6E1B               	movwf	ManageDrivers@LoopIndex,c
  1114  001726                     l2343:
  1115  001726  0E02               	movlw	2
  1116  001728  641B               	cpfsgt	ManageDrivers@LoopIndex,c
  1117  00172A  D001               	goto	l2347
  1118  00172C  D005               	goto	l2353
  1119  00172E                     l2347:
  1120                           
  1121                           ;OS_manage.c: 58: {
  1122                           ;OS_manage.c: 59: MangeKeys(LoopIndex);
  1123  00172E  501B               	movf	ManageDrivers@LoopIndex,w,c
  1124  001730  EC20  F003         	call	_MangeKeys
  1125  001734  2A1B               	incf	ManageDrivers@LoopIndex,f,c
  1126  001736  D7F7               	goto	l2343
  1127  001738                     l2353:
  1128                           
  1129                           ;OS_manage.c: 60: }
  1130                           ;OS_manage.c: 61: EepromManage();
  1131  001738  EC36  F00A         	call	_EepromManage	;wreg free
  1132  00173C  0012               	return		;funcret
  1133  00173E                     __end_of_ManageDrivers:
  1134                           	opt stack 0
  1135                           tosu	equ	0xFFF
  1136                           tosh	equ	0xFFE
  1137                           tosl	equ	0xFFD
  1138                           pclath	equ	0xFFA
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postinc1	equ	0xFE6
  1148                           fsr1h	equ	0xFE2
  1149                           fsr1l	equ	0xFE1
  1150                           indf2	equ	0xFDF
  1151                           postinc2	equ	0xFDE
  1152                           fsr2h	equ	0xFDA
  1153                           fsr2l	equ	0xFD9
  1154                           status	equ	0xFD8
  1155                           
  1156 ;; *************** function _DisplayAlphaNumeric *****************
  1157 ;; Defined at:
  1158 ;;		line 41 in file "../../../../OS/OS_manage/OS_manage.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1172 ;;      Params:         0       0       0       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0       0       0
  1174 ;;      Temps:          0       0       0       0       0       0       0
  1175 ;;      Totals:         0       0       0       0       0       0       0
  1176 ;;Total ram usage:        0 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; Hardware stack levels required when called:    6
  1179 ;; This function calls:
  1180 ;;		_BCDManage7segment
  1181 ;; This function is called by:
  1182 ;;		_Start_App
  1183 ;;		_RunScheduler
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text5
  1188  0017B4                     __ptext5:
  1189                           	opt stack 0
  1190  0017B4                     _DisplayAlphaNumeric:
  1191                           	opt stack 22
  1192                           
  1193                           ;OS_manage.c: 43: BCDManage7segment();
  1194                           
  1195                           ;incstack = 0
  1196  0017B4  ECC5  F007         	call	_BCDManage7segment	;wreg free
  1197  0017B8  0012               	return		;funcret
  1198  0017BA                     __end_of_DisplayAlphaNumeric:
  1199                           	opt stack 0
  1200                           tosu	equ	0xFFF
  1201                           tosh	equ	0xFFE
  1202                           tosl	equ	0xFFD
  1203                           pclath	equ	0xFFA
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           postinc1	equ	0xFE6
  1213                           fsr1h	equ	0xFE2
  1214                           fsr1l	equ	0xFE1
  1215                           indf2	equ	0xFDF
  1216                           postinc2	equ	0xFDE
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function _ManageApplication *****************
  1222 ;; Defined at:
  1223 ;;		line 45 in file "../../../../OS/OS_manage/OS_manage.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    7
  1244 ;; This function calls:
  1245 ;;		_APP_MANAGE
  1246 ;; This function is called by:
  1247 ;;		_Start_App
  1248 ;;		_RunScheduler
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text6
  1253  0017BA                     __ptext6:
  1254                           	opt stack 0
  1255  0017BA                     _ManageApplication:
  1256                           	opt stack 21
  1257                           
  1258                           ;OS_manage.c: 47: APP_MANAGE();
  1259                           
  1260                           ;incstack = 0
  1261  0017BA  EC37  F005         	call	_APP_MANAGE	;wreg free
  1262  0017BE  0012               	return		;funcret
  1263  0017C0                     __end_of_ManageApplication:
  1264                           	opt stack 0
  1265                           tosu	equ	0xFFF
  1266                           tosh	equ	0xFFE
  1267                           tosl	equ	0xFFD
  1268                           pclath	equ	0xFFA
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           prodh	equ	0xFF4
  1274                           prodl	equ	0xFF3
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postinc1	equ	0xFE6
  1278                           fsr1h	equ	0xFE2
  1279                           fsr1l	equ	0xFE1
  1280                           indf2	equ	0xFDF
  1281                           postinc2	equ	0xFDE
  1282                           fsr2h	equ	0xFDA
  1283                           fsr2l	equ	0xFD9
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _ManageSpeedCalc *****************
  1287 ;; Defined at:
  1288 ;;		line 49 in file "../../../../OS/OS_manage/OS_manage.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1302 ;;      Params:         0       0       0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0
  1305 ;;      Totals:         0       0       0       0       0       0       0
  1306 ;;Total ram usage:        0 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    6
  1309 ;; This function calls:
  1310 ;;		_SpeedCalcManage
  1311 ;; This function is called by:
  1312 ;;		_Start_App
  1313 ;;		_RunScheduler
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text7
  1318  0017C0                     __ptext7:
  1319                           	opt stack 0
  1320  0017C0                     _ManageSpeedCalc:
  1321                           	opt stack 22
  1322                           
  1323                           ;OS_manage.c: 51: SpeedCalcManage();
  1324                           
  1325                           ;incstack = 0
  1326  0017C0  EC5F  F008         	call	_SpeedCalcManage	;wreg free
  1327  0017C4  0012               	return		;funcret
  1328  0017C6                     __end_of_ManageSpeedCalc:
  1329                           	opt stack 0
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           postinc1	equ	0xFE6
  1343                           fsr1h	equ	0xFE2
  1344                           fsr1l	equ	0xFE1
  1345                           indf2	equ	0xFDF
  1346                           postinc2	equ	0xFDE
  1347                           fsr2h	equ	0xFDA
  1348                           fsr2l	equ	0xFD9
  1349                           status	equ	0xFD8
  1350                           
  1351 ;; *************** function _SpeedCalcManage *****************
  1352 ;; Defined at:
  1353 ;;		line 63 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;		None
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  HundredMeter    2   46[COMRAM] unsigned short 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1367 ;;      Params:         0       0       0       0       0       0       0
  1368 ;;      Locals:         2       0       0       0       0       0       0
  1369 ;;      Temps:          2       0       0       0       0       0       0
  1370 ;;      Totals:         4       0       0       0       0       0       0
  1371 ;;Total ram usage:        4 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    5
  1374 ;; This function calls:
  1375 ;;		___lldiv
  1376 ;;		___lwdiv
  1377 ;;		___wmul
  1378 ;; This function is called by:
  1379 ;;		_ManageSpeedCalc
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text8
  1384  0010BE                     __ptext8:
  1385                           	opt stack 0
  1386  0010BE                     _SpeedCalcManage:
  1387                           	opt stack 22
  1388                           
  1389                           ;SpeedCalc.c: 65: unsigned short HundredMeterReference;
  1390                           ;SpeedCalc.c: 67: LapTimeTenthMilli = (HWtimerCount/(unsigned short)100) +
  1391                           ;SpeedCalc.c: 68: ((unsigned short)TimerOVFLcount * (unsigned short)655);
  1392                           
  1393                           ;incstack = 0
  1394  0010BE  C03D  F014         	movff	_HWtimerCount,___lwdiv@dividend	;volatile
  1395  0010C2  C03E  F015         	movff	_HWtimerCount+1,___lwdiv@dividend+1	;volatile
  1396  0010C6  0E00               	movlw	0
  1397  0010C8  6E17               	movwf	___lwdiv@divisor+1,c
  1398  0010CA  0E64               	movlw	100
  1399  0010CC  6E16               	movwf	___lwdiv@divisor,c
  1400  0010CE  ECEC  F009         	call	___lwdiv	;wreg free
  1401  0010D2  C014  F02D         	movff	?___lwdiv,??_SpeedCalcManage
  1402  0010D6  C015  F02E         	movff	?___lwdiv+1,??_SpeedCalcManage+1
  1403  0010DA  C04B  F014         	movff	_TimerOVFLcount,___wmul@multiplier
  1404  0010DE  6A15               	clrf	___wmul@multiplier+1,c
  1405  0010E0  0E02               	movlw	2
  1406  0010E2  6E17               	movwf	___wmul@multiplicand+1,c
  1407  0010E4  0E8F               	movlw	143
  1408  0010E6  6E16               	movwf	___wmul@multiplicand,c
  1409  0010E8  EC6B  F00B         	call	___wmul	;wreg free
  1410  0010EC  5014               	movf	?___wmul,w,c
  1411  0010EE  242D               	addwf	??_SpeedCalcManage,w,c
  1412  0010F0  6E3F               	movwf	_LapTimeTenthMilli,c
  1413  0010F2  5015               	movf	?___wmul+1,w,c
  1414  0010F4  202E               	addwfc	??_SpeedCalcManage+1,w,c
  1415  0010F6  6E40               	movwf	_LapTimeTenthMilli+1,c
  1416                           
  1417                           ;SpeedCalc.c: 70: LapDistanceCounter += LapCounter;
  1418  0010F8  504C               	movf	_LapCounter,w,c	;volatile
  1419  0010FA  2641               	addwf	_LapDistanceCounter,f,c
  1420  0010FC  0E00               	movlw	0
  1421  0010FE  2242               	addwfc	_LapDistanceCounter+1,f,c
  1422                           
  1423                           ;SpeedCalc.c: 72: LapCounter = (unsigned char)0;
  1424  001100  0E00               	movlw	0
  1425  001102  6E4C               	movwf	_LapCounter,c	;volatile
  1426                           
  1427                           ;SpeedCalc.c: 74: HundredMeterReference = (unsigned short)((unsigned long)100000 /
  1428                           ;SpeedCalc.c: 75: (unsigned long)CircumFactor);
  1429  001104  0EA0               	movlw	160
  1430  001106  6E20               	movwf	___lldiv@dividend,c
  1431  001108  0E86               	movlw	134
  1432  00110A  6E21               	movwf	___lldiv@dividend+1,c
  1433  00110C  0E01               	movlw	1
  1434  00110E  6E22               	movwf	___lldiv@dividend+2,c
  1435  001110  0E00               	movlw	0
  1436  001112  6E23               	movwf	___lldiv@dividend+3,c
  1437  001114  C066  F024         	movff	_CircumFactor,___lldiv@divisor
  1438  001118  C067  F025         	movff	_CircumFactor+1,___lldiv@divisor+1
  1439  00111C  6A26               	clrf	___lldiv@divisor+2,c
  1440  00111E  6A27               	clrf	___lldiv@divisor+3,c
  1441  001120  ECED  F008         	call	___lldiv	;wreg free
  1442  001124  C020  F02F         	movff	?___lldiv,SpeedCalcManage@HundredMeterReference
  1443  001128  C021  F030         	movff	?___lldiv+1,SpeedCalcManage@HundredMeterReference+1
  1444                           
  1445                           ;SpeedCalc.c: 77: if(LapDistanceCounter >= HundredMeterReference)
  1446  00112C  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1447  00112E  5C41               	subwf	_LapDistanceCounter,w,c
  1448  001130  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1449  001132  5842               	subwfb	_LapDistanceCounter+1,w,c
  1450  001134  A0D8               	btfss	status,0,c
  1451  001136  0012               	return	
  1452                           
  1453                           ;SpeedCalc.c: 78: {
  1454                           ;SpeedCalc.c: 79: DistTravelCntr ++;
  1455  001138  0E01               	movlw	1
  1456  00113A  2639               	addwf	_DistTravelCntr,f,c
  1457  00113C  0E00               	movlw	0
  1458  00113E  223A               	addwfc	_DistTravelCntr+1,f,c
  1459  001140  223B               	addwfc	_DistTravelCntr+2,f,c
  1460  001142  223C               	addwfc	_DistTravelCntr+3,f,c
  1461                           
  1462                           ;SpeedCalc.c: 80: LapDistanceCounter -= HundredMeterReference;
  1463  001144  502F               	movf	SpeedCalcManage@HundredMeterReference,w,c
  1464  001146  5E41               	subwf	_LapDistanceCounter,f,c
  1465  001148  5030               	movf	SpeedCalcManage@HundredMeterReference+1,w,c
  1466  00114A  5A42               	subwfb	_LapDistanceCounter+1,f,c
  1467                           
  1468                           ;SpeedCalc.c: 81: }
  1469  00114C  0012               	return	
  1470  00114E                     __end_of_SpeedCalcManage:
  1471                           	opt stack 0
  1472                           tosu	equ	0xFFF
  1473                           tosh	equ	0xFFE
  1474                           tosl	equ	0xFFD
  1475                           pclath	equ	0xFFA
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodh	equ	0xFF4
  1481                           prodl	equ	0xFF3
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postinc1	equ	0xFE6
  1485                           fsr1h	equ	0xFE2
  1486                           fsr1l	equ	0xFE1
  1487                           indf2	equ	0xFDF
  1488                           postinc2	equ	0xFDE
  1489                           fsr2h	equ	0xFDA
  1490                           fsr2l	equ	0xFD9
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function _MangeKeys *****************
  1494 ;; Defined at:
  1495 ;;		line 29 in file "../../../../Common/Driver/Key/Key.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  KeyID           1    wreg     unsigned char 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  KeyID           1   25[COMRAM] unsigned char 
  1500 ;;  HWIreading      1   24[COMRAM] unsigned char 
  1501 ;;  KeyState        1   23[COMRAM] unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1511 ;;      Params:         0       0       0       0       0       0       0
  1512 ;;      Locals:         3       0       0       0       0       0       0
  1513 ;;      Temps:          2       0       0       0       0       0       0
  1514 ;;      Totals:         5       0       0       0       0       0       0
  1515 ;;Total ram usage:        5 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    5
  1518 ;; This function calls:
  1519 ;;		_HWI_DIGI_READ
  1520 ;; This function is called by:
  1521 ;;		_ManageDrivers
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text9
  1526  000640                     __ptext9:
  1527                           	opt stack 0
  1528  000640                     _MangeKeys:
  1529                           	opt stack 22
  1530                           
  1531                           ;incstack = 0
  1532                           ;MangeKeys@KeyID stored from wreg
  1533  000640  6E1A               	movwf	MangeKeys@KeyID,c
  1534                           
  1535                           ;Key.c: 31: unsigned char HWIreading;
  1536                           ;Key.c: 32: unsigned char KeyState;
  1537                           ;Key.c: 34: KeyState = KeyInternalData[KeyID].KeyState & (unsigned char)0x3F;
  1538  000642  501A               	movf	MangeKeys@KeyID,w,c
  1539  000644  0D03               	mullw	3
  1540  000646  0E5B               	movlw	low _KeyInternalData
  1541  000648  24F3               	addwf	prodl,w,c
  1542  00064A  6ED9               	movwf	fsr2l,c
  1543  00064C  0E00               	movlw	high _KeyInternalData
  1544  00064E  20F4               	addwfc	prodh,w,c
  1545  000650  6EDA               	movwf	fsr2h,c
  1546  000652  50DF               	movf	indf2,w,c
  1547  000654  0B3F               	andlw	63
  1548  000656  6E18               	movwf	MangeKeys@KeyState,c
  1549                           
  1550                           ;Key.c: 35: HWIreading = HWI_DIGI_READ(KeyArrayConfig[KeyID].HWI_ID);
  1551  000658  501A               	movf	MangeKeys@KeyID,w,c
  1552  00065A  0D08               	mullw	8
  1553  00065C  0E1B               	movlw	low _KeyArrayConfig
  1554  00065E  24F3               	addwf	prodl,w,c
  1555  000660  6EF6               	movwf	tblptrl,c
  1556  000662  0E06               	movlw	high _KeyArrayConfig
  1557  000664  20F4               	addwfc	prodh,w,c
  1558  000666  6EF7               	movwf	tblptrh,c
  1559  000668                     	if	0	;There are less than 3 active tblptr bytes
  1560  000668                     	endif
  1561  000668  0008               	tblrd		*
  1562  00066A  50F5               	movf	tablat,w,c
  1563  00066C  EC94  F00A         	call	_HWI_DIGI_READ
  1564  000670  6E19               	movwf	MangeKeys@HWIreading,c
  1565                           
  1566                           ;Key.c: 37: switch(KeyState)
  1567  000672  D1F2               	goto	l2293
  1568  000674                     l2247:
  1569                           
  1570                           ;Key.c: 40: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1571  000674  501A               	movf	MangeKeys@KeyID,w,c
  1572  000676  0D08               	mullw	8
  1573  000678  0E01               	movlw	1
  1574  00067A  26F3               	addwf	prodl,f,c
  1575  00067C  0E00               	movlw	0
  1576  00067E  22F4               	addwfc	prodh,f,c
  1577  000680  0E1B               	movlw	low _KeyArrayConfig
  1578  000682  24F3               	addwf	prodl,w,c
  1579  000684  6EF6               	movwf	tblptrl,c
  1580  000686  0E06               	movlw	high _KeyArrayConfig
  1581  000688  20F4               	addwfc	prodh,w,c
  1582  00068A  6EF7               	movwf	tblptrh,c
  1583  00068C                     	if	0	;There are less than 3 active tblptr bytes
  1584  00068C                     	endif
  1585  00068C  0008               	tblrd		*
  1586  00068E  50F5               	movf	tablat,w,c
  1587  000690  1819               	xorwf	MangeKeys@HWIreading,w,c
  1588  000692  A4D8               	btfss	status,2,c
  1589  000694  D059               	goto	l2257
  1590                           
  1591                           ;Key.c: 41: {
  1592                           ;Key.c: 42: KeyInternalData[KeyID].KeyCounter++;
  1593  000696  501A               	movf	MangeKeys@KeyID,w,c
  1594  000698  0D03               	mullw	3
  1595  00069A  0E01               	movlw	1
  1596  00069C  26F3               	addwf	prodl,f,c
  1597  00069E  0E00               	movlw	0
  1598  0006A0  22F4               	addwfc	prodh,f,c
  1599  0006A2  0E5B               	movlw	low _KeyInternalData
  1600  0006A4  24F3               	addwf	prodl,w,c
  1601  0006A6  6ED9               	movwf	fsr2l,c
  1602  0006A8  0E00               	movlw	high _KeyInternalData
  1603  0006AA  20F4               	addwfc	prodh,w,c
  1604  0006AC  6EDA               	movwf	fsr2h,c
  1605  0006AE  2ADE               	incf	postinc2,f,c
  1606  0006B0  0E00               	movlw	0
  1607  0006B2  22DD               	addwfc	postdec2,f,c
  1608                           
  1609                           ;Key.c: 43: if(KeyArrayConfig[KeyID].ShortPress ==
  1610                           ;Key.c: 44: KeyInternalData[KeyID].KeyCounter)
  1611  0006B4  501A               	movf	MangeKeys@KeyID,w,c
  1612  0006B6  0D03               	mullw	3
  1613  0006B8  0E01               	movlw	1
  1614  0006BA  26F3               	addwf	prodl,f,c
  1615  0006BC  0E00               	movlw	0
  1616  0006BE  22F4               	addwfc	prodh,f,c
  1617  0006C0  0E5B               	movlw	low _KeyInternalData
  1618  0006C2  24F3               	addwf	prodl,w,c
  1619  0006C4  6ED9               	movwf	fsr2l,c
  1620  0006C6  0E00               	movlw	high _KeyInternalData
  1621  0006C8  20F4               	addwfc	prodh,w,c
  1622  0006CA  6EDA               	movwf	fsr2h,c
  1623  0006CC  501A               	movf	MangeKeys@KeyID,w,c
  1624  0006CE  0D08               	mullw	8
  1625  0006D0  0E04               	movlw	4
  1626  0006D2  26F3               	addwf	prodl,f,c
  1627  0006D4  0E00               	movlw	0
  1628  0006D6  22F4               	addwfc	prodh,f,c
  1629  0006D8  0E1B               	movlw	low _KeyArrayConfig
  1630  0006DA  24F3               	addwf	prodl,w,c
  1631  0006DC  6EF6               	movwf	tblptrl,c
  1632  0006DE  0E06               	movlw	high _KeyArrayConfig
  1633  0006E0  20F4               	addwfc	prodh,w,c
  1634  0006E2  6EF7               	movwf	tblptrh,c
  1635  0006E4                     	if	0	;There are less than 3 active tblptr bytes
  1636  0006E4                     	endif
  1637  0006E4  50DE               	movf	postinc2,w,c
  1638  0006E6  0009               	tblrd		*+
  1639  0006E8  18F5               	xorwf	tablat,w,c
  1640  0006EA  E104               	bnz	u1451
  1641  0006EC  50DE               	movf	postinc2,w,c
  1642  0006EE  0009               	tblrd		*+
  1643  0006F0  18F5               	xorwf	tablat,w,c
  1644  0006F2  A4D8               	btfss	status,2,c
  1645  0006F4                     u1451:
  1646  0006F4  0012               	return	
  1647                           
  1648                           ;Key.c: 45: {
  1649                           ;Key.c: 46: KeyInternalData[KeyID].KeyState = (unsigned char)0x81;
  1650  0006F6  501A               	movf	MangeKeys@KeyID,w,c
  1651  0006F8  0D03               	mullw	3
  1652  0006FA  0E5B               	movlw	low _KeyInternalData
  1653  0006FC  24F3               	addwf	prodl,w,c
  1654  0006FE  6ED9               	movwf	fsr2l,c
  1655  000700  0E00               	movlw	high _KeyInternalData
  1656  000702  20F4               	addwfc	prodh,w,c
  1657  000704  6EDA               	movwf	fsr2h,c
  1658  000706  0E81               	movlw	129
  1659  000708  6EDF               	movwf	indf2,c
  1660                           
  1661                           ;Key.c: 47: KeyInternalData[KeyID].KeyCounter =
  1662                           ;Key.c: 48: KeyArrayConfig[KeyID].ReleaseTicks;
  1663  00070A  501A               	movf	MangeKeys@KeyID,w,c
  1664  00070C  0D08               	mullw	8
  1665  00070E  0E02               	movlw	2
  1666  000710  26F3               	addwf	prodl,f,c
  1667  000712  0E00               	movlw	0
  1668  000714  22F4               	addwfc	prodh,f,c
  1669  000716  0E1B               	movlw	low _KeyArrayConfig
  1670  000718  24F3               	addwf	prodl,w,c
  1671  00071A  6EF6               	movwf	tblptrl,c
  1672  00071C  0E06               	movlw	high _KeyArrayConfig
  1673  00071E  20F4               	addwfc	prodh,w,c
  1674  000720  6EF7               	movwf	tblptrh,c
  1675  000722                     	if	0	;There are less than 3 active tblptr bytes
  1676  000722                     	endif
  1677  000722  501A               	movf	MangeKeys@KeyID,w,c
  1678  000724  0D03               	mullw	3
  1679  000726  0E01               	movlw	1
  1680  000728  26F3               	addwf	prodl,f,c
  1681  00072A  0E00               	movlw	0
  1682  00072C  22F4               	addwfc	prodh,f,c
  1683  00072E  0E5B               	movlw	low _KeyInternalData
  1684  000730  24F3               	addwf	prodl,w,c
  1685  000732  6ED9               	movwf	fsr2l,c
  1686  000734  0E00               	movlw	high _KeyInternalData
  1687  000736  20F4               	addwfc	prodh,w,c
  1688  000738  6EDA               	movwf	fsr2h,c
  1689  00073A  0009               	tblrd		*+
  1690  00073C  CFF5 FFDE          	movff	tablat,postinc2
  1691  000740  0008               	tblrd		*
  1692  000742  CFF5 FFDD          	movff	tablat,postdec2
  1693                           
  1694                           ;Key.c: 49: }
  1695                           ;Key.c: 50: }
  1696  000746  0012               	return	
  1697  000748                     l2257:
  1698                           
  1699                           ;Key.c: 51: else
  1700                           ;Key.c: 52: {
  1701                           ;Key.c: 53: KeyInternalData[KeyID].KeyCounter = (unsigned short)0;
  1702  000748  501A               	movf	MangeKeys@KeyID,w,c
  1703  00074A  0D03               	mullw	3
  1704  00074C  0E01               	movlw	1
  1705  00074E  26F3               	addwf	prodl,f,c
  1706  000750  0E00               	movlw	0
  1707  000752  22F4               	addwfc	prodh,f,c
  1708  000754  0E5B               	movlw	low _KeyInternalData
  1709  000756  24F3               	addwf	prodl,w,c
  1710  000758  6ED9               	movwf	fsr2l,c
  1711  00075A  0E00               	movlw	high _KeyInternalData
  1712  00075C  20F4               	addwfc	prodh,w,c
  1713  00075E  6EDA               	movwf	fsr2h,c
  1714  000760  0E00               	movlw	0
  1715  000762  6EDE               	movwf	postinc2,c
  1716  000764  0E00               	movlw	0
  1717  000766  6EDD               	movwf	postdec2,c
  1718                           
  1719                           ;Key.c: 54: }
  1720                           ;Key.c: 55: break;
  1721  000768  0012               	return	
  1722  00076A                     l2259:
  1723                           
  1724                           ;Key.c: 57: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  1725  00076A  501A               	movf	MangeKeys@KeyID,w,c
  1726  00076C  0D08               	mullw	8
  1727  00076E  0E01               	movlw	1
  1728  000770  26F3               	addwf	prodl,f,c
  1729  000772  0E00               	movlw	0
  1730  000774  22F4               	addwfc	prodh,f,c
  1731  000776  0E1B               	movlw	low _KeyArrayConfig
  1732  000778  24F3               	addwf	prodl,w,c
  1733  00077A  6EF6               	movwf	tblptrl,c
  1734  00077C  0E06               	movlw	high _KeyArrayConfig
  1735  00077E  20F4               	addwfc	prodh,w,c
  1736  000780  6EF7               	movwf	tblptrh,c
  1737  000782                     	if	0	;There are less than 3 active tblptr bytes
  1738  000782                     	endif
  1739  000782  0008               	tblrd		*
  1740  000784  50F5               	movf	tablat,w,c
  1741  000786  1819               	xorwf	MangeKeys@HWIreading,w,c
  1742  000788  A4D8               	btfss	status,2,c
  1743  00078A  D098               	goto	l2273
  1744                           
  1745                           ;Key.c: 58: {
  1746                           ;Key.c: 59: if ( KeyInternalData[KeyID].KeyCounter >=
  1747                           ;Key.c: 60: KeyArrayConfig[KeyID].ReleaseTicks)
  1748  00078C  501A               	movf	MangeKeys@KeyID,w,c
  1749  00078E  0D08               	mullw	8
  1750  000790  0E02               	movlw	2
  1751  000792  26F3               	addwf	prodl,f,c
  1752  000794  0E00               	movlw	0
  1753  000796  22F4               	addwfc	prodh,f,c
  1754  000798  0E1B               	movlw	low _KeyArrayConfig
  1755  00079A  24F3               	addwf	prodl,w,c
  1756  00079C  6EF6               	movwf	tblptrl,c
  1757  00079E  0E06               	movlw	high _KeyArrayConfig
  1758  0007A0  20F4               	addwfc	prodh,w,c
  1759  0007A2  6EF7               	movwf	tblptrh,c
  1760  0007A4                     	if	0	;There are less than 3 active tblptr bytes
  1761  0007A4                     	endif
  1762  0007A4  501A               	movf	MangeKeys@KeyID,w,c
  1763  0007A6  0D03               	mullw	3
  1764  0007A8  0E01               	movlw	1
  1765  0007AA  26F3               	addwf	prodl,f,c
  1766  0007AC  0E00               	movlw	0
  1767  0007AE  22F4               	addwfc	prodh,f,c
  1768  0007B0  0E5B               	movlw	low _KeyInternalData
  1769  0007B2  24F3               	addwf	prodl,w,c
  1770  0007B4  6ED9               	movwf	fsr2l,c
  1771  0007B6  0E00               	movlw	high _KeyInternalData
  1772  0007B8  20F4               	addwfc	prodh,w,c
  1773  0007BA  6EDA               	movwf	fsr2h,c
  1774  0007BC  0009               	tblrd		*+
  1775  0007BE  50F5               	movf	tablat,w,c
  1776  0007C0  5CDE               	subwf	postinc2,w,c
  1777  0007C2  0009               	tblrd		*+
  1778  0007C4  50F5               	movf	tablat,w,c
  1779  0007C6  58DE               	subwfb	postinc2,w,c
  1780  0007C8  A0D8               	btfss	status,0,c
  1781  0007CA  D059               	goto	l2271
  1782                           
  1783                           ;Key.c: 61: {
  1784                           ;Key.c: 62: KeyInternalData[KeyID].KeyCounter++;
  1785  0007CC  501A               	movf	MangeKeys@KeyID,w,c
  1786  0007CE  0D03               	mullw	3
  1787  0007D0  0E01               	movlw	1
  1788  0007D2  26F3               	addwf	prodl,f,c
  1789  0007D4  0E00               	movlw	0
  1790  0007D6  22F4               	addwfc	prodh,f,c
  1791  0007D8  0E5B               	movlw	low _KeyInternalData
  1792  0007DA  24F3               	addwf	prodl,w,c
  1793  0007DC  6ED9               	movwf	fsr2l,c
  1794  0007DE  0E00               	movlw	high _KeyInternalData
  1795  0007E0  20F4               	addwfc	prodh,w,c
  1796  0007E2  6EDA               	movwf	fsr2h,c
  1797  0007E4  2ADE               	incf	postinc2,f,c
  1798  0007E6  0E00               	movlw	0
  1799  0007E8  22DD               	addwfc	postdec2,f,c
  1800                           
  1801                           ;Key.c: 63: if(KeyArrayConfig[KeyID].LongPress ==
  1802                           ;Key.c: 64: KeyInternalData[KeyID].KeyCounter)
  1803  0007EA  501A               	movf	MangeKeys@KeyID,w,c
  1804  0007EC  0D03               	mullw	3
  1805  0007EE  0E01               	movlw	1
  1806  0007F0  26F3               	addwf	prodl,f,c
  1807  0007F2  0E00               	movlw	0
  1808  0007F4  22F4               	addwfc	prodh,f,c
  1809  0007F6  0E5B               	movlw	low _KeyInternalData
  1810  0007F8  24F3               	addwf	prodl,w,c
  1811  0007FA  6ED9               	movwf	fsr2l,c
  1812  0007FC  0E00               	movlw	high _KeyInternalData
  1813  0007FE  20F4               	addwfc	prodh,w,c
  1814  000800  6EDA               	movwf	fsr2h,c
  1815  000802  501A               	movf	MangeKeys@KeyID,w,c
  1816  000804  0D08               	mullw	8
  1817  000806  0E06               	movlw	6
  1818  000808  26F3               	addwf	prodl,f,c
  1819  00080A  0E00               	movlw	0
  1820  00080C  22F4               	addwfc	prodh,f,c
  1821  00080E  0E1B               	movlw	low _KeyArrayConfig
  1822  000810  24F3               	addwf	prodl,w,c
  1823  000812  6EF6               	movwf	tblptrl,c
  1824  000814  0E06               	movlw	high _KeyArrayConfig
  1825  000816  20F4               	addwfc	prodh,w,c
  1826  000818  6EF7               	movwf	tblptrh,c
  1827  00081A                     	if	0	;There are less than 3 active tblptr bytes
  1828  00081A                     	endif
  1829  00081A  50DE               	movf	postinc2,w,c
  1830  00081C  0009               	tblrd		*+
  1831  00081E  18F5               	xorwf	tablat,w,c
  1832  000820  E104               	bnz	u1481
  1833  000822  50DE               	movf	postinc2,w,c
  1834  000824  0009               	tblrd		*+
  1835  000826  18F5               	xorwf	tablat,w,c
  1836  000828  A4D8               	btfss	status,2,c
  1837  00082A                     u1481:
  1838  00082A  0012               	return	
  1839                           
  1840                           ;Key.c: 65: {
  1841                           ;Key.c: 66: KeyInternalData[KeyID].KeyState = (unsigned char)0x82;
  1842  00082C  501A               	movf	MangeKeys@KeyID,w,c
  1843  00082E  0D03               	mullw	3
  1844  000830  0E5B               	movlw	low _KeyInternalData
  1845  000832  24F3               	addwf	prodl,w,c
  1846  000834  6ED9               	movwf	fsr2l,c
  1847  000836  0E00               	movlw	high _KeyInternalData
  1848  000838  20F4               	addwfc	prodh,w,c
  1849  00083A  6EDA               	movwf	fsr2h,c
  1850  00083C  0E82               	movlw	130
  1851  00083E  6EDF               	movwf	indf2,c
  1852                           
  1853                           ;Key.c: 67: KeyInternalData[KeyID].KeyCounter =
  1854                           ;Key.c: 68: KeyArrayConfig[KeyID].ReleaseTicks;
  1855  000840  501A               	movf	MangeKeys@KeyID,w,c
  1856  000842  0D08               	mullw	8
  1857  000844  0E02               	movlw	2
  1858  000846  26F3               	addwf	prodl,f,c
  1859  000848  0E00               	movlw	0
  1860  00084A  22F4               	addwfc	prodh,f,c
  1861  00084C  0E1B               	movlw	low _KeyArrayConfig
  1862  00084E  24F3               	addwf	prodl,w,c
  1863  000850  6EF6               	movwf	tblptrl,c
  1864  000852  0E06               	movlw	high _KeyArrayConfig
  1865  000854  20F4               	addwfc	prodh,w,c
  1866  000856  6EF7               	movwf	tblptrh,c
  1867  000858                     	if	0	;There are less than 3 active tblptr bytes
  1868  000858                     	endif
  1869  000858  501A               	movf	MangeKeys@KeyID,w,c
  1870  00085A  0D03               	mullw	3
  1871  00085C  0E01               	movlw	1
  1872  00085E  26F3               	addwf	prodl,f,c
  1873  000860  0E00               	movlw	0
  1874  000862  22F4               	addwfc	prodh,f,c
  1875  000864  0E5B               	movlw	low _KeyInternalData
  1876  000866  24F3               	addwf	prodl,w,c
  1877  000868  6ED9               	movwf	fsr2l,c
  1878  00086A  0E00               	movlw	high _KeyInternalData
  1879  00086C  20F4               	addwfc	prodh,w,c
  1880  00086E  6EDA               	movwf	fsr2h,c
  1881  000870  0009               	tblrd		*+
  1882  000872  CFF5 FFDE          	movff	tablat,postinc2
  1883  000876  0008               	tblrd		*
  1884  000878  CFF5 FFDD          	movff	tablat,postdec2
  1885                           
  1886                           ;Key.c: 69: }
  1887                           ;Key.c: 70: }
  1888  00087C  0012               	return	
  1889  00087E                     l2271:
  1890                           
  1891                           ;Key.c: 71: else
  1892                           ;Key.c: 72: {
  1893                           ;Key.c: 73: KeyInternalData[KeyID].KeyCounter =
  1894                           ;Key.c: 74: KeyArrayConfig[KeyID].ReleaseTicks;
  1895  00087E  501A               	movf	MangeKeys@KeyID,w,c
  1896  000880  0D08               	mullw	8
  1897  000882  0E02               	movlw	2
  1898  000884  26F3               	addwf	prodl,f,c
  1899  000886  0E00               	movlw	0
  1900  000888  22F4               	addwfc	prodh,f,c
  1901  00088A  0E1B               	movlw	low _KeyArrayConfig
  1902  00088C  24F3               	addwf	prodl,w,c
  1903  00088E  6EF6               	movwf	tblptrl,c
  1904  000890  0E06               	movlw	high _KeyArrayConfig
  1905  000892  20F4               	addwfc	prodh,w,c
  1906  000894  6EF7               	movwf	tblptrh,c
  1907  000896                     	if	0	;There are less than 3 active tblptr bytes
  1908  000896                     	endif
  1909  000896  501A               	movf	MangeKeys@KeyID,w,c
  1910  000898  0D03               	mullw	3
  1911  00089A  0E01               	movlw	1
  1912  00089C  26F3               	addwf	prodl,f,c
  1913  00089E  0E00               	movlw	0
  1914  0008A0  22F4               	addwfc	prodh,f,c
  1915  0008A2  0E5B               	movlw	low _KeyInternalData
  1916  0008A4  24F3               	addwf	prodl,w,c
  1917  0008A6  6ED9               	movwf	fsr2l,c
  1918  0008A8  0E00               	movlw	high _KeyInternalData
  1919  0008AA  20F4               	addwfc	prodh,w,c
  1920  0008AC  6EDA               	movwf	fsr2h,c
  1921  0008AE  0009               	tblrd		*+
  1922  0008B0  CFF5 FFDE          	movff	tablat,postinc2
  1923  0008B4  0008               	tblrd		*
  1924  0008B6  CFF5 FFDD          	movff	tablat,postdec2
  1925                           
  1926                           ;Key.c: 75: }
  1927                           ;Key.c: 76: }
  1928  0008BA  0012               	return	
  1929  0008BC                     l2273:
  1930                           
  1931                           ;Key.c: 77: else
  1932                           ;Key.c: 78: {
  1933                           ;Key.c: 79: if ( KeyInternalData[KeyID].KeyCounter >
  1934                           ;Key.c: 80: KeyArrayConfig[KeyID].ReleaseTicks)
  1935  0008BC  501A               	movf	MangeKeys@KeyID,w,c
  1936  0008BE  0D03               	mullw	3
  1937  0008C0  0E01               	movlw	1
  1938  0008C2  26F3               	addwf	prodl,f,c
  1939  0008C4  0E00               	movlw	0
  1940  0008C6  22F4               	addwfc	prodh,f,c
  1941  0008C8  0E5B               	movlw	low _KeyInternalData
  1942  0008CA  24F3               	addwf	prodl,w,c
  1943  0008CC  6ED9               	movwf	fsr2l,c
  1944  0008CE  0E00               	movlw	high _KeyInternalData
  1945  0008D0  20F4               	addwfc	prodh,w,c
  1946  0008D2  6EDA               	movwf	fsr2h,c
  1947  0008D4  501A               	movf	MangeKeys@KeyID,w,c
  1948  0008D6  0D08               	mullw	8
  1949  0008D8  0E02               	movlw	2
  1950  0008DA  26F3               	addwf	prodl,f,c
  1951  0008DC  0E00               	movlw	0
  1952  0008DE  22F4               	addwfc	prodh,f,c
  1953  0008E0  0E1B               	movlw	low _KeyArrayConfig
  1954  0008E2  24F3               	addwf	prodl,w,c
  1955  0008E4  6EF6               	movwf	tblptrl,c
  1956  0008E6  0E06               	movlw	high _KeyArrayConfig
  1957  0008E8  20F4               	addwfc	prodh,w,c
  1958  0008EA  6EF7               	movwf	tblptrh,c
  1959  0008EC                     	if	0	;There are less than 3 active tblptr bytes
  1960  0008EC                     	endif
  1961  0008EC  50DE               	movf	postinc2,w,c
  1962  0008EE  0009               	tblrd		*+
  1963  0008F0  5CF5               	subwf	tablat,w,c
  1964  0008F2  50DE               	movf	postinc2,w,c
  1965  0008F4  0009               	tblrd		*+
  1966  0008F6  58F5               	subwfb	tablat,w,c
  1967  0008F8  B0D8               	btfsc	status,0,c
  1968  0008FA  D01F               	goto	l2277
  1969                           
  1970                           ;Key.c: 81: {
  1971                           ;Key.c: 82: KeyInternalData[KeyID].KeyCounter =
  1972                           ;Key.c: 83: KeyArrayConfig[KeyID].ReleaseTicks;
  1973  0008FC  501A               	movf	MangeKeys@KeyID,w,c
  1974  0008FE  0D08               	mullw	8
  1975  000900  0E02               	movlw	2
  1976  000902  26F3               	addwf	prodl,f,c
  1977  000904  0E00               	movlw	0
  1978  000906  22F4               	addwfc	prodh,f,c
  1979  000908  0E1B               	movlw	low _KeyArrayConfig
  1980  00090A  24F3               	addwf	prodl,w,c
  1981  00090C  6EF6               	movwf	tblptrl,c
  1982  00090E  0E06               	movlw	high _KeyArrayConfig
  1983  000910  20F4               	addwfc	prodh,w,c
  1984  000912  6EF7               	movwf	tblptrh,c
  1985  000914                     	if	0	;There are less than 3 active tblptr bytes
  1986  000914                     	endif
  1987  000914  501A               	movf	MangeKeys@KeyID,w,c
  1988  000916  0D03               	mullw	3
  1989  000918  0E01               	movlw	1
  1990  00091A  26F3               	addwf	prodl,f,c
  1991  00091C  0E00               	movlw	0
  1992  00091E  22F4               	addwfc	prodh,f,c
  1993  000920  0E5B               	movlw	low _KeyInternalData
  1994  000922  24F3               	addwf	prodl,w,c
  1995  000924  6ED9               	movwf	fsr2l,c
  1996  000926  0E00               	movlw	high _KeyInternalData
  1997  000928  20F4               	addwfc	prodh,w,c
  1998  00092A  6EDA               	movwf	fsr2h,c
  1999  00092C  0009               	tblrd		*+
  2000  00092E  CFF5 FFDE          	movff	tablat,postinc2
  2001  000932  0008               	tblrd		*
  2002  000934  CFF5 FFDD          	movff	tablat,postdec2
  2003                           
  2004                           ;Key.c: 84: }
  2005  000938  0012               	return	
  2006  00093A                     l2277:
  2007                           
  2008                           ;Key.c: 85: else
  2009                           ;Key.c: 86: {
  2010                           ;Key.c: 87: KeyInternalData[KeyID].KeyCounter--;
  2011  00093A  501A               	movf	MangeKeys@KeyID,w,c
  2012  00093C  0D03               	mullw	3
  2013  00093E  0E01               	movlw	1
  2014  000940  26F3               	addwf	prodl,f,c
  2015  000942  0E00               	movlw	0
  2016  000944  22F4               	addwfc	prodh,f,c
  2017  000946  0E5B               	movlw	low _KeyInternalData
  2018  000948  24F3               	addwf	prodl,w,c
  2019  00094A  6ED9               	movwf	fsr2l,c
  2020  00094C  0E00               	movlw	high _KeyInternalData
  2021  00094E  20F4               	addwfc	prodh,w,c
  2022  000950  6EDA               	movwf	fsr2h,c
  2023  000952  06DE               	decf	postinc2,f,c
  2024  000954  0E00               	movlw	0
  2025  000956  5ADD               	subwfb	postdec2,f,c
  2026                           
  2027                           ;Key.c: 88: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2028  000958  501A               	movf	MangeKeys@KeyID,w,c
  2029  00095A  0D03               	mullw	3
  2030  00095C  0E01               	movlw	1
  2031  00095E  26F3               	addwf	prodl,f,c
  2032  000960  0E00               	movlw	0
  2033  000962  22F4               	addwfc	prodh,f,c
  2034  000964  0E5B               	movlw	low _KeyInternalData
  2035  000966  24F3               	addwf	prodl,w,c
  2036  000968  6ED9               	movwf	fsr2l,c
  2037  00096A  0E00               	movlw	high _KeyInternalData
  2038  00096C  20F4               	addwfc	prodh,w,c
  2039  00096E  6EDA               	movwf	fsr2h,c
  2040  000970  50DE               	movf	postinc2,w,c
  2041  000972  10DE               	iorwf	postinc2,w,c
  2042  000974  A4D8               	btfss	status,2,c
  2043  000976  0012               	return	
  2044                           
  2045                           ;Key.c: 89: {
  2046                           ;Key.c: 90: KeyInternalData[KeyID].KeyState = (unsigned char)0x40;
  2047  000978  501A               	movf	MangeKeys@KeyID,w,c
  2048  00097A  0D03               	mullw	3
  2049  00097C  0E5B               	movlw	low _KeyInternalData
  2050  00097E  24F3               	addwf	prodl,w,c
  2051  000980  6ED9               	movwf	fsr2l,c
  2052  000982  0E00               	movlw	high _KeyInternalData
  2053  000984  20F4               	addwfc	prodh,w,c
  2054  000986  6EDA               	movwf	fsr2h,c
  2055  000988  0E40               	movlw	64
  2056  00098A  6EDF               	movwf	indf2,c
  2057                           
  2058                           ;Key.c: 91: }
  2059                           ;Key.c: 92: }
  2060                           ;Key.c: 93: }
  2061                           ;Key.c: 94: break;
  2062  00098C  0012               	return	
  2063  00098E                     l2281:
  2064                           
  2065                           ;Key.c: 96: if( KeyArrayConfig[KeyID].ActiveValue == HWIreading)
  2066  00098E  501A               	movf	MangeKeys@KeyID,w,c
  2067  000990  0D08               	mullw	8
  2068  000992  0E01               	movlw	1
  2069  000994  26F3               	addwf	prodl,f,c
  2070  000996  0E00               	movlw	0
  2071  000998  22F4               	addwfc	prodh,f,c
  2072  00099A  0E1B               	movlw	low _KeyArrayConfig
  2073  00099C  24F3               	addwf	prodl,w,c
  2074  00099E  6EF6               	movwf	tblptrl,c
  2075  0009A0  0E06               	movlw	high _KeyArrayConfig
  2076  0009A2  20F4               	addwfc	prodh,w,c
  2077  0009A4  6EF7               	movwf	tblptrh,c
  2078  0009A6                     	if	0	;There are less than 3 active tblptr bytes
  2079  0009A6                     	endif
  2080  0009A6  0008               	tblrd		*
  2081  0009A8  50F5               	movf	tablat,w,c
  2082  0009AA  1819               	xorwf	MangeKeys@HWIreading,w,c
  2083  0009AC  A4D8               	btfss	status,2,c
  2084  0009AE  D01F               	goto	l2285
  2085                           
  2086                           ;Key.c: 97: {
  2087                           ;Key.c: 98: KeyInternalData[KeyID].KeyCounter =
  2088                           ;Key.c: 99: KeyArrayConfig[KeyID].ReleaseTicks;
  2089  0009B0  501A               	movf	MangeKeys@KeyID,w,c
  2090  0009B2  0D08               	mullw	8
  2091  0009B4  0E02               	movlw	2
  2092  0009B6  26F3               	addwf	prodl,f,c
  2093  0009B8  0E00               	movlw	0
  2094  0009BA  22F4               	addwfc	prodh,f,c
  2095  0009BC  0E1B               	movlw	low _KeyArrayConfig
  2096  0009BE  24F3               	addwf	prodl,w,c
  2097  0009C0  6EF6               	movwf	tblptrl,c
  2098  0009C2  0E06               	movlw	high _KeyArrayConfig
  2099  0009C4  20F4               	addwfc	prodh,w,c
  2100  0009C6  6EF7               	movwf	tblptrh,c
  2101  0009C8                     	if	0	;There are less than 3 active tblptr bytes
  2102  0009C8                     	endif
  2103  0009C8  501A               	movf	MangeKeys@KeyID,w,c
  2104  0009CA  0D03               	mullw	3
  2105  0009CC  0E01               	movlw	1
  2106  0009CE  26F3               	addwf	prodl,f,c
  2107  0009D0  0E00               	movlw	0
  2108  0009D2  22F4               	addwfc	prodh,f,c
  2109  0009D4  0E5B               	movlw	low _KeyInternalData
  2110  0009D6  24F3               	addwf	prodl,w,c
  2111  0009D8  6ED9               	movwf	fsr2l,c
  2112  0009DA  0E00               	movlw	high _KeyInternalData
  2113  0009DC  20F4               	addwfc	prodh,w,c
  2114  0009DE  6EDA               	movwf	fsr2h,c
  2115  0009E0  0009               	tblrd		*+
  2116  0009E2  CFF5 FFDE          	movff	tablat,postinc2
  2117  0009E6  0008               	tblrd		*
  2118  0009E8  CFF5 FFDD          	movff	tablat,postdec2
  2119                           
  2120                           ;Key.c: 100: }
  2121  0009EC  0012               	return	
  2122  0009EE                     l2285:
  2123                           
  2124                           ;Key.c: 101: else
  2125                           ;Key.c: 102: {
  2126                           ;Key.c: 103: KeyInternalData[KeyID].KeyCounter--;
  2127  0009EE  501A               	movf	MangeKeys@KeyID,w,c
  2128  0009F0  0D03               	mullw	3
  2129  0009F2  0E01               	movlw	1
  2130  0009F4  26F3               	addwf	prodl,f,c
  2131  0009F6  0E00               	movlw	0
  2132  0009F8  22F4               	addwfc	prodh,f,c
  2133  0009FA  0E5B               	movlw	low _KeyInternalData
  2134  0009FC  24F3               	addwf	prodl,w,c
  2135  0009FE  6ED9               	movwf	fsr2l,c
  2136  000A00  0E00               	movlw	high _KeyInternalData
  2137  000A02  20F4               	addwfc	prodh,w,c
  2138  000A04  6EDA               	movwf	fsr2h,c
  2139  000A06  06DE               	decf	postinc2,f,c
  2140  000A08  0E00               	movlw	0
  2141  000A0A  5ADD               	subwfb	postdec2,f,c
  2142                           
  2143                           ;Key.c: 104: if(KeyInternalData[KeyID].KeyCounter == (unsigned short)0)
  2144  000A0C  501A               	movf	MangeKeys@KeyID,w,c
  2145  000A0E  0D03               	mullw	3
  2146  000A10  0E01               	movlw	1
  2147  000A12  26F3               	addwf	prodl,f,c
  2148  000A14  0E00               	movlw	0
  2149  000A16  22F4               	addwfc	prodh,f,c
  2150  000A18  0E5B               	movlw	low _KeyInternalData
  2151  000A1A  24F3               	addwf	prodl,w,c
  2152  000A1C  6ED9               	movwf	fsr2l,c
  2153  000A1E  0E00               	movlw	high _KeyInternalData
  2154  000A20  20F4               	addwfc	prodh,w,c
  2155  000A22  6EDA               	movwf	fsr2h,c
  2156  000A24  50DE               	movf	postinc2,w,c
  2157  000A26  10DE               	iorwf	postinc2,w,c
  2158  000A28  A4D8               	btfss	status,2,c
  2159  000A2A  0012               	return	
  2160                           
  2161                           ;Key.c: 105: {
  2162                           ;Key.c: 106: KeyInternalData[KeyID].KeyState = (unsigned char)0x80;
  2163  000A2C  501A               	movf	MangeKeys@KeyID,w,c
  2164  000A2E  0D03               	mullw	3
  2165  000A30  0E5B               	movlw	low _KeyInternalData
  2166  000A32  24F3               	addwf	prodl,w,c
  2167  000A34  6ED9               	movwf	fsr2l,c
  2168  000A36  0E00               	movlw	high _KeyInternalData
  2169  000A38  20F4               	addwfc	prodh,w,c
  2170  000A3A  6EDA               	movwf	fsr2h,c
  2171  000A3C  0E80               	movlw	128
  2172  000A3E  6EDF               	movwf	indf2,c
  2173                           
  2174                           ;Key.c: 107: }
  2175                           ;Key.c: 108: }
  2176                           ;Key.c: 109: break;
  2177  000A40  0012               	return	
  2178  000A42                     l2289:
  2179                           
  2180                           ;Key.c: 111: KeyInternalData[KeyID].KeyState = (unsigned char)0x00;
  2181  000A42  501A               	movf	MangeKeys@KeyID,w,c
  2182  000A44  0D03               	mullw	3
  2183  000A46  0E5B               	movlw	low _KeyInternalData
  2184  000A48  24F3               	addwf	prodl,w,c
  2185  000A4A  6ED9               	movwf	fsr2l,c
  2186  000A4C  0E00               	movlw	high _KeyInternalData
  2187  000A4E  20F4               	addwfc	prodh,w,c
  2188  000A50  6EDA               	movwf	fsr2h,c
  2189  000A52  0E00               	movlw	0
  2190  000A54  6EDF               	movwf	indf2,c
  2191                           
  2192                           ;Key.c: 113: }
  2193                           
  2194                           ;Key.c: 112: break;
  2195  000A56  0012               	return	
  2196  000A58                     l2293:
  2197  000A58  5018               	movf	MangeKeys@KeyState,w,c
  2198                           
  2199                           ; Switch size 1, requested type "space"
  2200                           ; Number of cases is 3, Range of values is 0 to 2
  2201                           ; switch strategies available:
  2202                           ; Name         Instructions Cycles
  2203                           ; simple_byte           10     6 (average)
  2204                           ;	Chosen strategy is simple_byte
  2205  000A5A  0A00               	xorlw	0	; case 0
  2206  000A5C  B4D8               	btfsc	status,2,c
  2207  000A5E  D60A               	goto	l2247
  2208  000A60  0A01               	xorlw	1	; case 1
  2209  000A62  B4D8               	btfsc	status,2,c
  2210  000A64  D682               	goto	l2259
  2211  000A66  0A03               	xorlw	3	; case 2
  2212  000A68  B4D8               	btfsc	status,2,c
  2213  000A6A  D791               	goto	l2281
  2214  000A6C  D7EA               	goto	l2289
  2215  000A6E                     __end_of_MangeKeys:
  2216                           	opt stack 0
  2217                           tosu	equ	0xFFF
  2218                           tosh	equ	0xFFE
  2219                           tosl	equ	0xFFD
  2220                           pclath	equ	0xFFA
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           prodh	equ	0xFF4
  2226                           prodl	equ	0xFF3
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postinc1	equ	0xFE6
  2230                           fsr1h	equ	0xFE2
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _HWI_DIGI_READ *****************
  2240 ;; Defined at:
  2241 ;;		line 92 in file "../../HWIsource/HWI_DIGITAL.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  pin             1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  pin             1   19[COMRAM] unsigned char 
  2246 ;;  HWIread         1   20[COMRAM] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      unsigned char 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2256 ;;      Params:         0       0       0       0       0       0       0
  2257 ;;      Locals:         2       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0
  2259 ;;      Totals:         2       0       0       0       0       0       0
  2260 ;;Total ram usage:        2 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    4
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_MangeKeys
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text10
  2271  001528                     __ptext10:
  2272                           	opt stack 0
  2273  001528                     _HWI_DIGI_READ:
  2274                           	opt stack 22
  2275                           
  2276                           ;incstack = 0
  2277                           ;HWI_DIGI_READ@pin stored from wreg
  2278  001528  6E14               	movwf	HWI_DIGI_READ@pin,c
  2279                           
  2280                           ;HWI_DIGITAL.c: 94: unsigned char HWIread;
  2281                           ;HWI_DIGITAL.c: 96: switch (pin)
  2282  00152A  D00F               	goto	l2111
  2283  00152C                     l435:
  2284                           
  2285                           ;HWI_DIGITAL.c: 99: HWIread = PORTBbits.RB2;
  2286  00152C  0E00               	movlw	0
  2287  00152E  B481               	btfsc	3969,2,c	;volatile
  2288  001530  0E01               	movlw	1
  2289  001532  D009               	goto	L1
  2290  001534                     l437:
  2291                           
  2292                           ;HWI_DIGITAL.c: 102: HWIread = PORTBbits.RB3;
  2293  001534  0E00               	movlw	0
  2294  001536  B681               	btfsc	3969,3,c	;volatile
  2295  001538  0E01               	movlw	1
  2296  00153A  D005               	goto	L1
  2297  00153C                     l438:
  2298                           
  2299                           ;HWI_DIGITAL.c: 105: HWIread = PORTBbits.RB4;
  2300  00153C  0E00               	movlw	0
  2301  00153E  B881               	btfsc	3969,4,c	;volatile
  2302  001540  0E01               	movlw	1
  2303  001542  D001               	goto	L1
  2304  001544                     l2107:
  2305                           
  2306                           ;HWI_DIGITAL.c: 108: HWIread = (unsigned char)0;
  2307  001544  0E00               	movlw	0
  2308  001546                     L1:
  2309  001546  6E15               	movwf	HWI_DIGI_READ@HWIread,c
  2310                           
  2311                           ;HWI_DIGITAL.c: 110: }
  2312                           
  2313                           ;HWI_DIGITAL.c: 109: break;
  2314  001548  D00B               	goto	l436
  2315  00154A                     l2111:
  2316  00154A  5014               	movf	HWI_DIGI_READ@pin,w,c
  2317                           
  2318                           ; Switch size 1, requested type "space"
  2319                           ; Number of cases is 3, Range of values is 15 to 17
  2320                           ; switch strategies available:
  2321                           ; Name         Instructions Cycles
  2322                           ; simple_byte           10     6 (average)
  2323                           ;	Chosen strategy is simple_byte
  2324  00154C  0A0F               	xorlw	15	; case 15
  2325  00154E  B4D8               	btfsc	status,2,c
  2326  001550  D7ED               	goto	l435
  2327  001552  0A1F               	xorlw	31	; case 16
  2328  001554  B4D8               	btfsc	status,2,c
  2329  001556  D7EE               	goto	l437
  2330  001558  0A01               	xorlw	1	; case 17
  2331  00155A  B4D8               	btfsc	status,2,c
  2332  00155C  D7EF               	goto	l438
  2333  00155E  D7F2               	goto	l2107
  2334  001560                     l436:
  2335                           
  2336                           ;HWI_DIGITAL.c: 111: return HWIread;
  2337  001560  5015               	movf	HWI_DIGI_READ@HWIread,w,c
  2338  001562  0012               	return		;funcret
  2339  001564                     __end_of_HWI_DIGI_READ:
  2340                           	opt stack 0
  2341                           tosu	equ	0xFFF
  2342                           tosh	equ	0xFFE
  2343                           tosl	equ	0xFFD
  2344                           pclath	equ	0xFFA
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           prodh	equ	0xFF4
  2350                           prodl	equ	0xFF3
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           postinc1	equ	0xFE6
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           indf2	equ	0xFDF
  2357                           postinc2	equ	0xFDE
  2358                           postdec2	equ	0xFDD
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _EepromManage *****************
  2364 ;; Defined at:
  2365 ;;		line 74 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  WriteSuccess    1   22[COMRAM] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2379 ;;      Params:         0       0       0       0       0       0       0
  2380 ;;      Locals:         1       0       0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0
  2382 ;;      Totals:         1       0       0       0       0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    5
  2386 ;; This function calls:
  2387 ;;		_HWIeeprom_Write
  2388 ;; This function is called by:
  2389 ;;		_ManageDrivers
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           	psect	text11
  2394  00146C                     __ptext11:
  2395                           	opt stack 0
  2396  00146C                     _EepromManage:
  2397                           	opt stack 22
  2398                           
  2399                           ;Eeprom.c: 76: static unsigned char WriteIndex = ((unsigned char)0);
  2400                           ;Eeprom.c: 77: unsigned char WriteSuccess;
  2401                           ;Eeprom.c: 79: if((unsigned char)1 == WriteRequest )
  2402                           
  2403                           ;incstack = 0
  2404  00146C  0451               	decf	_WriteRequest,w,c
  2405  00146E  A4D8               	btfss	status,2,c
  2406  001470  0012               	return	
  2407                           
  2408                           ;Eeprom.c: 80: {
  2409                           ;Eeprom.c: 81: if(WriteIndex == DataSize)
  2410  001472  504F               	movf	_DataSize,w,c
  2411  001474  184E               	xorwf	EepromManage@WriteIndex,w,c
  2412  001476  A4D8               	btfss	status,2,c
  2413  001478  D005               	goto	l2237
  2414                           
  2415                           ;Eeprom.c: 82: {
  2416                           ;Eeprom.c: 83: WriteIndex = (unsigned char)0;
  2417  00147A  0E00               	movlw	0
  2418  00147C  6E4E               	movwf	EepromManage@WriteIndex,c
  2419                           
  2420                           ;Eeprom.c: 84: WriteRequest = (unsigned char)0;
  2421  00147E  0E00               	movlw	0
  2422  001480  6E51               	movwf	_WriteRequest,c
  2423                           
  2424                           ;Eeprom.c: 88: }
  2425                           ;Eeprom.c: 89: }
  2426  001482  0012               	return	
  2427  001484                     l2237:
  2428                           
  2429                           ;Eeprom.c: 90: else
  2430                           ;Eeprom.c: 91: {
  2431                           ;Eeprom.c: 92: WriteSuccess = HWIeeprom_Write((EEPROMaddr + WriteIndex) , DataArray[Writ
      +                          eIndex]);
  2432  001484  504E               	movf	EepromManage@WriteIndex,w,c
  2433  001486  0D01               	mullw	1
  2434  001488  0E80               	movlw	low _DataArray
  2435  00148A  24F3               	addwf	prodl,w,c
  2436  00148C  6ED9               	movwf	fsr2l,c
  2437  00148E  0E00               	movlw	high _DataArray
  2438  001490  20F4               	addwfc	prodh,w,c
  2439  001492  6EDA               	movwf	fsr2h,c
  2440  001494  50DF               	movf	indf2,w,c
  2441  001496  6E14               	movwf	HWIeeprom_Write@Data,c
  2442  001498  5050               	movf	_EEPROMaddr,w,c
  2443  00149A  244E               	addwf	EepromManage@WriteIndex,w,c
  2444  00149C  ECE9  F00A         	call	_HWIeeprom_Write
  2445  0014A0  6E17               	movwf	EepromManage@WriteSuccess,c
  2446                           
  2447                           ;Eeprom.c: 93: if( (unsigned char)1 == WriteSuccess )
  2448  0014A2  0417               	decf	EepromManage@WriteSuccess,w,c
  2449  0014A4  A4D8               	btfss	status,2,c
  2450  0014A6  0012               	return	
  2451                           
  2452                           ;Eeprom.c: 94: {
  2453                           ;Eeprom.c: 95: WriteIndex++;
  2454  0014A8  2A4E               	incf	EepromManage@WriteIndex,f,c
  2455  0014AA  0012               	return	
  2456  0014AC                     __end_of_EepromManage:
  2457                           	opt stack 0
  2458                           tosu	equ	0xFFF
  2459                           tosh	equ	0xFFE
  2460                           tosl	equ	0xFFD
  2461                           pclath	equ	0xFFA
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postinc1	equ	0xFE6
  2471                           fsr1h	equ	0xFE2
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _HWIeeprom_Write *****************
  2481 ;; Defined at:
  2482 ;;		line 6 in file "../../HWIeeprom/HWIeeprom.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  address         1    wreg     unsigned char 
  2485 ;;  Data            1   19[COMRAM] unsigned char 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  address         1   20[COMRAM] unsigned char 
  2488 ;;  WriteSuccess    1   21[COMRAM] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      unsigned char 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2498 ;;      Params:         1       0       0       0       0       0       0
  2499 ;;      Locals:         2       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0
  2501 ;;      Totals:         3       0       0       0       0       0       0
  2502 ;;Total ram usage:        3 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    4
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_EepromManage
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text12
  2513  0015D2                     __ptext12:
  2514                           	opt stack 0
  2515  0015D2                     _HWIeeprom_Write:
  2516                           	opt stack 22
  2517                           
  2518                           ;incstack = 0
  2519                           ;HWIeeprom_Write@address stored from wreg
  2520  0015D2  6E15               	movwf	HWIeeprom_Write@address,c
  2521                           
  2522                           ;HWIeeprom.c: 8: unsigned char WriteSuccess;
  2523                           ;HWIeeprom.c: 9: if((unsigned char)0 == EECON1bits.WR )
  2524  0015D4  B2A6               	btfsc	4006,1,c	;volatile
  2525  0015D6  D010               	goto	l2099
  2526                           
  2527                           ;HWIeeprom.c: 10: {
  2528                           ;HWIeeprom.c: 11: EEADR = address;
  2529  0015D8  C015  FFA9         	movff	HWIeeprom_Write@address,4009	;volatile
  2530                           
  2531                           ;HWIeeprom.c: 12: EEDATA = Data;
  2532  0015DC  C014  FFA8         	movff	HWIeeprom_Write@Data,4008	;volatile
  2533                           
  2534                           ;HWIeeprom.c: 13: EECON1bits.EEPGD = (unsigned char)0;
  2535  0015E0  9EA6               	bcf	4006,7,c	;volatile
  2536                           
  2537                           ;HWIeeprom.c: 14: EECON1bits.CFGS = (unsigned char)0;
  2538  0015E2  9CA6               	bcf	4006,6,c	;volatile
  2539                           
  2540                           ;HWIeeprom.c: 15: EECON1bits.WREN = (unsigned char)1;
  2541  0015E4  84A6               	bsf	4006,2,c	;volatile
  2542                           
  2543                           ;HWIeeprom.c: 17: INTCONbits.GIE = (unsigned char)0;
  2544  0015E6  9EF2               	bcf	intcon,7,c	;volatile
  2545                           
  2546                           ;HWIeeprom.c: 18: EECON2 = (unsigned char)0x55;
  2547  0015E8  0E55               	movlw	85
  2548  0015EA  6EA7               	movwf	4007,c	;volatile
  2549                           
  2550                           ;HWIeeprom.c: 19: EECON2 = (unsigned char)0xAA;
  2551  0015EC  0EAA               	movlw	170
  2552  0015EE  6EA7               	movwf	4007,c	;volatile
  2553                           
  2554                           ;HWIeeprom.c: 20: EECON1bits.WR = (unsigned char)1;
  2555  0015F0  82A6               	bsf	4006,1,c	;volatile
  2556                           
  2557                           ;HWIeeprom.c: 21: INTCONbits.GIE = (unsigned char)1;
  2558  0015F2  8EF2               	bsf	intcon,7,c	;volatile
  2559                           
  2560                           ;HWIeeprom.c: 22: WriteSuccess = (unsigned char)1;
  2561  0015F4  0E01               	movlw	1
  2562  0015F6  D001               	goto	L2
  2563  0015F8                     l2099:
  2564                           
  2565                           ;HWIeeprom.c: 24: else
  2566                           ;HWIeeprom.c: 25: {
  2567                           ;HWIeeprom.c: 26: WriteSuccess = (unsigned char)0;
  2568  0015F8  0E00               	movlw	0
  2569  0015FA                     L2:
  2570  0015FA  6E16               	movwf	HWIeeprom_Write@WriteSuccess,c
  2571                           
  2572                           ;HWIeeprom.c: 27: }
  2573                           ;HWIeeprom.c: 29: return WriteSuccess;
  2574  0015FC  5016               	movf	HWIeeprom_Write@WriteSuccess,w,c
  2575  0015FE  0012               	return	
  2576  001600                     __end_of_HWIeeprom_Write:
  2577                           	opt stack 0
  2578                           tosu	equ	0xFFF
  2579                           tosh	equ	0xFFE
  2580                           tosl	equ	0xFFD
  2581                           pclath	equ	0xFFA
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc1	equ	0xFE6
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _APP_MANAGE *****************
  2602 ;; Defined at:
  2603 ;;		line 52 in file "../../../../Common/App/APP.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  TravelledDis    4    3[BANK0 ] unsigned long 
  2608 ;;  AvgSpeedKph     2    0[BANK0 ] unsigned short 
  2609 ;;  keystatus       1    7[BANK0 ] unsigned char 
  2610 ;;  keystatus2      1    2[BANK0 ] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         0       0       0       0       0       0       0
  2621 ;;      Locals:         0       8       0       0       0       0       0
  2622 ;;      Temps:          1       0       0       0       0       0       0
  2623 ;;      Totals:         1       8       0       0       0       0       0
  2624 ;;Total ram usage:        9 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    6
  2627 ;; This function calls:
  2628 ;;		_BCDsendNumber
  2629 ;;		_BlinkDigit
  2630 ;;		_Eeprom_Write_Block
  2631 ;;		_GetAvgSpeed
  2632 ;;		_GetDistance
  2633 ;;		_GetKeyStatus
  2634 ;;		_IncrementDecrementSingleDigit
  2635 ;;		_SetCircumfirunce
  2636 ;;		___lmul
  2637 ;; This function is called by:
  2638 ;;		_ManageApplication
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text13
  2643  000A6E                     __ptext13:
  2644                           	opt stack 0
  2645  000A6E                     _APP_MANAGE:
  2646                           	opt stack 21
  2647                           
  2648                           ;APP.c: 54: static unsigned blinkIndex = (unsigned char)0;
  2649                           ;APP.c: 55: static unsigned bIsBlinkMode = (unsigned char)0;
  2650                           ;APP.c: 56: unsigned short AvgSpeedKph;
  2651                           ;APP.c: 57: unsigned long TravelledDistance;
  2652                           ;APP.c: 58: unsigned char keystatus;
  2653                           ;APP.c: 59: unsigned char keystatus2;
  2654                           ;APP.c: 64: SetCircumfirunce(Circum);
  2655                           
  2656                           ;incstack = 0
  2657  000A6E  C064  F014         	movff	_Circum,SetCircumfirunce@Circum
  2658  000A72  C065  F015         	movff	_Circum+1,SetCircumfirunce@Circum+1
  2659  000A76  ECC8  F00B         	call	_SetCircumfirunce	;wreg free
  2660                           
  2661                           ;APP.c: 66: AvgSpeedKph = GetAvgSpeed(1);
  2662  000A7A  0E01               	movlw	1
  2663  000A7C  EC16  F008         	call	_GetAvgSpeed
  2664  000A80  C02D  F0D2         	movff	?_GetAvgSpeed,APP_MANAGE@AvgSpeedKph
  2665  000A84  C02E  F0D3         	movff	?_GetAvgSpeed+1,APP_MANAGE@AvgSpeedKph+1
  2666                           
  2667                           ;APP.c: 67: TravelledDistance = GetDistance();
  2668  000A88  ECB7  F00B         	call	_GetDistance	;wreg free
  2669  000A8C  C014  F0D5         	movff	?_GetDistance,APP_MANAGE@TravelledDistance
  2670  000A90  C015  F0D6         	movff	?_GetDistance+1,APP_MANAGE@TravelledDistance+1
  2671  000A94  C016  F0D7         	movff	?_GetDistance+2,APP_MANAGE@TravelledDistance+2
  2672  000A98  C017  F0D8         	movff	?_GetDistance+3,APP_MANAGE@TravelledDistance+3
  2673                           
  2674                           ;APP.c: 68: TravelledDistance *= (unsigned long)10;
  2675  000A9C  C0D5  F014         	movff	APP_MANAGE@TravelledDistance,___lmul@multiplier
  2676  000AA0  C0D6  F015         	movff	APP_MANAGE@TravelledDistance+1,___lmul@multiplier+1
  2677  000AA4  C0D7  F016         	movff	APP_MANAGE@TravelledDistance+2,___lmul@multiplier+2
  2678  000AA8  C0D8  F017         	movff	APP_MANAGE@TravelledDistance+3,___lmul@multiplier+3
  2679  000AAC  0E0A               	movlw	10
  2680  000AAE  6E18               	movwf	___lmul@multiplicand,c
  2681  000AB0  0E00               	movlw	0
  2682  000AB2  6E19               	movwf	___lmul@multiplicand+1,c
  2683  000AB4  0E00               	movlw	0
  2684  000AB6  6E1A               	movwf	___lmul@multiplicand+2,c
  2685  000AB8  0E00               	movlw	0
  2686  000ABA  6E1B               	movwf	___lmul@multiplicand+3,c
  2687  000ABC  ECC1  F009         	call	___lmul	;wreg free
  2688  000AC0  C014  F0D5         	movff	?___lmul,APP_MANAGE@TravelledDistance
  2689  000AC4  C015  F0D6         	movff	?___lmul+1,APP_MANAGE@TravelledDistance+1
  2690  000AC8  C016  F0D7         	movff	?___lmul+2,APP_MANAGE@TravelledDistance+2
  2691  000ACC  C017  F0D8         	movff	?___lmul+3,APP_MANAGE@TravelledDistance+3
  2692                           
  2693                           ;APP.c: 69: TravelledDistance /= (unsigned long)16;
  2694  000AD0  0E04               	movlw	4
  2695  000AD2  6E36               	movwf	??_APP_MANAGE& (0+255),c
  2696  000AD4                     u2105:
  2697  000AD4  90D8               	bcf	status,0,c
  2698  000AD6  0100               	movlb	0	; () banked
  2699  000AD8  33D8               	rrcf	(APP_MANAGE@TravelledDistance+3)& (0+255),f,b
  2700  000ADA  33D7               	rrcf	(APP_MANAGE@TravelledDistance+2)& (0+255),f,b
  2701  000ADC  33D6               	rrcf	(APP_MANAGE@TravelledDistance+1)& (0+255),f,b
  2702  000ADE  33D5               	rrcf	APP_MANAGE@TravelledDistance& (0+255),f,b
  2703  000AE0  2E36               	decfsz	??_APP_MANAGE& (0+255),f,c
  2704  000AE2  D7F8               	goto	u2105
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;APP.c: 71: if( (unsigned char)0 == WriteFlag)
  2708  000AE4  505A               	movf	_WriteFlag,w,c
  2709  000AE6  A4D8               	btfss	status,2,c
  2710  000AE8  0012               	return	
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;APP.c: 72: {
  2714                           ;APP.c: 73: if(bIsBlinkMode == (unsigned char)0)
  2715  000AEA  5045               	movf	APP_MANAGE@bIsBlinkMode,w,c
  2716  000AEC  1046               	iorwf	APP_MANAGE@bIsBlinkMode+1,w,c
  2717  000AEE  A4D8               	btfss	status,2,c
  2718  000AF0  D01B               	goto	l2721
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;APP.c: 74: {
  2722                           ;APP.c: 75: BCDsendNumber(AvgSpeedKph,0,1 ,1);
  2723  000AF2  C0D2  F01B         	movff	APP_MANAGE@AvgSpeedKph,BCDsendNumber@Number
  2724  000AF6  C0D3  F01C         	movff	APP_MANAGE@AvgSpeedKph+1,BCDsendNumber@Number+1
  2725  000AFA  0E00               	movlw	0
  2726  000AFC  6E1D               	movwf	BCDsendNumber@Line,c
  2727  000AFE  0E01               	movlw	1
  2728  000B00  6E1E               	movwf	BCDsendNumber@DecimalPlace,c
  2729  000B02  0E01               	movlw	1
  2730  000B04  6E1F               	movwf	BCDsendNumber@EnableTranc,c
  2731  000B06  ECCB  F006         	call	_BCDsendNumber	;wreg free
  2732                           
  2733                           ;APP.c: 76: keystatus = GetKeyStatus(0);
  2734  000B0A  0E00               	movlw	0
  2735  000B0C  EC00  F00B         	call	_GetKeyStatus
  2736  000B10  0100               	movlb	0	; () banked
  2737  000B12  6FD9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;APP.c: 77: if( keystatus == (unsigned char)0x82)
  2741  000B14  0E82               	movlw	130
  2742  000B16  0100               	movlb	0	; () banked
  2743  000B18  19D9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2744  000B1A  A4D8               	btfss	status,2,c
  2745  000B1C  0012               	return	
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;APP.c: 78: {
  2749                           ;APP.c: 79: bIsBlinkMode = (unsigned char)1;
  2750  000B1E  0E00               	movlw	0
  2751  000B20  6E46               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2752  000B22  0E01               	movlw	1
  2753  000B24  6E45               	movwf	APP_MANAGE@bIsBlinkMode,c
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;APP.c: 80: }
  2757                           ;APP.c: 81: }
  2758  000B26  0012               	return	
  2759  000B28                     l2721:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;APP.c: 82: else
  2763                           ;APP.c: 83: {
  2764                           ;APP.c: 85: BCDsendNumber(Circum,1,0 ,0);
  2765  000B28  C064  F01B         	movff	_Circum,BCDsendNumber@Number
  2766  000B2C  C065  F01C         	movff	_Circum+1,BCDsendNumber@Number+1
  2767  000B30  0E01               	movlw	1
  2768  000B32  6E1D               	movwf	BCDsendNumber@Line,c
  2769  000B34  0E00               	movlw	0
  2770  000B36  6E1E               	movwf	BCDsendNumber@DecimalPlace,c
  2771  000B38  0E00               	movlw	0
  2772  000B3A  6E1F               	movwf	BCDsendNumber@EnableTranc,c
  2773  000B3C  ECCB  F006         	call	_BCDsendNumber	;wreg free
  2774                           
  2775                           ;APP.c: 86: BlinkDigit(blinkIndex,1,100);
  2776  000B40  0E01               	movlw	1
  2777  000B42  6E14               	movwf	BlinkDigit@Line,c
  2778  000B44  0E64               	movlw	100
  2779  000B46  6E15               	movwf	BlinkDigit@duration,c
  2780  000B48  5047               	movf	APP_MANAGE@blinkIndex,w,c
  2781  000B4A  ECC0  F00B         	call	_BlinkDigit
  2782                           
  2783                           ;APP.c: 87: keystatus = GetKeyStatus(0);
  2784  000B4E  0E00               	movlw	0
  2785  000B50  EC00  F00B         	call	_GetKeyStatus
  2786  000B54  0100               	movlb	0	; () banked
  2787  000B56  6FD9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;APP.c: 88: if( keystatus == (unsigned char)0x40)
  2791  000B58  0E40               	movlw	64
  2792  000B5A  0100               	movlb	0	; () banked
  2793  000B5C  19D9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2794  000B5E  A4D8               	btfss	status,2,c
  2795  000B60  D00C               	goto	l2735
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;APP.c: 89: {
  2799                           ;APP.c: 90: blinkIndex++;
  2800  000B62  4A47               	infsnz	APP_MANAGE@blinkIndex,f,c
  2801  000B64  2A48               	incf	APP_MANAGE@blinkIndex+1,f,c
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;APP.c: 91: if(blinkIndex == 4)
  2805  000B66  0E04               	movlw	4
  2806  000B68  1847               	xorwf	APP_MANAGE@blinkIndex,w,c
  2807  000B6A  1048               	iorwf	APP_MANAGE@blinkIndex+1,w,c
  2808  000B6C  A4D8               	btfss	status,2,c
  2809  000B6E  0012               	return	
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;APP.c: 92: {
  2813                           ;APP.c: 93: blinkIndex=0;
  2814  000B70  0E00               	movlw	0
  2815  000B72  6E48               	movwf	APP_MANAGE@blinkIndex+1,c
  2816  000B74  0E00               	movlw	0
  2817  000B76  6E47               	movwf	APP_MANAGE@blinkIndex,c
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;APP.c: 94: }
  2821                           ;APP.c: 95: }
  2822  000B78  0012               	return	
  2823  000B7A                     l2735:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;APP.c: 96: else
  2827                           ;APP.c: 97: {
  2828                           ;APP.c: 98: keystatus = GetKeyStatus(1);
  2829  000B7A  0E01               	movlw	1
  2830  000B7C  EC00  F00B         	call	_GetKeyStatus
  2831  000B80  0100               	movlb	0	; () banked
  2832  000B82  6FD9               	movwf	APP_MANAGE@keystatus& (0+255),b
  2833                           
  2834                           ;APP.c: 99: keystatus2 = GetKeyStatus(2);
  2835  000B84  0E02               	movlw	2
  2836  000B86  EC00  F00B         	call	_GetKeyStatus
  2837  000B8A  0100               	movlb	0	; () banked
  2838  000B8C  6FD4               	movwf	APP_MANAGE@keystatus2& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;APP.c: 100: if(keystatus == (unsigned char)0x82 )
  2842  000B8E  0E82               	movlw	130
  2843  000B90  0100               	movlb	0	; () banked
  2844  000B92  19D9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2845  000B94  A4D8               	btfss	status,2,c
  2846  000B96  D019               	goto	l2745
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;APP.c: 101: {
  2850                           ;APP.c: 102: Eeprom_Write_Block(1,(unsigned char*)&Circum ,
  2851                           ;APP.c: 103: (unsigned char)sizeof(Circum),(void*)0);
  2852  000B98  0E64               	movlw	low _Circum
  2853  000B9A  6E14               	movwf	Eeprom_Write_Block@DataPtr,c
  2854  000B9C  0E00               	movlw	high _Circum
  2855  000B9E  6E15               	movwf	Eeprom_Write_Block@DataPtr+1,c
  2856  000BA0  0E02               	movlw	2
  2857  000BA2  6E16               	movwf	Eeprom_Write_Block@BlockSize,c
  2858  000BA4  0E00               	movlw	0
  2859  000BA6  6E17               	movwf	Eeprom_Write_Block@ptrFnCallback,c
  2860  000BA8  0E00               	movlw	0
  2861  000BAA  6E18               	movwf	Eeprom_Write_Block@ptrFnCallback+1,c
  2862  000BAC  0E01               	movlw	1
  2863  000BAE  EC64  F009         	call	_Eeprom_Write_Block
  2864                           
  2865                           ;APP.c: 104: BlinkDigit(1,1,0);
  2866  000BB2  0E01               	movlw	1
  2867  000BB4  6E14               	movwf	BlinkDigit@Line,c
  2868  000BB6  0E00               	movlw	0
  2869  000BB8  6E15               	movwf	BlinkDigit@duration,c
  2870  000BBA  0E01               	movlw	1
  2871  000BBC  ECC0  F00B         	call	_BlinkDigit
  2872                           
  2873                           ;APP.c: 105: bIsBlinkMode = (unsigned char)0;
  2874  000BC0  0E00               	movlw	0
  2875  000BC2  6E46               	movwf	APP_MANAGE@bIsBlinkMode+1,c
  2876  000BC4  0E00               	movlw	0
  2877  000BC6  6E45               	movwf	APP_MANAGE@bIsBlinkMode,c
  2878                           
  2879                           ;APP.c: 108: }
  2880  000BC8  0012               	return	
  2881  000BCA                     l2745:
  2882                           
  2883                           ;APP.c: 109: else if(keystatus == (unsigned char)0x40)
  2884  000BCA  0E40               	movlw	64
  2885  000BCC  0100               	movlb	0	; () banked
  2886  000BCE  19D9               	xorwf	APP_MANAGE@keystatus& (0+255),w,b
  2887  000BD0  A4D8               	btfss	status,2,c
  2888  000BD2  D00F               	goto	l2749
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;APP.c: 110: {
  2892                           ;APP.c: 111: Circum = IncrementDecrementSingleDigit(
  2893                           ;APP.c: 112: Circum,blinkIndex,(unsigned char)0);
  2894  000BD4  C064  F01B         	movff	_Circum,IncrementDecrementSingleDigit@Number
  2895  000BD8  C065  F01C         	movff	_Circum+1,IncrementDecrementSingleDigit@Number+1
  2896  000BDC  C047  F01D         	movff	APP_MANAGE@blinkIndex,IncrementDecrementSingleDigit@Index
  2897  000BE0  0E00               	movlw	0
  2898  000BE2  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  2899  000BE4  EC0D  F006         	call	_IncrementDecrementSingleDigit	;wreg free
  2900  000BE8  C01B  F064         	movff	?_IncrementDecrementSingleDigit,_Circum
  2901  000BEC  C01C  F065         	movff	?_IncrementDecrementSingleDigit+1,_Circum+1
  2902                           
  2903                           ;APP.c: 113: }
  2904  000BF0  0012               	return	
  2905  000BF2                     l2749:
  2906                           
  2907                           ;APP.c: 114: else if(keystatus2 == (unsigned char)0x40)
  2908  000BF2  0E40               	movlw	64
  2909  000BF4  0100               	movlb	0	; () banked
  2910  000BF6  19D4               	xorwf	APP_MANAGE@keystatus2& (0+255),w,b
  2911  000BF8  A4D8               	btfss	status,2,c
  2912  000BFA  0012               	return	
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;APP.c: 115: {
  2916                           ;APP.c: 116: Circum = IncrementDecrementSingleDigit(
  2917                           ;APP.c: 117: Circum,blinkIndex,(unsigned char)1);
  2918  000BFC  C064  F01B         	movff	_Circum,IncrementDecrementSingleDigit@Number
  2919  000C00  C065  F01C         	movff	_Circum+1,IncrementDecrementSingleDigit@Number+1
  2920  000C04  C047  F01D         	movff	APP_MANAGE@blinkIndex,IncrementDecrementSingleDigit@Index
  2921  000C08  0E01               	movlw	1
  2922  000C0A  6E1E               	movwf	IncrementDecrementSingleDigit@bIsincrement,c
  2923  000C0C  EC0D  F006         	call	_IncrementDecrementSingleDigit	;wreg free
  2924  000C10  C01B  F064         	movff	?_IncrementDecrementSingleDigit,_Circum
  2925  000C14  C01C  F065         	movff	?_IncrementDecrementSingleDigit+1,_Circum+1
  2926                           
  2927                           ;APP.c: 118: }
  2928                           ;APP.c: 119: }
  2929                           ;APP.c: 120: }
  2930                           ;APP.c: 121: }
  2931  000C18  0012               	return	
  2932  000C1A                     __end_of_APP_MANAGE:
  2933                           	opt stack 0
  2934                           tosu	equ	0xFFF
  2935                           tosh	equ	0xFFE
  2936                           tosl	equ	0xFFD
  2937                           pclath	equ	0xFFA
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           postinc1	equ	0xFE6
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _SetCircumfirunce *****************
  2958 ;; Defined at:
  2959 ;;		line 99 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  Circum          2   19[COMRAM] unsigned short 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		None
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2973 ;;      Params:         2       0       0       0       0       0       0
  2974 ;;      Locals:         0       0       0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0
  2976 ;;      Totals:         2       0       0       0       0       0       0
  2977 ;;Total ram usage:        2 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    4
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		_APP_MANAGE
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text14
  2988  001790                     __ptext14:
  2989                           	opt stack 0
  2990  001790                     _SetCircumfirunce:
  2991                           	opt stack 22
  2992                           
  2993                           ;SpeedCalc.c: 101: CircumFactor = (unsigned short)Circum;
  2994                           
  2995                           ;incstack = 0
  2996  001790  C014  F066         	movff	SetCircumfirunce@Circum,_CircumFactor
  2997  001794  C015  F067         	movff	SetCircumfirunce@Circum+1,_CircumFactor+1
  2998  001798  0012               	return		;funcret
  2999  00179A                     __end_of_SetCircumfirunce:
  3000                           	opt stack 0
  3001                           tosu	equ	0xFFF
  3002                           tosh	equ	0xFFE
  3003                           tosl	equ	0xFFD
  3004                           pclath	equ	0xFFA
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           intcon	equ	0xFF2
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           postinc1	equ	0xFE6
  3015                           fsr1h	equ	0xFE2
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _IncrementDecrementSingleDigit *****************
  3025 ;; Defined at:
  3026 ;;		line 154 in file "../../../../Common/App/APP.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  Number          2   26[COMRAM] unsigned short 
  3029 ;;  Index           1   28[COMRAM] unsigned char 
  3030 ;;  bIsincrement    1   29[COMRAM] unsigned char 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  Output          4   38[COMRAM] unsigned char [4]
  3033 ;;  unitPosition    2   36[COMRAM] unsigned short 
  3034 ;;  NumberReturn    2   33[COMRAM] unsigned short 
  3035 ;;  Link            2   31[COMRAM] unsigned short 
  3036 ;;  LoopIndex       1   42[COMRAM] unsigned char 
  3037 ;;  PowIndex        1   35[COMRAM] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  2   26[COMRAM] unsigned short 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3047 ;;      Params:         4       0       0       0       0       0       0
  3048 ;;      Locals:        12       0       0       0       0       0       0
  3049 ;;      Temps:          1       0       0       0       0       0       0
  3050 ;;      Totals:        17       0       0       0       0       0       0
  3051 ;;Total ram usage:       17 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    5
  3054 ;; This function calls:
  3055 ;;		___lwdiv
  3056 ;;		___wmul
  3057 ;; This function is called by:
  3058 ;;		_APP_MANAGE
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text15
  3063  000C1A                     __ptext15:
  3064                           	opt stack 0
  3065  000C1A                     _IncrementDecrementSingleDigit:
  3066                           	opt stack 21
  3067                           
  3068                           ;APP.c: 161: unsigned short NumberReturned = (unsigned short)0;
  3069                           
  3070                           ;incstack = 0
  3071  000C1A  0E00               	movlw	0
  3072  000C1C  6E23               	movwf	IncrementDecrementSingleDigit@NumberReturned+1,c
  3073  000C1E  0E00               	movlw	0
  3074  000C20  6E22               	movwf	IncrementDecrementSingleDigit@NumberReturned,c
  3075                           
  3076                           ;APP.c: 162: unsigned short Link;
  3077                           ;APP.c: 163: unsigned char LoopIndex;
  3078                           ;APP.c: 164: unsigned char PowIndex;
  3079                           ;APP.c: 165: unsigned char Output[4];
  3080                           ;APP.c: 166: unsigned short unitPosition = (unsigned short)1;
  3081  000C22  0E00               	movlw	0
  3082  000C24  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3083  000C26  0E01               	movlw	1
  3084  000C28  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3085                           
  3086                           ;APP.c: 169: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  3087  000C2A  0E00               	movlw	0
  3088  000C2C  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3089  000C2E                     l2647:
  3090  000C2E  0E03               	movlw	3
  3091  000C30  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3092  000C32  D001               	goto	l2651
  3093  000C34  D030               	goto	l2665
  3094  000C36                     l2651:
  3095                           
  3096                           ;APP.c: 170: {
  3097                           ;APP.c: 171: if((Number != (unsigned short)0) )
  3098  000C36  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3099  000C38  101C               	iorwf	IncrementDecrementSingleDigit@Number+1,w,c
  3100  000C3A  B4D8               	btfsc	status,2,c
  3101  000C3C  D020               	goto	l2659
  3102                           
  3103                           ;APP.c: 172: {
  3104                           ;APP.c: 173: Link = Number;
  3105  000C3E  C01B  F020         	movff	IncrementDecrementSingleDigit@Number,IncrementDecrementSingleDigit@Link
  3106  000C42  C01C  F021         	movff	IncrementDecrementSingleDigit@Number+1,IncrementDecrementSingleDigit@Link+1
  3107                           
  3108                           ;APP.c: 174: Number = (unsigned short)(Number/(unsigned short)10);
  3109  000C46  C01B  F014         	movff	IncrementDecrementSingleDigit@Number,___lwdiv@dividend
  3110  000C4A  C01C  F015         	movff	IncrementDecrementSingleDigit@Number+1,___lwdiv@dividend+1
  3111  000C4E  0E00               	movlw	0
  3112  000C50  6E17               	movwf	___lwdiv@divisor+1,c
  3113  000C52  0E0A               	movlw	10
  3114  000C54  6E16               	movwf	___lwdiv@divisor,c
  3115  000C56  ECEC  F009         	call	___lwdiv	;wreg free
  3116  000C5A  C014  F01B         	movff	?___lwdiv,IncrementDecrementSingleDigit@Number
  3117  000C5E  C015  F01C         	movff	?___lwdiv+1,IncrementDecrementSingleDigit@Number+1
  3118                           
  3119                           ;APP.c: 175: Output[LoopIndex] = Link -
  3120                           ;APP.c: 176: (unsigned short)(Number * (unsigned short)10);
  3121  000C62  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3122  000C64  0D01               	mullw	1
  3123  000C66  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3124  000C68  24F3               	addwf	prodl,w,c
  3125  000C6A  6ED9               	movwf	fsr2l,c
  3126  000C6C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3127  000C6E  20F4               	addwfc	prodh,w,c
  3128  000C70  6EDA               	movwf	fsr2h,c
  3129  000C72  501B               	movf	IncrementDecrementSingleDigit@Number,w,c
  3130  000C74  0D0A               	mullw	10
  3131  000C76  50F3               	movf	prodl,w,c
  3132  000C78  0800               	sublw	0
  3133  000C7A  2420               	addwf	IncrementDecrementSingleDigit@Link,w,c
  3134  000C7C  D009               	goto	L3
  3135  000C7E                     l2659:
  3136                           
  3137                           ;APP.c: 178: else
  3138                           ;APP.c: 179: {
  3139                           ;APP.c: 180: Output[LoopIndex] = (unsigned short)0;
  3140  000C7E  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3141  000C80  0D01               	mullw	1
  3142  000C82  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3143  000C84  24F3               	addwf	prodl,w,c
  3144  000C86  6ED9               	movwf	fsr2l,c
  3145  000C88  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3146  000C8A  20F4               	addwfc	prodh,w,c
  3147  000C8C  6EDA               	movwf	fsr2h,c
  3148  000C8E  0E00               	movlw	0
  3149  000C90                     L3:
  3150  000C90  6EDF               	movwf	indf2,c
  3151  000C92  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3152  000C94  D7CC               	goto	l2647
  3153  000C96                     l2665:
  3154                           
  3155                           ;APP.c: 181: }
  3156                           ;APP.c: 182: }
  3157                           ;APP.c: 184: if((unsigned char)0 == bIsincrement)
  3158  000C96  501E               	movf	IncrementDecrementSingleDigit@bIsincrement,w,c
  3159  000C98  A4D8               	btfss	status,2,c
  3160  000C9A  D01F               	goto	l2673
  3161                           
  3162                           ;APP.c: 185: {
  3163                           ;APP.c: 186: if((unsigned char)0 == Output[Index])
  3164  000C9C  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3165  000C9E  0D01               	mullw	1
  3166  000CA0  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3167  000CA2  24F3               	addwf	prodl,w,c
  3168  000CA4  6ED9               	movwf	fsr2l,c
  3169  000CA6  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3170  000CA8  20F4               	addwfc	prodh,w,c
  3171  000CAA  6EDA               	movwf	fsr2h,c
  3172  000CAC  50DF               	movf	indf2,w,c
  3173  000CAE  A4D8               	btfss	status,2,c
  3174  000CB0  D00A               	goto	l2671
  3175                           
  3176                           ;APP.c: 187: {
  3177                           ;APP.c: 188: Output[Index] =(unsigned char)9;
  3178  000CB2  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3179  000CB4  0D01               	mullw	1
  3180  000CB6  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3181  000CB8  24F3               	addwf	prodl,w,c
  3182  000CBA  6ED9               	movwf	fsr2l,c
  3183  000CBC  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3184  000CBE  20F4               	addwfc	prodh,w,c
  3185  000CC0  6EDA               	movwf	fsr2h,c
  3186  000CC2  0E09               	movlw	9
  3187  000CC4  D01F               	goto	L4
  3188  000CC6                     l2671:
  3189                           
  3190                           ;APP.c: 190: else
  3191                           ;APP.c: 191: {
  3192                           ;APP.c: 192: Output[Index]--;
  3193  000CC6  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3194  000CC8  0D01               	mullw	1
  3195  000CCA  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3196  000CCC  24F3               	addwf	prodl,w,c
  3197  000CCE  6ED9               	movwf	fsr2l,c
  3198  000CD0  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3199  000CD2  20F4               	addwfc	prodh,w,c
  3200  000CD4  6EDA               	movwf	fsr2h,c
  3201  000CD6  06DF               	decf	indf2,f,c
  3202                           
  3203                           ;APP.c: 193: }
  3204                           ;APP.c: 194: }
  3205  000CD8  D020               	goto	l2679
  3206  000CDA                     l2673:
  3207                           
  3208                           ;APP.c: 195: else
  3209                           ;APP.c: 196: {
  3210                           ;APP.c: 197: if( (unsigned char)9 == Output[Index])
  3211  000CDA  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3212  000CDC  0D01               	mullw	1
  3213  000CDE  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3214  000CE0  24F3               	addwf	prodl,w,c
  3215  000CE2  6ED9               	movwf	fsr2l,c
  3216  000CE4  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3217  000CE6  20F4               	addwfc	prodh,w,c
  3218  000CE8  6EDA               	movwf	fsr2h,c
  3219  000CEA  0E09               	movlw	9
  3220  000CEC  18DE               	xorwf	postinc2,w,c
  3221  000CEE  A4D8               	btfss	status,2,c
  3222  000CF0  D00B               	goto	l2677
  3223                           
  3224                           ;APP.c: 198: {
  3225                           ;APP.c: 199: Output[Index] = (unsigned char)0;
  3226  000CF2  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3227  000CF4  0D01               	mullw	1
  3228  000CF6  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3229  000CF8  24F3               	addwf	prodl,w,c
  3230  000CFA  6ED9               	movwf	fsr2l,c
  3231  000CFC  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3232  000CFE  20F4               	addwfc	prodh,w,c
  3233  000D00  6EDA               	movwf	fsr2h,c
  3234  000D02  0E00               	movlw	0
  3235  000D04                     L4:
  3236  000D04  6EDF               	movwf	indf2,c
  3237                           
  3238                           ;APP.c: 200: }
  3239  000D06  D009               	goto	l2679
  3240  000D08                     l2677:
  3241                           
  3242                           ;APP.c: 201: else
  3243                           ;APP.c: 202: {
  3244                           ;APP.c: 203: Output[Index]++;
  3245  000D08  501D               	movf	IncrementDecrementSingleDigit@Index,w,c
  3246  000D0A  0D01               	mullw	1
  3247  000D0C  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3248  000D0E  24F3               	addwf	prodl,w,c
  3249  000D10  6ED9               	movwf	fsr2l,c
  3250  000D12  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3251  000D14  20F4               	addwfc	prodh,w,c
  3252  000D16  6EDA               	movwf	fsr2h,c
  3253  000D18  2ADF               	incf	indf2,f,c
  3254  000D1A                     l2679:
  3255                           
  3256                           ;APP.c: 204: }
  3257                           ;APP.c: 205: }
  3258                           ;APP.c: 207: for(LoopIndex=(unsigned char)0;LoopIndex < 4; LoopIndex++)
  3259  000D1A  0E00               	movlw	0
  3260  000D1C  6E2B               	movwf	IncrementDecrementSingleDigit@LoopIndex,c
  3261  000D1E                     l2681:
  3262  000D1E  0E03               	movlw	3
  3263  000D20  642B               	cpfsgt	IncrementDecrementSingleDigit@LoopIndex,c
  3264  000D22  D001               	goto	l2685
  3265  000D24  D033               	goto	l60
  3266  000D26                     l2685:
  3267                           
  3268                           ;APP.c: 208: {
  3269                           ;APP.c: 209: for(PowIndex = (unsigned char)0 ; PowIndex < LoopIndex ;
  3270  000D26  0E00               	movlw	0
  3271  000D28  6E24               	movwf	IncrementDecrementSingleDigit@PowIndex,c
  3272                           
  3273                           ;APP.c: 210: PowIndex++ )
  3274  000D2A  D00F               	goto	l2691
  3275  000D2C                     l2687:
  3276                           
  3277                           ;APP.c: 211: {
  3278                           ;APP.c: 212: unitPosition *=(unsigned short)10;
  3279  000D2C  C025  F014         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplier
  3280  000D30  C026  F015         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplier+1
  3281  000D34  0E00               	movlw	0
  3282  000D36  6E17               	movwf	___wmul@multiplicand+1,c
  3283  000D38  0E0A               	movlw	10
  3284  000D3A  6E16               	movwf	___wmul@multiplicand,c
  3285  000D3C  EC6B  F00B         	call	___wmul	;wreg free
  3286  000D40  C014  F025         	movff	?___wmul,IncrementDecrementSingleDigit@unitPosition
  3287  000D44  C015  F026         	movff	?___wmul+1,IncrementDecrementSingleDigit@unitPosition+1
  3288  000D48  2A24               	incf	IncrementDecrementSingleDigit@PowIndex,f,c
  3289  000D4A                     l2691:
  3290  000D4A  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3291  000D4C  5C24               	subwf	IncrementDecrementSingleDigit@PowIndex,w,c
  3292  000D4E  A0D8               	btfss	status,0,c
  3293  000D50  D7ED               	goto	l2687
  3294                           
  3295                           ;APP.c: 213: }
  3296                           ;APP.c: 214: NumberReturned +=
  3297                           ;APP.c: 215: (((unsigned short)Output[LoopIndex]) * unitPosition);
  3298  000D52  502B               	movf	IncrementDecrementSingleDigit@LoopIndex,w,c
  3299  000D54  0D01               	mullw	1
  3300  000D56  0E27               	movlw	low IncrementDecrementSingleDigit@Output
  3301  000D58  24F3               	addwf	prodl,w,c
  3302  000D5A  6ED9               	movwf	fsr2l,c
  3303  000D5C  0E00               	movlw	high IncrementDecrementSingleDigit@Output
  3304  000D5E  20F4               	addwfc	prodh,w,c
  3305  000D60  6EDA               	movwf	fsr2h,c
  3306  000D62  50DF               	movf	indf2,w,c
  3307  000D64  6E1F               	movwf	??_IncrementDecrementSingleDigit& (0+255),c
  3308  000D66  501F               	movf	??_IncrementDecrementSingleDigit,w,c
  3309  000D68  6E14               	movwf	___wmul@multiplier,c
  3310  000D6A  6A15               	clrf	___wmul@multiplier+1,c
  3311  000D6C  C025  F016         	movff	IncrementDecrementSingleDigit@unitPosition,___wmul@multiplicand
  3312  000D70  C026  F017         	movff	IncrementDecrementSingleDigit@unitPosition+1,___wmul@multiplicand+1
  3313  000D74  EC6B  F00B         	call	___wmul	;wreg free
  3314  000D78  5014               	movf	?___wmul,w,c
  3315  000D7A  2622               	addwf	IncrementDecrementSingleDigit@NumberReturned,f,c
  3316  000D7C  5015               	movf	?___wmul+1,w,c
  3317  000D7E  2223               	addwfc	IncrementDecrementSingleDigit@NumberReturned+1,f,c
  3318                           
  3319                           ;APP.c: 216: unitPosition = (unsigned short)1;
  3320  000D80  0E00               	movlw	0
  3321  000D82  6E26               	movwf	IncrementDecrementSingleDigit@unitPosition+1,c
  3322  000D84  0E01               	movlw	1
  3323  000D86  6E25               	movwf	IncrementDecrementSingleDigit@unitPosition,c
  3324  000D88  2A2B               	incf	IncrementDecrementSingleDigit@LoopIndex,f,c
  3325  000D8A  D7C9               	goto	l2681
  3326  000D8C                     l60:
  3327                           
  3328                           ;APP.c: 217: }
  3329                           ;APP.c: 219: return NumberReturned;
  3330  000D8C  C022  F01B         	movff	IncrementDecrementSingleDigit@NumberReturned,?_IncrementDecrementSingleDigit
  3331  000D90  C023  F01C         	movff	IncrementDecrementSingleDigit@NumberReturned+1,?_IncrementDecrementSingleDigit+1
  3332  000D94  0012               	return		;funcret
  3333  000D96                     __end_of_IncrementDecrementSingleDigit:
  3334                           	opt stack 0
  3335                           tosu	equ	0xFFF
  3336                           tosh	equ	0xFFE
  3337                           tosl	equ	0xFFD
  3338                           pclath	equ	0xFFA
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postinc1	equ	0xFE6
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _GetKeyStatus *****************
  3359 ;; Defined at:
  3360 ;;		line 19 in file "../../../../Common/Driver/Key/Key.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  KeyID           1    wreg     unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  KeyID           1   20[COMRAM] unsigned char 
  3365 ;;  KeyStatus       1   19[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      unsigned char 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3375 ;;      Params:         0       0       0       0       0       0       0
  3376 ;;      Locals:         2       0       0       0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0
  3378 ;;      Totals:         2       0       0       0       0       0       0
  3379 ;;Total ram usage:        2 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    4
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_APP_MANAGE
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text16
  3390  001600                     __ptext16:
  3391                           	opt stack 0
  3392  001600                     _GetKeyStatus:
  3393                           	opt stack 22
  3394                           
  3395                           ;incstack = 0
  3396                           ;GetKeyStatus@KeyID stored from wreg
  3397  001600  6E15               	movwf	GetKeyStatus@KeyID,c
  3398                           
  3399                           ;Key.c: 21: unsigned char KeyStatus;
  3400                           ;Key.c: 23: KeyStatus = KeyInternalData[KeyID].KeyState;
  3401  001602  5015               	movf	GetKeyStatus@KeyID,w,c
  3402  001604  0D03               	mullw	3
  3403  001606  0E5B               	movlw	low _KeyInternalData
  3404  001608  24F3               	addwf	prodl,w,c
  3405  00160A  6ED9               	movwf	fsr2l,c
  3406  00160C  0E00               	movlw	high _KeyInternalData
  3407  00160E  20F4               	addwfc	prodh,w,c
  3408  001610  6EDA               	movwf	fsr2h,c
  3409  001612  50DF               	movf	indf2,w,c
  3410  001614  6E14               	movwf	GetKeyStatus@KeyStatus,c
  3411                           
  3412                           ;Key.c: 24: KeyInternalData[KeyID].KeyState &= (unsigned char)0x3F;
  3413  001616  5015               	movf	GetKeyStatus@KeyID,w,c
  3414  001618  0D03               	mullw	3
  3415  00161A  0E5B               	movlw	low _KeyInternalData
  3416  00161C  24F3               	addwf	prodl,w,c
  3417  00161E  6ED9               	movwf	fsr2l,c
  3418  001620  0E00               	movlw	high _KeyInternalData
  3419  001622  20F4               	addwfc	prodh,w,c
  3420  001624  6EDA               	movwf	fsr2h,c
  3421  001626  0E3F               	movlw	63
  3422  001628  16DF               	andwf	indf2,f,c
  3423                           
  3424                           ;Key.c: 26: return KeyStatus;
  3425  00162A  5014               	movf	GetKeyStatus@KeyStatus,w,c
  3426  00162C  0012               	return	
  3427  00162E                     __end_of_GetKeyStatus:
  3428                           	opt stack 0
  3429                           tosu	equ	0xFFF
  3430                           tosh	equ	0xFFE
  3431                           tosl	equ	0xFFD
  3432                           pclath	equ	0xFFA
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           prodh	equ	0xFF4
  3438                           prodl	equ	0xFF3
  3439                           intcon	equ	0xFF2
  3440                           postinc0	equ	0xFEE
  3441                           wreg	equ	0xFE8
  3442                           postinc1	equ	0xFE6
  3443                           fsr1h	equ	0xFE2
  3444                           fsr1l	equ	0xFE1
  3445                           indf2	equ	0xFDF
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _GetDistance *****************
  3453 ;; Defined at:
  3454 ;;		line 93 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  4   19[COMRAM] unsigned long 
  3461 ;; Registers used:
  3462 ;;		None
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3468 ;;      Params:         4       0       0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0
  3471 ;;      Totals:         4       0       0       0       0       0       0
  3472 ;;Total ram usage:        4 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    4
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_APP_MANAGE
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text17
  3483  00176E                     __ptext17:
  3484                           	opt stack 0
  3485  00176E                     _GetDistance:
  3486                           	opt stack 22
  3487                           
  3488                           ;SpeedCalc.c: 95: return DistTravelCntr;
  3489                           
  3490                           ;incstack = 0
  3491  00176E  C039  F014         	movff	_DistTravelCntr,?_GetDistance
  3492  001772  C03A  F015         	movff	_DistTravelCntr+1,?_GetDistance+1
  3493  001776  C03B  F016         	movff	_DistTravelCntr+2,?_GetDistance+2
  3494  00177A  C03C  F017         	movff	_DistTravelCntr+3,?_GetDistance+3
  3495  00177E  0012               	return		;funcret
  3496  001780                     __end_of_GetDistance:
  3497                           	opt stack 0
  3498                           tosu	equ	0xFFF
  3499                           tosh	equ	0xFFE
  3500                           tosl	equ	0xFFD
  3501                           pclath	equ	0xFFA
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           postinc1	equ	0xFE6
  3512                           fsr1h	equ	0xFE2
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _GetAvgSpeed *****************
  3522 ;; Defined at:
  3523 ;;		line 105 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  bIsKph          1    wreg     unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  bIsKph          1   46[COMRAM] unsigned char 
  3528 ;;  KphMphFactor    4   47[COMRAM] unsigned long 
  3529 ;;  AvgSpeedKphM    2   51[COMRAM] unsigned short 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  2   44[COMRAM] unsigned short 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3539 ;;      Params:         2       0       0       0       0       0       0
  3540 ;;      Locals:         7       0       0       0       0       0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0
  3542 ;;      Totals:         9       0       0       0       0       0       0
  3543 ;;Total ram usage:        9 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    5
  3546 ;; This function calls:
  3547 ;;		___lldiv
  3548 ;;		___lmul
  3549 ;; This function is called by:
  3550 ;;		_APP_MANAGE
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text18
  3555  00102C                     __ptext18:
  3556                           	opt stack 0
  3557  00102C                     _GetAvgSpeed:
  3558                           	opt stack 21
  3559                           
  3560                           ;incstack = 0
  3561                           ;GetAvgSpeed@bIsKph stored from wreg
  3562  00102C  6E2F               	movwf	GetAvgSpeed@bIsKph,c
  3563                           
  3564                           ;SpeedCalc.c: 107: unsigned short AvgSpeedKphMph = (unsigned short)0;
  3565  00102E  0E00               	movlw	0
  3566  001030  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  3567  001032  0E00               	movlw	0
  3568  001034  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  3569                           
  3570                           ;SpeedCalc.c: 108: unsigned long KphMphFactor;
  3571                           ;SpeedCalc.c: 110: if( (unsigned char)1 == bIsKph )
  3572  001036  042F               	decf	GetAvgSpeed@bIsKph,w,c
  3573  001038  A4D8               	btfss	status,2,c
  3574  00103A  D004               	goto	l2563
  3575                           
  3576                           ;SpeedCalc.c: 111: {
  3577                           ;SpeedCalc.c: 112: KphMphFactor = (unsigned long)360;
  3578  00103C  0E68               	movlw	104
  3579  00103E  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3580  001040  0E01               	movlw	1
  3581  001042  D003               	goto	L5
  3582  001044                     l2563:
  3583                           
  3584                           ;SpeedCalc.c: 114: else
  3585                           ;SpeedCalc.c: 115: {
  3586                           ;SpeedCalc.c: 116: KphMphFactor = (unsigned long)225;
  3587  001044  0EE1               	movlw	225
  3588  001046  6E30               	movwf	GetAvgSpeed@KphMphFactor,c
  3589  001048  0E00               	movlw	0
  3590  00104A                     L5:
  3591  00104A  6E31               	movwf	GetAvgSpeed@KphMphFactor+1,c
  3592  00104C  0E00               	movlw	0
  3593  00104E  6E32               	movwf	GetAvgSpeed@KphMphFactor+2,c
  3594  001050  0E00               	movlw	0
  3595  001052  6E33               	movwf	GetAvgSpeed@KphMphFactor+3,c
  3596                           
  3597                           ;SpeedCalc.c: 117: }
  3598                           ;SpeedCalc.c: 119: if(LapTimeTenthMilli != (unsigned short)0)
  3599  001054  503F               	movf	_LapTimeTenthMilli,w,c
  3600  001056  1040               	iorwf	_LapTimeTenthMilli+1,w,c
  3601  001058  B4D8               	btfsc	status,2,c
  3602  00105A  D024               	goto	l2569
  3603                           
  3604                           ;SpeedCalc.c: 120: {
  3605                           ;SpeedCalc.c: 121: AvgSpeedKphMph = (unsigned short)
  3606                           ;SpeedCalc.c: 122: ((KphMphFactor * (unsigned long)CircumFactor )
  3607                           ;SpeedCalc.c: 123: / (unsigned long)LapTimeTenthMilli);
  3608  00105C  C066  F014         	movff	_CircumFactor,___lmul@multiplier
  3609  001060  C067  F015         	movff	_CircumFactor+1,___lmul@multiplier+1
  3610  001064  6A16               	clrf	___lmul@multiplier+2,c
  3611  001066  6A17               	clrf	___lmul@multiplier+3,c
  3612  001068  C030  F018         	movff	GetAvgSpeed@KphMphFactor,___lmul@multiplicand
  3613  00106C  C031  F019         	movff	GetAvgSpeed@KphMphFactor+1,___lmul@multiplicand+1
  3614  001070  C032  F01A         	movff	GetAvgSpeed@KphMphFactor+2,___lmul@multiplicand+2
  3615  001074  C033  F01B         	movff	GetAvgSpeed@KphMphFactor+3,___lmul@multiplicand+3
  3616  001078  ECC1  F009         	call	___lmul	;wreg free
  3617  00107C  C014  F020         	movff	?___lmul,___lldiv@dividend
  3618  001080  C015  F021         	movff	?___lmul+1,___lldiv@dividend+1
  3619  001084  C016  F022         	movff	?___lmul+2,___lldiv@dividend+2
  3620  001088  C017  F023         	movff	?___lmul+3,___lldiv@dividend+3
  3621  00108C  C03F  F024         	movff	_LapTimeTenthMilli,___lldiv@divisor
  3622  001090  C040  F025         	movff	_LapTimeTenthMilli+1,___lldiv@divisor+1
  3623  001094  6A26               	clrf	___lldiv@divisor+2,c
  3624  001096  6A27               	clrf	___lldiv@divisor+3,c
  3625  001098  ECED  F008         	call	___lldiv	;wreg free
  3626  00109C  C020  F034         	movff	?___lldiv,GetAvgSpeed@AvgSpeedKphMph
  3627  0010A0  C021  F035         	movff	?___lldiv+1,GetAvgSpeed@AvgSpeedKphMph+1
  3628  0010A4                     l2569:
  3629                           
  3630                           ;SpeedCalc.c: 124: }
  3631                           ;SpeedCalc.c: 126: if( (unsigned char)64 == HwTimerOVFLcount)
  3632  0010A4  0E40               	movlw	64
  3633  0010A6  184A               	xorwf	_HwTimerOVFLcount,w,c	;volatile
  3634  0010A8  A4D8               	btfss	status,2,c
  3635  0010AA  D004               	goto	l2573
  3636                           
  3637                           ;SpeedCalc.c: 127: {
  3638                           ;SpeedCalc.c: 128: AvgSpeedKphMph = (unsigned short)0;
  3639  0010AC  0E00               	movlw	0
  3640  0010AE  6E35               	movwf	GetAvgSpeed@AvgSpeedKphMph+1,c
  3641  0010B0  0E00               	movlw	0
  3642  0010B2  6E34               	movwf	GetAvgSpeed@AvgSpeedKphMph,c
  3643  0010B4                     l2573:
  3644                           
  3645                           ;SpeedCalc.c: 129: }
  3646                           ;SpeedCalc.c: 130: return AvgSpeedKphMph;
  3647  0010B4  C034  F02D         	movff	GetAvgSpeed@AvgSpeedKphMph,?_GetAvgSpeed
  3648  0010B8  C035  F02E         	movff	GetAvgSpeed@AvgSpeedKphMph+1,?_GetAvgSpeed+1
  3649  0010BC  0012               	return	
  3650  0010BE                     __end_of_GetAvgSpeed:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           postinc1	equ	0xFE6
  3666                           fsr1h	equ	0xFE2
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function ___lmul *****************
  3676 ;; Defined at:
  3677 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  multiplier      4   19[COMRAM] unsigned long 
  3680 ;;  multiplicand    4   23[COMRAM] unsigned long 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  product         4   27[COMRAM] unsigned long 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  4   19[COMRAM] unsigned long 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3692 ;;      Params:         8       0       0       0       0       0       0
  3693 ;;      Locals:         4       0       0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0
  3695 ;;      Totals:        12       0       0       0       0       0       0
  3696 ;;Total ram usage:       12 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    4
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_APP_MANAGE
  3703 ;;		_GetAvgSpeed
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text19
  3708  001382                     __ptext19:
  3709                           	opt stack 0
  3710  001382                     ___lmul:
  3711                           	opt stack 22
  3712                           
  3713                           ;incstack = 0
  3714  001382  0E00               	movlw	0
  3715  001384  6E1C               	movwf	___lmul@product,c
  3716  001386  0E00               	movlw	0
  3717  001388  6E1D               	movwf	___lmul@product+1,c
  3718  00138A  0E00               	movlw	0
  3719  00138C  6E1E               	movwf	___lmul@product+2,c
  3720  00138E  0E00               	movlw	0
  3721  001390  6E1F               	movwf	___lmul@product+3,c
  3722  001392                     l2503:
  3723  001392  A014               	btfss	___lmul@multiplier,0,c
  3724  001394  D008               	goto	l2507
  3725  001396  5018               	movf	___lmul@multiplicand,w,c
  3726  001398  261C               	addwf	___lmul@product,f,c
  3727  00139A  5019               	movf	___lmul@multiplicand+1,w,c
  3728  00139C  221D               	addwfc	___lmul@product+1,f,c
  3729  00139E  501A               	movf	___lmul@multiplicand+2,w,c
  3730  0013A0  221E               	addwfc	___lmul@product+2,f,c
  3731  0013A2  501B               	movf	___lmul@multiplicand+3,w,c
  3732  0013A4  221F               	addwfc	___lmul@product+3,f,c
  3733  0013A6                     l2507:
  3734  0013A6  90D8               	bcf	status,0,c
  3735  0013A8  3618               	rlcf	___lmul@multiplicand,f,c
  3736  0013AA  3619               	rlcf	___lmul@multiplicand+1,f,c
  3737  0013AC  361A               	rlcf	___lmul@multiplicand+2,f,c
  3738  0013AE  361B               	rlcf	___lmul@multiplicand+3,f,c
  3739  0013B0  90D8               	bcf	status,0,c
  3740  0013B2  3217               	rrcf	___lmul@multiplier+3,f,c
  3741  0013B4  3216               	rrcf	___lmul@multiplier+2,f,c
  3742  0013B6  3215               	rrcf	___lmul@multiplier+1,f,c
  3743  0013B8  3214               	rrcf	___lmul@multiplier,f,c
  3744  0013BA  5014               	movf	___lmul@multiplier,w,c
  3745  0013BC  1015               	iorwf	___lmul@multiplier+1,w,c
  3746  0013BE  1016               	iorwf	___lmul@multiplier+2,w,c
  3747  0013C0  1017               	iorwf	___lmul@multiplier+3,w,c
  3748  0013C2  A4D8               	btfss	status,2,c
  3749  0013C4  D7E6               	goto	l2503
  3750  0013C6  C01C  F014         	movff	___lmul@product,?___lmul
  3751  0013CA  C01D  F015         	movff	___lmul@product+1,?___lmul+1
  3752  0013CE  C01E  F016         	movff	___lmul@product+2,?___lmul+2
  3753  0013D2  C01F  F017         	movff	___lmul@product+3,?___lmul+3
  3754  0013D6  0012               	return		;funcret
  3755  0013D8                     __end_of___lmul:
  3756                           	opt stack 0
  3757                           tosu	equ	0xFFF
  3758                           tosh	equ	0xFFE
  3759                           tosl	equ	0xFFD
  3760                           pclath	equ	0xFFA
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           postinc0	equ	0xFEE
  3769                           wreg	equ	0xFE8
  3770                           postinc1	equ	0xFE6
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780 ;; *************** function ___lldiv *****************
  3781 ;; Defined at:
  3782 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  dividend        4   31[COMRAM] unsigned long 
  3785 ;;  divisor         4   35[COMRAM] unsigned long 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  quotient        4   39[COMRAM] unsigned long 
  3788 ;;  counter         1   43[COMRAM] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  4   31[COMRAM] unsigned long 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3798 ;;      Params:         8       0       0       0       0       0       0
  3799 ;;      Locals:         5       0       0       0       0       0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0
  3801 ;;      Totals:        13       0       0       0       0       0       0
  3802 ;;Total ram usage:       13 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    4
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_SpeedCalcManage
  3809 ;;		_GetAvgSpeed
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text20
  3814  0011DA                     __ptext20:
  3815                           	opt stack 0
  3816  0011DA                     ___lldiv:
  3817                           	opt stack 22
  3818                           
  3819                           ;incstack = 0
  3820  0011DA  0E00               	movlw	0
  3821  0011DC  6E28               	movwf	___lldiv@quotient,c
  3822  0011DE  0E00               	movlw	0
  3823  0011E0  6E29               	movwf	___lldiv@quotient+1,c
  3824  0011E2  0E00               	movlw	0
  3825  0011E4  6E2A               	movwf	___lldiv@quotient+2,c
  3826  0011E6  0E00               	movlw	0
  3827  0011E8  6E2B               	movwf	___lldiv@quotient+3,c
  3828  0011EA  5024               	movf	___lldiv@divisor,w,c
  3829  0011EC  1025               	iorwf	___lldiv@divisor+1,w,c
  3830  0011EE  1026               	iorwf	___lldiv@divisor+2,w,c
  3831  0011F0  1027               	iorwf	___lldiv@divisor+3,w,c
  3832  0011F2  B4D8               	btfsc	status,2,c
  3833  0011F4  D02A               	goto	l867
  3834  0011F6  0E01               	movlw	1
  3835  0011F8  6E2C               	movwf	___lldiv@counter,c
  3836  0011FA  D006               	goto	l2519
  3837  0011FC                     l2517:
  3838  0011FC  90D8               	bcf	status,0,c
  3839  0011FE  3624               	rlcf	___lldiv@divisor,f,c
  3840  001200  3625               	rlcf	___lldiv@divisor+1,f,c
  3841  001202  3626               	rlcf	___lldiv@divisor+2,f,c
  3842  001204  3627               	rlcf	___lldiv@divisor+3,f,c
  3843  001206  2A2C               	incf	___lldiv@counter,f,c
  3844  001208                     l2519:
  3845  001208  AE27               	btfss	___lldiv@divisor+3,7,c
  3846  00120A  D7F8               	goto	l2517
  3847  00120C                     l2521:
  3848  00120C  90D8               	bcf	status,0,c
  3849  00120E  3628               	rlcf	___lldiv@quotient,f,c
  3850  001210  3629               	rlcf	___lldiv@quotient+1,f,c
  3851  001212  362A               	rlcf	___lldiv@quotient+2,f,c
  3852  001214  362B               	rlcf	___lldiv@quotient+3,f,c
  3853  001216  5024               	movf	___lldiv@divisor,w,c
  3854  001218  5C20               	subwf	___lldiv@dividend,w,c
  3855  00121A  5025               	movf	___lldiv@divisor+1,w,c
  3856  00121C  5821               	subwfb	___lldiv@dividend+1,w,c
  3857  00121E  5026               	movf	___lldiv@divisor+2,w,c
  3858  001220  5822               	subwfb	___lldiv@dividend+2,w,c
  3859  001222  5027               	movf	___lldiv@divisor+3,w,c
  3860  001224  5823               	subwfb	___lldiv@dividend+3,w,c
  3861  001226  A0D8               	btfss	status,0,c
  3862  001228  D009               	goto	l2529
  3863  00122A  5024               	movf	___lldiv@divisor,w,c
  3864  00122C  5E20               	subwf	___lldiv@dividend,f,c
  3865  00122E  5025               	movf	___lldiv@divisor+1,w,c
  3866  001230  5A21               	subwfb	___lldiv@dividend+1,f,c
  3867  001232  5026               	movf	___lldiv@divisor+2,w,c
  3868  001234  5A22               	subwfb	___lldiv@dividend+2,f,c
  3869  001236  5027               	movf	___lldiv@divisor+3,w,c
  3870  001238  5A23               	subwfb	___lldiv@dividend+3,f,c
  3871  00123A  8028               	bsf	___lldiv@quotient,0,c
  3872  00123C                     l2529:
  3873  00123C  90D8               	bcf	status,0,c
  3874  00123E  3227               	rrcf	___lldiv@divisor+3,f,c
  3875  001240  3226               	rrcf	___lldiv@divisor+2,f,c
  3876  001242  3225               	rrcf	___lldiv@divisor+1,f,c
  3877  001244  3224               	rrcf	___lldiv@divisor,f,c
  3878  001246  2E2C               	decfsz	___lldiv@counter,f,c
  3879  001248  D7E1               	goto	l2521
  3880  00124A                     l867:
  3881  00124A  C028  F020         	movff	___lldiv@quotient,?___lldiv
  3882  00124E  C029  F021         	movff	___lldiv@quotient+1,?___lldiv+1
  3883  001252  C02A  F022         	movff	___lldiv@quotient+2,?___lldiv+2
  3884  001256  C02B  F023         	movff	___lldiv@quotient+3,?___lldiv+3
  3885  00125A  0012               	return		;funcret
  3886  00125C                     __end_of___lldiv:
  3887                           	opt stack 0
  3888                           tosu	equ	0xFFF
  3889                           tosh	equ	0xFFE
  3890                           tosl	equ	0xFFD
  3891                           pclath	equ	0xFFA
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           intcon	equ	0xFF2
  3899                           postinc0	equ	0xFEE
  3900                           wreg	equ	0xFE8
  3901                           postinc1	equ	0xFE6
  3902                           fsr1h	equ	0xFE2
  3903                           fsr1l	equ	0xFE1
  3904                           indf2	equ	0xFDF
  3905                           postinc2	equ	0xFDE
  3906                           postdec2	equ	0xFDD
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function _Eeprom_Write_Block *****************
  3912 ;; Defined at:
  3913 ;;		line 13 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  address         1    wreg     unsigned char 
  3916 ;;  DataPtr         2   19[COMRAM] PTR unsigned char 
  3917 ;;		 -> Circum(2), 
  3918 ;;  BlockSize       1   21[COMRAM] unsigned char 
  3919 ;;  ptrFnCallbac    2   22[COMRAM] PTR FTN()void 
  3920 ;;		 -> Absolute function(1), 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  address         1   25[COMRAM] unsigned char 
  3923 ;;  LoopIndex       1   26[COMRAM] unsigned char 
  3924 ;;  WriteGranted    1   24[COMRAM] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      unsigned char 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3934 ;;      Params:         5       0       0       0       0       0       0
  3935 ;;      Locals:         3       0       0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0
  3937 ;;      Totals:         8       0       0       0       0       0       0
  3938 ;;Total ram usage:        8 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    4
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_APP_MANAGE
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text21
  3949  0012C8                     __ptext21:
  3950                           	opt stack 0
  3951  0012C8                     _Eeprom_Write_Block:
  3952                           	opt stack 22
  3953                           
  3954                           ;incstack = 0
  3955                           ;Eeprom_Write_Block@address stored from wreg
  3956  0012C8  6E1A               	movwf	Eeprom_Write_Block@address,c
  3957                           
  3958                           ;Eeprom.c: 21: unsigned char WriteGranted;
  3959                           ;Eeprom.c: 22: unsigned char LoopIndex;
  3960                           ;Eeprom.c: 23: if( ((unsigned char)0 == WriteRequest)&& (BlockSize <= 50))
  3961  0012CA  5051               	movf	_WriteRequest,w,c
  3962  0012CC  A4D8               	btfss	status,2,c
  3963  0012CE  D02A               	goto	l2641
  3964  0012D0  0E33               	movlw	51
  3965  0012D2  6016               	cpfslt	Eeprom_Write_Block@BlockSize,c
  3966  0012D4  D027               	goto	l2641
  3967                           
  3968                           ;Eeprom.c: 24: {
  3969                           ;Eeprom.c: 25: WriteRequest = (unsigned char)1;
  3970  0012D6  0E01               	movlw	1
  3971  0012D8  6E51               	movwf	_WriteRequest,c
  3972                           
  3973                           ;Eeprom.c: 27: for(LoopIndex = (unsigned char)0 ; LoopIndex < BlockSize; LoopIndex ++ )
  3974  0012DA  0E00               	movlw	0
  3975  0012DC  6E1B               	movwf	Eeprom_Write_Block@LoopIndex,c
  3976  0012DE  D013               	goto	l2635
  3977  0012E0                     l2631:
  3978                           
  3979                           ;Eeprom.c: 28: {
  3980                           ;Eeprom.c: 29: DataArray[LoopIndex] = DataPtr[LoopIndex];
  3981  0012E0  501B               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3982  0012E2  0D01               	mullw	1
  3983  0012E4  50F3               	movf	prodl,w,c
  3984  0012E6  2414               	addwf	Eeprom_Write_Block@DataPtr,w,c
  3985  0012E8  6ED9               	movwf	fsr2l,c
  3986  0012EA  50F4               	movf	prodh,w,c
  3987  0012EC  2015               	addwfc	Eeprom_Write_Block@DataPtr+1,w,c
  3988  0012EE  6EDA               	movwf	fsr2h,c
  3989  0012F0  501B               	movf	Eeprom_Write_Block@LoopIndex,w,c
  3990  0012F2  0D01               	mullw	1
  3991  0012F4  0E80               	movlw	low _DataArray
  3992  0012F6  24F3               	addwf	prodl,w,c
  3993  0012F8  6EE1               	movwf	fsr1l,c
  3994  0012FA  0E00               	movlw	high _DataArray
  3995  0012FC  20F4               	addwfc	prodh,w,c
  3996  0012FE  6EE2               	movwf	fsr1h,c
  3997  001300  CFDF FFE7          	movff	indf2,indf1
  3998  001304  2A1B               	incf	Eeprom_Write_Block@LoopIndex,f,c
  3999  001306                     l2635:
  4000  001306  5016               	movf	Eeprom_Write_Block@BlockSize,w,c
  4001  001308  5C1B               	subwf	Eeprom_Write_Block@LoopIndex,w,c
  4002  00130A  A0D8               	btfss	status,0,c
  4003  00130C  D7E9               	goto	l2631
  4004                           
  4005                           ;Eeprom.c: 30: }
  4006                           ;Eeprom.c: 31: DataSize = BlockSize;
  4007  00130E  C016  F04F         	movff	Eeprom_Write_Block@BlockSize,_DataSize
  4008                           
  4009                           ;Eeprom.c: 32: EEPROMaddr = address;
  4010  001312  C01A  F050         	movff	Eeprom_Write_Block@address,_EEPROMaddr
  4011                           
  4012                           ;Eeprom.c: 33: WriteFnCallback = ptrFnCallback;
  4013  001316  C017  F043         	movff	Eeprom_Write_Block@ptrFnCallback,_WriteFnCallback
  4014  00131A  C018  F044         	movff	Eeprom_Write_Block@ptrFnCallback+1,_WriteFnCallback+1
  4015                           
  4016                           ;Eeprom.c: 34: WriteGranted = (unsigned char)1;
  4017  00131E  0E01               	movlw	1
  4018  001320  6E19               	movwf	Eeprom_Write_Block@WriteGranted,c
  4019                           
  4020                           ;Eeprom.c: 35: }
  4021  001322  0012               	return	
  4022  001324                     l2641:
  4023                           
  4024                           ;Eeprom.c: 36: else
  4025                           ;Eeprom.c: 37: {
  4026                           ;Eeprom.c: 38: WriteGranted = (unsigned char)0;
  4027  001324  0E00               	movlw	0
  4028  001326  6E19               	movwf	Eeprom_Write_Block@WriteGranted,c
  4029  001328  0012               	return	
  4030  00132A                     __end_of_Eeprom_Write_Block:
  4031                           	opt stack 0
  4032                           tosu	equ	0xFFF
  4033                           tosh	equ	0xFFE
  4034                           tosl	equ	0xFFD
  4035                           pclath	equ	0xFFA
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           prodh	equ	0xFF4
  4041                           prodl	equ	0xFF3
  4042                           intcon	equ	0xFF2
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           indf1	equ	0xFE7
  4046                           postinc1	equ	0xFE6
  4047                           fsr1h	equ	0xFE2
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _BlinkDigit *****************
  4057 ;; Defined at:
  4058 ;;		line 139 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  Index           1    wreg     unsigned char 
  4061 ;;  Line            1   19[COMRAM] unsigned char 
  4062 ;;  duration        1   20[COMRAM] unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  Index           1   21[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4074 ;;      Params:         2       0       0       0       0       0       0
  4075 ;;      Locals:         1       0       0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0
  4077 ;;      Totals:         3       0       0       0       0       0       0
  4078 ;;Total ram usage:        3 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    4
  4081 ;; This function calls:
  4082 ;;		Nothing
  4083 ;; This function is called by:
  4084 ;;		_APP_MANAGE
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text22
  4089  001780                     __ptext22:
  4090                           	opt stack 0
  4091  001780                     _BlinkDigit:
  4092                           	opt stack 22
  4093                           
  4094                           ;incstack = 0
  4095                           ;BlinkDigit@Index stored from wreg
  4096  001780  6E16               	movwf	BlinkDigit@Index,c
  4097                           
  4098                           ;BCDdisplay.c: 146: BlinkIndex = Index;
  4099  001782  C016  F058         	movff	BlinkDigit@Index,_BlinkIndex
  4100                           
  4101                           ;BCDdisplay.c: 147: BlinkDuration = duration;
  4102  001786  C015  F057         	movff	BlinkDigit@duration,_BlinkDuration
  4103                           
  4104                           ;BCDdisplay.c: 148: LineBlinkIndex = Line;
  4105  00178A  C014  F056         	movff	BlinkDigit@Line,_LineBlinkIndex
  4106  00178E  0012               	return		;funcret
  4107  001790                     __end_of_BlinkDigit:
  4108                           	opt stack 0
  4109                           tosu	equ	0xFFF
  4110                           tosh	equ	0xFFE
  4111                           tosl	equ	0xFFD
  4112                           pclath	equ	0xFFA
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           indf1	equ	0xFE7
  4123                           postinc1	equ	0xFE6
  4124                           fsr1h	equ	0xFE2
  4125                           fsr1l	equ	0xFE1
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _BCDsendNumber *****************
  4134 ;; Defined at:
  4135 ;;		line 35 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  Number          2   26[COMRAM] unsigned short 
  4138 ;;  Line            1   28[COMRAM] unsigned char 
  4139 ;;  DecimalPlace    1   29[COMRAM] unsigned char 
  4140 ;;  EnableTranc     1   30[COMRAM] unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  Buffer          2   39[COMRAM] unsigned short 
  4143 ;;  Output          2   37[COMRAM] unsigned short 
  4144 ;;  Link            2   35[COMRAM] unsigned short 
  4145 ;;  LoopIndex       1   41[COMRAM] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         5       0       0       0       0       0       0
  4156 ;;      Locals:         7       0       0       0       0       0       0
  4157 ;;      Temps:          4       0       0       0       0       0       0
  4158 ;;      Totals:        16       0       0       0       0       0       0
  4159 ;;Total ram usage:       16 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    5
  4162 ;; This function calls:
  4163 ;;		___lwdiv
  4164 ;;		___wmul
  4165 ;; This function is called by:
  4166 ;;		_APP_MANAGE
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text23
  4171  000D96                     __ptext23:
  4172                           	opt stack 0
  4173  000D96                     _BCDsendNumber:
  4174                           	opt stack 21
  4175                           
  4176                           ;BCDdisplay.c: 43: unsigned short Link,Output,Buffer;
  4177                           ;BCDdisplay.c: 44: unsigned char LoopIndex;
  4178                           ;BCDdisplay.c: 46: Buffer = Number;
  4179                           
  4180                           ;incstack = 0
  4181  000D96  C01B  F028         	movff	BCDsendNumber@Number,BCDsendNumber@Buffer
  4182  000D9A  C01C  F029         	movff	BCDsendNumber@Number+1,BCDsendNumber@Buffer+1
  4183                           
  4184                           ;BCDdisplay.c: 47: for( LoopIndex = (unsigned char)0; LoopIndex < 4 ; LoopIndex++)
  4185  000D9E  0E00               	movlw	0
  4186  000DA0  6E2A               	movwf	BCDsendNumber@LoopIndex,c
  4187  000DA2                     l2583:
  4188  000DA2  0E03               	movlw	3
  4189  000DA4  642A               	cpfsgt	BCDsendNumber@LoopIndex,c
  4190  000DA6  D001               	goto	l2587
  4191  000DA8  D073               	goto	l2609
  4192  000DAA                     l2587:
  4193                           
  4194                           ;BCDdisplay.c: 48: {
  4195                           ;BCDdisplay.c: 49: if((Buffer != (unsigned short)0)|| (LoopIndex <= DecimalPlace) )
  4196  000DAA  5028               	movf	BCDsendNumber@Buffer,w,c
  4197  000DAC  1029               	iorwf	BCDsendNumber@Buffer+1,w,c
  4198  000DAE  A4D8               	btfss	status,2,c
  4199  000DB0  D004               	goto	l92
  4200  000DB2  502A               	movf	BCDsendNumber@LoopIndex,w,c
  4201  000DB4  5C1E               	subwf	BCDsendNumber@DecimalPlace,w,c
  4202  000DB6  A0D8               	btfss	status,0,c
  4203  000DB8  D02D               	goto	l2597
  4204  000DBA                     l92:
  4205                           
  4206                           ;BCDdisplay.c: 50: {
  4207                           ;BCDdisplay.c: 51: Link = Buffer;
  4208  000DBA  C028  F024         	movff	BCDsendNumber@Buffer,BCDsendNumber@Link
  4209  000DBE  C029  F025         	movff	BCDsendNumber@Buffer+1,BCDsendNumber@Link+1
  4210                           
  4211                           ;BCDdisplay.c: 52: Buffer = (unsigned short)(Buffer/(unsigned short)10);
  4212  000DC2  C028  F014         	movff	BCDsendNumber@Buffer,___lwdiv@dividend
  4213  000DC6  C029  F015         	movff	BCDsendNumber@Buffer+1,___lwdiv@dividend+1
  4214  000DCA  0E00               	movlw	0
  4215  000DCC  6E17               	movwf	___lwdiv@divisor+1,c
  4216  000DCE  0E0A               	movlw	10
  4217  000DD0  6E16               	movwf	___lwdiv@divisor,c
  4218  000DD2  ECEC  F009         	call	___lwdiv	;wreg free
  4219  000DD6  C014  F028         	movff	?___lwdiv,BCDsendNumber@Buffer
  4220  000DDA  C015  F029         	movff	?___lwdiv+1,BCDsendNumber@Buffer+1
  4221                           
  4222                           ;BCDdisplay.c: 53: Output = Link - (unsigned short)(Buffer * (unsigned short)10);
  4223  000DDE  C028  F014         	movff	BCDsendNumber@Buffer,___wmul@multiplier
  4224  000DE2  C029  F015         	movff	BCDsendNumber@Buffer+1,___wmul@multiplier+1
  4225  000DE6  0E00               	movlw	0
  4226  000DE8  6E17               	movwf	___wmul@multiplicand+1,c
  4227  000DEA  0E0A               	movlw	10
  4228  000DEC  6E16               	movwf	___wmul@multiplicand,c
  4229  000DEE  EC6B  F00B         	call	___wmul	;wreg free
  4230  000DF2  1E14               	comf	?___wmul,f,c
  4231  000DF4  1E15               	comf	?___wmul+1,f,c
  4232  000DF6  4A14               	infsnz	?___wmul,f,c
  4233  000DF8  2A15               	incf	?___wmul+1,f,c
  4234  000DFA  5024               	movf	BCDsendNumber@Link,w,c
  4235  000DFC  2414               	addwf	?___wmul,w,c
  4236  000DFE  6E26               	movwf	BCDsendNumber@Output,c
  4237  000E00  5025               	movf	BCDsendNumber@Link+1,w,c
  4238  000E02  2015               	addwfc	?___wmul+1,w,c
  4239  000E04  6E27               	movwf	BCDsendNumber@Output+1,c
  4240                           
  4241                           ;BCDdisplay.c: 55: BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[Output];
  4242  000E06  0E33               	movlw	low _SevenSegmentMAP
  4243  000E08  2426               	addwf	BCDsendNumber@Output,w,c
  4244  000E0A  6EF6               	movwf	tblptrl,c
  4245  000E0C  0E06               	movlw	high _SevenSegmentMAP
  4246  000E0E  2027               	addwfc	BCDsendNumber@Output+1,w,c
  4247  000E10  6EF7               	movwf	tblptrh,c
  4248  000E12                     	if	0	;There are less than 3 active tblptr bytes
  4249  000E12  D00B               	goto	L6
  4250  000E14                     l2597:
  4251                           
  4252                           ;BCDdisplay.c: 57: else if ((LoopIndex <= DecimalPlace)
  4253                           ;BCDdisplay.c: 58: ||( (unsigned char)0) == EnableTranc)
  4254  000E14  502A               	movf	BCDsendNumber@LoopIndex,w,c
  4255  000E16  5C1E               	subwf	BCDsendNumber@DecimalPlace,w,c
  4256  000E18  B0D8               	btfsc	status,0,c
  4257  000E1A  D003               	goto	l2601
  4258  000E1C  501F               	movf	BCDsendNumber@EnableTranc,w,c
  4259  000E1E  A4D8               	btfss	status,2,c
  4260  000E20  D01F               	goto	l2603
  4261  000E22                     l2601:
  4262                           
  4263                           ;BCDdisplay.c: 59: {
  4264                           ;BCDdisplay.c: 60: BCDAlpha[Line][LoopIndex] = SevenSegmentMAP[0];
  4265  000E22  0E33               	movlw	low _SevenSegmentMAP
  4266  000E24  6EF6               	movwf	tblptrl,c
  4267  000E26                     	if	1	;There is more than 1 active tblptr byte
  4268  000E26  0E06               	movlw	high _SevenSegmentMAP
  4269  000E28  6EF7               	movwf	tblptrh,c
  4270  000E2A                     	endif
  4271  000E2A                     	if	0	;There are less than 3 active tblptr bytes
  4272  000E2A                     L6:
  4273  000E2A                     	endif
  4274  000E2A  0008               	tblrd		*
  4275  000E2C  50F5               	movf	tablat,w,c
  4276  000E2E  6E20               	movwf	??_BCDsendNumber& (0+255),c
  4277  000E30  6A21               	clrf	(??_BCDsendNumber+1)& (0+255),c
  4278  000E32  501D               	movf	BCDsendNumber@Line,w,c
  4279  000E34  0D08               	mullw	8
  4280  000E36  0EC2               	movlw	low _BCDAlpha
  4281  000E38  6E22               	movwf	(??_BCDsendNumber+2)& (0+255),c
  4282  000E3A  0E00               	movlw	high _BCDAlpha
  4283  000E3C  6E23               	movwf	(??_BCDsendNumber+3)& (0+255),c
  4284  000E3E  50F3               	movf	prodl,w,c
  4285  000E40  2622               	addwf	??_BCDsendNumber+2,f,c
  4286  000E42  50F4               	movf	prodh,w,c
  4287  000E44  2223               	addwfc	??_BCDsendNumber+3,f,c
  4288  000E46  502A               	movf	BCDsendNumber@LoopIndex,w,c
  4289  000E48  0D02               	mullw	2
  4290  000E4A  50F3               	movf	prodl,w,c
  4291  000E4C  2422               	addwf	??_BCDsendNumber+2,w,c
  4292  000E4E  6ED9               	movwf	fsr2l,c
  4293  000E50  50F4               	movf	prodh,w,c
  4294  000E52  2023               	addwfc	??_BCDsendNumber+3,w,c
  4295  000E54  6EDA               	movwf	fsr2h,c
  4296  000E56  C020  FFDE         	movff	??_BCDsendNumber,postinc2
  4297  000E5A  C021  FFDD         	movff	??_BCDsendNumber+1,postdec2
  4298                           
  4299                           ;BCDdisplay.c: 61: }
  4300  000E5E  D016               	goto	l2605
  4301  000E60                     l2603:
  4302                           
  4303                           ;BCDdisplay.c: 62: else
  4304                           ;BCDdisplay.c: 63: {
  4305                           ;BCDdisplay.c: 64: BCDAlpha[Line][LoopIndex] = 0x0;
  4306  000E60  501D               	movf	BCDsendNumber@Line,w,c
  4307  000E62  0D08               	mullw	8
  4308  000E64  0EC2               	movlw	low _BCDAlpha
  4309  000E66  6E20               	movwf	??_BCDsendNumber& (0+255),c
  4310  000E68  0E00               	movlw	high _BCDAlpha
  4311  000E6A  6E21               	movwf	(??_BCDsendNumber+1)& (0+255),c
  4312  000E6C  50F3               	movf	prodl,w,c
  4313  000E6E  2620               	addwf	??_BCDsendNumber,f,c
  4314  000E70  50F4               	movf	prodh,w,c
  4315  000E72  2221               	addwfc	??_BCDsendNumber+1,f,c
  4316  000E74  502A               	movf	BCDsendNumber@LoopIndex,w,c
  4317  000E76  0D02               	mullw	2
  4318  000E78  50F3               	movf	prodl,w,c
  4319  000E7A  2420               	addwf	??_BCDsendNumber,w,c
  4320  000E7C  6ED9               	movwf	fsr2l,c
  4321  000E7E  50F4               	movf	prodh,w,c
  4322  000E80  2021               	addwfc	??_BCDsendNumber+1,w,c
  4323  000E82  6EDA               	movwf	fsr2h,c
  4324  000E84  0E00               	movlw	0
  4325  000E86  6EDE               	movwf	postinc2,c
  4326  000E88  0E00               	movlw	0
  4327  000E8A  6EDD               	movwf	postdec2,c
  4328  000E8C                     l2605:
  4329  000E8C  2A2A               	incf	BCDsendNumber@LoopIndex,f,c
  4330  000E8E  D789               	goto	l2583
  4331  000E90                     l2609:
  4332                           
  4333                           ;BCDdisplay.c: 65: }
  4334                           ;BCDdisplay.c: 66: }
  4335                           ;BCDdisplay.c: 67: if(DecimalPlace != (unsigned char)0)
  4336  000E90  501E               	movf	BCDsendNumber@DecimalPlace,w,c
  4337  000E92  B4D8               	btfsc	status,2,c
  4338  000E94  0012               	return	
  4339                           
  4340                           ;BCDdisplay.c: 68: {
  4341                           ;BCDdisplay.c: 69: BCDAlpha[Line][DecimalPlace] |= SevenSegmentMAP[10];
  4342  000E96  501D               	movf	BCDsendNumber@Line,w,c
  4343  000E98  0D08               	mullw	8
  4344  000E9A  0EC2               	movlw	low _BCDAlpha
  4345  000E9C  6E20               	movwf	??_BCDsendNumber& (0+255),c
  4346  000E9E  0E00               	movlw	high _BCDAlpha
  4347  000EA0  6E21               	movwf	(??_BCDsendNumber+1)& (0+255),c
  4348  000EA2  50F3               	movf	prodl,w,c
  4349  000EA4  2620               	addwf	??_BCDsendNumber,f,c
  4350  000EA6  50F4               	movf	prodh,w,c
  4351  000EA8  2221               	addwfc	??_BCDsendNumber+1,f,c
  4352  000EAA  501E               	movf	BCDsendNumber@DecimalPlace,w,c
  4353  000EAC  0D02               	mullw	2
  4354  000EAE  50F3               	movf	prodl,w,c
  4355  000EB0  2420               	addwf	??_BCDsendNumber,w,c
  4356  000EB2  6ED9               	movwf	fsr2l,c
  4357  000EB4  50F4               	movf	prodh,w,c
  4358  000EB6  2021               	addwfc	??_BCDsendNumber+1,w,c
  4359  000EB8  6EDA               	movwf	fsr2h,c
  4360  000EBA  0E3D               	movlw	low (_SevenSegmentMAP+10)
  4361  000EBC  6EF6               	movwf	tblptrl,c
  4362  000EBE  0E06               	movlw	high (_SevenSegmentMAP+10)
  4363  000EC0  6EF7               	movwf	tblptrh,c
  4364  000EC2                     	if	0	;tblptru may be non-zero
  4365  000EC2                     	endif
  4366  000EC2                     	if	0	;tblptru may be non-zero
  4367  000EC2                     	endif
  4368  000EC2  0008               	tblrd		*
  4369  000EC4  50F5               	movf	tablat,w,c
  4370  000EC6  12DE               	iorwf	postinc2,f,c
  4371  000EC8  0E00               	movlw	0
  4372  000ECA  12DD               	iorwf	postdec2,f,c
  4373  000ECC  0012               	return	
  4374  000ECE                     __end_of_BCDsendNumber:
  4375                           	opt stack 0
  4376                           tosu	equ	0xFFF
  4377                           tosh	equ	0xFFE
  4378                           tosl	equ	0xFFD
  4379                           pclath	equ	0xFFA
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           indf1	equ	0xFE7
  4390                           postinc1	equ	0xFE6
  4391                           fsr1h	equ	0xFE2
  4392                           fsr1l	equ	0xFE1
  4393                           indf2	equ	0xFDF
  4394                           postinc2	equ	0xFDE
  4395                           postdec2	equ	0xFDD
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function ___wmul *****************
  4401 ;; Defined at:
  4402 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  multiplier      2   19[COMRAM] unsigned int 
  4405 ;;  multiplicand    2   21[COMRAM] unsigned int 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  product         2   23[COMRAM] unsigned int 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  2   19[COMRAM] unsigned int 
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, prodl, prodh
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4417 ;;      Params:         4       0       0       0       0       0       0
  4418 ;;      Locals:         2       0       0       0       0       0       0
  4419 ;;      Temps:          0       0       0       0       0       0       0
  4420 ;;      Totals:         6       0       0       0       0       0       0
  4421 ;;Total ram usage:        6 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    4
  4424 ;; This function calls:
  4425 ;;		Nothing
  4426 ;; This function is called by:
  4427 ;;		_IncrementDecrementSingleDigit
  4428 ;;		_BCDsendNumber
  4429 ;;		_SpeedCalcManage
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text24
  4434  0016D6                     __ptext24:
  4435                           	opt stack 0
  4436  0016D6                     ___wmul:
  4437                           	opt stack 22
  4438                           
  4439                           ;incstack = 0
  4440  0016D6  5014               	movf	___wmul@multiplier,w,c
  4441  0016D8  0216               	mulwf	___wmul@multiplicand,c
  4442  0016DA  CFF3 F018          	movff	prodl,___wmul@product
  4443  0016DE  CFF4 F019          	movff	prodh,___wmul@product+1
  4444  0016E2  5014               	movf	___wmul@multiplier,w,c
  4445  0016E4  0217               	mulwf	___wmul@multiplicand+1,c
  4446  0016E6  50F3               	movf	prodl,w,c
  4447  0016E8  2619               	addwf	___wmul@product+1,f,c
  4448  0016EA  5015               	movf	___wmul@multiplier+1,w,c
  4449  0016EC  0216               	mulwf	___wmul@multiplicand,c
  4450  0016EE  50F3               	movf	prodl,w,c
  4451  0016F0  2619               	addwf	___wmul@product+1,f,c
  4452  0016F2  C018  F014         	movff	___wmul@product,?___wmul
  4453  0016F6  C019  F015         	movff	___wmul@product+1,?___wmul+1
  4454  0016FA  0012               	return	
  4455  0016FC                     __end_of___wmul:
  4456                           	opt stack 0
  4457                           tosu	equ	0xFFF
  4458                           tosh	equ	0xFFE
  4459                           tosl	equ	0xFFD
  4460                           pclath	equ	0xFFA
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           prodh	equ	0xFF4
  4466                           prodl	equ	0xFF3
  4467                           intcon	equ	0xFF2
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           indf1	equ	0xFE7
  4471                           postinc1	equ	0xFE6
  4472                           fsr1h	equ	0xFE2
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function ___lwdiv *****************
  4482 ;; Defined at:
  4483 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  dividend        2   19[COMRAM] unsigned int 
  4486 ;;  divisor         2   21[COMRAM] unsigned int 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  quotient        2   24[COMRAM] unsigned int 
  4489 ;;  counter         1   23[COMRAM] unsigned char 
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  2   19[COMRAM] unsigned int 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4499 ;;      Params:         4       0       0       0       0       0       0
  4500 ;;      Locals:         3       0       0       0       0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0
  4502 ;;      Totals:         7       0       0       0       0       0       0
  4503 ;;Total ram usage:        7 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    4
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_IncrementDecrementSingleDigit
  4510 ;;		_BCDsendNumber
  4511 ;;		_SpeedCalcManage
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           	psect	text25
  4516  0013D8                     __ptext25:
  4517                           	opt stack 0
  4518  0013D8                     ___lwdiv:
  4519                           	opt stack 22
  4520                           
  4521                           ;incstack = 0
  4522  0013D8  0E00               	movlw	0
  4523  0013DA  6E1A               	movwf	___lwdiv@quotient+1,c
  4524  0013DC  0E00               	movlw	0
  4525  0013DE  6E19               	movwf	___lwdiv@quotient,c
  4526  0013E0  5016               	movf	___lwdiv@divisor,w,c
  4527  0013E2  1017               	iorwf	___lwdiv@divisor+1,w,c
  4528  0013E4  B4D8               	btfsc	status,2,c
  4529  0013E6  D01C               	goto	l920
  4530  0013E8  0E01               	movlw	1
  4531  0013EA  6E18               	movwf	___lwdiv@counter,c
  4532  0013EC  D004               	goto	l2541
  4533  0013EE                     l2539:
  4534  0013EE  90D8               	bcf	status,0,c
  4535  0013F0  3616               	rlcf	___lwdiv@divisor,f,c
  4536  0013F2  3617               	rlcf	___lwdiv@divisor+1,f,c
  4537  0013F4  2A18               	incf	___lwdiv@counter,f,c
  4538  0013F6                     l2541:
  4539  0013F6  AE17               	btfss	___lwdiv@divisor+1,7,c
  4540  0013F8  D7FA               	goto	l2539
  4541  0013FA                     l2543:
  4542  0013FA  90D8               	bcf	status,0,c
  4543  0013FC  3619               	rlcf	___lwdiv@quotient,f,c
  4544  0013FE  361A               	rlcf	___lwdiv@quotient+1,f,c
  4545  001400  5016               	movf	___lwdiv@divisor,w,c
  4546  001402  5C14               	subwf	___lwdiv@dividend,w,c
  4547  001404  5017               	movf	___lwdiv@divisor+1,w,c
  4548  001406  5815               	subwfb	___lwdiv@dividend+1,w,c
  4549  001408  A0D8               	btfss	status,0,c
  4550  00140A  D005               	goto	l2551
  4551  00140C  5016               	movf	___lwdiv@divisor,w,c
  4552  00140E  5E14               	subwf	___lwdiv@dividend,f,c
  4553  001410  5017               	movf	___lwdiv@divisor+1,w,c
  4554  001412  5A15               	subwfb	___lwdiv@dividend+1,f,c
  4555  001414  8019               	bsf	___lwdiv@quotient,0,c
  4556  001416                     l2551:
  4557  001416  90D8               	bcf	status,0,c
  4558  001418  3217               	rrcf	___lwdiv@divisor+1,f,c
  4559  00141A  3216               	rrcf	___lwdiv@divisor,f,c
  4560  00141C  2E18               	decfsz	___lwdiv@counter,f,c
  4561  00141E  D7ED               	goto	l2543
  4562  001420                     l920:
  4563  001420  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  4564  001424  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4565  001428  0012               	return		;funcret
  4566  00142A                     __end_of___lwdiv:
  4567                           	opt stack 0
  4568                           tosu	equ	0xFFF
  4569                           tosh	equ	0xFFE
  4570                           tosl	equ	0xFFD
  4571                           pclath	equ	0xFFA
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           prodh	equ	0xFF4
  4577                           prodl	equ	0xFF3
  4578                           intcon	equ	0xFF2
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           indf1	equ	0xFE7
  4582                           postinc1	equ	0xFE6
  4583                           fsr1h	equ	0xFE2
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _BCDManage7segment *****************
  4593 ;; Defined at:
  4594 ;;		line 73 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  BCD             1   24[COMRAM] unsigned char 
  4599 ;;  Index           1   23[COMRAM] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         0       0       0       0       0       0       0
  4610 ;;      Locals:         2       0       0       0       0       0       0
  4611 ;;      Temps:          2       0       0       0       0       0       0
  4612 ;;      Totals:         4       0       0       0       0       0       0
  4613 ;;Total ram usage:        4 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    5
  4616 ;; This function calls:
  4617 ;;		_HWI_4Digit_WRITE
  4618 ;;		_HWI_8Digit_WRITE
  4619 ;; This function is called by:
  4620 ;;		_DisplayAlphaNumeric
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text26
  4625  000F8A                     __ptext26:
  4626                           	opt stack 0
  4627  000F8A                     _BCDManage7segment:
  4628                           	opt stack 22
  4629                           
  4630                           ;BCDdisplay.c: 75: static unsigned char DigitIndex = (unsigned char)0;
  4631                           ;BCDdisplay.c: 76: static unsigned char BlinkCounter = (unsigned char)0;
  4632                           ;BCDdisplay.c: 77: static unsigned char LineIndex = (unsigned char)0;
  4633                           ;BCDdisplay.c: 79: unsigned char Index;
  4634                           ;BCDdisplay.c: 80: unsigned char BCD;
  4635                           ;BCDdisplay.c: 83: if( BlinkDuration != (unsigned char)0)
  4636                           
  4637                           ;incstack = 0
  4638  000F8A  5057               	movf	_BlinkDuration,w,c
  4639  000F8C  B4D8               	btfsc	status,2,c
  4640  000F8E  D00A               	goto	l2175
  4641                           
  4642                           ;BCDdisplay.c: 84: {
  4643                           ;BCDdisplay.c: 85: BlinkCounter++;
  4644  000F90  2A53               	incf	BCDManage7segment@BlinkCounter,f,c
  4645                           
  4646                           ;BCDdisplay.c: 86: if(BlinkCounter == BlinkDuration)
  4647  000F92  5057               	movf	_BlinkDuration,w,c
  4648  000F94  1853               	xorwf	BCDManage7segment@BlinkCounter,w,c
  4649  000F96  A4D8               	btfss	status,2,c
  4650  000F98  D007               	goto	l2177
  4651                           
  4652                           ;BCDdisplay.c: 87: {
  4653                           ;BCDdisplay.c: 88: BlinkFlag ^= (unsigned char)1;
  4654  000F9A  0E01               	movlw	1
  4655  000F9C  1A55               	xorwf	_BlinkFlag,f,c
  4656                           
  4657                           ;BCDdisplay.c: 89: BlinkCounter = (unsigned char)0;
  4658  000F9E  0E00               	movlw	0
  4659  000FA0  6E53               	movwf	BCDManage7segment@BlinkCounter,c
  4660                           
  4661                           ;BCDdisplay.c: 90: }
  4662                           ;BCDdisplay.c: 91: }
  4663  000FA2  D002               	goto	l2177
  4664  000FA4                     l2175:
  4665                           
  4666                           ;BCDdisplay.c: 92: else
  4667                           ;BCDdisplay.c: 93: {
  4668                           ;BCDdisplay.c: 94: BlinkFlag = (unsigned char)0;
  4669  000FA4  0E00               	movlw	0
  4670  000FA6  6E55               	movwf	_BlinkFlag,c
  4671  000FA8                     l2177:
  4672                           
  4673                           ;BCDdisplay.c: 95: }
  4674                           ;BCDdisplay.c: 97: if( ((unsigned char)1 == BlinkFlag)&& (DigitIndex == BlinkIndex)
  4675                           ;BCDdisplay.c: 98: && (LineBlinkIndex == LineIndex))
  4676  000FA8  0455               	decf	_BlinkFlag,w,c
  4677  000FAA  A4D8               	btfss	status,2,c
  4678  000FAC  D00A               	goto	l2185
  4679  000FAE  5058               	movf	_BlinkIndex,w,c
  4680  000FB0  1854               	xorwf	BCDManage7segment@DigitIndex,w,c
  4681  000FB2  A4D8               	btfss	status,2,c
  4682  000FB4  D006               	goto	l2185
  4683  000FB6  5052               	movf	BCDManage7segment@LineIndex,w,c
  4684  000FB8  1856               	xorwf	_LineBlinkIndex,w,c
  4685  000FBA  A4D8               	btfss	status,2,c
  4686  000FBC  D002               	goto	l2185
  4687                           
  4688                           ;BCDdisplay.c: 99: {
  4689                           ;BCDdisplay.c: 100: BCD = (unsigned char)0;
  4690  000FBE  0E00               	movlw	0
  4691  000FC0  D013               	goto	L7
  4692  000FC2                     l2185:
  4693                           
  4694                           ;BCDdisplay.c: 102: else
  4695                           ;BCDdisplay.c: 103: {
  4696                           ;BCDdisplay.c: 104: BCD = BCDAlpha[LineIndex][DigitIndex];
  4697  000FC2  5052               	movf	BCDManage7segment@LineIndex,w,c
  4698  000FC4  0D08               	mullw	8
  4699  000FC6  0EC2               	movlw	low _BCDAlpha
  4700  000FC8  6E16               	movwf	??_BCDManage7segment& (0+255),c
  4701  000FCA  0E00               	movlw	high _BCDAlpha
  4702  000FCC  6E17               	movwf	(??_BCDManage7segment+1)& (0+255),c
  4703  000FCE  50F3               	movf	prodl,w,c
  4704  000FD0  2616               	addwf	??_BCDManage7segment,f,c
  4705  000FD2  50F4               	movf	prodh,w,c
  4706  000FD4  2217               	addwfc	??_BCDManage7segment+1,f,c
  4707  000FD6  5054               	movf	BCDManage7segment@DigitIndex,w,c
  4708  000FD8  0D02               	mullw	2
  4709  000FDA  50F3               	movf	prodl,w,c
  4710  000FDC  2416               	addwf	??_BCDManage7segment,w,c
  4711  000FDE  6ED9               	movwf	fsr2l,c
  4712  000FE0  50F4               	movf	prodh,w,c
  4713  000FE2  2017               	addwfc	??_BCDManage7segment+1,w,c
  4714  000FE4  6EDA               	movwf	fsr2h,c
  4715  000FE6  50DF               	movf	indf2,w,c
  4716  000FE8                     L7:
  4717  000FE8  6E19               	movwf	BCDManage7segment@BCD,c
  4718                           
  4719                           ;BCDdisplay.c: 105: }
  4720                           ;BCDdisplay.c: 107: if( (unsigned char)1 == bIsAnodeUsed)
  4721  000FEA  0459               	decf	_bIsAnodeUsed,w,c
  4722  000FEC  B4D8               	btfsc	status,2,c
  4723                           
  4724                           ;BCDdisplay.c: 108: {
  4725                           ;BCDdisplay.c: 110: BCD = (unsigned char)~BCD;
  4726  000FEE  1E19               	comf	BCDManage7segment@BCD,f,c
  4727                           
  4728                           ;BCDdisplay.c: 111: }
  4729                           ;BCDdisplay.c: 114: Index = (unsigned char)(LineIndex * (unsigned char)4 )
  4730                           ;BCDdisplay.c: 115: + DigitIndex;
  4731  000FF0  5052               	movf	BCDManage7segment@LineIndex,w,c
  4732  000FF2  0D04               	mullw	4
  4733  000FF4  50F3               	movf	prodl,w,c
  4734  000FF6  2454               	addwf	BCDManage7segment@DigitIndex,w,c
  4735  000FF8  6E18               	movwf	BCDManage7segment@Index,c
  4736                           
  4737                           ;BCDdisplay.c: 117: HWI_4Digit_WRITE(0,Index);
  4738  000FFA  C018  F014         	movff	BCDManage7segment@Index,HWI_4Digit_WRITE@value
  4739  000FFE  0E00               	movlw	0
  4740  001000  ECD0  F00A         	call	_HWI_4Digit_WRITE
  4741                           
  4742                           ;BCDdisplay.c: 118: HWI_8Digit_WRITE(1,BCD);
  4743  001004  C019  F014         	movff	BCDManage7segment@BCD,HWI_8Digit_WRITE@value
  4744  001008  0E01               	movlw	1
  4745  00100A  EC7E  F00B         	call	_HWI_8Digit_WRITE
  4746                           
  4747                           ;BCDdisplay.c: 125: DigitIndex ++;
  4748  00100E  2A54               	incf	BCDManage7segment@DigitIndex,f,c
  4749                           
  4750                           ;BCDdisplay.c: 126: if(DigitIndex == (unsigned char)4)
  4751  001010  0E04               	movlw	4
  4752  001012  1854               	xorwf	BCDManage7segment@DigitIndex,w,c
  4753  001014  A4D8               	btfss	status,2,c
  4754  001016  0012               	return	
  4755                           
  4756                           ;BCDdisplay.c: 127: {
  4757                           ;BCDdisplay.c: 128: DigitIndex = (unsigned char)0;
  4758  001018  0E00               	movlw	0
  4759  00101A  6E54               	movwf	BCDManage7segment@DigitIndex,c
  4760                           
  4761                           ;BCDdisplay.c: 129: LineIndex++;
  4762  00101C  2A52               	incf	BCDManage7segment@LineIndex,f,c
  4763                           
  4764                           ;BCDdisplay.c: 130: if(LineIndex == (unsigned char)2)
  4765  00101E  0E02               	movlw	2
  4766  001020  1852               	xorwf	BCDManage7segment@LineIndex,w,c
  4767  001022  A4D8               	btfss	status,2,c
  4768  001024  0012               	return	
  4769                           
  4770                           ;BCDdisplay.c: 131: {
  4771                           ;BCDdisplay.c: 132: LineIndex = (unsigned char)0;
  4772  001026  0E00               	movlw	0
  4773  001028  6E52               	movwf	BCDManage7segment@LineIndex,c
  4774  00102A  0012               	return	
  4775  00102C                     __end_of_BCDManage7segment:
  4776                           	opt stack 0
  4777                           tosu	equ	0xFFF
  4778                           tosh	equ	0xFFE
  4779                           tosl	equ	0xFFD
  4780                           pclath	equ	0xFFA
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           indf1	equ	0xFE7
  4791                           postinc1	equ	0xFE6
  4792                           fsr1h	equ	0xFE2
  4793                           fsr1l	equ	0xFE1
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function _HWI_8Digit_WRITE *****************
  4802 ;; Defined at:
  4803 ;;		line 41 in file "../../HWIsource/HWI_DIGITAL.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  port            1    wreg     unsigned char 
  4806 ;;  value           1   19[COMRAM] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  port            1   20[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4818 ;;      Params:         1       0       0       0       0       0       0
  4819 ;;      Locals:         1       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0
  4821 ;;      Totals:         2       0       0       0       0       0       0
  4822 ;;Total ram usage:        2 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    4
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_BCDManage7segment
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text27
  4833  0016FC                     __ptext27:
  4834                           	opt stack 0
  4835  0016FC                     _HWI_8Digit_WRITE:
  4836                           	opt stack 22
  4837                           
  4838                           ;incstack = 0
  4839                           ;HWI_8Digit_WRITE@port stored from wreg
  4840  0016FC  6E15               	movwf	HWI_8Digit_WRITE@port,c
  4841                           
  4842                           ;HWI_DIGITAL.c: 43: switch (port)
  4843  0016FE  D009               	goto	l2073
  4844  001700                     l416:
  4845                           
  4846                           ;HWI_DIGITAL.c: 46: PORTC = value;
  4847  001700  C014  FF82         	movff	HWI_8Digit_WRITE@value,3970	;volatile
  4848                           
  4849                           ;HWI_DIGITAL.c: 47: break;
  4850  001704  0012               	return	
  4851  001706                     l418:
  4852                           
  4853                           ;HWI_DIGITAL.c: 49: PORTD = value;
  4854  001706  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4855                           
  4856                           ;HWI_DIGITAL.c: 50: break;
  4857  00170A  0012               	return	
  4858  00170C                     l419:
  4859                           
  4860                           ;HWI_DIGITAL.c: 52: PORTD = value;
  4861  00170C  C014  FF83         	movff	HWI_8Digit_WRITE@value,3971	;volatile
  4862                           
  4863                           ;HWI_DIGITAL.c: 54: }
  4864                           
  4865                           ;HWI_DIGITAL.c: 53: break;
  4866  001710  0012               	return	
  4867  001712                     l2073:
  4868  001712  5015               	movf	HWI_8Digit_WRITE@port,w,c
  4869                           
  4870                           ; Switch size 1, requested type "space"
  4871                           ; Number of cases is 2, Range of values is 0 to 1
  4872                           ; switch strategies available:
  4873                           ; Name         Instructions Cycles
  4874                           ; simple_byte            7     4 (average)
  4875                           ;	Chosen strategy is simple_byte
  4876  001714  0A00               	xorlw	0	; case 0
  4877  001716  B4D8               	btfsc	status,2,c
  4878  001718  D7F3               	goto	l416
  4879  00171A  0A01               	xorlw	1	; case 1
  4880  00171C  B4D8               	btfsc	status,2,c
  4881  00171E  D7F3               	goto	l418
  4882  001720  D7F5               	goto	l419
  4883  001722                     __end_of_HWI_8Digit_WRITE:
  4884                           	opt stack 0
  4885                           tosu	equ	0xFFF
  4886                           tosh	equ	0xFFE
  4887                           tosl	equ	0xFFD
  4888                           pclath	equ	0xFFA
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           indf1	equ	0xFE7
  4899                           postinc1	equ	0xFE6
  4900                           fsr1h	equ	0xFE2
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           postdec2	equ	0xFDD
  4905                           fsr2h	equ	0xFDA
  4906                           fsr2l	equ	0xFD9
  4907                           status	equ	0xFD8
  4908                           
  4909 ;; *************** function _HWI_4Digit_WRITE *****************
  4910 ;; Defined at:
  4911 ;;		line 8 in file "../../HWIsource/HWI_DIGITAL.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  port            1    wreg     unsigned char 
  4914 ;;  value           1   19[COMRAM] unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  port            1   20[COMRAM] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4926 ;;      Params:         1       0       0       0       0       0       0
  4927 ;;      Locals:         1       0       0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0
  4929 ;;      Totals:         2       0       0       0       0       0       0
  4930 ;;Total ram usage:        2 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    4
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_BCDManage7segment
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text28
  4941  0015A0                     __ptext28:
  4942                           	opt stack 0
  4943  0015A0                     _HWI_4Digit_WRITE:
  4944                           	opt stack 22
  4945                           
  4946                           ;incstack = 0
  4947                           ;HWI_4Digit_WRITE@port stored from wreg
  4948  0015A0  6E15               	movwf	HWI_4Digit_WRITE@port,c
  4949                           
  4950                           ;HWI_DIGITAL.c: 10: switch (port)
  4951  0015A2  D00F               	goto	l2067
  4952  0015A4                     l2061:
  4953                           
  4954                           ;HWI_DIGITAL.c: 13: PORTC = (LATC & 0xF0) | value;
  4955  0015A4  508B               	movf	3979,w,c	;volatile
  4956  0015A6  0BF0               	andlw	240
  4957  0015A8  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4958  0015AA  6E82               	movwf	3970,c	;volatile
  4959                           
  4960                           ;HWI_DIGITAL.c: 14: break;
  4961  0015AC  0012               	return	
  4962  0015AE                     l2063:
  4963                           
  4964                           ;HWI_DIGITAL.c: 16: PORTD = (LATD & 0xF0) | value;
  4965  0015AE  508C               	movf	3980,w,c	;volatile
  4966  0015B0  0BF0               	andlw	240
  4967  0015B2  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4968  0015B4  6E83               	movwf	3971,c	;volatile
  4969                           
  4970                           ;HWI_DIGITAL.c: 17: break;
  4971  0015B6  0012               	return	
  4972  0015B8                     l2065:
  4973                           
  4974                           ;HWI_DIGITAL.c: 19: PORTD = (LATD & 0xF0) | value;
  4975  0015B8  508C               	movf	3980,w,c	;volatile
  4976  0015BA  0BF0               	andlw	240
  4977  0015BC  1014               	iorwf	HWI_4Digit_WRITE@value,w,c
  4978  0015BE  6E83               	movwf	3971,c	;volatile
  4979                           
  4980                           ;HWI_DIGITAL.c: 20: }
  4981  0015C0  0012               	return	
  4982  0015C2                     l2067:
  4983  0015C2  5015               	movf	HWI_4Digit_WRITE@port,w,c
  4984                           
  4985                           ; Switch size 1, requested type "space"
  4986                           ; Number of cases is 2, Range of values is 0 to 1
  4987                           ; switch strategies available:
  4988                           ; Name         Instructions Cycles
  4989                           ; simple_byte            7     4 (average)
  4990                           ;	Chosen strategy is simple_byte
  4991  0015C4  0A00               	xorlw	0	; case 0
  4992  0015C6  B4D8               	btfsc	status,2,c
  4993  0015C8  D7ED               	goto	l2061
  4994  0015CA  0A01               	xorlw	1	; case 1
  4995  0015CC  B4D8               	btfsc	status,2,c
  4996  0015CE  D7EF               	goto	l2063
  4997  0015D0  D7F3               	goto	l2065
  4998  0015D2                     __end_of_HWI_4Digit_WRITE:
  4999                           	opt stack 0
  5000                           tosu	equ	0xFFF
  5001                           tosh	equ	0xFFE
  5002                           tosl	equ	0xFFD
  5003                           pclath	equ	0xFFA
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           indf1	equ	0xFE7
  5014                           postinc1	equ	0xFE6
  5015                           fsr1h	equ	0xFE2
  5016                           fsr1l	equ	0xFE1
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _HWI_INTERRUPTS_INTITALIZE *****************
  5025 ;; Defined at:
  5026 ;;		line 10 in file "../../HWIsource/HWI_Interrupts.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5040 ;;      Params:         0       0       0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    4
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_Start_App
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text29
  5055  0014EA                     __ptext29:
  5056                           	opt stack 0
  5057  0014EA                     _HWI_INTERRUPTS_INTITALIZE:
  5058                           	opt stack 25
  5059                           
  5060                           ;HWI_Interrupts.c: 12: TRISBbits.RB0 = 1;
  5061                           
  5062                           ;incstack = 0
  5063  0014EA  8093               	bsf	3987,0,c	;volatile
  5064                           
  5065                           ;HWI_Interrupts.c: 13: TRISBbits.RB1 = 1;
  5066  0014EC  8293               	bsf	3987,1,c	;volatile
  5067                           
  5068                           ;HWI_Interrupts.c: 15: INTCON = 0b11110000;
  5069  0014EE  0EF0               	movlw	240
  5070  0014F0  6EF2               	movwf	intcon,c	;volatile
  5071                           
  5072                           ;HWI_Interrupts.c: 16: INTCON3 = 0b00001000;
  5073  0014F2  0E08               	movlw	8
  5074  0014F4  6EF0               	movwf	intcon3,c	;volatile
  5075                           
  5076                           ;HWI_Interrupts.c: 20: T0CON =0b11010001;
  5077  0014F6  0ED1               	movlw	209
  5078  0014F8  6ED5               	movwf	4053,c	;volatile
  5079                           
  5080                           ;HWI_Interrupts.c: 21: T1CON =0b10000101;
  5081  0014FA  0E85               	movlw	133
  5082  0014FC  6ECD               	movwf	4045,c	;volatile
  5083                           
  5084                           ;HWI_Interrupts.c: 23: T3CON =0b10011101;
  5085  0014FE  0E9D               	movlw	157
  5086  001500  6EB1               	movwf	4017,c	;volatile
  5087                           
  5088                           ;HWI_Interrupts.c: 26: INTCON2bits.INTEDG0 = 1;
  5089  001502  8CF1               	bsf	intcon2,6,c	;volatile
  5090                           
  5091                           ;HWI_Interrupts.c: 27: INTCON2bits.INTEDG1 = 1;
  5092  001504  8AF1               	bsf	intcon2,5,c	;volatile
  5093                           
  5094                           ;HWI_Interrupts.c: 29: TMR0IF=0;
  5095  001506  94F2               	bcf	intcon,2,c	;volatile
  5096                           
  5097                           ;HWI_Interrupts.c: 30: TMR0IE=1;
  5098  001508  8AF2               	bsf	intcon,5,c	;volatile
  5099                           
  5100                           ;HWI_Interrupts.c: 32: TMR1IF=0;
  5101  00150A  909E               	bcf	3998,0,c	;volatile
  5102                           
  5103                           ;HWI_Interrupts.c: 33: TMR1IE=1;
  5104  00150C  809D               	bsf	3997,0,c	;volatile
  5105                           
  5106                           ;HWI_Interrupts.c: 38: TMR3IF=0;
  5107  00150E  92A1               	bcf	4001,1,c	;volatile
  5108                           
  5109                           ;HWI_Interrupts.c: 39: TMR3IE=1;
  5110  001510  82A0               	bsf	4000,1,c	;volatile
  5111                           
  5112                           ;HWI_Interrupts.c: 41: TMR0L= 19;
  5113  001512  0E13               	movlw	19
  5114  001514  6ED6               	movwf	4054,c	;volatile
  5115                           
  5116                           ;HWI_Interrupts.c: 43: TMR1 = 0;
  5117  001516  0E00               	movlw	0
  5118  001518  6ECF               	movwf	4047,c	;volatile
  5119  00151A  0E00               	movlw	0
  5120  00151C  6ECE               	movwf	4046,c	;volatile
  5121                           
  5122                           ;HWI_Interrupts.c: 47: TMR3L=0;
  5123  00151E  0E00               	movlw	0
  5124  001520  6EB2               	movwf	4018,c	;volatile
  5125                           
  5126                           ;HWI_Interrupts.c: 48: TMR3H=0;
  5127  001522  0E00               	movlw	0
  5128  001524  6EB3               	movwf	4019,c	;volatile
  5129  001526  0012               	return		;funcret
  5130  001528                     __end_of_HWI_INTERRUPTS_INTITALIZE:
  5131                           	opt stack 0
  5132                           tosu	equ	0xFFF
  5133                           tosh	equ	0xFFE
  5134                           tosl	equ	0xFFD
  5135                           pclath	equ	0xFFA
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           intcon3	equ	0xFF0
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           indf1	equ	0xFE7
  5148                           postinc1	equ	0xFE6
  5149                           fsr1h	equ	0xFE2
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _HWI_DIGITAL_INITIALIZE *****************
  5159 ;; Defined at:
  5160 ;;		line 75 in file "../../HWIsource/HWI_DIGITAL.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      void 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5174 ;;      Params:         0       0       0       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    4
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_Start_App
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text30
  5189  00173E                     __ptext30:
  5190                           	opt stack 0
  5191  00173E                     _HWI_DIGITAL_INITIALIZE:
  5192                           	opt stack 25
  5193                           
  5194                           ;HWI_DIGITAL.c: 78: TRISD = 0x0;
  5195                           
  5196                           ;incstack = 0
  5197  00173E  0E00               	movlw	0
  5198  001740  6E95               	movwf	3989,c	;volatile
  5199                           
  5200                           ;HWI_DIGITAL.c: 79: PORTD = 0x0;
  5201  001742  0E00               	movlw	0
  5202  001744  6E83               	movwf	3971,c	;volatile
  5203                           
  5204                           ;HWI_DIGITAL.c: 81: TRISC = 0x0;
  5205  001746  0E00               	movlw	0
  5206  001748  6E94               	movwf	3988,c	;volatile
  5207                           
  5208                           ;HWI_DIGITAL.c: 82: TRISBbits.RB2 = 1;
  5209  00174A  8493               	bsf	3987,2,c	;volatile
  5210                           
  5211                           ;HWI_DIGITAL.c: 83: TRISBbits.RB3 = 1;
  5212  00174C  8693               	bsf	3987,3,c	;volatile
  5213                           
  5214                           ;HWI_DIGITAL.c: 86: TRISBbits.RB4 =1;
  5215  00174E  8893               	bsf	3987,4,c	;volatile
  5216                           
  5217                           ;HWI_DIGITAL.c: 87: TRISBbits.RB5 =0;
  5218  001750  9A93               	bcf	3987,5,c	;volatile
  5219                           
  5220                           ;HWI_DIGITAL.c: 88: TRISBbits.RB6 =0;
  5221  001752  9C93               	bcf	3987,6,c	;volatile
  5222                           
  5223                           ;HWI_DIGITAL.c: 89: TRISBbits.RB7 =0;
  5224  001754  9E93               	bcf	3987,7,c	;volatile
  5225  001756  0012               	return		;funcret
  5226  001758                     __end_of_HWI_DIGITAL_INITIALIZE:
  5227                           	opt stack 0
  5228                           tosu	equ	0xFFF
  5229                           tosh	equ	0xFFE
  5230                           tosl	equ	0xFFD
  5231                           pclath	equ	0xFFA
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           intcon2	equ	0xFF1
  5240                           intcon3	equ	0xFF0
  5241                           postinc0	equ	0xFEE
  5242                           wreg	equ	0xFE8
  5243                           indf1	equ	0xFE7
  5244                           postinc1	equ	0xFE6
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _CreateTask *****************
  5255 ;; Defined at:
  5256 ;;		line 6 in file "../../../../OS/Scheduler/Scheduler.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  MangeFunctio    2   19[COMRAM] PTR FTN()void 
  5259 ;;		 -> ManageDrivers(1), DisplayAlphaNumeric(1), ManageApplication(1), ManageSpeedCalc(1), 
  5260 ;;  TaskId          1   21[COMRAM] unsigned char 
  5261 ;;  Period          1   22[COMRAM] unsigned char 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5273 ;;      Params:         4       0       0       0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0
  5276 ;;      Totals:         4       0       0       0       0       0       0
  5277 ;;Total ram usage:        4 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    4
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_Start_App
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text31
  5288  00132A                     __ptext31:
  5289                           	opt stack 0
  5290  00132A                     _CreateTask:
  5291                           	opt stack 25
  5292                           
  5293                           ;Scheduler.c: 8: if(TaskId < 4)
  5294                           
  5295                           ;incstack = 0
  5296  00132A  0E04               	movlw	4
  5297  00132C  6016               	cpfslt	CreateTask@TaskId,c
  5298  00132E  0012               	return	
  5299                           
  5300                           ;Scheduler.c: 9: {
  5301                           ;Scheduler.c: 10: ArrayTask[TaskId].ManageFunction = MangeFunction;
  5302  001330  5016               	movf	CreateTask@TaskId,w,c
  5303  001332  0D04               	mullw	4
  5304  001334  0EB2               	movlw	low _ArrayTask
  5305  001336  24F3               	addwf	prodl,w,c
  5306  001338  6ED9               	movwf	fsr2l,c
  5307  00133A  0E00               	movlw	high _ArrayTask
  5308  00133C  20F4               	addwfc	prodh,w,c
  5309  00133E  6EDA               	movwf	fsr2h,c
  5310  001340  C014  FFDE         	movff	CreateTask@MangeFunction,postinc2
  5311  001344  C015  FFDD         	movff	CreateTask@MangeFunction+1,postdec2
  5312                           
  5313                           ;Scheduler.c: 11: ArrayTask[TaskId].Period = Period;
  5314  001348  5016               	movf	CreateTask@TaskId,w,c
  5315  00134A  0D04               	mullw	4
  5316  00134C  0E02               	movlw	2
  5317  00134E  26F3               	addwf	prodl,f,c
  5318  001350  0E00               	movlw	0
  5319  001352  22F4               	addwfc	prodh,f,c
  5320  001354  0EB2               	movlw	low _ArrayTask
  5321  001356  24F3               	addwf	prodl,w,c
  5322  001358  6ED9               	movwf	fsr2l,c
  5323  00135A  0E00               	movlw	high _ArrayTask
  5324  00135C  20F4               	addwfc	prodh,w,c
  5325  00135E  6EDA               	movwf	fsr2h,c
  5326  001360  C017  FFDF         	movff	CreateTask@Period,indf2
  5327                           
  5328                           ;Scheduler.c: 12: ArrayTask[TaskId].TickCounter = (unsigned char)0;
  5329  001364  5016               	movf	CreateTask@TaskId,w,c
  5330  001366  0D04               	mullw	4
  5331  001368  0E03               	movlw	3
  5332  00136A  26F3               	addwf	prodl,f,c
  5333  00136C  0E00               	movlw	0
  5334  00136E  22F4               	addwfc	prodh,f,c
  5335  001370  0EB2               	movlw	low _ArrayTask
  5336  001372  24F3               	addwf	prodl,w,c
  5337  001374  6ED9               	movwf	fsr2l,c
  5338  001376  0E00               	movlw	high _ArrayTask
  5339  001378  20F4               	addwfc	prodh,w,c
  5340  00137A  6EDA               	movwf	fsr2h,c
  5341  00137C  0E00               	movlw	0
  5342  00137E  6EDF               	movwf	indf2,c
  5343  001380  0012               	return	
  5344  001382                     __end_of_CreateTask:
  5345                           	opt stack 0
  5346                           tosu	equ	0xFFF
  5347                           tosh	equ	0xFFE
  5348                           tosl	equ	0xFFD
  5349                           pclath	equ	0xFFA
  5350                           tblptru	equ	0xFF8
  5351                           tblptrh	equ	0xFF7
  5352                           tblptrl	equ	0xFF6
  5353                           tablat	equ	0xFF5
  5354                           prodh	equ	0xFF4
  5355                           prodl	equ	0xFF3
  5356                           intcon	equ	0xFF2
  5357                           intcon2	equ	0xFF1
  5358                           intcon3	equ	0xFF0
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           indf1	equ	0xFE7
  5362                           postinc1	equ	0xFE6
  5363                           fsr1h	equ	0xFE2
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _BCDInitialize *****************
  5373 ;; Defined at:
  5374 ;;		line 30 in file "../../../../Common/Driver/BCDdisplay/BCDdisplay.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  bIsCommonAno    1    wreg     unsigned char 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  bIsCommonAno    1   19[COMRAM] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5388 ;;      Params:         0       0       0       0       0       0       0
  5389 ;;      Locals:         1       0       0       0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0
  5391 ;;      Totals:         1       0       0       0       0       0       0
  5392 ;;Total ram usage:        1 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    4
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_Start_App
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text32
  5403  0017AC                     __ptext32:
  5404                           	opt stack 0
  5405  0017AC                     _BCDInitialize:
  5406                           	opt stack 25
  5407                           
  5408                           ;incstack = 0
  5409                           ;BCDInitialize@bIsCommonAnode stored from wreg
  5410  0017AC  6E14               	movwf	BCDInitialize@bIsCommonAnode,c
  5411                           
  5412                           ;BCDdisplay.c: 32: bIsAnodeUsed = bIsCommonAnode;
  5413  0017AE  C014  F059         	movff	BCDInitialize@bIsCommonAnode,_bIsAnodeUsed
  5414  0017B2  0012               	return		;funcret
  5415  0017B4                     __end_of_BCDInitialize:
  5416                           	opt stack 0
  5417                           tosu	equ	0xFFF
  5418                           tosh	equ	0xFFE
  5419                           tosl	equ	0xFFD
  5420                           pclath	equ	0xFFA
  5421                           tblptru	equ	0xFF8
  5422                           tblptrh	equ	0xFF7
  5423                           tblptrl	equ	0xFF6
  5424                           tablat	equ	0xFF5
  5425                           prodh	equ	0xFF4
  5426                           prodl	equ	0xFF3
  5427                           intcon	equ	0xFF2
  5428                           intcon2	equ	0xFF1
  5429                           intcon3	equ	0xFF0
  5430                           postinc0	equ	0xFEE
  5431                           wreg	equ	0xFE8
  5432                           indf1	equ	0xFE7
  5433                           postinc1	equ	0xFE6
  5434                           fsr1h	equ	0xFE2
  5435                           fsr1l	equ	0xFE1
  5436                           indf2	equ	0xFDF
  5437                           postinc2	equ	0xFDE
  5438                           postdec2	equ	0xFDD
  5439                           fsr2h	equ	0xFDA
  5440                           fsr2l	equ	0xFD9
  5441                           status	equ	0xFD8
  5442                           
  5443 ;; *************** function _APP_INITIALIZE *****************
  5444 ;; Defined at:
  5445 ;;		line 34 in file "../../../../Common/App/APP.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;		None
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;		None
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      void 
  5452 ;; Registers used:
  5453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5459 ;;      Params:         0       0       0       0       0       0       0
  5460 ;;      Locals:         0       0       0       0       0       0       0
  5461 ;;      Temps:          0       0       0       0       0       0       0
  5462 ;;      Totals:         0       0       0       0       0       0       0
  5463 ;;Total ram usage:        0 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    6
  5466 ;; This function calls:
  5467 ;;		_Eeprom_Read_Block
  5468 ;; This function is called by:
  5469 ;;		_Start_App
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text33
  5474  001686                     __ptext33:
  5475                           	opt stack 0
  5476  001686                     _APP_INITIALIZE:
  5477                           	opt stack 23
  5478                           
  5479                           ;APP.c: 37: Eeprom_Read_Block(1 , (unsigned char*)&Circum , (unsigned char)sizeof(Circum
      +                          ));
  5480                           
  5481                           ;incstack = 0
  5482  001686  0E64               	movlw	low _Circum
  5483  001688  6E18               	movwf	Eeprom_Read_Block@DataPtr,c
  5484  00168A  0E00               	movlw	high _Circum
  5485  00168C  6E19               	movwf	Eeprom_Read_Block@DataPtr+1,c
  5486  00168E  0E02               	movlw	2
  5487  001690  6E1A               	movwf	Eeprom_Read_Block@BlockSize,c
  5488  001692  0E01               	movlw	1
  5489  001694  EC15  F00A         	call	_Eeprom_Read_Block
  5490                           
  5491                           ;APP.c: 46: if(Circum > (unsigned short)9999)
  5492  001698  0E10               	movlw	16
  5493  00169A  5C64               	subwf	_Circum,w,c
  5494  00169C  0E27               	movlw	39
  5495  00169E  5865               	subwfb	_Circum+1,w,c
  5496  0016A0  A0D8               	btfss	status,0,c
  5497  0016A2  0012               	return	
  5498                           
  5499                           ;APP.c: 47: {
  5500                           ;APP.c: 48: Circum = (unsigned short)0;
  5501  0016A4  0E00               	movlw	0
  5502  0016A6  6E65               	movwf	_Circum+1,c
  5503  0016A8  0E00               	movlw	0
  5504  0016AA  6E64               	movwf	_Circum,c
  5505  0016AC  0012               	return	
  5506  0016AE                     __end_of_APP_INITIALIZE:
  5507                           	opt stack 0
  5508                           tosu	equ	0xFFF
  5509                           tosh	equ	0xFFE
  5510                           tosl	equ	0xFFD
  5511                           pclath	equ	0xFFA
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           intcon2	equ	0xFF1
  5520                           intcon3	equ	0xFF0
  5521                           postinc0	equ	0xFEE
  5522                           wreg	equ	0xFE8
  5523                           indf1	equ	0xFE7
  5524                           postinc1	equ	0xFE6
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _Eeprom_Read_Block *****************
  5535 ;; Defined at:
  5536 ;;		line 42 in file "../../../../Common/Driver/EEPROM/Eeprom.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  address         1    wreg     unsigned char 
  5539 ;;  DataPtr         2   23[COMRAM] PTR unsigned char 
  5540 ;;		 -> Circum(2), 
  5541 ;;  BlockSize       1   25[COMRAM] unsigned char 
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  address         1   27[COMRAM] unsigned char 
  5544 ;;  LoopIndex       1   29[COMRAM] unsigned char 
  5545 ;;  ReadSuccess     1   28[COMRAM] unsigned char 
  5546 ;;  ReadGranted     1   26[COMRAM] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      unsigned char 
  5549 ;; Registers used:
  5550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5556 ;;      Params:         3       0       0       0       0       0       0
  5557 ;;      Locals:         4       0       0       0       0       0       0
  5558 ;;      Temps:          0       0       0       0       0       0       0
  5559 ;;      Totals:         7       0       0       0       0       0       0
  5560 ;;Total ram usage:        7 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    5
  5563 ;; This function calls:
  5564 ;;		_HWIeeprom_Read
  5565 ;; This function is called by:
  5566 ;;		_APP_INITIALIZE
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           	psect	text34
  5571  00142A                     __ptext34:
  5572                           	opt stack 0
  5573  00142A                     _Eeprom_Read_Block:
  5574                           	opt stack 23
  5575                           
  5576                           ;incstack = 0
  5577                           ;Eeprom_Read_Block@address stored from wreg
  5578  00142A  6E1C               	movwf	Eeprom_Read_Block@address,c
  5579                           
  5580                           ;Eeprom.c: 49: unsigned char LoopIndex = (unsigned char)0 ;
  5581  00142C  0E00               	movlw	0
  5582  00142E  6E1E               	movwf	Eeprom_Read_Block@LoopIndex,c
  5583                           
  5584                           ;Eeprom.c: 50: unsigned char ReadSuccess;
  5585                           ;Eeprom.c: 51: unsigned char ReadGranted;
  5586                           ;Eeprom.c: 53: if( (unsigned char)0 == WriteRequest)
  5587  001430  5051               	movf	_WriteRequest,w,c
  5588  001432  B4D8               	btfsc	status,2,c
  5589  001434  D011               	goto	l2319
  5590  001436  D017               	goto	l2323
  5591  001438                     l2313:
  5592                           
  5593                           ;Eeprom.c: 56: {
  5594                           ;Eeprom.c: 57: ReadSuccess = HWIeeprom_Read(address + LoopIndex , &DataPtr[LoopIndex]);
  5595  001438  501E               	movf	Eeprom_Read_Block@LoopIndex,w,c
  5596  00143A  0D01               	mullw	1
  5597  00143C  50F3               	movf	prodl,w,c
  5598  00143E  2418               	addwf	Eeprom_Read_Block@DataPtr,w,c
  5599  001440  6E14               	movwf	HWIeeprom_Read@Data,c
  5600  001442  50F4               	movf	prodh,w,c
  5601  001444  2019               	addwfc	Eeprom_Read_Block@DataPtr+1,w,c
  5602  001446  6E15               	movwf	HWIeeprom_Read@Data+1,c
  5603  001448  501C               	movf	Eeprom_Read_Block@address,w,c
  5604  00144A  241E               	addwf	Eeprom_Read_Block@LoopIndex,w,c
  5605  00144C  EC57  F00B         	call	_HWIeeprom_Read
  5606  001450  6E1D               	movwf	Eeprom_Read_Block@ReadSuccess,c
  5607                           
  5608                           ;Eeprom.c: 58: if((unsigned char)1 == ReadSuccess)
  5609  001452  041D               	decf	Eeprom_Read_Block@ReadSuccess,w,c
  5610  001454  B4D8               	btfsc	status,2,c
  5611                           
  5612                           ;Eeprom.c: 59: {
  5613                           ;Eeprom.c: 60: LoopIndex++;
  5614  001456  2A1E               	incf	Eeprom_Read_Block@LoopIndex,f,c
  5615  001458                     l2319:
  5616  001458  501A               	movf	Eeprom_Read_Block@BlockSize,w,c
  5617  00145A  5C1E               	subwf	Eeprom_Read_Block@LoopIndex,w,c
  5618  00145C  A0D8               	btfss	status,0,c
  5619  00145E  D7EC               	goto	l2313
  5620                           
  5621                           ;Eeprom.c: 61: }
  5622                           ;Eeprom.c: 62: }
  5623                           ;Eeprom.c: 63: ReadGranted = (unsigned char)1;
  5624  001460  0E01               	movlw	1
  5625  001462  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  5626                           
  5627                           ;Eeprom.c: 64: }
  5628  001464  0012               	return	
  5629  001466                     l2323:
  5630                           
  5631                           ;Eeprom.c: 65: else
  5632                           ;Eeprom.c: 66: {
  5633                           ;Eeprom.c: 67: ReadGranted = (unsigned char)0;
  5634  001466  0E00               	movlw	0
  5635  001468  6E1B               	movwf	Eeprom_Read_Block@ReadGranted,c
  5636  00146A  0012               	return	
  5637  00146C                     __end_of_Eeprom_Read_Block:
  5638                           	opt stack 0
  5639                           tosu	equ	0xFFF
  5640                           tosh	equ	0xFFE
  5641                           tosl	equ	0xFFD
  5642                           pclath	equ	0xFFA
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           intcon2	equ	0xFF1
  5651                           intcon3	equ	0xFF0
  5652                           postinc0	equ	0xFEE
  5653                           wreg	equ	0xFE8
  5654                           indf1	equ	0xFE7
  5655                           postinc1	equ	0xFE6
  5656                           fsr1h	equ	0xFE2
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _HWIeeprom_Read *****************
  5666 ;; Defined at:
  5667 ;;		line 31 in file "../../HWIeeprom/HWIeeprom.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  address         1    wreg     unsigned char 
  5670 ;;  Data            2   19[COMRAM] PTR unsigned char 
  5671 ;;		 -> Circum(2), 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  address         1   21[COMRAM] unsigned char 
  5674 ;;  ReadSuccess     1   22[COMRAM] unsigned char 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      unsigned char 
  5677 ;; Registers used:
  5678 ;;		wreg, fsr2l, fsr2h, status,2
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5684 ;;      Params:         2       0       0       0       0       0       0
  5685 ;;      Locals:         2       0       0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0
  5687 ;;      Totals:         4       0       0       0       0       0       0
  5688 ;;Total ram usage:        4 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    4
  5691 ;; This function calls:
  5692 ;;		Nothing
  5693 ;; This function is called by:
  5694 ;;		_Eeprom_Read_Block
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text35
  5699  0016AE                     __ptext35:
  5700                           	opt stack 0
  5701  0016AE                     _HWIeeprom_Read:
  5702                           	opt stack 23
  5703                           
  5704                           ;incstack = 0
  5705                           ;HWIeeprom_Read@address stored from wreg
  5706  0016AE  6E16               	movwf	HWIeeprom_Read@address,c
  5707                           
  5708                           ;HWIeeprom.c: 33: unsigned char ReadSuccess;
  5709                           ;HWIeeprom.c: 34: if((unsigned char)0 == EECON1bits.WR )
  5710  0016B0  B2A6               	btfsc	4006,1,c	;volatile
  5711  0016B2  D00D               	goto	l2223
  5712                           
  5713                           ;HWIeeprom.c: 35: {
  5714                           ;HWIeeprom.c: 36: EEADR = address;
  5715  0016B4  C016  FFA9         	movff	HWIeeprom_Read@address,4009	;volatile
  5716                           
  5717                           ;HWIeeprom.c: 37: EECON1bits.EEPGD = (unsigned char)0;
  5718  0016B8  9EA6               	bcf	4006,7,c	;volatile
  5719                           
  5720                           ;HWIeeprom.c: 38: EECON1bits.CFGS = (unsigned char)0;
  5721  0016BA  9CA6               	bcf	4006,6,c	;volatile
  5722                           
  5723                           ;HWIeeprom.c: 39: EECON1bits.RD = (unsigned char)1;
  5724  0016BC  80A6               	bsf	4006,0,c	;volatile
  5725                           
  5726                           ;HWIeeprom.c: 40: *Data = EEDATA;
  5727  0016BE  C014  FFD9         	movff	HWIeeprom_Read@Data,fsr2l
  5728  0016C2  C015  FFDA         	movff	HWIeeprom_Read@Data+1,fsr2h
  5729  0016C6  CFA8 FFDF          	movff	4008,indf2	;volatile
  5730                           
  5731                           ;HWIeeprom.c: 41: ReadSuccess = (unsigned char)1;
  5732  0016CA  0E01               	movlw	1
  5733  0016CC  D001               	goto	L8
  5734  0016CE                     l2223:
  5735                           
  5736                           ;HWIeeprom.c: 43: else
  5737                           ;HWIeeprom.c: 44: {
  5738                           ;HWIeeprom.c: 45: ReadSuccess = (unsigned char)0;
  5739  0016CE  0E00               	movlw	0
  5740  0016D0                     L8:
  5741  0016D0  6E17               	movwf	HWIeeprom_Read@ReadSuccess,c
  5742                           
  5743                           ;HWIeeprom.c: 46: }
  5744                           ;HWIeeprom.c: 48: return ReadSuccess;
  5745  0016D2  5017               	movf	HWIeeprom_Read@ReadSuccess,w,c
  5746  0016D4  0012               	return	
  5747  0016D6                     __end_of_HWIeeprom_Read:
  5748                           	opt stack 0
  5749                           tosu	equ	0xFFF
  5750                           tosh	equ	0xFFE
  5751                           tosl	equ	0xFFD
  5752                           pclath	equ	0xFFA
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           intcon	equ	0xFF2
  5760                           intcon2	equ	0xFF1
  5761                           intcon3	equ	0xFF0
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           indf1	equ	0xFE7
  5765                           postinc1	equ	0xFE6
  5766                           fsr1h	equ	0xFE2
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function _ISR *****************
  5776 ;; Defined at:
  5777 ;;		line 52 in file "../../HWIsource/HWI_Interrupts.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;		None
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;		None
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  1    wreg      void 
  5784 ;; Registers used:
  5785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5791 ;;      Params:         0       0       0       0       0       0       0
  5792 ;;      Locals:         0       0       0       0       0       0       0
  5793 ;;      Temps:         14       0       0       0       0       0       0
  5794 ;;      Totals:        14       0       0       0       0       0       0
  5795 ;;Total ram usage:       14 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    3
  5798 ;; This function calls:
  5799 ;;		_APP_ISR1
  5800 ;;		_APP_ISR2
  5801 ;;		_APP_ISR3
  5802 ;;		_SchedulerTick
  5803 ;; This function is called by:
  5804 ;;		Interrupt level 2
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           	psect	intcode
  5809  000008                     __pintcode:
  5810                           	opt stack 0
  5811  000008                     _ISR:
  5812                           	opt stack 21
  5813                           
  5814                           ;incstack = 0
  5815  000008  8268               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5816  00000A  ED67  F007         	call	int_func,f	;refresh shadow registers
  5817                           tosu	equ	0xFFF
  5818                           tosh	equ	0xFFE
  5819                           tosl	equ	0xFFD
  5820                           pclath	equ	0xFFA
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           prodh	equ	0xFF4
  5826                           prodl	equ	0xFF3
  5827                           intcon	equ	0xFF2
  5828                           intcon2	equ	0xFF1
  5829                           intcon3	equ	0xFF0
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           indf1	equ	0xFE7
  5833                           postinc1	equ	0xFE6
  5834                           fsr1h	equ	0xFE2
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8
  5842                           
  5843                           	psect	intcode_body
  5844  000ECE                     __pintcode_body:
  5845                           	opt stack 21
  5846  000ECE                     int_func:
  5847                           	opt stack 21
  5848  000ECE  0006               	pop		; remove dummy address from shadow register refresh
  5849  000ED0  CFFA F006          	movff	pclath,??_ISR
  5850  000ED4  CFFB F007          	movff	pclatu,??_ISR+1
  5851  000ED8  CFE9 F008          	movff	fsr0l,??_ISR+2
  5852  000EDC  CFEA F009          	movff	fsr0h,??_ISR+3
  5853  000EE0  CFE1 F00A          	movff	fsr1l,??_ISR+4
  5854  000EE4  CFE2 F00B          	movff	fsr1h,??_ISR+5
  5855  000EE8  CFD9 F00C          	movff	fsr2l,??_ISR+6
  5856  000EEC  CFDA F00D          	movff	fsr2h,??_ISR+7
  5857  000EF0  CFF3 F00E          	movff	prodl,??_ISR+8
  5858  000EF4  CFF4 F00F          	movff	prodh,??_ISR+9
  5859  000EF8  CFF6 F010          	movff	tblptrl,??_ISR+10
  5860  000EFC  CFF7 F011          	movff	tblptrh,??_ISR+11
  5861  000F00  CFF8 F012          	movff	tblptru,??_ISR+12
  5862  000F04  CFF5 F013          	movff	tablat,??_ISR+13
  5863                           
  5864                           ;HWI_Interrupts.c: 54: if(TMR0IF)
  5865  000F08  A4F2               	btfss	intcon,2,c	;volatile
  5866  000F0A  D005               	goto	i2l2463
  5867                           
  5868                           ;HWI_Interrupts.c: 55: {
  5869                           ;HWI_Interrupts.c: 56: TMR0IF=0;
  5870  000F0C  94F2               	bcf	intcon,2,c	;volatile
  5871                           
  5872                           ;HWI_Interrupts.c: 57: TMR0L=18;
  5873  000F0E  0E12               	movlw	18
  5874  000F10  6ED6               	movwf	4054,c	;volatile
  5875                           
  5876                           ;HWI_Interrupts.c: 58: SchedulerTick();
  5877  000F12  EC2E  F00B         	call	_SchedulerTick	;wreg free
  5878  000F16                     i2l2463:
  5879                           
  5880                           ;HWI_Interrupts.c: 59: }
  5881                           ;HWI_Interrupts.c: 60: if(TMR3IF)
  5882  000F16  A2A1               	btfss	4001,1,c	;volatile
  5883  000F18  D005               	goto	i2l2469
  5884                           
  5885                           ;HWI_Interrupts.c: 61: {
  5886                           ;HWI_Interrupts.c: 62: TMR3IF=0;
  5887  000F1A  92A1               	bcf	4001,1,c	;volatile
  5888                           
  5889                           ;HWI_Interrupts.c: 63: TMR3H = 0xEF;
  5890  000F1C  0EEF               	movlw	239
  5891  000F1E  6EB3               	movwf	4019,c	;volatile
  5892                           
  5893                           ;HWI_Interrupts.c: 64: TMR3L = 0;
  5894  000F20  0E00               	movlw	0
  5895  000F22  6EB2               	movwf	4018,c	;volatile
  5896  000F24                     i2l2469:
  5897                           
  5898                           ;HWI_Interrupts.c: 65: }
  5899                           ;HWI_Interrupts.c: 66: if(TMR1IF)
  5900  000F24  A09E               	btfss	3998,0,c	;volatile
  5901  000F26  D007               	goto	i2l2477
  5902                           
  5903                           ;HWI_Interrupts.c: 67: {
  5904                           ;HWI_Interrupts.c: 68: TMR1IF=0;
  5905  000F28  909E               	bcf	3998,0,c	;volatile
  5906                           
  5907                           ;HWI_Interrupts.c: 69: TMR1 = 0;
  5908  000F2A  0E00               	movlw	0
  5909  000F2C  6ECF               	movwf	4047,c	;volatile
  5910  000F2E  0E00               	movlw	0
  5911  000F30  6ECE               	movwf	4046,c	;volatile
  5912                           
  5913                           ;HWI_Interrupts.c: 70: APP_ISR3();
  5914  000F32  ECE3  F00B         	call	_APP_ISR3	;wreg free
  5915  000F36                     i2l2477:
  5916                           
  5917                           ;HWI_Interrupts.c: 71: }
  5918                           ;HWI_Interrupts.c: 72: if(TMR2IF)
  5919  000F36  B29E               	btfsc	3998,1,c	;volatile
  5920                           
  5921                           ;HWI_Interrupts.c: 73: {
  5922                           ;HWI_Interrupts.c: 74: TMR2IF = 0;
  5923  000F38  929E               	bcf	3998,1,c	;volatile
  5924                           
  5925                           ;HWI_Interrupts.c: 76: }
  5926                           ;HWI_Interrupts.c: 78: if((unsigned char)1 == INT0IF)
  5927  000F3A  A2F2               	btfss	intcon,1,c	;volatile
  5928  000F3C  D003               	goto	i2l2485
  5929                           
  5930                           ;HWI_Interrupts.c: 79: {
  5931                           ;HWI_Interrupts.c: 80: INT0IF = 0;
  5932  000F3E  92F2               	bcf	intcon,1,c	;volatile
  5933                           
  5934                           ;HWI_Interrupts.c: 81: APP_ISR1();
  5935  000F40  ECE9  F00B         	call	_APP_ISR1	;wreg free
  5936  000F44                     i2l2485:
  5937                           
  5938                           ;HWI_Interrupts.c: 82: }
  5939                           ;HWI_Interrupts.c: 84: if((unsigned char)1 == INT1IF)
  5940  000F44  A0F0               	btfss	intcon3,0,c	;volatile
  5941  000F46  D003               	goto	i2l503
  5942                           
  5943                           ;HWI_Interrupts.c: 85: {
  5944                           ;HWI_Interrupts.c: 86: INT1IF = 0;
  5945  000F48  90F0               	bcf	intcon3,0,c	;volatile
  5946                           
  5947                           ;HWI_Interrupts.c: 87: APP_ISR2();
  5948  000F4A  ECE6  F00B         	call	_APP_ISR2	;wreg free
  5949  000F4E                     i2l503:
  5950  000F4E  C013  FFF5         	movff	??_ISR+13,tablat
  5951  000F52  C012  FFF8         	movff	??_ISR+12,tblptru
  5952  000F56  C011  FFF7         	movff	??_ISR+11,tblptrh
  5953  000F5A  C010  FFF6         	movff	??_ISR+10,tblptrl
  5954  000F5E  C00F  FFF4         	movff	??_ISR+9,prodh
  5955  000F62  C00E  FFF3         	movff	??_ISR+8,prodl
  5956  000F66  C00D  FFDA         	movff	??_ISR+7,fsr2h
  5957  000F6A  C00C  FFD9         	movff	??_ISR+6,fsr2l
  5958  000F6E  C00B  FFE2         	movff	??_ISR+5,fsr1h
  5959  000F72  C00A  FFE1         	movff	??_ISR+4,fsr1l
  5960  000F76  C009  FFEA         	movff	??_ISR+3,fsr0h
  5961  000F7A  C008  FFE9         	movff	??_ISR+2,fsr0l
  5962  000F7E  C007  FFFB         	movff	??_ISR+1,pclatu
  5963  000F82  C006  FFFA         	movff	??_ISR,pclath
  5964  000F86  9268               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5965  000F88  0011               	retfie		f
  5966  000F8A                     __end_of_ISR:
  5967                           	opt stack 0
  5968                           tosu	equ	0xFFF
  5969                           tosh	equ	0xFFE
  5970                           tosl	equ	0xFFD
  5971                           pclatu	equ	0xFFB
  5972                           pclath	equ	0xFFA
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon	equ	0xFF2
  5980                           intcon2	equ	0xFF1
  5981                           intcon3	equ	0xFF0
  5982                           postinc0	equ	0xFEE
  5983                           fsr0h	equ	0xFEA
  5984                           fsr0l	equ	0xFE9
  5985                           wreg	equ	0xFE8
  5986                           indf1	equ	0xFE7
  5987                           postinc1	equ	0xFE6
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           fsr2h	equ	0xFDA
  5994                           fsr2l	equ	0xFD9
  5995                           status	equ	0xFD8
  5996                           
  5997 ;; *************** function _SchedulerTick *****************
  5998 ;; Defined at:
  5999 ;;		line 16 in file "../../../../OS/Scheduler/Scheduler.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;		None
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  TaskIndex       1    0[COMRAM] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6013 ;;      Params:         0       0       0       0       0       0       0
  6014 ;;      Locals:         1       0       0       0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0
  6016 ;;      Totals:         1       0       0       0       0       0       0
  6017 ;;Total ram usage:        1 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_ISR
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text37
  6027  00165C                     __ptext37:
  6028                           	opt stack 0
  6029  00165C                     _SchedulerTick:
  6030                           	opt stack 23
  6031                           
  6032                           ;Scheduler.c: 18: unsigned char TaskIndex;
  6033                           ;Scheduler.c: 19: for(TaskIndex = (unsigned char)0 ;TaskIndex < 4 ; TaskIndex++)
  6034                           
  6035                           ;incstack = 0
  6036  00165C  0E00               	movlw	0
  6037  00165E  6E01               	movwf	SchedulerTick@TaskIndex,c
  6038  001660                     i2l2429:
  6039  001660  0E03               	movlw	3
  6040  001662  6401               	cpfsgt	SchedulerTick@TaskIndex,c
  6041  001664  D001               	goto	i2l2433
  6042  001666  0012               	return	
  6043  001668                     i2l2433:
  6044                           
  6045                           ;Scheduler.c: 20: {
  6046                           ;Scheduler.c: 21: ArrayTask[TaskIndex].TickCounter ++;
  6047  001668  5001               	movf	SchedulerTick@TaskIndex,w,c
  6048  00166A  0D04               	mullw	4
  6049  00166C  0E03               	movlw	3
  6050  00166E  26F3               	addwf	prodl,f,c
  6051  001670  0E00               	movlw	0
  6052  001672  22F4               	addwfc	prodh,f,c
  6053  001674  0EB2               	movlw	low _ArrayTask
  6054  001676  24F3               	addwf	prodl,w,c
  6055  001678  6ED9               	movwf	fsr2l,c
  6056  00167A  0E00               	movlw	high _ArrayTask
  6057  00167C  20F4               	addwfc	prodh,w,c
  6058  00167E  6EDA               	movwf	fsr2h,c
  6059  001680  2ADF               	incf	indf2,f,c
  6060  001682  2A01               	incf	SchedulerTick@TaskIndex,f,c
  6061  001684  D7ED               	goto	i2l2429
  6062  001686                     __end_of_SchedulerTick:
  6063                           	opt stack 0
  6064                           tosu	equ	0xFFF
  6065                           tosh	equ	0xFFE
  6066                           tosl	equ	0xFFD
  6067                           pclatu	equ	0xFFB
  6068                           pclath	equ	0xFFA
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           intcon2	equ	0xFF1
  6077                           intcon3	equ	0xFF0
  6078                           postinc0	equ	0xFEE
  6079                           fsr0h	equ	0xFEA
  6080                           fsr0l	equ	0xFE9
  6081                           wreg	equ	0xFE8
  6082                           indf1	equ	0xFE7
  6083                           postinc1	equ	0xFE6
  6084                           fsr1h	equ	0xFE2
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function _APP_ISR3 *****************
  6094 ;; Defined at:
  6095 ;;		line 18 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;		None
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      void 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6109 ;;      Params:         0       0       0       0       0       0       0
  6110 ;;      Locals:         0       0       0       0       0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0
  6112 ;;      Totals:         0       0       0       0       0       0       0
  6113 ;;Total ram usage:        0 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    1
  6116 ;; This function calls:
  6117 ;;		_HWtimerCallback
  6118 ;; This function is called by:
  6119 ;;		_ISR
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text38
  6124  0017C6                     __ptext38:
  6125                           	opt stack 0
  6126  0017C6                     _APP_ISR3:
  6127                           	opt stack 22
  6128                           
  6129                           ;AppInterrupts.c: 20: HWtimerCallback();
  6130                           
  6131                           ;incstack = 0
  6132  0017C6  ECCD  F00B         	call	_HWtimerCallback	;wreg free
  6133  0017CA  0012               	return		;funcret
  6134  0017CC                     __end_of_APP_ISR3:
  6135                           	opt stack 0
  6136                           tosu	equ	0xFFF
  6137                           tosh	equ	0xFFE
  6138                           tosl	equ	0xFFD
  6139                           pclatu	equ	0xFFB
  6140                           pclath	equ	0xFFA
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           intcon2	equ	0xFF1
  6149                           intcon3	equ	0xFF0
  6150                           postinc0	equ	0xFEE
  6151                           fsr0h	equ	0xFEA
  6152                           fsr0l	equ	0xFE9
  6153                           wreg	equ	0xFE8
  6154                           indf1	equ	0xFE7
  6155                           postinc1	equ	0xFE6
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _HWtimerCallback *****************
  6166 ;; Defined at:
  6167 ;;		line 133 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;		None
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;		None
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         0       0       0       0       0       0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0
  6184 ;;      Totals:         0       0       0       0       0       0       0
  6185 ;;Total ram usage:        0 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_APP_ISR3
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text39
  6195  00179A                     __ptext39:
  6196                           	opt stack 0
  6197  00179A                     _HWtimerCallback:
  6198                           	opt stack 22
  6199                           
  6200                           ;SpeedCalc.c: 135: if(HwTimerOVFLcount < 64)
  6201                           
  6202                           ;incstack = 0
  6203  00179A  0E40               	movlw	64
  6204  00179C  604A               	cpfslt	_HwTimerOVFLcount,c	;volatile
  6205  00179E  0012               	return	
  6206                           
  6207                           ;SpeedCalc.c: 136: {
  6208                           ;SpeedCalc.c: 137: HwTimerOVFLcount++;
  6209  0017A0  2A4A               	incf	_HwTimerOVFLcount,f,c	;volatile
  6210  0017A2  0012               	return	
  6211  0017A4                     __end_of_HWtimerCallback:
  6212                           	opt stack 0
  6213                           tosu	equ	0xFFF
  6214                           tosh	equ	0xFFE
  6215                           tosl	equ	0xFFD
  6216                           pclatu	equ	0xFFB
  6217                           pclath	equ	0xFFA
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon2	equ	0xFF1
  6226                           intcon3	equ	0xFF0
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           indf1	equ	0xFE7
  6232                           postinc1	equ	0xFE6
  6233                           fsr1h	equ	0xFE2
  6234                           fsr1l	equ	0xFE1
  6235                           indf2	equ	0xFDF
  6236                           postinc2	equ	0xFDE
  6237                           postdec2	equ	0xFDD
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _APP_ISR2 *****************
  6243 ;; Defined at:
  6244 ;;		line 13 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6258 ;;      Params:         0       0       0       0       0       0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0
  6261 ;;      Totals:         0       0       0       0       0       0       0
  6262 ;;Total ram usage:        0 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    2
  6265 ;; This function calls:
  6266 ;;		_SensorTwoNotify
  6267 ;; This function is called by:
  6268 ;;		_ISR
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text40
  6273  0017CC                     __ptext40:
  6274                           	opt stack 0
  6275  0017CC                     _APP_ISR2:
  6276                           	opt stack 21
  6277                           
  6278                           ;AppInterrupts.c: 15: SensorTwoNotify();
  6279                           
  6280                           ;incstack = 0
  6281  0017CC  EC17  F00B         	call	_SensorTwoNotify	;wreg free
  6282  0017D0  0012               	return		;funcret
  6283  0017D2                     __end_of_APP_ISR2:
  6284                           	opt stack 0
  6285                           tosu	equ	0xFFF
  6286                           tosh	equ	0xFFE
  6287                           tosl	equ	0xFFD
  6288                           pclatu	equ	0xFFB
  6289                           pclath	equ	0xFFA
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon	equ	0xFF2
  6297                           intcon2	equ	0xFF1
  6298                           intcon3	equ	0xFF0
  6299                           postinc0	equ	0xFEE
  6300                           fsr0h	equ	0xFEA
  6301                           fsr0l	equ	0xFE9
  6302                           wreg	equ	0xFE8
  6303                           indf1	equ	0xFE7
  6304                           postinc1	equ	0xFE6
  6305                           fsr1h	equ	0xFE2
  6306                           fsr1l	equ	0xFE1
  6307                           indf2	equ	0xFDF
  6308                           postinc2	equ	0xFDE
  6309                           postdec2	equ	0xFDD
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _SensorTwoNotify *****************
  6315 ;; Defined at:
  6316 ;;		line 44 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6330 ;;      Params:         0       0       0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    1
  6337 ;; This function calls:
  6338 ;;		_ReloadHWtimer
  6339 ;; This function is called by:
  6340 ;;		_APP_ISR2
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text41
  6345  00162E                     __ptext41:
  6346                           	opt stack 0
  6347  00162E                     _SensorTwoNotify:
  6348                           	opt stack 21
  6349                           
  6350                           ;SpeedCalc.c: 46: if( (unsigned char)0 == NotifyFlag )
  6351                           
  6352                           ;incstack = 0
  6353  00162E  504D               	movf	_NotifyFlag,w,c	;volatile
  6354  001630  A4D8               	btfss	status,2,c
  6355  001632  D00F               	goto	i2l2373
  6356                           
  6357                           ;SpeedCalc.c: 47: {
  6358                           ;SpeedCalc.c: 48: NotifyFlag = (unsigned char)1;
  6359  001634  0E01               	movlw	1
  6360  001636  6E4D               	movwf	_NotifyFlag,c	;volatile
  6361                           
  6362                           ;SpeedCalc.c: 49: LapCounter++;
  6363  001638  2A4C               	incf	_LapCounter,f,c	;volatile
  6364                           
  6365                           ;SpeedCalc.c: 50: HWtimerCount = ReloadHWtimer((unsigned char)1);
  6366  00163A  0E01               	movlw	1
  6367  00163C  ECB2  F00A         	call	_ReloadHWtimer
  6368  001640  C001  F03D         	movff	?_ReloadHWtimer,_HWtimerCount	;volatile
  6369  001644  C002  F03E         	movff	?_ReloadHWtimer+1,_HWtimerCount+1	;volatile
  6370                           
  6371                           ;SpeedCalc.c: 51: TimerOVFLcount = HwTimerOVFLcount;
  6372  001648  C04A  F04B         	movff	_HwTimerOVFLcount,_TimerOVFLcount	;volatile
  6373                           
  6374                           ;SpeedCalc.c: 52: HwTimerOVFLcount = (unsigned char)0;
  6375  00164C  0E00               	movlw	0
  6376  00164E  6E4A               	movwf	_HwTimerOVFLcount,c	;volatile
  6377                           
  6378                           ;SpeedCalc.c: 53: }
  6379  001650  0012               	return	
  6380  001652                     i2l2373:
  6381                           
  6382                           ;SpeedCalc.c: 54: else
  6383                           ;SpeedCalc.c: 55: {
  6384                           ;SpeedCalc.c: 56: if(LapCounter != (unsigned char)0)
  6385  001652  504C               	movf	_LapCounter,w,c	;volatile
  6386  001654  B4D8               	btfsc	status,2,c
  6387  001656  0012               	return	
  6388                           
  6389                           ;SpeedCalc.c: 57: {
  6390                           ;SpeedCalc.c: 58: LapCounter--;
  6391  001658  064C               	decf	_LapCounter,f,c	;volatile
  6392  00165A  0012               	return	
  6393  00165C                     __end_of_SensorTwoNotify:
  6394                           	opt stack 0
  6395                           tosu	equ	0xFFF
  6396                           tosh	equ	0xFFE
  6397                           tosl	equ	0xFFD
  6398                           pclatu	equ	0xFFB
  6399                           pclath	equ	0xFFA
  6400                           tblptru	equ	0xFF8
  6401                           tblptrh	equ	0xFF7
  6402                           tblptrl	equ	0xFF6
  6403                           tablat	equ	0xFF5
  6404                           prodh	equ	0xFF4
  6405                           prodl	equ	0xFF3
  6406                           intcon	equ	0xFF2
  6407                           intcon2	equ	0xFF1
  6408                           intcon3	equ	0xFF0
  6409                           postinc0	equ	0xFEE
  6410                           fsr0h	equ	0xFEA
  6411                           fsr0l	equ	0xFE9
  6412                           wreg	equ	0xFE8
  6413                           indf1	equ	0xFE7
  6414                           postinc1	equ	0xFE6
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _ReloadHWtimer *****************
  6425 ;; Defined at:
  6426 ;;		line 91 in file "../../HWIsource/HWI_Interrupts.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  TimerId         1    wreg     unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  TimerId         1    2[COMRAM] unsigned char 
  6431 ;;  ElapsedTime     2    3[COMRAM] unsigned short 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  2    0[COMRAM] unsigned short 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6441 ;;      Params:         2       0       0       0       0       0       0
  6442 ;;      Locals:         3       0       0       0       0       0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0
  6444 ;;      Totals:         5       0       0       0       0       0       0
  6445 ;;Total ram usage:        5 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_SensorTwoNotify
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text42
  6455  001564                     __ptext42:
  6456                           	opt stack 0
  6457  001564                     _ReloadHWtimer:
  6458                           	opt stack 21
  6459                           
  6460                           ;incstack = 0
  6461                           ;ReloadHWtimer@TimerId stored from wreg
  6462  001564  6E03               	movwf	ReloadHWtimer@TimerId,c
  6463                           
  6464                           ;HWI_Interrupts.c: 94: unsigned short ElapsedTime = (unsigned short)0;
  6465  001566  0E00               	movlw	0
  6466  001568  6E05               	movwf	ReloadHWtimer@ElapsedTime+1,c
  6467  00156A  0E00               	movlw	0
  6468  00156C  6E04               	movwf	ReloadHWtimer@ElapsedTime,c
  6469                           
  6470                           ;HWI_Interrupts.c: 95: switch(TimerId)
  6471  00156E  D009               	goto	i2l2333
  6472  001570                     i2l509:
  6473                           
  6474                           ;HWI_Interrupts.c: 98: case 1:
  6475                           ;HWI_Interrupts.c: 99: case 2:
  6476                           ;HWI_Interrupts.c: 100: ElapsedTime = TMR1;
  6477  001570  CFCE F004          	movff	4046,ReloadHWtimer@ElapsedTime	;volatile
  6478  001574  CFCF F005          	movff	4047,ReloadHWtimer@ElapsedTime+1	;volatile
  6479                           
  6480                           ;HWI_Interrupts.c: 101: TMR1 = 0;
  6481  001578  0E00               	movlw	0
  6482  00157A  6ECF               	movwf	4047,c	;volatile
  6483  00157C  0E00               	movlw	0
  6484  00157E  6ECE               	movwf	4046,c	;volatile
  6485                           
  6486                           ;HWI_Interrupts.c: 105: }
  6487                           
  6488                           ;HWI_Interrupts.c: 104: break;
  6489                           
  6490                           ;HWI_Interrupts.c: 103: default:
  6491                           
  6492                           ;HWI_Interrupts.c: 102: break;
  6493  001580  D00A               	goto	i2l510
  6494  001582                     i2l2333:
  6495  001582  5003               	movf	ReloadHWtimer@TimerId,w,c
  6496                           
  6497                           ; Switch size 1, requested type "space"
  6498                           ; Number of cases is 3, Range of values is 0 to 2
  6499                           ; switch strategies available:
  6500                           ; Name         Instructions Cycles
  6501                           ; simple_byte           10     6 (average)
  6502                           ;	Chosen strategy is simple_byte
  6503  001584  0A00               	xorlw	0	; case 0
  6504  001586  B4D8               	btfsc	status,2,c
  6505  001588  D7F3               	goto	i2l509
  6506  00158A  0A01               	xorlw	1	; case 1
  6507  00158C  B4D8               	btfsc	status,2,c
  6508  00158E  D7F0               	goto	i2l509
  6509  001590  0A03               	xorlw	3	; case 2
  6510  001592  B4D8               	btfsc	status,2,c
  6511  001594  D7ED               	goto	i2l509
  6512  001596                     i2l510:
  6513                           
  6514                           ;HWI_Interrupts.c: 106: return ElapsedTime;
  6515  001596  C004  F001         	movff	ReloadHWtimer@ElapsedTime,?_ReloadHWtimer
  6516  00159A  C005  F002         	movff	ReloadHWtimer@ElapsedTime+1,?_ReloadHWtimer+1
  6517  00159E  0012               	return		;funcret
  6518  0015A0                     __end_of_ReloadHWtimer:
  6519                           	opt stack 0
  6520                           tosu	equ	0xFFF
  6521                           tosh	equ	0xFFE
  6522                           tosl	equ	0xFFD
  6523                           pclatu	equ	0xFFB
  6524                           pclath	equ	0xFFA
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodh	equ	0xFF4
  6530                           prodl	equ	0xFF3
  6531                           intcon	equ	0xFF2
  6532                           intcon2	equ	0xFF1
  6533                           intcon3	equ	0xFF0
  6534                           postinc0	equ	0xFEE
  6535                           fsr0h	equ	0xFEA
  6536                           fsr0l	equ	0xFE9
  6537                           wreg	equ	0xFE8
  6538                           indf1	equ	0xFE7
  6539                           postinc1	equ	0xFE6
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           
  6549 ;; *************** function _APP_ISR1 *****************
  6550 ;; Defined at:
  6551 ;;		line 8 in file "../../../../Common/Interrupts/AppInterrupts.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, status,2, status,0, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6565 ;;      Params:         0       0       0       0       0       0       0
  6566 ;;      Locals:         0       0       0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0
  6568 ;;      Totals:         0       0       0       0       0       0       0
  6569 ;;Total ram usage:        0 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    1
  6572 ;; This function calls:
  6573 ;;		_SensorOneNotify
  6574 ;; This function is called by:
  6575 ;;		_ISR
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text43
  6580  0017D2                     __ptext43:
  6581                           	opt stack 0
  6582  0017D2                     _APP_ISR1:
  6583                           	opt stack 22
  6584                           
  6585                           ;AppInterrupts.c: 10: SensorOneNotify();
  6586                           
  6587                           ;incstack = 0
  6588  0017D2  ECAC  F00B         	call	_SensorOneNotify	;wreg free
  6589  0017D6  0012               	return		;funcret
  6590  0017D8                     __end_of_APP_ISR1:
  6591                           	opt stack 0
  6592                           tosu	equ	0xFFF
  6593                           tosh	equ	0xFFE
  6594                           tosl	equ	0xFFD
  6595                           pclatu	equ	0xFFB
  6596                           pclath	equ	0xFFA
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           intcon	equ	0xFF2
  6604                           intcon2	equ	0xFF1
  6605                           intcon3	equ	0xFF0
  6606                           postinc0	equ	0xFEE
  6607                           fsr0h	equ	0xFEA
  6608                           fsr0l	equ	0xFE9
  6609                           wreg	equ	0xFE8
  6610                           indf1	equ	0xFE7
  6611                           postinc1	equ	0xFE6
  6612                           fsr1h	equ	0xFE2
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           postdec2	equ	0xFDD
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;; *************** function _SensorOneNotify *****************
  6622 ;; Defined at:
  6623 ;;		line 29 in file "../../../../Common/Driver/SpeedCalc/SpeedCalc.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;		None
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, status,2, status,0
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6637 ;;      Params:         0       0       0       0       0       0       0
  6638 ;;      Locals:         0       0       0       0       0       0       0
  6639 ;;      Temps:          0       0       0       0       0       0       0
  6640 ;;      Totals:         0       0       0       0       0       0       0
  6641 ;;Total ram usage:        0 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; This function calls:
  6644 ;;		Nothing
  6645 ;; This function is called by:
  6646 ;;		_APP_ISR1
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text44
  6651  001758                     __ptext44:
  6652                           	opt stack 0
  6653  001758                     _SensorOneNotify:
  6654                           	opt stack 22
  6655                           
  6656                           ;SpeedCalc.c: 31: if( (unsigned char)1 == NotifyFlag )
  6657                           
  6658                           ;incstack = 0
  6659  001758  044D               	decf	_NotifyFlag,w,c	;volatile
  6660  00175A  A4D8               	btfss	status,2,c
  6661  00175C  D003               	goto	i2l1651
  6662                           
  6663                           ;SpeedCalc.c: 32: {
  6664                           ;SpeedCalc.c: 33: NotifyFlag = (unsigned char)0;
  6665  00175E  0E00               	movlw	0
  6666  001760  6E4D               	movwf	_NotifyFlag,c	;volatile
  6667                           
  6668                           ;SpeedCalc.c: 34: }
  6669  001762  0012               	return	
  6670  001764                     i2l1651:
  6671                           
  6672                           ;SpeedCalc.c: 35: else
  6673                           ;SpeedCalc.c: 36: {
  6674                           ;SpeedCalc.c: 37: if(LapCounter != (unsigned char)0)
  6675  001764  504C               	movf	_LapCounter,w,c	;volatile
  6676  001766  B4D8               	btfsc	status,2,c
  6677  001768  0012               	return	
  6678                           
  6679                           ;SpeedCalc.c: 38: {
  6680                           ;SpeedCalc.c: 39: LapCounter--;
  6681  00176A  064C               	decf	_LapCounter,f,c	;volatile
  6682  00176C  0012               	return	
  6683  00176E                     __end_of_SensorOneNotify:
  6684                           	opt stack 0
  6685                           tosu	equ	0xFFF
  6686                           tosh	equ	0xFFE
  6687                           tosl	equ	0xFFD
  6688                           pclatu	equ	0xFFB
  6689                           pclath	equ	0xFFA
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           intcon2	equ	0xFF1
  6698                           intcon3	equ	0xFF0
  6699                           postinc0	equ	0xFEE
  6700                           fsr0h	equ	0xFEA
  6701                           fsr0l	equ	0xFE9
  6702                           wreg	equ	0xFE8
  6703                           indf1	equ	0xFE7
  6704                           postinc1	equ	0xFE6
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           tosu	equ	0xFFF
  6714                           tosh	equ	0xFFE
  6715                           tosl	equ	0xFFD
  6716                           pclatu	equ	0xFFB
  6717                           pclath	equ	0xFFA
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           prodh	equ	0xFF4
  6723                           prodl	equ	0xFF3
  6724                           intcon	equ	0xFF2
  6725                           intcon2	equ	0xFF1
  6726                           intcon3	equ	0xFF0
  6727                           postinc0	equ	0xFEE
  6728                           fsr0h	equ	0xFEA
  6729                           fsr0l	equ	0xFE9
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postinc1	equ	0xFE6
  6733                           fsr1h	equ	0xFE2
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742                           	psect	text45
  6743  000000                     __ptext45:
  6744                           	opt stack 0
  6745                           tosu	equ	0xFFF
  6746                           tosh	equ	0xFFE
  6747                           tosl	equ	0xFFD
  6748                           pclatu	equ	0xFFB
  6749                           pclath	equ	0xFFA
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           intcon	equ	0xFF2
  6757                           intcon2	equ	0xFF1
  6758                           intcon3	equ	0xFF0
  6759                           postinc0	equ	0xFEE
  6760                           fsr0h	equ	0xFEA
  6761                           fsr0l	equ	0xFE9
  6762                           wreg	equ	0xFE8
  6763                           indf1	equ	0xFE7
  6764                           postinc1	equ	0xFE6
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774                           	psect	rparam
  6775  0000                     tosu	equ	0xFFF
  6776                           tosh	equ	0xFFE
  6777                           tosl	equ	0xFFD
  6778                           pclatu	equ	0xFFB
  6779                           pclath	equ	0xFFA
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           intcon2	equ	0xFF1
  6788                           intcon3	equ	0xFF0
  6789                           postinc0	equ	0xFEE
  6790                           fsr0h	equ	0xFEA
  6791                           fsr0l	equ	0xFE9
  6792                           wreg	equ	0xFE8
  6793                           indf1	equ	0xFE7
  6794                           postinc1	equ	0xFE6
  6795                           fsr1h	equ	0xFE2
  6796                           fsr1l	equ	0xFE1
  6797                           indf2	equ	0xFDF
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804                           	psect	temp
  6805  000068                     btemp:
  6806                           	opt stack 0
  6807  000068                     	ds	1
  6808  0000                     int$flags	set	btemp
  6809                           tosu	equ	0xFFF
  6810                           tosh	equ	0xFFE
  6811                           tosl	equ	0xFFD
  6812                           pclatu	equ	0xFFB
  6813                           pclath	equ	0xFFA
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           intcon	equ	0xFF2
  6821                           intcon2	equ	0xFF1
  6822                           intcon3	equ	0xFF0
  6823                           postinc0	equ	0xFEE
  6824                           fsr0h	equ	0xFEA
  6825                           fsr0l	equ	0xFE9
  6826                           wreg	equ	0xFE8
  6827                           indf1	equ	0xFE7
  6828                           postinc1	equ	0xFE6
  6829                           fsr1h	equ	0xFE2
  6830                           fsr1l	equ	0xFE1
  6831                           indf2	equ	0xFDF
  6832                           postinc2	equ	0xFDE
  6833                           postdec2	equ	0xFDD
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    61
    Data        2
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     56     103
    BANK0           128      8      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    HWIeeprom_Read@Data	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 

    S330$ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    ArrayTask.ManageFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    CreateTask@MangeFunction	PTR FTN()void  size(2) Largest target is 1
		 -> ManageDrivers(), DisplayAlphaNumeric(), ManageApplication(), ManageSpeedCalc(), 

    sp__memset	PTR void  size(2) Largest target is 9
		 -> KeyInternalData(COMRAM[9]), 

    Eeprom_Read_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 

    Eeprom_Write_Block@ptrFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    WriteFnCallback	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Eeprom_Write_Block@DataPtr	PTR unsigned char  size(2) Largest target is 2
		 -> Circum(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _Start_App->_RunScheduler
    _ManageSpeedCalc->_SpeedCalcManage
    _SpeedCalcManage->___lldiv
    _ManageDrivers->_MangeKeys
    _MangeKeys->_HWI_DIGI_READ
    _EepromManage->_HWIeeprom_Write
    _ManageApplication->_APP_MANAGE
    _APP_MANAGE->_GetAvgSpeed
    _IncrementDecrementSingleDigit->___lwdiv
    _GetAvgSpeed->___lldiv
    ___lldiv->___lmul
    _BCDsendNumber->___lwdiv
    _DisplayAlphaNumeric->_BCDManage7segment
    _BCDManage7segment->_HWI_4Digit_WRITE
    _BCDManage7segment->_HWI_8Digit_WRITE
    _APP_INITIALIZE->_Eeprom_Read_Block
    _Eeprom_Read_Block->_HWIeeprom_Read

Critical Paths under _ISR in COMRAM

    _SensorTwoNotify->_ReloadHWtimer

Critical Paths under _main in BANK0

    _ManageApplication->_APP_MANAGE

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14176
                          _Start_App
 ---------------------------------------------------------------------------------
 (1) _Start_App                                            0     0      0   14176
                     _APP_INITIALIZE
                      _BCDInitialize
                         _CreateTask
             _HWI_DIGITAL_INITIALIZE
          _HWI_INTERRUPTS_INTITALIZE
                       _RunScheduler
          _SpeedCalcNotifyInitialize
 ---------------------------------------------------------------------------------
 (2) _SpeedCalcNotifyInitialize                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunScheduler                                         2     2      0   12836
                                             54 COMRAM     2     2      0
                _DisplayAlphaNumeric *
                  _ManageApplication *
                      _ManageDrivers *
                    _ManageSpeedCalc *
 ---------------------------------------------------------------------------------
 (3) _ManageSpeedCalc                                      0     0      0    2165
                    _SpeedCalcManage
 ---------------------------------------------------------------------------------
 (4) _SpeedCalcManage                                      4     4      0    2165
                                             44 COMRAM     4     4      0
                            ___lldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ManageDrivers                                        1     1      0    1131
                                             26 COMRAM     1     1      0
                       _EepromManage
                          _MangeKeys
 ---------------------------------------------------------------------------------
 (4) _MangeKeys                                            5     5      0     908
                                             21 COMRAM     5     5      0
                      _HWI_DIGI_READ
 ---------------------------------------------------------------------------------
 (5) _HWI_DIGI_READ                                        2     2      0      48
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _EepromManage                                         1     1      0     155
                                             22 COMRAM     1     1      0
                    _HWIeeprom_Write
 ---------------------------------------------------------------------------------
 (5) _HWIeeprom_Write                                      3     2      1     132
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ManageApplication                                    0     0      0    9166
                         _APP_MANAGE
 ---------------------------------------------------------------------------------
 (4) _APP_MANAGE                                           9     9      0    9166
                                             53 COMRAM     1     1      0
                                              0 BANK0      8     8      0
                      _BCDsendNumber
                         _BlinkDigit
                 _Eeprom_Write_Block
                        _GetAvgSpeed
                        _GetDistance
                       _GetKeyStatus
      _IncrementDecrementSingleDigit
                   _SetCircumfirunce
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SetCircumfirunce                                     2     0      2     108
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _IncrementDecrementSingleDigit                       17    13      4    3120
                                             26 COMRAM    17    13      4
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _GetKeyStatus                                         2     2      0      96
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _GetDistance                                          4     0      4       0
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _GetAvgSpeed                                          9     7      2    1215
                                             44 COMRAM     9     7      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     558
                                             19 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     549
                                             31 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Eeprom_Write_Block                                   8     3      5     529
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _BlinkDigit                                           3     1      2     401
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _BCDsendNumber                                       16    11      5    2898
                                             26 COMRAM    16    11      5
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     848
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     703
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _DisplayAlphaNumeric                                  0     0      0     374
                  _BCDManage7segment
 ---------------------------------------------------------------------------------
 (4) _BCDManage7segment                                    4     4      0     374
                                             21 COMRAM     4     4      0
                   _HWI_4Digit_WRITE
                   _HWI_8Digit_WRITE
 ---------------------------------------------------------------------------------
 (5) _HWI_8Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _HWI_4Digit_WRITE                                     2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _HWI_INTERRUPTS_INTITALIZE                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HWI_DIGITAL_INITIALIZE                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateTask                                           4     0      4     900
                                             19 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _BCDInitialize                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_INITIALIZE                                       0     0      0     425
                  _Eeprom_Read_Block
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Read_Block                                    7     4      3     425
                                             23 COMRAM     7     4      3
                     _HWIeeprom_Read
 ---------------------------------------------------------------------------------
 (4) _HWIeeprom_Read                                       4     2      2     132
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     114
                                              5 COMRAM    14    14      0
                           _APP_ISR1
                           _APP_ISR2
                           _APP_ISR3
                      _SchedulerTick
 ---------------------------------------------------------------------------------
 (8) _SchedulerTick                                        1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR3                                             0     0      0       0
                    _HWtimerCallback
 ---------------------------------------------------------------------------------
 (9) _HWtimerCallback                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _APP_ISR2                                             0     0      0      46
                    _SensorTwoNotify
 ---------------------------------------------------------------------------------
 (9) _SensorTwoNotify                                      0     0      0      46
                      _ReloadHWtimer
 ---------------------------------------------------------------------------------
 (10) _ReloadHWtimer                                       5     3      2      46
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _APP_ISR1                                             0     0      0       0
                    _SensorOneNotify
 ---------------------------------------------------------------------------------
 (9) _SensorOneNotify                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Start_App
     _APP_INITIALIZE
       _Eeprom_Read_Block
         _HWIeeprom_Read
     _BCDInitialize
     _CreateTask
     _HWI_DIGITAL_INITIALIZE
     _HWI_INTERRUPTS_INTITALIZE
     _RunScheduler
       _DisplayAlphaNumeric *
         _BCDManage7segment
           _HWI_4Digit_WRITE
           _HWI_8Digit_WRITE
       _ManageApplication *
         _APP_MANAGE
           _BCDsendNumber
             ___lwdiv
             ___wmul
           _BlinkDigit
           _Eeprom_Write_Block
           _GetAvgSpeed
             ___lldiv
               ___lmul (ARG)
             ___lmul
           _GetDistance
           _GetKeyStatus
           _IncrementDecrementSingleDigit
             ___lwdiv
             ___wmul
           _SetCircumfirunce
           ___lmul
       _ManageDrivers *
         _EepromManage
           _HWIeeprom_Write
         _MangeKeys
           _HWI_DIGI_READ
       _ManageSpeedCalc *
         _SpeedCalcManage
           ___lldiv
             ___lmul (ARG)
           ___lwdiv
           ___wmul
     _SpeedCalcNotifyInitialize

 _ISR (ROOT)
   _APP_ISR1
     _SensorOneNotify
   _APP_ISR2
     _SensorTwoNotify
       _ReloadHWtimer
   _APP_ISR3
     _HWtimerCallback
   _SchedulerTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      5A       5       70.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     38      67       1       81.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C1      15        0.0%
DATA                 0      0      C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jul 04 05:56:28 2017

                                         l60 0D8C                                           l92 0DBA  
                        __end_of_GetAvgSpeed 10BE                          ___wmul@multiplicand 0016  
                                __CFG_BORV$3 000000                            GetAvgSpeed@bIsKph 002F  
                               __CFG_CP0$OFF 000000                                 __CFG_CP1$OFF 000000  
                               __CFG_CP2$OFF 000000                                 __CFG_CP3$OFF 000000  
                        __end_of_GetDistance 1780                                  __CFG_OSC$XT 000000  
                                __CFG_LVP$ON 000000                                          l416 1700  
                                        l418 1706                                          l419 170C  
                                        l435 152C                                          l436 1560  
                                        l437 1534                                          l438 153C  
                                        l920 1420                                          l867 124A  
                               __CFG_CPB$OFF 000000                  Eeprom_Write_Block@LoopIndex 001B  
                               __CFG_CPD$OFF 000000                                          _ISR 0008  
                             _LineBlinkIndex 0056                  HWIeeprom_Write@WriteSuccess 0016  
                     BCDManage7segment@Index 0018                                          prod 000FF3  
                                        tosl 000FFD                                          wreg 000FE8  
                                       ?_ISR 0001                                 __CFG_WDT$OFF 000000  
                                       l2111 154A                                         l2107 1544  
                                       l2061 15A4                                         l2223 16CE  
                                       l2063 15AE                                         l2313 1438  
                                       l2065 15B8                                         l2073 1712  
                                       l2323 1466                                         l2067 15C2  
                                       l2237 1484                                         l2319 1458  
                                       l2175 0FA4                                         l2503 1392  
                                       l2271 087E                                         l2247 0674  
                                       l2343 1726                                         l2185 0FC2  
                                       l2177 0FA8                                         l2601 0E22  
                                       l2521 120C                                         l2281 098E  
                                       l2273 08BC                                         l2257 0748  
                                       l2353 1738                                         l2603 0E60  
                                       l2507 13A6                                         l2099 15F8  
                                       l2259 076A                                         l2347 172E  
                                       l2541 13F6                                         l2605 0E8C  
                                       l2517 11FC                                         l2285 09EE  
                                       l2277 093A                                         l2293 0A58  
                                       l2551 1416                                         l2543 13FA  
                                       l2631 12E0                                         l2519 1208  
                                       l2609 0E90                                         l2641 1324  
                                       l2529 123C                                         l2721 0B28  
                                       l2289 0A42                                         l2539 13EE  
                                       l2635 1306                                         l2563 1044  
                                       l2651 0C36                                         l2573 10B4  
                                       l2583 0DA2                                         l2671 0CC6  
                                       l2647 0C2E                                         l2735 0B7A  
                                       l2569 10A4                                         l2681 0D1E  
                                       l2673 0CDA                                         l2665 0C96  
                                       l2745 0BCA                                         l2587 0DAA  
                                       l2691 0D4A                                         l2659 0C7E  
                                       l2771 1152                                         l2597 0E14  
                                       l2685 0D26                                         l2677 0D08  
                                       l2749 0BF2                                         l2781 11D6  
                                       l2687 0D2C                                         l2679 0D1A  
                                       l2775 115A                                         l2769 114E  
                                       l2779 11BA                                         u2105 0AD4  
                                       _LATC 000F8B                                         _LATD 000F8C  
                                       u1451 06F4                                         u2228 11A6  
                                       u1481 082A                                         _TMR1 000FCE  
                                       _main 17A4                         __end_of_GetKeyStatus 162E  
                                       fsr0h 000FEA                                         fsr1h 000FE2  
                                       fsr2h 000FDA                                         fsr0l 000FE9  
                                       indf1 000FE7                                         indf2 000FDF  
                                       fsr1l 000FE1                                         fsr2l 000FD9  
                                       btemp 0068        __end_of_IncrementDecrementSingleDigit 0D96  
     __size_of_IncrementDecrementSingleDigit 017C                _IncrementDecrementSingleDigit 0C1A  
                                       prodh 000FF4                                         prodl 000FF3  
                          _BCDManage7segment 0F8A                                         start 000E  
                              __CFG_IESO$OFF 000000                                   _BlinkDigit 1780  
                                 _BlinkIndex 0058                           ?_BCDManage7segment 0001  
                   __size_of_SpeedCalcManage 0090                                 ___param_bank 000000  
                           __end_of_APP_ISR1 17D8                             __end_of_APP_ISR2 17D2  
                           __end_of_APP_ISR3 17CC                                        ??_ISR 0006  
                            ??_ManageDrivers 001B                          BCDsendNumber@Buffer 0028  
                  _SpeedCalcNotifyInitialize 17DA                          BCDsendNumber@Number 001B  
                       APP_MANAGE@blinkIndex 0047                          __size_of_APP_MANAGE 01AC  
                        ??_BCDManage7segment 0016                          BCDsendNumber@Output 0026  
                                      ?_main 0001                                   _CreateTask 132A  
                                      _EEADR 000FA9                         HWI_DIGI_READ@HWIread 0015  
                            __end_of___lldiv 125C                                   _LapCounter 004C  
                                      _T0CON 000FD5                                        _T1CON 000FCD  
                                      _T3CON 000FB1                              __end_of___lwdiv 142A  
                                      i2l510 1596                                        i2l503 0F4E  
                                      i2l509 1570                                        _TMR0L 000FD6  
                                      _TMR3H 000FB3                                        _TMR3L 000FB2  
                          _ManageApplication 17BA                                        _PORTC 000F82  
                                      _PORTD 000F83                                        _TRISC 000F94  
                                      _TRISD 000F95                                __CFG_PWRT$OFF 000000  
                              __CFG_WRT0$OFF 000000                                __CFG_WRT1$OFF 000000  
                              __CFG_WRT2$OFF 000000                          ___lmul@multiplicand 0018  
                              __CFG_WRT3$OFF 000000                               __CFG_EBTR0$OFF 000000  
                             __CFG_FCMEN$OFF 000000                               __CFG_EBTR1$OFF 000000  
                             __CFG_EBTR2$OFF 000000                               __CFG_EBTR3$OFF 000000  
                               _WriteRequest 0051                           ?_ManageApplication 0001  
                              __CFG_WRTB$OFF 000000                                __CFG_WRTC$OFF 000000  
                              __CFG_WRTD$OFF 000000                               __CFG_EBTRB$OFF 000000  
                         _Eeprom_Write_Block 12C8                      CreateTask@MangeFunction 0014  
                  BCDsendNumber@DecimalPlace 001E                                        pclath 000FFA  
                                      tablat 000FF5                          ??_ManageApplication 0037  
                          ?_HWI_8Digit_WRITE 0014                    __end_of_BCDManage7segment 102C  
                       __end_of_EepromManage 14AC                                        status 000FD8  
        IncrementDecrementSingleDigit@Number 001B                        __end_of_BCDsendNumber 0ECE  
                        ?_Eeprom_Write_Block 0014              __size_of_HWI_DIGITAL_INITIALIZE 001A  
        IncrementDecrementSingleDigit@Output 0027                           ??_HWI_8Digit_WRITE 0015  
                                _GetAvgSpeed 102C                               __CFG_MCLRE$OFF 000000  
                            __initialization 14AC                                  _GetDistance 176E  
                               __end_of_main 17AC                      __size_of_HWIeeprom_Read 0028  
                  __end_of_ManageApplication 17C0                                       ??_main 0039  
                       ??_Eeprom_Write_Block 0019                               MangeKeys@KeyID 001A  
                              __activetblptr 000002                   __end_of_Segment7ASCIItable 061B  
                                     _EEDATA 000FA8                                       _EECON2 000FA7  
                  HWIeeprom_Read@ReadSuccess 0017                           __size_of_MangeKeys 042E  
                                     _INT0IF 007F91                                       _INT1IF 007F80  
                       APP_MANAGE@keystatus2 00D4                                       i2l2333 1582  
                                     i2l2433 1668                                       i2l1651 1764  
                                     i2l2373 1652                                       i2l2429 1660  
                                     i2l2463 0F16                                       i2l2485 0F44  
                                     i2l2477 0F36                                       i2l2469 0F24  
                BCDManage7segment@DigitIndex 0054                                       _INTCON 000FF2  
                   __size_of_SensorOneNotify 0016                     __size_of_ManageSpeedCalc 0006  
                       HWI_8Digit_WRITE@port 0015                                       _TMR0IE 007F95  
                                     _TMR0IF 007F92                                       _TMR1IE 007CE8  
                                     _TMR1IF 007CF0                                       _TMR2IF 007CF1  
                                     _TMR3IE 007D01                                       _TMR3IF 007D09  
                     __size_of_BCDInitialize 0008                                       _Circum 0064  
                            BlinkDigit@Index 0016                          _DisplayAlphaNumeric 17B4  
                                ?_BlinkDigit 0014                               __CFG_XINST$OFF 000000  
                                 _NotifyFlag 004D                                       ___lmul 1382  
                                     ___wmul 16D6                               __CFG_STVREN$ON 000000  
                                  ??___lldiv 0028                                    ??___lwdiv 0018  
                               _HWtimerCount 003D                       EepromManage@WriteIndex 004E  
                                     clear_0 14CA                                       clear_1 14D6  
                          ??_SpeedCalcManage 002D                                  ?_CreateTask 0014  
                     _HWI_DIGITAL_INITIALIZE 173E                             CreateTask@Period 0017  
                           CreateTask@TaskId 0016                                 __pdataCOMRAM 0066  
                     __size_of_HWI_DIGI_READ 003C                         ?_DisplayAlphaNumeric 0001  
                               __mediumconst 0000                     __size_of_SensorTwoNotify 002E  
                                     tblptrh 000FF7                                       tblptrl 000FF6  
                                     tblptru 000FF8                           __size_of_Start_App 006C  
                      __size_of_GetKeyStatus 002E                                 ??_APP_MANAGE 0036  
                                  ?_APP_ISR1 0001                                    ?_APP_ISR2 0001  
                                  ?_APP_ISR3 0001                       __size_of_SchedulerTick 002A  
                   ReloadHWtimer@ElapsedTime 0004                   __size_of_BCDManage7segment 00A2  
                                 __accesstop 0080                      __end_of__initialization 14DC  
                            __CFG_PBADEN$OFF 000000                            MangeKeys@KeyState 0018  
                          ?_SetCircumfirunce 0014                                ___rparam_used 000001  
                         ??_SetCircumfirunce 0016                               _TimerOVFLcount 004B  
                             __pcstackCOMRAM 0001                            BCDsendNumber@Line 001D  
                          BCDsendNumber@Link 0024                    GetAvgSpeed@AvgSpeedKphMph 0034  
                          __end_of_MangeKeys 0A6E                    __size_of_HWI_4Digit_WRITE 0032  
                 __size_of_ManageApplication 0006                           __end_of_APP_MANAGE 0C1A  
                               _GetKeyStatus 1600                                _BCDInitialize 17AC  
                      ??_DisplayAlphaNumeric 001A         SpeedCalcManage@HundredMeterReference 002F  
                   __size_of_HWtimerCallback 000A           __size_of_SpeedCalcNotifyInitialize 0002  
     IncrementDecrementSingleDigit@LoopIndex 002B                     __size_of_HWIeeprom_Write 002E  
                        __size_of_BlinkDigit 0010                        __size_of_EepromManage 0040  
                     __size_of_ReloadHWtimer 003C                                   ??_APP_ISR1 0001  
                                 ??_APP_ISR2 0006                                   ??_APP_ISR3 0001  
                                 __pbssBANK0 0080                BCDManage7segment@BlinkCounter 0053  
                               _CircumFactor 0066                          __size_of_CreateTask 0058  
                              _HWI_DIGI_READ 1528                     BCDsendNumber@EnableTranc 001F  
                          ??_SensorOneNotify 0001                            ??_ManageSpeedCalc 0031  
                    __size_of_APP_INITIALIZE 0028                                      ?___lmul 0014  
                     SetCircumfirunce@Circum 0014                            __end_of_Start_App 12C8  
                                    ?___wmul 0014                                _SchedulerTick 165C  
                             _HWIeeprom_Read 16AE                               ___lmul@product 001C  
         __size_of_HWI_INTERRUPTS_INTITALIZE 003E                   ?_HWI_INTERRUPTS_INTITALIZE 0001  
                               _EepromManage 146C                               ?_BCDInitialize 0001  
                                    _INTCON3 000FF0                        HWI_8Digit_WRITE@value 0014  
             Eeprom_Write_Block@WriteGranted 0019                            ??_SensorTwoNotify 0006  
                           HWI_DIGI_READ@pin 0014                               ?_HWI_DIGI_READ 0001  
                                    __Hparam 0000                                 ?_GetAvgSpeed 002D  
                                    __Lparam 0000                                 ?_GetDistance 0014  
                     __end_of_HWIeeprom_Read 16D6                              __size_of___lmul 0056  
                              _ReloadHWtimer 1564                               ?_SchedulerTick 0001  
                                    ___lldiv 11DA                              __size_of___wmul 0026  
                                    ___lwdiv 13D8                                 __psmallconst 0600  
                  __size_of_HWI_8Digit_WRITE 0026                        __end_of_ManageDrivers 173E  
                                    __pcinit 14AC                            _Eeprom_Read_Block 142A  
                                    __ramtop 0600                                      __ptext0 17A4  
                                    __ptext1 125C                                      __ptext2 17DA  
                                    __ptext3 114E                                      __ptext4 1722  
                                    __ptext5 17B4                                      __ptext6 17BA  
                                    __ptext7 17C0                                      __ptext8 10BE  
                                    __ptext9 0640            __end_of_HWI_INTERRUPTS_INTITALIZE 1528  
                               __size_of_ISR 0F82                           ?_Eeprom_Read_Block 0018  
                              ?_RunScheduler 0001                       SchedulerTick@TaskIndex 0001  
                        ??_Eeprom_Read_Block 001B                               __pintcode_body 0ECE  
                       end_of_initialization 14DC                            ??_HWtimerCallback 0001  
                         _Segment7ASCIItable 0601                                __Lmediumconst 0000  
                          ??_HWIeeprom_Write 0015                                      int_func 0ECE  
                            _SevenSegmentMAP 0633                              ___lldiv@divisor 0024  
                            _SpeedCalcManage 10BE                                 ??_BlinkDigit 0016  
                            ___lldiv@counter 002C                               ?_ReloadHWtimer 0001  
                                    postdec2 000FDD                              ?_HWIeeprom_Read 0014  
                                    postinc0 000FEE                                      postinc1 000FE6  
                                    postinc2 000FDE                    __end_of_Eeprom_Read_Block 146C  
                    ?_HWI_DIGITAL_INITIALIZE 0001                  APP_MANAGE@TravelledDistance 00D5  
                           _HWI_4Digit_WRITE 15A0                              ??_BCDInitialize 0014  
                               ??_CreateTask 0018                                    _PORTBbits 000F81  
                __size_of_Eeprom_Write_Block 0062                       __size_of_BCDsendNumber 0138  
                             ??_RunScheduler 0037                                    _TRISBbits 000F93  
                       BCDManage7segment@BCD 0019                           __end_of_BlinkDigit 1790  
                            ??_HWI_DIGI_READ 0014                                    _DataArray 0080  
                          __size_of_APP_ISR1 0006                            __size_of_APP_ISR2 0006  
                          __size_of_APP_ISR3 0006                           __end_of_CreateTask 1382  
                BCDInitialize@bIsCommonAnode 0014                                    _BlinkFlag 0055  
                             _APP_INITIALIZE 1686                               _DistTravelCntr 0039  
                            ??_SchedulerTick 0001                                _BlinkDuration 0057  
                          _LapTimeTenthMilli 003F               __end_of_HWI_DIGITAL_INITIALIZE 1758  
                             __end_of___lmul 13D8  IncrementDecrementSingleDigit@NumberReturned 0022  
                             __end_of___wmul 16FC                                __pidataCOMRAM 17D8  
                                  _ArrayTask 00B2                    __size_of_SetCircumfirunce 000A  
                                  _MangeKeys 0640                          start_initialization 14AC  
                                __end_of_ISR 0F8A                          HWIeeprom_Write@Data 0014  
                            _SensorOneNotify 1758                      __end_of_SevenSegmentMAP 063E  
                            _ManageSpeedCalc 17C0                      __end_of_SpeedCalcManage 114E  
          IncrementDecrementSingleDigit@Link 0020                          APP_MANAGE@keystatus 00D9  
                     __end_of_APP_INITIALIZE 16AE                                _BCDsendNumber 0D96  
                            ??_ReloadHWtimer 0003                               BlinkDigit@Line 0014  
                 Eeprom_Read_Block@BlockSize 001A                     Eeprom_Read_Block@DataPtr 0018  
                                   ??___lmul 001C                                     ??___wmul 0018  
                       __size_of_GetAvgSpeed 0092                   __size_of_Eeprom_Read_Block 0042  
                __end_of_DisplayAlphaNumeric 17BA                             __CFG_LPT1OSC$OFF 000000  
                       __size_of_GetDistance 0012                             _HWI_8Digit_WRITE 16FC  
             ?_IncrementDecrementSingleDigit 001B                       HWIeeprom_Write@address 0015  
                                  _Start_App 125C                           BlinkDigit@duration 0015  
                ??_HWI_INTERRUPTS_INTITALIZE 0014                              _WriteFnCallback 0043  
                 BCDManage7segment@LineIndex 0052                                   ?_MangeKeys 0001  
                            _SensorTwoNotify 162E                                  __pbssCOMRAM 0039  
                     BCDsendNumber@LoopIndex 002A                                __pcstackBANK0 00D2  
                   Eeprom_Read_Block@address 001C                                    _WriteFlag 005A  
                      APP_MANAGE@AvgSpeedKph 00D2                   Eeprom_Read_Block@LoopIndex 001E  
                      RunScheduler@TaskIndex 0049                               ?_BCDsendNumber 001B  
      IncrementDecrementSingleDigit@PowIndex 0024                              ?_APP_INITIALIZE 0001  
                           ___lwdiv@dividend 0014                         __end_of_RunScheduler 11DA  
                          __CFG_CCP2MX$PORTC 000000                       APP_MANAGE@bIsBlinkMode 0045  
                                  __pintcode 0008                                     ?___lldiv 0020  
                                   ?___lwdiv 0014                                   ?_Start_App 0001  
                           _HwTimerOVFLcount 004A                                 _bIsAnodeUsed 0059  
                            _HWtimerCallback 179A                                  __smallconst 0600  
                    __end_of_SensorOneNotify 176E                                     _BCDAlpha 00C2  
                    __end_of_ManageSpeedCalc 17C6                              _HWIeeprom_Write 15D2  
                      HWI_4Digit_WRITE@value 0014                             ___lwdiv@quotient 0019  
                   __end_of_HWI_4Digit_WRITE 15D2                                     _APP_ISR1 17D2  
                                   _APP_ISR2 17CC                                     _APP_ISR3 17C6  
                 ?_SpeedCalcNotifyInitialize 0001                 Eeprom_Read_Block@ReadGranted 001B  
                         HWIeeprom_Read@Data 0014                             ?_SpeedCalcManage 0001  
                  _HWI_INTERRUPTS_INTITALIZE 14EA                         ReloadHWtimer@TimerId 0003  
                             ___wmul@product 0018                             ??_HWIeeprom_Read 0016  
               Eeprom_Read_Block@ReadSuccess 001D                             __CFG_WDTPS$32768 000000  
                      HWIeeprom_Read@address 0016                      __end_of_SensorTwoNotify 165C  
                           _SetCircumfirunce 1790                            ___wmul@multiplier 0014  
                                ??_MangeKeys 0016                                     _DataSize 004F  
         IncrementDecrementSingleDigit@Index 001D    IncrementDecrementSingleDigit@bIsincrement 001E  
                          ___lmul@multiplier 0014                                  _INTCON2bits 000FF1  
                            ??_BCDsendNumber 0020            __end_of_SpeedCalcNotifyInitialize 17DC  
                     __size_of_ManageDrivers 001C                                   _EECON1bits 000FA6  
                             _KeyArrayConfig 061B                                     __Hrparam 0000  
                                   __Lrparam 0000                           __CFG_BOREN$SBORDIS 000000  
                    __end_of_HWtimerCallback 17A4                            GetKeyStatus@KeyID 0015  
                           __size_of___lldiv 0082                   __end_of_Eeprom_Write_Block 132A  
                    __end_of_HWIeeprom_Write 1600                             __size_of___lwdiv 0052  
                                ??_Start_App 0039                        __end_of_BCDInitialize 17B4  
                              ?_GetKeyStatus 0001                             ?_SensorOneNotify 0001  
                                 _EEPROMaddr 0050                             ?_ManageSpeedCalc 0001  
                            ___lwdiv@divisor 0016                              ___lwdiv@counter 0018  
                                   __ptext10 1528                                     __ptext11 146C  
                                   __ptext20 11DA                                     __ptext12 15D2  
                                   __ptext21 12C8                                     __ptext13 0A6E  
                                   __ptext30 173E                                     __ptext22 1780  
                                   __ptext14 1790                                     __ptext31 132A  
                                   __ptext23 0D96                                     __ptext15 0C1A  
                                   __ptext40 17CC                                     __ptext32 17AC  
                                   __ptext24 16D6                                     __ptext16 1600  
                                   __ptext41 162E                                     __ptext33 1686  
                                   __ptext25 13D8                                     __ptext17 176E  
                                   __ptext42 1564                                     __ptext34 142A  
                                   __ptext26 0F8A                                     __ptext18 102C  
                                   __ptext43 17D2                                     __ptext35 16AE  
                                   __ptext27 16FC                                     __ptext19 1382  
                                   __ptext44 1758                                     __ptext28 15A0  
                                   __ptext45 0000                                     __ptext37 165C  
                                   __ptext29 14EA                                     __ptext38 17C6  
                                   __ptext39 179A                    Eeprom_Write_Block@DataPtr 0014  
                                 _APP_MANAGE 0A6E                              _KeyInternalData 005B  
                   __end_of_HWI_8Digit_WRITE 1722                           _LapDistanceCounter 0041  
                      __size_of_RunScheduler 008C                         HWI_4Digit_WRITE@port 0015  
                              __size_of_main 0008                       __end_of_KeyArrayConfig 0633  
                        MangeKeys@HWIreading 0019                        __end_of_HWI_DIGI_READ 1564  
            Eeprom_Write_Block@ptrFnCallback 0017                     EepromManage@WriteSuccess 0017  
                                   int$flags 0068                    Eeprom_Write_Block@address 001A  
                      __end_of_SchedulerTick 1686                             ?_SensorTwoNotify 0001  
                    GetAvgSpeed@KphMphFactor 0030                               ??_GetKeyStatus 0014  
                              ?_EepromManage 0001                                _ManageDrivers 1722  
                                 _INTCONbits 000FF2                                 _RunScheduler 114E  
            ??_IncrementDecrementSingleDigit 001F                             ??_APP_INITIALIZE 001F  
                                   intlevel2 0000                             ___lldiv@dividend 0020  
                              ??_GetAvgSpeed 002F                                ??_GetDistance 0018  
                      __end_of_ReloadHWtimer 15A0                             ?_HWtimerCallback 0001  
                             ??_EepromManage 0017                               ?_ManageDrivers 0001  
                           ?_HWIeeprom_Write 0014    IncrementDecrementSingleDigit@unitPosition 0025  
                           ___lldiv@quotient 0028                 __size_of_DisplayAlphaNumeric 0006  
                Eeprom_Write_Block@BlockSize 0016                                  ?_APP_MANAGE 0001  
                ??_SpeedCalcNotifyInitialize 0014                            ?_HWI_4Digit_WRITE 0014  
                   __end_of_SetCircumfirunce 179A                     ??_HWI_DIGITAL_INITIALIZE 0014  
                         ??_HWI_4Digit_WRITE 0015                       ManageDrivers@LoopIndex 001B  
                      GetKeyStatus@KeyStatus 0014  
